[{"type":"js","data":"(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Meteor;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/server_environment.js                                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nMeteor = {                                                                                                         // 1\n  isClient: false,                                                                                                 // 2\n  isServer: true,                                                                                                  // 3\n  isCordova: false                                                                                                 // 4\n};                                                                                                                 // 5\n                                                                                                                   // 6\nMeteor.settings = {};                                                                                              // 7\n                                                                                                                   // 8\nif (process.env.METEOR_SETTINGS) {                                                                                 // 9\n  try {                                                                                                            // 10\n    Meteor.settings = JSON.parse(process.env.METEOR_SETTINGS);                                                     // 11\n  } catch (e) {                                                                                                    // 12\n    throw new Error(\"METEOR_SETTINGS are not valid JSON: \" + process.env.METEOR_SETTINGS);                         // 13\n  }                                                                                                                // 14\n}                                                                                                                  // 15\n                                                                                                                   // 16\n// Make sure that there is always a public attribute                                                               // 17\n// to enable Meteor.settings.public on client                                                                      // 18\nif (! Meteor.settings.public) {                                                                                    // 19\n    Meteor.settings.public = {};                                                                                   // 20\n}                                                                                                                  // 21\n                                                                                                                   // 22\n// Push a subset of settings to the client.  Note that the way this                                                // 23\n// code is written, if the app mutates `Meteor.settings.public` on the                                             // 24\n// server, it also mutates                                                                                         // 25\n// `__meteor_runtime_config__.PUBLIC_SETTINGS`, and the modified                                                   // 26\n// settings will be sent to the client.                                                                            // 27\nif (typeof __meteor_runtime_config__ === \"object\") {                                                               // 28\n  __meteor_runtime_config__.PUBLIC_SETTINGS = Meteor.settings.public;                                              // 29\n}                                                                                                                  // 30\n                                                                                                                   // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/helpers.js                                                                                      //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (Meteor.isServer)                                                                                               // 1\n  var Future = Npm.require('fibers/future');                                                                       // 2\n                                                                                                                   // 3\nif (typeof __meteor_runtime_config__ === 'object' &&                                                               // 4\n    __meteor_runtime_config__.meteorRelease) {                                                                     // 5\n  /**                                                                                                              // 6\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere                                                                                               // 8\n   * @type {String}                                                                                                // 9\n   */                                                                                                              // 10\n  Meteor.release = __meteor_runtime_config__.meteorRelease;                                                        // 11\n}                                                                                                                  // 12\n                                                                                                                   // 13\n// XXX find a better home for these? Ideally they would be _.get,                                                  // 14\n// _.ensure, _.delete..                                                                                            // 15\n                                                                                                                   // 16\n_.extend(Meteor, {                                                                                                 // 17\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                                // 18\n  // a[b][c] doesn't exist.                                                                                        // 19\n  //                                                                                                               // 20\n  _get: function (obj /*, arguments */) {                                                                          // 21\n    for (var i = 1; i < arguments.length; i++) {                                                                   // 22\n      if (!(arguments[i] in obj))                                                                                  // 23\n        return undefined;                                                                                          // 24\n      obj = obj[arguments[i]];                                                                                     // 25\n    }                                                                                                              // 26\n    return obj;                                                                                                    // 27\n  },                                                                                                               // 28\n                                                                                                                   // 29\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                              // 30\n  // it is created and set to {}. Either way, it is returned.                                                      // 31\n  //                                                                                                               // 32\n  _ensure: function (obj /*, arguments */) {                                                                       // 33\n    for (var i = 1; i < arguments.length; i++) {                                                                   // 34\n      var key = arguments[i];                                                                                      // 35\n      if (!(key in obj))                                                                                           // 36\n        obj[key] = {};                                                                                             // 37\n      obj = obj[key];                                                                                              // 38\n    }                                                                                                              // 39\n                                                                                                                   // 40\n    return obj;                                                                                                    // 41\n  },                                                                                                               // 42\n                                                                                                                   // 43\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                                // 44\n  // isn't empty, then a[b] unless it isn't empty.                                                                 // 45\n  //                                                                                                               // 46\n  _delete: function (obj /*, arguments */) {                                                                       // 47\n    var stack = [obj];                                                                                             // 48\n    var leaf = true;                                                                                               // 49\n    for (var i = 1; i < arguments.length - 1; i++) {                                                               // 50\n      var key = arguments[i];                                                                                      // 51\n      if (!(key in obj)) {                                                                                         // 52\n        leaf = false;                                                                                              // 53\n        break;                                                                                                     // 54\n      }                                                                                                            // 55\n      obj = obj[key];                                                                                              // 56\n      if (typeof obj !== \"object\")                                                                                 // 57\n        break;                                                                                                     // 58\n      stack.push(obj);                                                                                             // 59\n    }                                                                                                              // 60\n                                                                                                                   // 61\n    for (var i = stack.length - 1; i >= 0; i--) {                                                                  // 62\n      var key = arguments[i+1];                                                                                    // 63\n                                                                                                                   // 64\n      if (leaf)                                                                                                    // 65\n        leaf = false;                                                                                              // 66\n      else                                                                                                         // 67\n        for (var other in stack[i][key])                                                                           // 68\n          return; // not empty -- we're done                                                                       // 69\n                                                                                                                   // 70\n      delete stack[i][key];                                                                                        // 71\n    }                                                                                                              // 72\n  },                                                                                                               // 73\n                                                                                                                   // 74\n  // wrapAsync can wrap any function that takes some number of arguments that                                      // 75\n  // can't be undefined, followed by some optional arguments, where the callback                                   // 76\n  // is the last optional argument.                                                                                // 77\n  // e.g. fs.readFile(pathname, [callback]),                                                                       // 78\n  // fs.open(pathname, flags, [mode], [callback])                                                                  // 79\n  // For maximum effectiveness and least confusion, wrapAsync should be used on                                    // 80\n  // functions where the callback is the only argument of type Function.                                           // 81\n                                                                                                                   // 82\n  /**                                                                                                              // 83\n   * @memberOf Meteor                                                                                              // 84\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere                                                                                               // 86\n   * @param {Function} func A function that takes a callback as its final parameter                                // 87\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked          // 88\n   */                                                                                                              // 89\n  wrapAsync: function (fn, context) {                                                                              // 90\n    return function (/* arguments */) {                                                                            // 91\n      var self = context || this;                                                                                  // 92\n      var newArgs = _.toArray(arguments);                                                                          // 93\n      var callback;                                                                                                // 94\n                                                                                                                   // 95\n      for (var i = newArgs.length - 1; i >= 0; --i) {                                                              // 96\n        var arg = newArgs[i];                                                                                      // 97\n        var type = typeof arg;                                                                                     // 98\n        if (type !== \"undefined\") {                                                                                // 99\n          if (type === \"function\") {                                                                               // 100\n            callback = arg;                                                                                        // 101\n          }                                                                                                        // 102\n          break;                                                                                                   // 103\n        }                                                                                                          // 104\n      }                                                                                                            // 105\n                                                                                                                   // 106\n      if (! callback) {                                                                                            // 107\n        if (Meteor.isClient) {                                                                                     // 108\n          callback = logErr;                                                                                       // 109\n        } else {                                                                                                   // 110\n          var fut = new Future();                                                                                  // 111\n          callback = fut.resolver();                                                                               // 112\n        }                                                                                                          // 113\n        ++i; // Insert the callback just after arg.                                                                // 114\n      }                                                                                                            // 115\n                                                                                                                   // 116\n      newArgs[i] = Meteor.bindEnvironment(callback);                                                               // 117\n      var result = fn.apply(self, newArgs);                                                                        // 118\n      return fut ? fut.wait() : result;                                                                            // 119\n    };                                                                                                             // 120\n  },                                                                                                               // 121\n                                                                                                                   // 122\n  // Sets child's prototype to a new object whose prototype is parent's                                            // 123\n  // prototype. Used as:                                                                                           // 124\n  //   Meteor._inherits(ClassB, ClassA).                                                                           // 125\n  //   _.extend(ClassB.prototype, { ... })                                                                         // 126\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                                     // 127\n  _inherits: function (Child, Parent) {                                                                            // 128\n    // copy Parent static properties                                                                               // 129\n    for (var key in Parent) {                                                                                      // 130\n      // make sure we only copy hasOwnProperty properties vs. prototype                                            // 131\n      // properties                                                                                                // 132\n      if (_.has(Parent, key))                                                                                      // 133\n        Child[key] = Parent[key];                                                                                  // 134\n    }                                                                                                              // 135\n                                                                                                                   // 136\n    // a middle member of prototype chain: takes the prototype from the Parent                                     // 137\n    var Middle = function () {                                                                                     // 138\n      this.constructor = Child;                                                                                    // 139\n    };                                                                                                             // 140\n    Middle.prototype = Parent.prototype;                                                                           // 141\n    Child.prototype = new Middle();                                                                                // 142\n    Child.__super__ = Parent.prototype;                                                                            // 143\n    return Child;                                                                                                  // 144\n  }                                                                                                                // 145\n});                                                                                                                // 146\n                                                                                                                   // 147\nvar warnedAboutWrapAsync = false;                                                                                  // 148\n                                                                                                                   // 149\n/**                                                                                                                // 150\n * @deprecated in 0.9.3                                                                                            // 151\n */                                                                                                                // 152\nMeteor._wrapAsync = function(fn, context) {                                                                        // 153\n  if (! warnedAboutWrapAsync) {                                                                                    // 154\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");                                       // 155\n    warnedAboutWrapAsync = true;                                                                                   // 156\n  }                                                                                                                // 157\n  return Meteor.wrapAsync.apply(Meteor, arguments);                                                                // 158\n};                                                                                                                 // 159\n                                                                                                                   // 160\nfunction logErr(err) {                                                                                             // 161\n  if (err) {                                                                                                       // 162\n    return Meteor._debug(                                                                                          // 163\n      \"Exception in callback of async function\",                                                                   // 164\n      err.stack ? err.stack : err                                                                                  // 165\n    );                                                                                                             // 166\n  }                                                                                                                // 167\n}                                                                                                                  // 168\n                                                                                                                   // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/setimmediate.js                                                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Chooses one of three setImmediate implementations:                                                              // 1\n//                                                                                                                 // 2\n// * Native setImmediate (IE 10, Node 0.9+)                                                                        // 3\n//                                                                                                                 // 4\n// * postMessage (many browsers)                                                                                   // 5\n//                                                                                                                 // 6\n// * setTimeout  (fallback)                                                                                        // 7\n//                                                                                                                 // 8\n// The postMessage implementation is based on                                                                      // 9\n// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                              // 10\n//                                                                                                                 // 11\n// Don't use `nextTick` for Node since it runs its callbacks before                                                // 12\n// I/O, which is stricter than we're looking for.                                                                  // 13\n//                                                                                                                 // 14\n// Not installed as a polyfill, as our public API is `Meteor.defer`.                                               // 15\n// Since we're not trying to be a polyfill, we have some                                                           // 16\n// simplifications:                                                                                                // 17\n//                                                                                                                 // 18\n// If one invocation of a setImmediate callback pauses itself by a                                                 // 19\n// call to alert/prompt/showModelDialog, the NobleJS polyfill                                                      // 20\n// implementation ensured that no setImmedate callback would run until                                             // 21\n// the first invocation completed.  While correct per the spec, what it                                            // 22\n// would mean for us in practice is that any reactive updates relying                                              // 23\n// on Meteor.defer would be hung in the main window until the modal                                                // 24\n// dialog was dismissed.  Thus we only ensure that a setImmediate                                                  // 25\n// function is called in a later event loop.                                                                       // 26\n//                                                                                                                 // 27\n// We don't need to support using a string to be eval'ed for the                                                   // 28\n// callback, arguments to the function, or clearImmediate.                                                         // 29\n                                                                                                                   // 30\n\"use strict\";                                                                                                      // 31\n                                                                                                                   // 32\nvar global = this;                                                                                                 // 33\n                                                                                                                   // 34\n                                                                                                                   // 35\n// IE 10, Node >= 9.1                                                                                              // 36\n                                                                                                                   // 37\nfunction useSetImmediate() {                                                                                       // 38\n  if (! global.setImmediate)                                                                                       // 39\n    return null;                                                                                                   // 40\n  else {                                                                                                           // 41\n    var setImmediate = function (fn) {                                                                             // 42\n      global.setImmediate(fn);                                                                                     // 43\n    };                                                                                                             // 44\n    setImmediate.implementation = 'setImmediate';                                                                  // 45\n    return setImmediate;                                                                                           // 46\n  }                                                                                                                // 47\n}                                                                                                                  // 48\n                                                                                                                   // 49\n                                                                                                                   // 50\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                                  // 51\n                                                                                                                   // 52\nfunction usePostMessage() {                                                                                        // 53\n  // The test against `importScripts` prevents this implementation                                                 // 54\n  // from being installed inside a web worker, where                                                               // 55\n  // `global.postMessage` means something completely different and                                                 // 56\n  // can't be used for this purpose.                                                                               // 57\n                                                                                                                   // 58\n  if (!global.postMessage || global.importScripts) {                                                               // 59\n    return null;                                                                                                   // 60\n  }                                                                                                                // 61\n                                                                                                                   // 62\n  // Avoid synchronous post message implementations.                                                               // 63\n                                                                                                                   // 64\n  var postMessageIsAsynchronous = true;                                                                            // 65\n  var oldOnMessage = global.onmessage;                                                                             // 66\n  global.onmessage = function () {                                                                                 // 67\n      postMessageIsAsynchronous = false;                                                                           // 68\n  };                                                                                                               // 69\n  global.postMessage(\"\", \"*\");                                                                                     // 70\n  global.onmessage = oldOnMessage;                                                                                 // 71\n                                                                                                                   // 72\n  if (! postMessageIsAsynchronous)                                                                                 // 73\n    return null;                                                                                                   // 74\n                                                                                                                   // 75\n  var funcIndex = 0;                                                                                               // 76\n  var funcs = {};                                                                                                  // 77\n                                                                                                                   // 78\n  // Installs an event handler on `global` for the `message` event: see                                            // 79\n  // * https://developer.mozilla.org/en/DOM/window.postMessage                                                     // 80\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages                // 81\n                                                                                                                   // 82\n  // XXX use Random.id() here?                                                                                     // 83\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';                                              // 84\n                                                                                                                   // 85\n  function isStringAndStartsWith(string, putativeStart) {                                                          // 86\n    return (typeof string === \"string\" &&                                                                          // 87\n            string.substring(0, putativeStart.length) === putativeStart);                                          // 88\n  }                                                                                                                // 89\n                                                                                                                   // 90\n  function onGlobalMessage(event) {                                                                                // 91\n    // This will catch all incoming messages (even from other                                                      // 92\n    // windows!), so we need to try reasonably hard to avoid letting                                               // 93\n    // anyone else trick us into firing off. We test the origin is                                                 // 94\n    // still this window, and that a (randomly generated)                                                          // 95\n    // unpredictable identifying prefix is present.                                                                // 96\n    if (event.source === global &&                                                                                 // 97\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                                       // 98\n      var index = event.data.substring(MESSAGE_PREFIX.length);                                                     // 99\n      try {                                                                                                        // 100\n        if (funcs[index])                                                                                          // 101\n          funcs[index]();                                                                                          // 102\n      }                                                                                                            // 103\n      finally {                                                                                                    // 104\n        delete funcs[index];                                                                                       // 105\n      }                                                                                                            // 106\n    }                                                                                                              // 107\n  }                                                                                                                // 108\n                                                                                                                   // 109\n  if (global.addEventListener) {                                                                                   // 110\n    global.addEventListener(\"message\", onGlobalMessage, false);                                                    // 111\n  } else {                                                                                                         // 112\n    global.attachEvent(\"onmessage\", onGlobalMessage);                                                              // 113\n  }                                                                                                                // 114\n                                                                                                                   // 115\n  var setImmediate = function (fn) {                                                                               // 116\n    // Make `global` post a message to itself with the handle and                                                  // 117\n    // identifying prefix, thus asynchronously invoking our                                                        // 118\n    // onGlobalMessage listener above.                                                                             // 119\n    ++funcIndex;                                                                                                   // 120\n    funcs[funcIndex] = fn;                                                                                         // 121\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");                                                           // 122\n  };                                                                                                               // 123\n  setImmediate.implementation = 'postMessage';                                                                     // 124\n  return setImmediate;                                                                                             // 125\n}                                                                                                                  // 126\n                                                                                                                   // 127\n                                                                                                                   // 128\nfunction useTimeout() {                                                                                            // 129\n  var setImmediate = function (fn) {                                                                               // 130\n    global.setTimeout(fn, 0);                                                                                      // 131\n  };                                                                                                               // 132\n  setImmediate.implementation = 'setTimeout';                                                                      // 133\n  return setImmediate;                                                                                             // 134\n}                                                                                                                  // 135\n                                                                                                                   // 136\n                                                                                                                   // 137\nMeteor._setImmediate =                                                                                             // 138\n  useSetImmediate() ||                                                                                             // 139\n  usePostMessage() ||                                                                                              // 140\n  useTimeout();                                                                                                    // 141\n                                                                                                                   // 142\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/timers.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar withoutInvocation = function (f) {                                                                             // 1\n  if (Package.ddp) {                                                                                               // 2\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                                   // 3\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                         // 4\n      throw new Error(\"Can't set timers inside simulations\");                                                      // 5\n    return function () { _CurrentInvocation.withValue(null, f); };                                                 // 6\n  }                                                                                                                // 7\n  else                                                                                                             // 8\n    return f;                                                                                                      // 9\n};                                                                                                                 // 10\n                                                                                                                   // 11\nvar bindAndCatch = function (context, f) {                                                                         // 12\n  return Meteor.bindEnvironment(withoutInvocation(f), context);                                                    // 13\n};                                                                                                                 // 14\n                                                                                                                   // 15\n_.extend(Meteor, {                                                                                                 // 16\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                                  // 17\n  // inside a server method are not part of the method invocation and                                              // 18\n  // should clear out the CurrentInvocation environment variable.                                                  // 19\n                                                                                                                   // 20\n  /**                                                                                                              // 21\n   * @memberOf Meteor                                                                                              // 22\n   * @summary Call a function in the future after waiting for a specified delay.                                   // 23\n   * @locus Anywhere                                                                                               // 24\n   * @param {Function} func The function to run                                                                    // 25\n   * @param {Number} delay Number of milliseconds to wait before calling function                                  // 26\n   */                                                                                                              // 27\n  setTimeout: function (f, duration) {                                                                             // 28\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);                                           // 29\n  },                                                                                                               // 30\n                                                                                                                   // 31\n  /**                                                                                                              // 32\n   * @memberOf Meteor                                                                                              // 33\n   * @summary Call a function repeatedly, with a time delay between calls.                                         // 34\n   * @locus Anywhere                                                                                               // 35\n   * @param {Function} func The function to run                                                                    // 36\n   * @param {Number} delay Number of milliseconds to wait between each function call.                              // 37\n   */                                                                                                              // 38\n  setInterval: function (f, duration) {                                                                            // 39\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);                                         // 40\n  },                                                                                                               // 41\n                                                                                                                   // 42\n  /**                                                                                                              // 43\n   * @memberOf Meteor                                                                                              // 44\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                                  // 45\n   * @locus Anywhere                                                                                               // 46\n   * @param {Number} id The handle returned by `Meteor.setInterval`                                                // 47\n   */                                                                                                              // 48\n  clearInterval: function(x) {                                                                                     // 49\n    return clearInterval(x);                                                                                       // 50\n  },                                                                                                               // 51\n                                                                                                                   // 52\n  /**                                                                                                              // 53\n   * @memberOf Meteor                                                                                              // 54\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                             // 55\n   * @locus Anywhere                                                                                               // 56\n   * @param {Number} id The handle returned by `Meteor.setTimeout`                                                 // 57\n   */                                                                                                              // 58\n  clearTimeout: function(x) {                                                                                      // 59\n    return clearTimeout(x);                                                                                        // 60\n  },                                                                                                               // 61\n                                                                                                                   // 62\n  // XXX consider making this guarantee ordering of defer'd callbacks, like                                        // 63\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                                       // 64\n  //    callSomethingThatDefersSomeWork();                                                                         // 65\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                           // 66\n  defer: function (f) {                                                                                            // 67\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));                                                       // 68\n  }                                                                                                                // 69\n});                                                                                                                // 70\n                                                                                                                   // 71\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/errors.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Makes an error subclass which properly contains a stack trace in most                                           // 1\n// environments. constructor can set fields on `this` (and should probably set                                     // 2\n// `message`, which is what gets displayed at the top of a stack trace).                                           // 3\n//                                                                                                                 // 4\nMeteor.makeErrorType = function (name, constructor) {                                                              // 5\n  var errorClass = function (/*arguments*/) {                                                                      // 6\n    var self = this;                                                                                               // 7\n                                                                                                                   // 8\n    // Ensure we get a proper stack trace in most Javascript environments                                          // 9\n    if (Error.captureStackTrace) {                                                                                 // 10\n      // V8 environments (Chrome and Node.js)                                                                      // 11\n      Error.captureStackTrace(self, errorClass);                                                                   // 12\n    } else {                                                                                                       // 13\n      // Firefox                                                                                                   // 14\n      var e = new Error;                                                                                           // 15\n      e.__proto__ = errorClass.prototype;                                                                          // 16\n      if (e instanceof errorClass)                                                                                 // 17\n        self = e;                                                                                                  // 18\n    }                                                                                                              // 19\n    // Safari magically works.                                                                                     // 20\n                                                                                                                   // 21\n    constructor.apply(self, arguments);                                                                            // 22\n                                                                                                                   // 23\n    self.errorType = name;                                                                                         // 24\n                                                                                                                   // 25\n    return self;                                                                                                   // 26\n  };                                                                                                               // 27\n                                                                                                                   // 28\n  Meteor._inherits(errorClass, Error);                                                                             // 29\n                                                                                                                   // 30\n  return errorClass;                                                                                               // 31\n};                                                                                                                 // 32\n                                                                                                                   // 33\n// This should probably be in the livedata package, but we don't want                                              // 34\n// to require you to use the livedata package to get it. Eventually we                                             // 35\n// should probably rename it to DDP.Error and put it back in the                                                   // 36\n// 'livedata' package (which we should rename to 'ddp' also.)                                                      // 37\n//                                                                                                                 // 38\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                                    // 39\n// containing 'error' and optionally 'reason' and 'details'.                                                       // 40\n// The DDP client manually puts these into Meteor.Error objects. (We don't use                                     // 41\n// EJSON.addType here because the type is determined by location in the                                            // 42\n// protocol, not text on the wire.)                                                                                // 43\n                                                                                                                   // 44\n/**                                                                                                                // 45\n * @summary This class represents a symbolic error thrown by a method.                                             // 46\n * @locus Anywhere                                                                                                 // 47\n * @class                                                                                                          // 48\n * @param {String} error A string code uniquely identifying this kind of error.                                    // 49\n * This string should be used by callers of the method to determine the                                            // 50\n * appropriate action to take, instead of attempting to parse the reason                                           // 51\n * or details fields. For example:                                                                                 // 52\n *                                                                                                                 // 53\n * ```                                                                                                             // 54\n * // on the server, pick a code unique to this error                                                              // 55\n * // the reason field should be a useful debug message                                                            // 56\n * throw new Meteor.Error(\"logged-out\",                                                                            // 57\n *   \"The user must be logged in to post a comment.\");                                                             // 58\n *                                                                                                                 // 59\n * // on the client                                                                                                // 60\n * Meteor.call(\"methodName\", function (error) {                                                                    // 61\n *   // identify the error                                                                                         // 62\n *   if (error && error.error === \"logged-out\") {                                                                  // 63\n *     // show a nice error message                                                                                // 64\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");                                            // 65\n *   }                                                                                                             // 66\n * });                                                                                                             // 67\n * ```                                                                                                             // 68\n *                                                                                                                 // 69\n * For legacy reasons, some built-in Meteor functions such as `check` throw                                        // 70\n * errors with a number in this field.                                                                             // 71\n *                                                                                                                 // 72\n * @param {String} [reason] Optional.  A short human-readable summary of the                                       // 73\n * error, like 'Not Found'.                                                                                        // 74\n * @param {String} [details] Optional.  Additional information about the error,                                    // 75\n * like a textual stack trace.                                                                                     // 76\n */                                                                                                                // 77\nMeteor.Error = Meteor.makeErrorType(                                                                               // 78\n  \"Meteor.Error\",                                                                                                  // 79\n  function (error, reason, details) {                                                                              // 80\n    var self = this;                                                                                               // 81\n                                                                                                                   // 82\n    // String code uniquely identifying this kind of error.                                                        // 83\n    self.error = error;                                                                                            // 84\n                                                                                                                   // 85\n    // Optional: A short human-readable summary of the error. Not                                                  // 86\n    // intended to be shown to end users, just developers. (\"Not Found\",                                           // 87\n    // \"Internal Server Error\")                                                                                    // 88\n    self.reason = reason;                                                                                          // 89\n                                                                                                                   // 90\n    // Optional: Additional information about the error, say for                                                   // 91\n    // debugging. It might be a (textual) stack trace if the server is                                             // 92\n    // willing to provide one. The corresponding thing in HTTP would be                                            // 93\n    // the body of a 404 or 500 response. (The difference is that we                                               // 94\n    // never expect this to be shown to end users, only developers, so                                             // 95\n    // it doesn't need to be pretty.)                                                                              // 96\n    self.details = details;                                                                                        // 97\n                                                                                                                   // 98\n    // This is what gets displayed at the top of a stack trace. Current                                            // 99\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"                                           // 100\n    if (self.reason)                                                                                               // 101\n      self.message = self.reason + ' [' + self.error + ']';                                                        // 102\n    else                                                                                                           // 103\n      self.message = '[' + self.error + ']';                                                                       // 104\n  });                                                                                                              // 105\n                                                                                                                   // 106\n// Meteor.Error is basically data and is sent over DDP, so you should be able to                                   // 107\n// properly EJSON-clone it. This is especially important because if a                                              // 108\n// Meteor.Error is thrown through a Future, the error, reason, and details                                         // 109\n// properties become non-enumerable so a standard Object clone won't preserve                                      // 110\n// them and they will be lost from DDP.                                                                            // 111\nMeteor.Error.prototype.clone = function () {                                                                       // 112\n  var self = this;                                                                                                 // 113\n  return new Meteor.Error(self.error, self.reason, self.details);                                                  // 114\n};                                                                                                                 // 115\n                                                                                                                   // 116\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/fiber_helpers.js                                                                                //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar path = Npm.require('path');                                                                                    // 1\nvar Fiber = Npm.require('fibers');                                                                                 // 2\nvar Future = Npm.require(path.join('fibers', 'future'));                                                           // 3\n                                                                                                                   // 4\nMeteor._noYieldsAllowed = function (f) {                                                                           // 5\n  var savedYield = Fiber.yield;                                                                                    // 6\n  Fiber.yield = function () {                                                                                      // 7\n    throw new Error(\"Can't call yield in a noYieldsAllowed block!\");                                               // 8\n  };                                                                                                               // 9\n  try {                                                                                                            // 10\n    return f();                                                                                                    // 11\n  } finally {                                                                                                      // 12\n    Fiber.yield = savedYield;                                                                                      // 13\n  }                                                                                                                // 14\n};                                                                                                                 // 15\n                                                                                                                   // 16\nMeteor._DoubleEndedQueue = Npm.require('meteor-deque');                                                            // 17\n                                                                                                                   // 18\n// Meteor._SynchronousQueue is a queue which runs task functions serially.                                         // 19\n// Tasks are assumed to be synchronous: ie, it's assumed that they are                                             // 20\n// done when they return.                                                                                          // 21\n//                                                                                                                 // 22\n// It has two methods:                                                                                             // 23\n//   - queueTask queues a task to be run, and returns immediately.                                                 // 24\n//   - runTask queues a task to be run, and then yields. It returns                                                // 25\n//     when the task finishes running.                                                                             // 26\n//                                                                                                                 // 27\n// It's safe to call queueTask from within a task, but not runTask (unless                                         // 28\n// you're calling runTask from a nested Fiber).                                                                    // 29\n//                                                                                                                 // 30\n// Somewhat inspired by async.queue, but specific to blocking tasks.                                               // 31\n// XXX break this out into an NPM module?                                                                          // 32\n// XXX could maybe use the npm 'schlock' module instead, which would                                               // 33\n//     also support multiple concurrent \"read\" tasks                                                               // 34\n//                                                                                                                 // 35\nMeteor._SynchronousQueue = function () {                                                                           // 36\n  var self = this;                                                                                                 // 37\n  // List of tasks to run (not including a currently-running task if any). Each                                    // 38\n  // is an object with field 'task' (the task function to run) and 'future' (the                                   // 39\n  // Future associated with the blocking runTask call that queued it, or null if                                   // 40\n  // called from queueTask).                                                                                       // 41\n  self._taskHandles = new Meteor._DoubleEndedQueue();                                                              // 42\n  // This is true if self._run() is either currently executing or scheduled to                                     // 43\n  // do so soon.                                                                                                   // 44\n  self._runningOrRunScheduled = false;                                                                             // 45\n  // During the execution of a task, this is set to the fiber used to execute                                      // 46\n  // that task. We use this to throw an error rather than deadlocking if the                                       // 47\n  // user calls runTask from within a task on the same fiber.                                                      // 48\n  self._currentTaskFiber = undefined;                                                                              // 49\n  // This is true if we're currently draining.  While we're draining, a further                                    // 50\n  // drain is a noop, to prevent infinite loops.  \"drain\" is a heuristic type                                      // 51\n  // operation, that has a meaning like unto \"what a naive person would expect                                     // 52\n  // when modifying a table from an observe\"                                                                       // 53\n  self._draining = false;                                                                                          // 54\n};                                                                                                                 // 55\n                                                                                                                   // 56\n_.extend(Meteor._SynchronousQueue.prototype, {                                                                     // 57\n  runTask: function (task) {                                                                                       // 58\n    var self = this;                                                                                               // 59\n                                                                                                                   // 60\n    if (!self.safeToRunTask()) {                                                                                   // 61\n      if (Fiber.current)                                                                                           // 62\n        throw new Error(\"Can't runTask from another task in the same fiber\");                                      // 63\n      else                                                                                                         // 64\n        throw new Error(\"Can only call runTask in a Fiber\");                                                       // 65\n    }                                                                                                              // 66\n                                                                                                                   // 67\n    var fut = new Future;                                                                                          // 68\n    var handle = {                                                                                                 // 69\n      task: Meteor.bindEnvironment(task, function (e) {                                                            // 70\n        Meteor._debug(\"Exception from task:\", e && e.stack || e);                                                  // 71\n        throw e;                                                                                                   // 72\n      }),                                                                                                          // 73\n      future: fut,                                                                                                 // 74\n      name: task.name                                                                                              // 75\n    };                                                                                                             // 76\n    self._taskHandles.push(handle);                                                                                // 77\n    self._scheduleRun();                                                                                           // 78\n    // Yield. We'll get back here after the task is run (and will throw if the                                     // 79\n    // task throws).                                                                                               // 80\n    fut.wait();                                                                                                    // 81\n  },                                                                                                               // 82\n  queueTask: function (task) {                                                                                     // 83\n    var self = this;                                                                                               // 84\n    self._taskHandles.push({                                                                                       // 85\n      task: task,                                                                                                  // 86\n      name: task.name                                                                                              // 87\n    });                                                                                                            // 88\n    self._scheduleRun();                                                                                           // 89\n    // No need to block.                                                                                           // 90\n  },                                                                                                               // 91\n                                                                                                                   // 92\n  flush: function () {                                                                                             // 93\n    var self = this;                                                                                               // 94\n    self.runTask(function () {});                                                                                  // 95\n  },                                                                                                               // 96\n                                                                                                                   // 97\n  safeToRunTask: function () {                                                                                     // 98\n    var self = this;                                                                                               // 99\n    return Fiber.current && self._currentTaskFiber !== Fiber.current;                                              // 100\n  },                                                                                                               // 101\n                                                                                                                   // 102\n  drain: function () {                                                                                             // 103\n    var self = this;                                                                                               // 104\n    if (self._draining)                                                                                            // 105\n      return;                                                                                                      // 106\n    if (!self.safeToRunTask())                                                                                     // 107\n      return;                                                                                                      // 108\n    self._draining = true;                                                                                         // 109\n    while (! self._taskHandles.isEmpty()) {                                                                        // 110\n      self.flush();                                                                                                // 111\n    }                                                                                                              // 112\n    self._draining = false;                                                                                        // 113\n  },                                                                                                               // 114\n                                                                                                                   // 115\n  _scheduleRun: function () {                                                                                      // 116\n    var self = this;                                                                                               // 117\n    // Already running or scheduled? Do nothing.                                                                   // 118\n    if (self._runningOrRunScheduled)                                                                               // 119\n      return;                                                                                                      // 120\n                                                                                                                   // 121\n    self._runningOrRunScheduled = true;                                                                            // 122\n    setImmediate(function () {                                                                                     // 123\n      Fiber(function () {                                                                                          // 124\n        self._run();                                                                                               // 125\n      }).run();                                                                                                    // 126\n    });                                                                                                            // 127\n  },                                                                                                               // 128\n  _run: function () {                                                                                              // 129\n    var self = this;                                                                                               // 130\n                                                                                                                   // 131\n    if (!self._runningOrRunScheduled)                                                                              // 132\n      throw new Error(\"expected to be _runningOrRunScheduled\");                                                    // 133\n                                                                                                                   // 134\n    if (self._taskHandles.isEmpty()) {                                                                             // 135\n      // Done running tasks! Don't immediately schedule another run, but                                           // 136\n      // allow future tasks to do so.                                                                              // 137\n      self._runningOrRunScheduled = false;                                                                         // 138\n      return;                                                                                                      // 139\n    }                                                                                                              // 140\n    var taskHandle = self._taskHandles.shift();                                                                    // 141\n                                                                                                                   // 142\n    // Run the task.                                                                                               // 143\n    self._currentTaskFiber = Fiber.current;                                                                        // 144\n    var exception = undefined;                                                                                     // 145\n    try {                                                                                                          // 146\n      taskHandle.task();                                                                                           // 147\n    } catch (err) {                                                                                                // 148\n      if (taskHandle.future) {                                                                                     // 149\n        // We'll throw this exception through runTask.                                                             // 150\n        exception = err;                                                                                           // 151\n      } else {                                                                                                     // 152\n        Meteor._debug(\"Exception in queued task: \" + (err.stack || err));                                          // 153\n      }                                                                                                            // 154\n    }                                                                                                              // 155\n    self._currentTaskFiber = undefined;                                                                            // 156\n                                                                                                                   // 157\n    // Soon, run the next task, if there is any.                                                                   // 158\n    self._runningOrRunScheduled = false;                                                                           // 159\n    self._scheduleRun();                                                                                           // 160\n                                                                                                                   // 161\n    // If this was queued with runTask, let the runTask call return (throwing if                                   // 162\n    // the task threw).                                                                                            // 163\n    if (taskHandle.future) {                                                                                       // 164\n      if (exception)                                                                                               // 165\n        taskHandle.future['throw'](exception);                                                                     // 166\n      else                                                                                                         // 167\n        taskHandle.future['return']();                                                                             // 168\n    }                                                                                                              // 169\n  }                                                                                                                // 170\n});                                                                                                                // 171\n                                                                                                                   // 172\n// Sleep. Mostly used for debugging (eg, inserting latency into server                                             // 173\n// methods).                                                                                                       // 174\n//                                                                                                                 // 175\nMeteor._sleepForMs = function (ms) {                                                                               // 176\n  var fiber = Fiber.current;                                                                                       // 177\n  setTimeout(function() {                                                                                          // 178\n    fiber.run();                                                                                                   // 179\n  }, ms);                                                                                                          // 180\n  Fiber.yield();                                                                                                   // 181\n};                                                                                                                 // 182\n                                                                                                                   // 183\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/startup_server.js                                                                               //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nMeteor.startup = function (callback) {                                                                             // 1\n  if (__meteor_bootstrap__.startupHooks) {                                                                         // 2\n    __meteor_bootstrap__.startupHooks.push(callback);                                                              // 3\n  } else {                                                                                                         // 4\n    // We already started up. Just call it now.                                                                    // 5\n    callback();                                                                                                    // 6\n  }                                                                                                                // 7\n};                                                                                                                 // 8\n                                                                                                                   // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/debug.js                                                                                        //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar suppress = 0;                                                                                                  // 1\n                                                                                                                   // 2\n// replacement for console.log. This is a temporary API. We should                                                 // 3\n// provide a real logging API soon (possibly just a polyfill for                                                   // 4\n// console?)                                                                                                       // 5\n//                                                                                                                 // 6\n// NOTE: this is used on the server to print the warning about                                                     // 7\n// having autopublish enabled when you probably meant to turn it                                                   // 8\n// off. it's not really the proper use of something called                                                         // 9\n// _debug. the intent is for this message to go to the terminal and                                                // 10\n// be very visible. if you change _debug to go someplace else, etc,                                                // 11\n// please fix the autopublish code to do something reasonable.                                                     // 12\n//                                                                                                                 // 13\nMeteor._debug = function (/* arguments */) {                                                                       // 14\n  if (suppress) {                                                                                                  // 15\n    suppress--;                                                                                                    // 16\n    return;                                                                                                        // 17\n  }                                                                                                                // 18\n  if (typeof console !== 'undefined' &&                                                                            // 19\n      typeof console.log !== 'undefined') {                                                                        // 20\n    if (arguments.length == 0) { // IE Companion breaks otherwise                                                  // 21\n      // IE10 PP4 requires at least one argument                                                                   // 22\n      console.log('');                                                                                             // 23\n    } else {                                                                                                       // 24\n      // IE doesn't have console.log.apply, it's not a real Object.                                                // 25\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                           // 26\n      // http://patik.com/blog/complete-cross-browser-console-log/                                                 // 27\n      if (typeof console.log.apply === \"function\") {                                                               // 28\n        // Most browsers                                                                                           // 29\n                                                                                                                   // 30\n        // Chrome and Safari only hyperlink URLs to source files in first argument of                              // 31\n        // console.log, so try to call it with one argument if possible.                                           // 32\n        // Approach taken here: If all arguments are strings, join them on space.                                  // 33\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                                     // 34\n        var allArgumentsOfTypeString = true;                                                                       // 35\n        for (var i = 0; i < arguments.length; i++)                                                                 // 36\n          if (typeof arguments[i] !== \"string\")                                                                    // 37\n            allArgumentsOfTypeString = false;                                                                      // 38\n                                                                                                                   // 39\n        if (allArgumentsOfTypeString)                                                                              // 40\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);                                 // 41\n        else                                                                                                       // 42\n          console.log.apply(console, arguments);                                                                   // 43\n                                                                                                                   // 44\n      } else if (typeof Function.prototype.bind === \"function\") {                                                  // 45\n        // IE9                                                                                                     // 46\n        var log = Function.prototype.bind.call(console.log, console);                                              // 47\n        log.apply(console, arguments);                                                                             // 48\n      } else {                                                                                                     // 49\n        // IE8                                                                                                     // 50\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));                 // 51\n      }                                                                                                            // 52\n    }                                                                                                              // 53\n  }                                                                                                                // 54\n};                                                                                                                 // 55\n                                                                                                                   // 56\n// Suppress the next 'count' Meteor._debug messsages. Use this to                                                  // 57\n// stop tests from spamming the console.                                                                           // 58\n//                                                                                                                 // 59\nMeteor._suppress_log = function (count) {                                                                          // 60\n  suppress += count;                                                                                               // 61\n};                                                                                                                 // 62\n                                                                                                                   // 63\nMeteor._suppressed_log_expected = function () {                                                                    // 64\n  return suppress !== 0;                                                                                           // 65\n};                                                                                                                 // 66\n                                                                                                                   // 67\n                                                                                                                   // 68\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/string_utils.js                                                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Like Perl's quotemeta: quotes all regexp metacharacters.                                                        // 1\n// Code taken from                                                                                                 // 2\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                               // 3\nMeteor._escapeRegExp = function (string) {                                                                         // 4\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");                                                  // 5\n};                                                                                                                 // 6\n                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/dynamics_nodejs.js                                                                              //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Fiber-aware implementation of dynamic scoping, for use on the server                                            // 1\n                                                                                                                   // 2\nvar Fiber = Npm.require('fibers');                                                                                 // 3\n                                                                                                                   // 4\nvar nextSlot = 0;                                                                                                  // 5\n                                                                                                                   // 6\nMeteor._nodeCodeMustBeInFiber = function () {                                                                      // 7\n  if (!Fiber.current) {                                                                                            // 8\n    throw new Error(\"Meteor code must always run within a Fiber. \" +                                               // 9\n                    \"Try wrapping callbacks that you pass to non-Meteor \" +                                        // 10\n                    \"libraries with Meteor.bindEnvironment.\");                                                     // 11\n  }                                                                                                                // 12\n};                                                                                                                 // 13\n                                                                                                                   // 14\nMeteor.EnvironmentVariable = function () {                                                                         // 15\n  this.slot = nextSlot++;                                                                                          // 16\n};                                                                                                                 // 17\n                                                                                                                   // 18\n_.extend(Meteor.EnvironmentVariable.prototype, {                                                                   // 19\n  get: function () {                                                                                               // 20\n    Meteor._nodeCodeMustBeInFiber();                                                                               // 21\n                                                                                                                   // 22\n    return Fiber.current._meteor_dynamics &&                                                                       // 23\n      Fiber.current._meteor_dynamics[this.slot];                                                                   // 24\n  },                                                                                                               // 25\n                                                                                                                   // 26\n  // Most Meteor code ought to run inside a fiber, and the                                                         // 27\n  // _nodeCodeMustBeInFiber assertion helps you remember to include appropriate                                    // 28\n  // bindEnvironment calls (which will get you the *right value* for your                                          // 29\n  // environment variables, on the server).                                                                        // 30\n  //                                                                                                               // 31\n  // In some very special cases, it's more important to run Meteor code on the                                     // 32\n  // server in non-Fiber contexts rather than to strongly enforce the safeguard                                    // 33\n  // against forgetting to use bindEnvironment. For example, using `check` in                                      // 34\n  // some top-level constructs like connect handlers without needing unnecessary                                   // 35\n  // Fibers on every request is more important that possibly failing to find the                                   // 36\n  // correct argumentChecker. So this function is just like get(), but it                                          // 37\n  // returns null rather than throwing when called from outside a Fiber. (On the                                   // 38\n  // client, it is identical to get().)                                                                            // 39\n  getOrNullIfOutsideFiber: function () {                                                                           // 40\n    if (!Fiber.current)                                                                                            // 41\n      return null;                                                                                                 // 42\n    return this.get();                                                                                             // 43\n  },                                                                                                               // 44\n                                                                                                                   // 45\n  withValue: function (value, func) {                                                                              // 46\n    Meteor._nodeCodeMustBeInFiber();                                                                               // 47\n                                                                                                                   // 48\n    if (!Fiber.current._meteor_dynamics)                                                                           // 49\n      Fiber.current._meteor_dynamics = [];                                                                         // 50\n    var currentValues = Fiber.current._meteor_dynamics;                                                            // 51\n                                                                                                                   // 52\n    var saved = currentValues[this.slot];                                                                          // 53\n    try {                                                                                                          // 54\n      currentValues[this.slot] = value;                                                                            // 55\n      var ret = func();                                                                                            // 56\n    } finally {                                                                                                    // 57\n      currentValues[this.slot] = saved;                                                                            // 58\n    }                                                                                                              // 59\n                                                                                                                   // 60\n    return ret;                                                                                                    // 61\n  }                                                                                                                // 62\n});                                                                                                                // 63\n                                                                                                                   // 64\n// Meteor application code is always supposed to be run inside a                                                   // 65\n// fiber. bindEnvironment ensures that the function it wraps is run from                                           // 66\n// inside a fiber and ensures it sees the values of Meteor environment                                             // 67\n// variables that are set at the time bindEnvironment is called.                                                   // 68\n//                                                                                                                 // 69\n// If an environment-bound function is called from outside a fiber (eg, from                                       // 70\n// an asynchronous callback from a non-Meteor library such as MongoDB), it'll                                      // 71\n// kick off a new fiber to execute the function, and returns undefined as soon                                     // 72\n// as that fiber returns or yields (and func's return value is ignored).                                           // 73\n//                                                                                                                 // 74\n// If it's called inside a fiber, it works normally (the                                                           // 75\n// return value of the function will be passed through, and no new                                                 // 76\n// fiber will be created.)                                                                                         // 77\n//                                                                                                                 // 78\n// `onException` should be a function or a string.  When it is a                                                   // 79\n// function, it is called as a callback when the bound function raises                                             // 80\n// an exception.  If it is a string, it should be a description of the                                             // 81\n// callback, and when an exception is raised a debug message will be                                               // 82\n// printed with the description.                                                                                   // 83\nMeteor.bindEnvironment = function (func, onException, _this) {                                                     // 84\n  Meteor._nodeCodeMustBeInFiber();                                                                                 // 85\n                                                                                                                   // 86\n  var boundValues = _.clone(Fiber.current._meteor_dynamics || []);                                                 // 87\n                                                                                                                   // 88\n  if (!onException || typeof(onException) === 'string') {                                                          // 89\n    var description = onException || \"callback of async function\";                                                 // 90\n    onException = function (error) {                                                                               // 91\n      Meteor._debug(                                                                                               // 92\n        \"Exception in \" + description + \":\",                                                                       // 93\n        error && error.stack || error                                                                              // 94\n      );                                                                                                           // 95\n    };                                                                                                             // 96\n  } else if (typeof(onException) !== 'function') {                                                                 // 97\n    throw new Error('onException argument must be a function, string or undefined for Meteor.bindEnvironment().');\n  }                                                                                                                // 99\n                                                                                                                   // 100\n  return function (/* arguments */) {                                                                              // 101\n    var args = _.toArray(arguments);                                                                               // 102\n                                                                                                                   // 103\n    var runWithEnvironment = function () {                                                                         // 104\n      var savedValues = Fiber.current._meteor_dynamics;                                                            // 105\n      try {                                                                                                        // 106\n        // Need to clone boundValues in case two fibers invoke this                                                // 107\n        // function at the same time                                                                               // 108\n        Fiber.current._meteor_dynamics = _.clone(boundValues);                                                     // 109\n        var ret = func.apply(_this, args);                                                                         // 110\n      } catch (e) {                                                                                                // 111\n        // note: callback-hook currently relies on the fact that if onException                                    // 112\n        // throws and you were originally calling the wrapped callback from                                        // 113\n        // within a Fiber, the wrapped call throws.                                                                // 114\n        onException(e);                                                                                            // 115\n      } finally {                                                                                                  // 116\n        Fiber.current._meteor_dynamics = savedValues;                                                              // 117\n      }                                                                                                            // 118\n      return ret;                                                                                                  // 119\n    };                                                                                                             // 120\n                                                                                                                   // 121\n    if (Fiber.current)                                                                                             // 122\n      return runWithEnvironment();                                                                                 // 123\n    Fiber(runWithEnvironment).run();                                                                               // 124\n  };                                                                                                               // 125\n};                                                                                                                 // 126\n                                                                                                                   // 127\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/url_server.js                                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (process.env.ROOT_URL &&                                                                                        // 1\n    typeof __meteor_runtime_config__ === \"object\") {                                                               // 2\n  __meteor_runtime_config__.ROOT_URL = process.env.ROOT_URL;                                                       // 3\n  if (__meteor_runtime_config__.ROOT_URL) {                                                                        // 4\n    var parsedUrl = Npm.require('url').parse(__meteor_runtime_config__.ROOT_URL);                                  // 5\n    // Sometimes users try to pass, eg, ROOT_URL=mydomain.com.                                                     // 6\n    if (!parsedUrl.host) {                                                                                         // 7\n      throw Error(\"$ROOT_URL, if specified, must be an URL\");                                                      // 8\n    }                                                                                                              // 9\n    var pathPrefix = parsedUrl.pathname;                                                                           // 10\n    if (pathPrefix.slice(-1) === '/') {                                                                            // 11\n      // remove trailing slash (or turn \"/\" into \"\")                                                               // 12\n      pathPrefix = pathPrefix.slice(0, -1);                                                                        // 13\n    }                                                                                                              // 14\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = pathPrefix;                                                   // 15\n  } else {                                                                                                         // 16\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = \"\";                                                           // 17\n  }                                                                                                                // 18\n}                                                                                                                  // 19\n                                                                                                                   // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/url_common.js                                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n/**                                                                                                                // 1\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`.\n * @locus Anywhere                                                                                                 // 3\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".                        // 4\n * @param {Object} [options]                                                                                       // 5\n * @param {Boolean} options.secure Create an HTTPS URL.                                                            // 6\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */                                                                                                                // 9\nMeteor.absoluteUrl = function (path, options) {                                                                    // 10\n  // path is optional                                                                                              // 11\n  if (!options && typeof path === 'object') {                                                                      // 12\n    options = path;                                                                                                // 13\n    path = undefined;                                                                                              // 14\n  }                                                                                                                // 15\n  // merge options with defaults                                                                                   // 16\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                                        // 17\n                                                                                                                   // 18\n  var url = options.rootUrl;                                                                                       // 19\n  if (!url)                                                                                                        // 20\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");                        // 21\n                                                                                                                   // 22\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'                                     // 23\n    url = 'http://' + url; // we will later fix to https if options.secure is set                                  // 24\n                                                                                                                   // 25\n  if (!/\\/$/.test(url)) // url ends with '/'                                                                       // 26\n    url += '/';                                                                                                    // 27\n                                                                                                                   // 28\n  if (path)                                                                                                        // 29\n    url += path;                                                                                                   // 30\n                                                                                                                   // 31\n  // turn http to https if secure option is set, and we're not talking                                             // 32\n  // to localhost.                                                                                                 // 33\n  if (options.secure &&                                                                                            // 34\n      /^http:/.test(url) && // url starts with 'http:'                                                             // 35\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost                                           // 36\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1                                                     // 37\n    url = url.replace(/^http:/, 'https:');                                                                         // 38\n                                                                                                                   // 39\n  if (options.replaceLocalhost)                                                                                    // 40\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');                                       // 41\n                                                                                                                   // 42\n  return url;                                                                                                      // 43\n};                                                                                                                 // 44\n                                                                                                                   // 45\n// allow later packages to override default options                                                                // 46\nMeteor.absoluteUrl.defaultOptions = { };                                                                           // 47\nif (typeof __meteor_runtime_config__ === \"object\" &&                                                               // 48\n    __meteor_runtime_config__.ROOT_URL)                                                                            // 49\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                                  // 50\n                                                                                                                   // 51\n                                                                                                                   // 52\nMeteor._relativeToSiteRootUrl = function (link) {                                                                  // 53\n  if (typeof __meteor_runtime_config__ === \"object\" &&                                                             // 54\n      link.substr(0, 1) === \"/\")                                                                                   // 55\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;                                          // 56\n  return link;                                                                                                     // 57\n};                                                                                                                 // 58\n                                                                                                                   // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/flush-buffers-on-exit-in-windows.js                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (process.platform === \"win32\") {                                                                                // 1\n  /*                                                                                                               // 2\n   * Based on https://github.com/cowboy/node-exit                                                                  // 3\n   *                                                                                                               // 4\n   * Copyright (c) 2013 \"Cowboy\" Ben Alman                                                                         // 5\n   * Licensed under the MIT license.                                                                               // 6\n   */                                                                                                              // 7\n  var origProcessExit = process.exit.bind(process);                                                                // 8\n  process.exit = function (exitCode) {                                                                             // 9\n    var streams = [process.stdout, process.stderr];                                                                // 10\n    var drainCount = 0;                                                                                            // 11\n    // Actually exit if all streams are drained.                                                                   // 12\n    function tryToExit() {                                                                                         // 13\n      if (drainCount === streams.length) {                                                                         // 14\n        origProcessExit(exitCode);                                                                                 // 15\n      }                                                                                                            // 16\n    }                                                                                                              // 17\n    streams.forEach(function(stream) {                                                                             // 18\n      // Count drained streams now, but monitor non-drained streams.                                               // 19\n      if (stream.bufferSize === 0) {                                                                               // 20\n        drainCount++;                                                                                              // 21\n      } else {                                                                                                     // 22\n        stream.write('', 'utf-8', function() {                                                                     // 23\n          drainCount++;                                                                                            // 24\n          tryToExit();                                                                                             // 25\n        });                                                                                                        // 26\n      }                                                                                                            // 27\n      // Prevent further writing.                                                                                  // 28\n      stream.write = function() {};                                                                                // 29\n    });                                                                                                            // 30\n    // If all streams were already drained, exit now.                                                              // 31\n    tryToExit();                                                                                                   // 32\n    // In Windows, when run as a Node.js child process, a script utilizing                                         // 33\n    // this library might just exit with a 0 exit code, regardless. This code,                                     // 34\n    // despite the fact that it looks a bit crazy, appears to fix that.                                            // 35\n    process.on('exit', function() {                                                                                // 36\n      origProcessExit(exitCode);                                                                                   // 37\n    });                                                                                                            // 38\n  };                                                                                                               // 39\n}                                                                                                                  // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.meteor = {\n  Meteor: Meteor\n};\n\n})();\n","servePath":"/packages/meteor.js","sourceMap":{"version":3,"sources":["/packages/meteor/server_environment.js","/packages/meteor/helpers.js","/packages/meteor/setimmediate.js","/packages/meteor/timers.js","/packages/meteor/errors.js","/packages/meteor/fiber_helpers.js","/packages/meteor/startup_server.js","/packages/meteor/debug.js","/packages/meteor/string_utils.js","/packages/meteor/dynamics_nodejs.js","/packages/meteor/url_server.js","/packages/meteor/url_common.js","/packages/meteor/flush-buffers-on-exit-in-windows.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wyH;;;;;;;;;;;;;;;;;;ACxyH;;;;;;;;;;;;;;;;;;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;;;;;;;;ACnyH;;;;;;;;;;;;;;;;;;ACtLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA,uyH;;;;;;;;;;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH","file":"/packages/meteor.js","sourcesContent":["Meteor = {\n  isClient: false,\n  isServer: true,\n  isCordova: false\n};\n\nMeteor.settings = {};\n\nif (process.env.METEOR_SETTINGS) {\n  try {\n    Meteor.settings = JSON.parse(process.env.METEOR_SETTINGS);\n  } catch (e) {\n    throw new Error(\"METEOR_SETTINGS are not valid JSON: \" + process.env.METEOR_SETTINGS);\n  }\n}\n\n// Make sure that there is always a public attribute\n// to enable Meteor.settings.public on client\nif (! Meteor.settings.public) {\n    Meteor.settings.public = {};\n}\n\n// Push a subset of settings to the client.  Note that the way this\n// code is written, if the app mutates `Meteor.settings.public` on the\n// server, it also mutates\n// `__meteor_runtime_config__.PUBLIC_SETTINGS`, and the modified\n// settings will be sent to the client.\nif (typeof __meteor_runtime_config__ === \"object\") {\n  __meteor_runtime_config__.PUBLIC_SETTINGS = Meteor.settings.public;\n}\n","if (Meteor.isServer)\n  var Future = Npm.require('fibers/future');\n\nif (typeof __meteor_runtime_config__ === 'object' &&\n    __meteor_runtime_config__.meteorRelease) {\n  /**\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere\n   * @type {String}\n   */\n  Meteor.release = __meteor_runtime_config__.meteorRelease;\n}\n\n// XXX find a better home for these? Ideally they would be _.get,\n// _.ensure, _.delete..\n\n_.extend(Meteor, {\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or\n  // a[b][c] doesn't exist.\n  //\n  _get: function (obj /*, arguments */) {\n    for (var i = 1; i < arguments.length; i++) {\n      if (!(arguments[i] in obj))\n        return undefined;\n      obj = obj[arguments[i]];\n    }\n    return obj;\n  },\n\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,\n  // it is created and set to {}. Either way, it is returned.\n  //\n  _ensure: function (obj /*, arguments */) {\n    for (var i = 1; i < arguments.length; i++) {\n      var key = arguments[i];\n      if (!(key in obj))\n        obj[key] = {};\n      obj = obj[key];\n    }\n\n    return obj;\n  },\n\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it\n  // isn't empty, then a[b] unless it isn't empty.\n  //\n  _delete: function (obj /*, arguments */) {\n    var stack = [obj];\n    var leaf = true;\n    for (var i = 1; i < arguments.length - 1; i++) {\n      var key = arguments[i];\n      if (!(key in obj)) {\n        leaf = false;\n        break;\n      }\n      obj = obj[key];\n      if (typeof obj !== \"object\")\n        break;\n      stack.push(obj);\n    }\n\n    for (var i = stack.length - 1; i >= 0; i--) {\n      var key = arguments[i+1];\n\n      if (leaf)\n        leaf = false;\n      else\n        for (var other in stack[i][key])\n          return; // not empty -- we're done\n\n      delete stack[i][key];\n    }\n  },\n\n  // wrapAsync can wrap any function that takes some number of arguments that\n  // can't be undefined, followed by some optional arguments, where the callback\n  // is the last optional argument.\n  // e.g. fs.readFile(pathname, [callback]),\n  // fs.open(pathname, flags, [mode], [callback])\n  // For maximum effectiveness and least confusion, wrapAsync should be used on\n  // functions where the callback is the only argument of type Function.\n\n  /**\n   * @memberOf Meteor\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere\n   * @param {Function} func A function that takes a callback as its final parameter\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked\n   */\n  wrapAsync: function (fn, context) {\n    return function (/* arguments */) {\n      var self = context || this;\n      var newArgs = _.toArray(arguments);\n      var callback;\n\n      for (var i = newArgs.length - 1; i >= 0; --i) {\n        var arg = newArgs[i];\n        var type = typeof arg;\n        if (type !== \"undefined\") {\n          if (type === \"function\") {\n            callback = arg;\n          }\n          break;\n        }\n      }\n\n      if (! callback) {\n        if (Meteor.isClient) {\n          callback = logErr;\n        } else {\n          var fut = new Future();\n          callback = fut.resolver();\n        }\n        ++i; // Insert the callback just after arg.\n      }\n\n      newArgs[i] = Meteor.bindEnvironment(callback);\n      var result = fn.apply(self, newArgs);\n      return fut ? fut.wait() : result;\n    };\n  },\n\n  // Sets child's prototype to a new object whose prototype is parent's\n  // prototype. Used as:\n  //   Meteor._inherits(ClassB, ClassA).\n  //   _.extend(ClassB.prototype, { ... })\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.\n  _inherits: function (Child, Parent) {\n    // copy Parent static properties\n    for (var key in Parent) {\n      // make sure we only copy hasOwnProperty properties vs. prototype\n      // properties\n      if (_.has(Parent, key))\n        Child[key] = Parent[key];\n    }\n\n    // a middle member of prototype chain: takes the prototype from the Parent\n    var Middle = function () {\n      this.constructor = Child;\n    };\n    Middle.prototype = Parent.prototype;\n    Child.prototype = new Middle();\n    Child.__super__ = Parent.prototype;\n    return Child;\n  }\n});\n\nvar warnedAboutWrapAsync = false;\n\n/**\n * @deprecated in 0.9.3\n */\nMeteor._wrapAsync = function(fn, context) {\n  if (! warnedAboutWrapAsync) {\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");\n    warnedAboutWrapAsync = true;\n  }\n  return Meteor.wrapAsync.apply(Meteor, arguments);\n};\n\nfunction logErr(err) {\n  if (err) {\n    return Meteor._debug(\n      \"Exception in callback of async function\",\n      err.stack ? err.stack : err\n    );\n  }\n}\n","// Chooses one of three setImmediate implementations:\n//\n// * Native setImmediate (IE 10, Node 0.9+)\n//\n// * postMessage (many browsers)\n//\n// * setTimeout  (fallback)\n//\n// The postMessage implementation is based on\n// https://github.com/NobleJS/setImmediate/tree/1.0.1\n//\n// Don't use `nextTick` for Node since it runs its callbacks before\n// I/O, which is stricter than we're looking for.\n//\n// Not installed as a polyfill, as our public API is `Meteor.defer`.\n// Since we're not trying to be a polyfill, we have some\n// simplifications:\n//\n// If one invocation of a setImmediate callback pauses itself by a\n// call to alert/prompt/showModelDialog, the NobleJS polyfill\n// implementation ensured that no setImmedate callback would run until\n// the first invocation completed.  While correct per the spec, what it\n// would mean for us in practice is that any reactive updates relying\n// on Meteor.defer would be hung in the main window until the modal\n// dialog was dismissed.  Thus we only ensure that a setImmediate\n// function is called in a later event loop.\n//\n// We don't need to support using a string to be eval'ed for the\n// callback, arguments to the function, or clearImmediate.\n\n\"use strict\";\n\nvar global = this;\n\n\n// IE 10, Node >= 9.1\n\nfunction useSetImmediate() {\n  if (! global.setImmediate)\n    return null;\n  else {\n    var setImmediate = function (fn) {\n      global.setImmediate(fn);\n    };\n    setImmediate.implementation = 'setImmediate';\n    return setImmediate;\n  }\n}\n\n\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari\n\nfunction usePostMessage() {\n  // The test against `importScripts` prevents this implementation\n  // from being installed inside a web worker, where\n  // `global.postMessage` means something completely different and\n  // can't be used for this purpose.\n\n  if (!global.postMessage || global.importScripts) {\n    return null;\n  }\n\n  // Avoid synchronous post message implementations.\n\n  var postMessageIsAsynchronous = true;\n  var oldOnMessage = global.onmessage;\n  global.onmessage = function () {\n      postMessageIsAsynchronous = false;\n  };\n  global.postMessage(\"\", \"*\");\n  global.onmessage = oldOnMessage;\n\n  if (! postMessageIsAsynchronous)\n    return null;\n\n  var funcIndex = 0;\n  var funcs = {};\n\n  // Installs an event handler on `global` for the `message` event: see\n  // * https://developer.mozilla.org/en/DOM/window.postMessage\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n  // XXX use Random.id() here?\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';\n\n  function isStringAndStartsWith(string, putativeStart) {\n    return (typeof string === \"string\" &&\n            string.substring(0, putativeStart.length) === putativeStart);\n  }\n\n  function onGlobalMessage(event) {\n    // This will catch all incoming messages (even from other\n    // windows!), so we need to try reasonably hard to avoid letting\n    // anyone else trick us into firing off. We test the origin is\n    // still this window, and that a (randomly generated)\n    // unpredictable identifying prefix is present.\n    if (event.source === global &&\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {\n      var index = event.data.substring(MESSAGE_PREFIX.length);\n      try {\n        if (funcs[index])\n          funcs[index]();\n      }\n      finally {\n        delete funcs[index];\n      }\n    }\n  }\n\n  if (global.addEventListener) {\n    global.addEventListener(\"message\", onGlobalMessage, false);\n  } else {\n    global.attachEvent(\"onmessage\", onGlobalMessage);\n  }\n\n  var setImmediate = function (fn) {\n    // Make `global` post a message to itself with the handle and\n    // identifying prefix, thus asynchronously invoking our\n    // onGlobalMessage listener above.\n    ++funcIndex;\n    funcs[funcIndex] = fn;\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");\n  };\n  setImmediate.implementation = 'postMessage';\n  return setImmediate;\n}\n\n\nfunction useTimeout() {\n  var setImmediate = function (fn) {\n    global.setTimeout(fn, 0);\n  };\n  setImmediate.implementation = 'setTimeout';\n  return setImmediate;\n}\n\n\nMeteor._setImmediate =\n  useSetImmediate() ||\n  usePostMessage() ||\n  useTimeout();\n","var withoutInvocation = function (f) {\n  if (Package.ddp) {\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)\n      throw new Error(\"Can't set timers inside simulations\");\n    return function () { _CurrentInvocation.withValue(null, f); };\n  }\n  else\n    return f;\n};\n\nvar bindAndCatch = function (context, f) {\n  return Meteor.bindEnvironment(withoutInvocation(f), context);\n};\n\n_.extend(Meteor, {\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled\n  // inside a server method are not part of the method invocation and\n  // should clear out the CurrentInvocation environment variable.\n\n  /**\n   * @memberOf Meteor\n   * @summary Call a function in the future after waiting for a specified delay.\n   * @locus Anywhere\n   * @param {Function} func The function to run\n   * @param {Number} delay Number of milliseconds to wait before calling function\n   */\n  setTimeout: function (f, duration) {\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Call a function repeatedly, with a time delay between calls.\n   * @locus Anywhere\n   * @param {Function} func The function to run\n   * @param {Number} delay Number of milliseconds to wait between each function call.\n   */\n  setInterval: function (f, duration) {\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.\n   * @locus Anywhere\n   * @param {Number} id The handle returned by `Meteor.setInterval`\n   */\n  clearInterval: function(x) {\n    return clearInterval(x);\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.\n   * @locus Anywhere\n   * @param {Number} id The handle returned by `Meteor.setTimeout`\n   */\n  clearTimeout: function(x) {\n    return clearTimeout(x);\n  },\n\n  // XXX consider making this guarantee ordering of defer'd callbacks, like\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:\n  //    callSomethingThatDefersSomeWork();\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));\n  defer: function (f) {\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));\n  }\n});\n","// Makes an error subclass which properly contains a stack trace in most\n// environments. constructor can set fields on `this` (and should probably set\n// `message`, which is what gets displayed at the top of a stack trace).\n//\nMeteor.makeErrorType = function (name, constructor) {\n  var errorClass = function (/*arguments*/) {\n    var self = this;\n\n    // Ensure we get a proper stack trace in most Javascript environments\n    if (Error.captureStackTrace) {\n      // V8 environments (Chrome and Node.js)\n      Error.captureStackTrace(self, errorClass);\n    } else {\n      // Firefox\n      var e = new Error;\n      e.__proto__ = errorClass.prototype;\n      if (e instanceof errorClass)\n        self = e;\n    }\n    // Safari magically works.\n\n    constructor.apply(self, arguments);\n\n    self.errorType = name;\n\n    return self;\n  };\n\n  Meteor._inherits(errorClass, Error);\n\n  return errorClass;\n};\n\n// This should probably be in the livedata package, but we don't want\n// to require you to use the livedata package to get it. Eventually we\n// should probably rename it to DDP.Error and put it back in the\n// 'livedata' package (which we should rename to 'ddp' also.)\n//\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object\n// containing 'error' and optionally 'reason' and 'details'.\n// The DDP client manually puts these into Meteor.Error objects. (We don't use\n// EJSON.addType here because the type is determined by location in the\n// protocol, not text on the wire.)\n\n/**\n * @summary This class represents a symbolic error thrown by a method.\n * @locus Anywhere\n * @class\n * @param {String} error A string code uniquely identifying this kind of error.\n * This string should be used by callers of the method to determine the\n * appropriate action to take, instead of attempting to parse the reason\n * or details fields. For example:\n *\n * ```\n * // on the server, pick a code unique to this error\n * // the reason field should be a useful debug message\n * throw new Meteor.Error(\"logged-out\", \n *   \"The user must be logged in to post a comment.\");\n *\n * // on the client\n * Meteor.call(\"methodName\", function (error) {\n *   // identify the error\n *   if (error && error.error === \"logged-out\") {\n *     // show a nice error message\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");\n *   }\n * });\n * ```\n * \n * For legacy reasons, some built-in Meteor functions such as `check` throw\n * errors with a number in this field.\n * \n * @param {String} [reason] Optional.  A short human-readable summary of the\n * error, like 'Not Found'.\n * @param {String} [details] Optional.  Additional information about the error,\n * like a textual stack trace.\n */\nMeteor.Error = Meteor.makeErrorType(\n  \"Meteor.Error\",\n  function (error, reason, details) {\n    var self = this;\n\n    // String code uniquely identifying this kind of error.\n    self.error = error;\n\n    // Optional: A short human-readable summary of the error. Not\n    // intended to be shown to end users, just developers. (\"Not Found\",\n    // \"Internal Server Error\")\n    self.reason = reason;\n\n    // Optional: Additional information about the error, say for\n    // debugging. It might be a (textual) stack trace if the server is\n    // willing to provide one. The corresponding thing in HTTP would be\n    // the body of a 404 or 500 response. (The difference is that we\n    // never expect this to be shown to end users, only developers, so\n    // it doesn't need to be pretty.)\n    self.details = details;\n\n    // This is what gets displayed at the top of a stack trace. Current\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"\n    if (self.reason)\n      self.message = self.reason + ' [' + self.error + ']';\n    else\n      self.message = '[' + self.error + ']';\n  });\n\n// Meteor.Error is basically data and is sent over DDP, so you should be able to\n// properly EJSON-clone it. This is especially important because if a\n// Meteor.Error is thrown through a Future, the error, reason, and details\n// properties become non-enumerable so a standard Object clone won't preserve\n// them and they will be lost from DDP.\nMeteor.Error.prototype.clone = function () {\n  var self = this;\n  return new Meteor.Error(self.error, self.reason, self.details);\n};\n","var path = Npm.require('path');\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMeteor._noYieldsAllowed = function (f) {\n  var savedYield = Fiber.yield;\n  Fiber.yield = function () {\n    throw new Error(\"Can't call yield in a noYieldsAllowed block!\");\n  };\n  try {\n    return f();\n  } finally {\n    Fiber.yield = savedYield;\n  }\n};\n\nMeteor._DoubleEndedQueue = Npm.require('meteor-deque');\n\n// Meteor._SynchronousQueue is a queue which runs task functions serially.\n// Tasks are assumed to be synchronous: ie, it's assumed that they are\n// done when they return.\n//\n// It has two methods:\n//   - queueTask queues a task to be run, and returns immediately.\n//   - runTask queues a task to be run, and then yields. It returns\n//     when the task finishes running.\n//\n// It's safe to call queueTask from within a task, but not runTask (unless\n// you're calling runTask from a nested Fiber).\n//\n// Somewhat inspired by async.queue, but specific to blocking tasks.\n// XXX break this out into an NPM module?\n// XXX could maybe use the npm 'schlock' module instead, which would\n//     also support multiple concurrent \"read\" tasks\n//\nMeteor._SynchronousQueue = function () {\n  var self = this;\n  // List of tasks to run (not including a currently-running task if any). Each\n  // is an object with field 'task' (the task function to run) and 'future' (the\n  // Future associated with the blocking runTask call that queued it, or null if\n  // called from queueTask).\n  self._taskHandles = new Meteor._DoubleEndedQueue();\n  // This is true if self._run() is either currently executing or scheduled to\n  // do so soon.\n  self._runningOrRunScheduled = false;\n  // During the execution of a task, this is set to the fiber used to execute\n  // that task. We use this to throw an error rather than deadlocking if the\n  // user calls runTask from within a task on the same fiber.\n  self._currentTaskFiber = undefined;\n  // This is true if we're currently draining.  While we're draining, a further\n  // drain is a noop, to prevent infinite loops.  \"drain\" is a heuristic type\n  // operation, that has a meaning like unto \"what a naive person would expect\n  // when modifying a table from an observe\"\n  self._draining = false;\n};\n\n_.extend(Meteor._SynchronousQueue.prototype, {\n  runTask: function (task) {\n    var self = this;\n\n    if (!self.safeToRunTask()) {\n      if (Fiber.current)\n        throw new Error(\"Can't runTask from another task in the same fiber\");\n      else\n        throw new Error(\"Can only call runTask in a Fiber\");\n    }\n\n    var fut = new Future;\n    var handle = {\n      task: Meteor.bindEnvironment(task, function (e) {\n        Meteor._debug(\"Exception from task:\", e && e.stack || e);\n        throw e;\n      }),\n      future: fut,\n      name: task.name\n    };\n    self._taskHandles.push(handle);\n    self._scheduleRun();\n    // Yield. We'll get back here after the task is run (and will throw if the\n    // task throws).\n    fut.wait();\n  },\n  queueTask: function (task) {\n    var self = this;\n    self._taskHandles.push({\n      task: task,\n      name: task.name\n    });\n    self._scheduleRun();\n    // No need to block.\n  },\n\n  flush: function () {\n    var self = this;\n    self.runTask(function () {});\n  },\n\n  safeToRunTask: function () {\n    var self = this;\n    return Fiber.current && self._currentTaskFiber !== Fiber.current;\n  },\n\n  drain: function () {\n    var self = this;\n    if (self._draining)\n      return;\n    if (!self.safeToRunTask())\n      return;\n    self._draining = true;\n    while (! self._taskHandles.isEmpty()) {\n      self.flush();\n    }\n    self._draining = false;\n  },\n\n  _scheduleRun: function () {\n    var self = this;\n    // Already running or scheduled? Do nothing.\n    if (self._runningOrRunScheduled)\n      return;\n\n    self._runningOrRunScheduled = true;\n    setImmediate(function () {\n      Fiber(function () {\n        self._run();\n      }).run();\n    });\n  },\n  _run: function () {\n    var self = this;\n\n    if (!self._runningOrRunScheduled)\n      throw new Error(\"expected to be _runningOrRunScheduled\");\n\n    if (self._taskHandles.isEmpty()) {\n      // Done running tasks! Don't immediately schedule another run, but\n      // allow future tasks to do so.\n      self._runningOrRunScheduled = false;\n      return;\n    }\n    var taskHandle = self._taskHandles.shift();\n\n    // Run the task.\n    self._currentTaskFiber = Fiber.current;\n    var exception = undefined;\n    try {\n      taskHandle.task();\n    } catch (err) {\n      if (taskHandle.future) {\n        // We'll throw this exception through runTask.\n        exception = err;\n      } else {\n        Meteor._debug(\"Exception in queued task: \" + (err.stack || err));\n      }\n    }\n    self._currentTaskFiber = undefined;\n\n    // Soon, run the next task, if there is any.\n    self._runningOrRunScheduled = false;\n    self._scheduleRun();\n\n    // If this was queued with runTask, let the runTask call return (throwing if\n    // the task threw).\n    if (taskHandle.future) {\n      if (exception)\n        taskHandle.future['throw'](exception);\n      else\n        taskHandle.future['return']();\n    }\n  }\n});\n\n// Sleep. Mostly used for debugging (eg, inserting latency into server\n// methods).\n//\nMeteor._sleepForMs = function (ms) {\n  var fiber = Fiber.current;\n  setTimeout(function() {\n    fiber.run();\n  }, ms);\n  Fiber.yield();\n};\n","Meteor.startup = function (callback) {\n  if (__meteor_bootstrap__.startupHooks) {\n    __meteor_bootstrap__.startupHooks.push(callback);\n  } else {\n    // We already started up. Just call it now.\n    callback();\n  }\n};\n","var suppress = 0;\n\n// replacement for console.log. This is a temporary API. We should\n// provide a real logging API soon (possibly just a polyfill for\n// console?)\n//\n// NOTE: this is used on the server to print the warning about\n// having autopublish enabled when you probably meant to turn it\n// off. it's not really the proper use of something called\n// _debug. the intent is for this message to go to the terminal and\n// be very visible. if you change _debug to go someplace else, etc,\n// please fix the autopublish code to do something reasonable.\n//\nMeteor._debug = function (/* arguments */) {\n  if (suppress) {\n    suppress--;\n    return;\n  }\n  if (typeof console !== 'undefined' &&\n      typeof console.log !== 'undefined') {\n    if (arguments.length == 0) { // IE Companion breaks otherwise\n      // IE10 PP4 requires at least one argument\n      console.log('');\n    } else {\n      // IE doesn't have console.log.apply, it's not a real Object.\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n      // http://patik.com/blog/complete-cross-browser-console-log/\n      if (typeof console.log.apply === \"function\") {\n        // Most browsers\n\n        // Chrome and Safari only hyperlink URLs to source files in first argument of\n        // console.log, so try to call it with one argument if possible.\n        // Approach taken here: If all arguments are strings, join them on space.\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991\n        var allArgumentsOfTypeString = true;\n        for (var i = 0; i < arguments.length; i++)\n          if (typeof arguments[i] !== \"string\")\n            allArgumentsOfTypeString = false;\n\n        if (allArgumentsOfTypeString)\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);\n        else\n          console.log.apply(console, arguments);\n\n      } else if (typeof Function.prototype.bind === \"function\") {\n        // IE9\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n      } else {\n        // IE8\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));\n      }\n    }\n  }\n};\n\n// Suppress the next 'count' Meteor._debug messsages. Use this to\n// stop tests from spamming the console.\n//\nMeteor._suppress_log = function (count) {\n  suppress += count;\n};\n\nMeteor._suppressed_log_expected = function () {\n  return suppress !== 0;\n};\n\n","// Like Perl's quotemeta: quotes all regexp metacharacters.\n// Code taken from\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\nMeteor._escapeRegExp = function (string) {\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n","// Fiber-aware implementation of dynamic scoping, for use on the server\n\nvar Fiber = Npm.require('fibers');\n\nvar nextSlot = 0;\n\nMeteor._nodeCodeMustBeInFiber = function () {\n  if (!Fiber.current) {\n    throw new Error(\"Meteor code must always run within a Fiber. \" +\n                    \"Try wrapping callbacks that you pass to non-Meteor \" +\n                    \"libraries with Meteor.bindEnvironment.\");\n  }\n};\n\nMeteor.EnvironmentVariable = function () {\n  this.slot = nextSlot++;\n};\n\n_.extend(Meteor.EnvironmentVariable.prototype, {\n  get: function () {\n    Meteor._nodeCodeMustBeInFiber();\n\n    return Fiber.current._meteor_dynamics &&\n      Fiber.current._meteor_dynamics[this.slot];\n  },\n\n  // Most Meteor code ought to run inside a fiber, and the\n  // _nodeCodeMustBeInFiber assertion helps you remember to include appropriate\n  // bindEnvironment calls (which will get you the *right value* for your\n  // environment variables, on the server).\n  //\n  // In some very special cases, it's more important to run Meteor code on the\n  // server in non-Fiber contexts rather than to strongly enforce the safeguard\n  // against forgetting to use bindEnvironment. For example, using `check` in\n  // some top-level constructs like connect handlers without needing unnecessary\n  // Fibers on every request is more important that possibly failing to find the\n  // correct argumentChecker. So this function is just like get(), but it\n  // returns null rather than throwing when called from outside a Fiber. (On the\n  // client, it is identical to get().)\n  getOrNullIfOutsideFiber: function () {\n    if (!Fiber.current)\n      return null;\n    return this.get();\n  },\n\n  withValue: function (value, func) {\n    Meteor._nodeCodeMustBeInFiber();\n\n    if (!Fiber.current._meteor_dynamics)\n      Fiber.current._meteor_dynamics = [];\n    var currentValues = Fiber.current._meteor_dynamics;\n\n    var saved = currentValues[this.slot];\n    try {\n      currentValues[this.slot] = value;\n      var ret = func();\n    } finally {\n      currentValues[this.slot] = saved;\n    }\n\n    return ret;\n  }\n});\n\n// Meteor application code is always supposed to be run inside a\n// fiber. bindEnvironment ensures that the function it wraps is run from\n// inside a fiber and ensures it sees the values of Meteor environment\n// variables that are set at the time bindEnvironment is called.\n//\n// If an environment-bound function is called from outside a fiber (eg, from\n// an asynchronous callback from a non-Meteor library such as MongoDB), it'll\n// kick off a new fiber to execute the function, and returns undefined as soon\n// as that fiber returns or yields (and func's return value is ignored).\n//\n// If it's called inside a fiber, it works normally (the\n// return value of the function will be passed through, and no new\n// fiber will be created.)\n//\n// `onException` should be a function or a string.  When it is a\n// function, it is called as a callback when the bound function raises\n// an exception.  If it is a string, it should be a description of the\n// callback, and when an exception is raised a debug message will be\n// printed with the description.\nMeteor.bindEnvironment = function (func, onException, _this) {\n  Meteor._nodeCodeMustBeInFiber();\n\n  var boundValues = _.clone(Fiber.current._meteor_dynamics || []);\n\n  if (!onException || typeof(onException) === 'string') {\n    var description = onException || \"callback of async function\";\n    onException = function (error) {\n      Meteor._debug(\n        \"Exception in \" + description + \":\",\n        error && error.stack || error\n      );\n    };\n  } else if (typeof(onException) !== 'function') {\n    throw new Error('onException argument must be a function, string or undefined for Meteor.bindEnvironment().');\n  }\n\n  return function (/* arguments */) {\n    var args = _.toArray(arguments);\n\n    var runWithEnvironment = function () {\n      var savedValues = Fiber.current._meteor_dynamics;\n      try {\n        // Need to clone boundValues in case two fibers invoke this\n        // function at the same time\n        Fiber.current._meteor_dynamics = _.clone(boundValues);\n        var ret = func.apply(_this, args);\n      } catch (e) {\n        // note: callback-hook currently relies on the fact that if onException\n        // throws and you were originally calling the wrapped callback from\n        // within a Fiber, the wrapped call throws.\n        onException(e);\n      } finally {\n        Fiber.current._meteor_dynamics = savedValues;\n      }\n      return ret;\n    };\n\n    if (Fiber.current)\n      return runWithEnvironment();\n    Fiber(runWithEnvironment).run();\n  };\n};\n","if (process.env.ROOT_URL &&\n    typeof __meteor_runtime_config__ === \"object\") {\n  __meteor_runtime_config__.ROOT_URL = process.env.ROOT_URL;\n  if (__meteor_runtime_config__.ROOT_URL) {\n    var parsedUrl = Npm.require('url').parse(__meteor_runtime_config__.ROOT_URL);\n    // Sometimes users try to pass, eg, ROOT_URL=mydomain.com.\n    if (!parsedUrl.host) {\n      throw Error(\"$ROOT_URL, if specified, must be an URL\");\n    }\n    var pathPrefix = parsedUrl.pathname;\n    if (pathPrefix.slice(-1) === '/') {\n      // remove trailing slash (or turn \"/\" into \"\")\n      pathPrefix = pathPrefix.slice(0, -1);\n    }\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = pathPrefix;\n  } else {\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = \"\";\n  }\n}\n","/**\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`.\n * @locus Anywhere\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".\n * @param {Object} [options]\n * @param {Boolean} options.secure Create an HTTPS URL.\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */\nMeteor.absoluteUrl = function (path, options) {\n  // path is optional\n  if (!options && typeof path === 'object') {\n    options = path;\n    path = undefined;\n  }\n  // merge options with defaults\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});\n\n  var url = options.rootUrl;\n  if (!url)\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");\n\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'\n    url = 'http://' + url; // we will later fix to https if options.secure is set\n\n  if (!/\\/$/.test(url)) // url ends with '/'\n    url += '/';\n\n  if (path)\n    url += path;\n\n  // turn http to https if secure option is set, and we're not talking\n  // to localhost.\n  if (options.secure &&\n      /^http:/.test(url) && // url starts with 'http:'\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1\n    url = url.replace(/^http:/, 'https:');\n\n  if (options.replaceLocalhost)\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');\n\n  return url;\n};\n\n// allow later packages to override default options\nMeteor.absoluteUrl.defaultOptions = { };\nif (typeof __meteor_runtime_config__ === \"object\" &&\n    __meteor_runtime_config__.ROOT_URL)\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;\n\n\nMeteor._relativeToSiteRootUrl = function (link) {\n  if (typeof __meteor_runtime_config__ === \"object\" &&\n      link.substr(0, 1) === \"/\")\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;\n  return link;\n};\n","if (process.platform === \"win32\") {\n  /*\n   * Based on https://github.com/cowboy/node-exit\n   *\n   * Copyright (c) 2013 \"Cowboy\" Ben Alman\n   * Licensed under the MIT license.\n   */\n  var origProcessExit = process.exit.bind(process);\n  process.exit = function (exitCode) {\n    var streams = [process.stdout, process.stderr];\n    var drainCount = 0;\n    // Actually exit if all streams are drained.\n    function tryToExit() {\n      if (drainCount === streams.length) {\n        origProcessExit(exitCode);\n      }\n    }\n    streams.forEach(function(stream) {\n      // Count drained streams now, but monitor non-drained streams.\n      if (stream.bufferSize === 0) {\n        drainCount++;\n      } else {\n        stream.write('', 'utf-8', function() {\n          drainCount++;\n          tryToExit();\n        });\n      }\n      // Prevent further writing.\n      stream.write = function() {};\n    });\n    // If all streams were already drained, exit now.\n    tryToExit();\n    // In Windows, when run as a Node.js child process, a script utilizing\n    // this library might just exit with a 0 exit code, regardless. This code,\n    // despite the fact that it looks a bit crazy, appears to fix that.\n    process.on('exit', function() {\n      origProcessExit(exitCode);\n    });\n  };\n}"]}}]