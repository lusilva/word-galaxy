[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar Promise;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/promise/.npm/package/node_modules/meteor-promise/promise.bundle.js                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/******/ (function(modules) { // webpackBootstrap                                                                    // 1\n/******/ \t// The module cache                                                                                        // 2\n/******/ \tvar installedModules = {};                                                                                 // 3\n                                                                                                                     // 4\n/******/ \t// The require function                                                                                    // 5\n/******/ \tfunction __webpack_require__(moduleId) {                                                                   // 6\n                                                                                                                     // 7\n/******/ \t\t// Check if module is in cache                                                                            // 8\n/******/ \t\tif(installedModules[moduleId])                                                                            // 9\n/******/ \t\t\treturn installedModules[moduleId].exports;                                                               // 10\n                                                                                                                     // 11\n/******/ \t\t// Create a new module (and put it into the cache)                                                        // 12\n/******/ \t\tvar module = installedModules[moduleId] = {                                                               // 13\n/******/ \t\t\texports: {},                                                                                             // 14\n/******/ \t\t\tid: moduleId,                                                                                            // 15\n/******/ \t\t\tloaded: false                                                                                            // 16\n/******/ \t\t};                                                                                                        // 17\n                                                                                                                     // 18\n/******/ \t\t// Execute the module function                                                                            // 19\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);                      // 20\n                                                                                                                     // 21\n/******/ \t\t// Flag the module as loaded                                                                              // 22\n/******/ \t\tmodule.loaded = true;                                                                                     // 23\n                                                                                                                     // 24\n/******/ \t\t// Return the exports of the module                                                                       // 25\n/******/ \t\treturn module.exports;                                                                                    // 26\n/******/ \t}                                                                                                          // 27\n                                                                                                                     // 28\n                                                                                                                     // 29\n/******/ \t// expose the modules object (__webpack_modules__)                                                         // 30\n/******/ \t__webpack_require__.m = modules;                                                                           // 31\n                                                                                                                     // 32\n/******/ \t// expose the module cache                                                                                 // 33\n/******/ \t__webpack_require__.c = installedModules;                                                                  // 34\n                                                                                                                     // 35\n/******/ \t// __webpack_public_path__                                                                                 // 36\n/******/ \t__webpack_require__.p = \"\";                                                                                // 37\n                                                                                                                     // 38\n/******/ \t// Load entry module and return exports                                                                    // 39\n/******/ \treturn __webpack_require__(0);                                                                             // 40\n/******/ })                                                                                                          // 41\n/************************************************************************/                                           // 42\n/******/ ([                                                                                                          // 43\n/* 0 */                                                                                                              // 44\n/***/ function(module, exports, __webpack_require__) {                                                               // 45\n                                                                                                                     // 46\n\tvar MeteorPromise = __webpack_require__(1);                                                                         // 47\n                                                                                                                     // 48\n\tvar es6PromiseThen = MeteorPromise.prototype.then;                                                                  // 49\n\tMeteorPromise.prototype.then = function (onResolved, onRejected) {                                                  // 50\n\t  if (typeof Meteor === \"object\" &&                                                                                 // 51\n\t      typeof Meteor.bindEnvironment === \"function\") {                                                               // 52\n\t    return es6PromiseThen.call(                                                                                     // 53\n\t      this,                                                                                                         // 54\n\t      onResolved && Meteor.bindEnvironment(onResolved, raise),                                                      // 55\n\t      onRejected && Meteor.bindEnvironment(onRejected, raise)                                                       // 56\n\t    );                                                                                                              // 57\n\t  }                                                                                                                 // 58\n\t  return es6PromiseThen.call(this, onResolved, onRejected);                                                         // 59\n\t};                                                                                                                  // 60\n                                                                                                                     // 61\n\tfunction raise(exception) {                                                                                         // 62\n\t  throw exception;                                                                                                  // 63\n\t}                                                                                                                   // 64\n                                                                                                                     // 65\n\tPromise = MeteorPromise;                                                                                            // 66\n                                                                                                                     // 67\n                                                                                                                     // 68\n/***/ },                                                                                                             // 69\n/* 1 */                                                                                                              // 70\n/***/ function(module, exports, __webpack_require__) {                                                               // 71\n                                                                                                                     // 72\n\t/* WEBPACK VAR INJECTION */(function(global) {var hasOwn = Object.prototype.hasOwnProperty;                         // 73\n                                                                                                                     // 74\n\tvar g =                                                                                                             // 75\n\t  typeof global === \"object\" ? global :                                                                             // 76\n\t  typeof window === \"object\" ? window :                                                                             // 77\n\t  typeof self === \"object\" ? self : this;                                                                           // 78\n                                                                                                                     // 79\n\tvar GlobalPromise = g.Promise;                                                                                      // 80\n\tvar NpmPromise = __webpack_require__(2);                                                                            // 81\n                                                                                                                     // 82\n\tfunction copyMethods(target, source) {                                                                              // 83\n\t  Object.keys(source).forEach(function (key) {                                                                      // 84\n\t    var value = source[key];                                                                                        // 85\n\t    if (typeof value === \"function\" &&                                                                              // 86\n\t        ! hasOwn.call(target, key)) {                                                                               // 87\n\t      target[key] = value;                                                                                          // 88\n\t    }                                                                                                               // 89\n\t  });                                                                                                               // 90\n\t}                                                                                                                   // 91\n                                                                                                                     // 92\n\tif (typeof GlobalPromise === \"function\") {                                                                          // 93\n\t  copyMethods(GlobalPromise, NpmPromise);                                                                           // 94\n\t  copyMethods(GlobalPromise.prototype, NpmPromise.prototype);                                                       // 95\n\t  module.exports = GlobalPromise;                                                                                   // 96\n\t} else {                                                                                                            // 97\n\t  module.exports = NpmPromise;                                                                                      // 98\n\t}                                                                                                                   // 99\n                                                                                                                     // 100\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))                                        // 101\n                                                                                                                     // 102\n/***/ },                                                                                                             // 103\n/* 2 */                                                                                                              // 104\n/***/ function(module, exports, __webpack_require__) {                                                               // 105\n                                                                                                                     // 106\n\t'use strict';                                                                                                       // 107\n                                                                                                                     // 108\n\tmodule.exports = __webpack_require__(3)                                                                             // 109\n                                                                                                                     // 110\n                                                                                                                     // 111\n/***/ },                                                                                                             // 112\n/* 3 */                                                                                                              // 113\n/***/ function(module, exports, __webpack_require__) {                                                               // 114\n                                                                                                                     // 115\n\t'use strict';                                                                                                       // 116\n                                                                                                                     // 117\n\tmodule.exports = __webpack_require__(4);                                                                            // 118\n\t__webpack_require__(6);                                                                                             // 119\n\t__webpack_require__(7);                                                                                             // 120\n\t__webpack_require__(8);                                                                                             // 121\n\t__webpack_require__(9);                                                                                             // 122\n                                                                                                                     // 123\n                                                                                                                     // 124\n/***/ },                                                                                                             // 125\n/* 4 */                                                                                                              // 126\n/***/ function(module, exports, __webpack_require__) {                                                               // 127\n                                                                                                                     // 128\n\t'use strict';                                                                                                       // 129\n                                                                                                                     // 130\n\tvar asap = __webpack_require__(5);                                                                                  // 131\n                                                                                                                     // 132\n\tfunction noop() {}                                                                                                  // 133\n                                                                                                                     // 134\n\t// States:                                                                                                          // 135\n\t//                                                                                                                  // 136\n\t// 0 - pending                                                                                                      // 137\n\t// 1 - fulfilled with _value                                                                                        // 138\n\t// 2 - rejected with _value                                                                                         // 139\n\t// 3 - adopted the state of another promise, _value                                                                 // 140\n\t//                                                                                                                  // 141\n\t// once the state is no longer pending (0) it is immutable                                                          // 142\n                                                                                                                     // 143\n\t// All `_` prefixed properties will be reduced to `_{random number}`                                                // 144\n\t// at build time to obfuscate them and discourage their use.                                                        // 145\n\t// We don't use symbols or Object.defineProperty to fully hide them                                                 // 146\n\t// because the performance isn't good enough.                                                                       // 147\n                                                                                                                     // 148\n                                                                                                                     // 149\n\t// to avoid using try/catch inside critical functions, we                                                           // 150\n\t// extract them to here.                                                                                            // 151\n\tvar LAST_ERROR = null;                                                                                              // 152\n\tvar IS_ERROR = {};                                                                                                  // 153\n\tfunction getThen(obj) {                                                                                             // 154\n\t  try {                                                                                                             // 155\n\t    return obj.then;                                                                                                // 156\n\t  } catch (ex) {                                                                                                    // 157\n\t    LAST_ERROR = ex;                                                                                                // 158\n\t    return IS_ERROR;                                                                                                // 159\n\t  }                                                                                                                 // 160\n\t}                                                                                                                   // 161\n                                                                                                                     // 162\n\tfunction tryCallOne(fn, a) {                                                                                        // 163\n\t  try {                                                                                                             // 164\n\t    return fn(a);                                                                                                   // 165\n\t  } catch (ex) {                                                                                                    // 166\n\t    LAST_ERROR = ex;                                                                                                // 167\n\t    return IS_ERROR;                                                                                                // 168\n\t  }                                                                                                                 // 169\n\t}                                                                                                                   // 170\n\tfunction tryCallTwo(fn, a, b) {                                                                                     // 171\n\t  try {                                                                                                             // 172\n\t    fn(a, b);                                                                                                       // 173\n\t  } catch (ex) {                                                                                                    // 174\n\t    LAST_ERROR = ex;                                                                                                // 175\n\t    return IS_ERROR;                                                                                                // 176\n\t  }                                                                                                                 // 177\n\t}                                                                                                                   // 178\n                                                                                                                     // 179\n\tmodule.exports = Promise;                                                                                           // 180\n                                                                                                                     // 181\n\tfunction Promise(fn) {                                                                                              // 182\n\t  if (typeof this !== 'object') {                                                                                   // 183\n\t    throw new TypeError('Promises must be constructed via new');                                                    // 184\n\t  }                                                                                                                 // 185\n\t  if (typeof fn !== 'function') {                                                                                   // 186\n\t    throw new TypeError('not a function');                                                                          // 187\n\t  }                                                                                                                 // 188\n\t  this._37 = 0;                                                                                                     // 189\n\t  this._12 = null;                                                                                                  // 190\n\t  this._59 = [];                                                                                                    // 191\n\t  if (fn === noop) return;                                                                                          // 192\n\t  doResolve(fn, this);                                                                                              // 193\n\t}                                                                                                                   // 194\n\tPromise._99 = noop;                                                                                                 // 195\n                                                                                                                     // 196\n\tPromise.prototype.then = function(onFulfilled, onRejected) {                                                        // 197\n\t  if (this.constructor !== Promise) {                                                                               // 198\n\t    return safeThen(this, onFulfilled, onRejected);                                                                 // 199\n\t  }                                                                                                                 // 200\n\t  var res = new Promise(noop);                                                                                      // 201\n\t  handle(this, new Handler(onFulfilled, onRejected, res));                                                          // 202\n\t  return res;                                                                                                       // 203\n\t};                                                                                                                  // 204\n                                                                                                                     // 205\n\tfunction safeThen(self, onFulfilled, onRejected) {                                                                  // 206\n\t  return new self.constructor(function (resolve, reject) {                                                          // 207\n\t    var res = new Promise(noop);                                                                                    // 208\n\t    res.then(resolve, reject);                                                                                      // 209\n\t    handle(self, new Handler(onFulfilled, onRejected, res));                                                        // 210\n\t  });                                                                                                               // 211\n\t};                                                                                                                  // 212\n\tfunction handle(self, deferred) {                                                                                   // 213\n\t  while (self._37 === 3) {                                                                                          // 214\n\t    self = self._12;                                                                                                // 215\n\t  }                                                                                                                 // 216\n\t  if (self._37 === 0) {                                                                                             // 217\n\t    self._59.push(deferred);                                                                                        // 218\n\t    return;                                                                                                         // 219\n\t  }                                                                                                                 // 220\n\t  asap(function() {                                                                                                 // 221\n\t    var cb = self._37 === 1 ? deferred.onFulfilled : deferred.onRejected;                                           // 222\n\t    if (cb === null) {                                                                                              // 223\n\t      if (self._37 === 1) {                                                                                         // 224\n\t        resolve(deferred.promise, self._12);                                                                        // 225\n\t      } else {                                                                                                      // 226\n\t        reject(deferred.promise, self._12);                                                                         // 227\n\t      }                                                                                                             // 228\n\t      return;                                                                                                       // 229\n\t    }                                                                                                               // 230\n\t    var ret = tryCallOne(cb, self._12);                                                                             // 231\n\t    if (ret === IS_ERROR) {                                                                                         // 232\n\t      reject(deferred.promise, LAST_ERROR);                                                                         // 233\n\t    } else {                                                                                                        // 234\n\t      resolve(deferred.promise, ret);                                                                               // 235\n\t    }                                                                                                               // 236\n\t  });                                                                                                               // 237\n\t}                                                                                                                   // 238\n\tfunction resolve(self, newValue) {                                                                                  // 239\n\t  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n\t  if (newValue === self) {                                                                                          // 241\n\t    return reject(                                                                                                  // 242\n\t      self,                                                                                                         // 243\n\t      new TypeError('A promise cannot be resolved with itself.')                                                    // 244\n\t    );                                                                                                              // 245\n\t  }                                                                                                                 // 246\n\t  if (                                                                                                              // 247\n\t    newValue &&                                                                                                     // 248\n\t    (typeof newValue === 'object' || typeof newValue === 'function')                                                // 249\n\t  ) {                                                                                                               // 250\n\t    var then = getThen(newValue);                                                                                   // 251\n\t    if (then === IS_ERROR) {                                                                                        // 252\n\t      return reject(self, LAST_ERROR);                                                                              // 253\n\t    }                                                                                                               // 254\n\t    if (                                                                                                            // 255\n\t      then === self.then &&                                                                                         // 256\n\t      newValue instanceof Promise                                                                                   // 257\n\t    ) {                                                                                                             // 258\n\t      self._37 = 3;                                                                                                 // 259\n\t      self._12 = newValue;                                                                                          // 260\n\t      finale(self);                                                                                                 // 261\n\t      return;                                                                                                       // 262\n\t    } else if (typeof then === 'function') {                                                                        // 263\n\t      doResolve(then.bind(newValue), self);                                                                         // 264\n\t      return;                                                                                                       // 265\n\t    }                                                                                                               // 266\n\t  }                                                                                                                 // 267\n\t  self._37 = 1;                                                                                                     // 268\n\t  self._12 = newValue;                                                                                              // 269\n\t  finale(self);                                                                                                     // 270\n\t}                                                                                                                   // 271\n                                                                                                                     // 272\n\tfunction reject(self, newValue) {                                                                                   // 273\n\t  self._37 = 2;                                                                                                     // 274\n\t  self._12 = newValue;                                                                                              // 275\n\t  finale(self);                                                                                                     // 276\n\t}                                                                                                                   // 277\n\tfunction finale(self) {                                                                                             // 278\n\t  for (var i = 0; i < self._59.length; i++) {                                                                       // 279\n\t    handle(self, self._59[i]);                                                                                      // 280\n\t  }                                                                                                                 // 281\n\t  self._59 = null;                                                                                                  // 282\n\t}                                                                                                                   // 283\n                                                                                                                     // 284\n\tfunction Handler(onFulfilled, onRejected, promise){                                                                 // 285\n\t  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;                                        // 286\n\t  this.onRejected = typeof onRejected === 'function' ? onRejected : null;                                           // 287\n\t  this.promise = promise;                                                                                           // 288\n\t}                                                                                                                   // 289\n                                                                                                                     // 290\n\t/**                                                                                                                 // 291\n\t * Take a potentially misbehaving resolver function and make sure                                                   // 292\n\t * onFulfilled and onRejected are only called once.                                                                 // 293\n\t *                                                                                                                  // 294\n\t * Makes no guarantees about asynchrony.                                                                            // 295\n\t */                                                                                                                 // 296\n\tfunction doResolve(fn, promise) {                                                                                   // 297\n\t  var done = false;                                                                                                 // 298\n\t  var res = tryCallTwo(fn, function (value) {                                                                       // 299\n\t    if (done) return;                                                                                               // 300\n\t    done = true;                                                                                                    // 301\n\t    resolve(promise, value);                                                                                        // 302\n\t  }, function (reason) {                                                                                            // 303\n\t    if (done) return;                                                                                               // 304\n\t    done = true;                                                                                                    // 305\n\t    reject(promise, reason);                                                                                        // 306\n\t  })                                                                                                                // 307\n\t  if (!done && res === IS_ERROR) {                                                                                  // 308\n\t    done = true;                                                                                                    // 309\n\t    reject(promise, LAST_ERROR);                                                                                    // 310\n\t  }                                                                                                                 // 311\n\t}                                                                                                                   // 312\n                                                                                                                     // 313\n                                                                                                                     // 314\n/***/ },                                                                                                             // 315\n/* 5 */                                                                                                              // 316\n/***/ function(module, exports) {                                                                                    // 317\n                                                                                                                     // 318\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";                                                         // 319\n                                                                                                                     // 320\n\t// Use the fastest means possible to execute a task in its own turn, with                                           // 321\n\t// priority over other events including IO, animation, reflow, and redraw                                           // 322\n\t// events in browsers.                                                                                              // 323\n\t//                                                                                                                  // 324\n\t// An exception thrown by a task will permanently interrupt the processing of                                       // 325\n\t// subsequent tasks. The higher level `asap` function ensures that if an                                            // 326\n\t// exception is thrown by a task, that the task queue will continue flushing as                                     // 327\n\t// soon as possible, but if you use `rawAsap` directly, you are responsible to                                      // 328\n\t// either ensure that no exceptions are thrown from your task, or to manually                                       // 329\n\t// call `rawAsap.requestFlush` if an exception is thrown.                                                           // 330\n\tmodule.exports = rawAsap;                                                                                           // 331\n\tfunction rawAsap(task) {                                                                                            // 332\n\t    if (!queue.length) {                                                                                            // 333\n\t        requestFlush();                                                                                             // 334\n\t        flushing = true;                                                                                            // 335\n\t    }                                                                                                               // 336\n\t    // Equivalent to push, but avoids a function call.                                                              // 337\n\t    queue[queue.length] = task;                                                                                     // 338\n\t}                                                                                                                   // 339\n                                                                                                                     // 340\n\tvar queue = [];                                                                                                     // 341\n\t// Once a flush has been requested, no further calls to `requestFlush` are                                          // 342\n\t// necessary until the next `flush` completes.                                                                      // 343\n\tvar flushing = false;                                                                                               // 344\n\t// `requestFlush` is an implementation-specific method that attempts to kick                                        // 345\n\t// off a `flush` event as quickly as possible. `flush` will attempt to exhaust                                      // 346\n\t// the event queue before yielding to the browser's own event loop.                                                 // 347\n\tvar requestFlush;                                                                                                   // 348\n\t// The position of the next task to execute in the task queue. This is                                              // 349\n\t// preserved between calls to `flush` so that it can be resumed if                                                  // 350\n\t// a task throws an exception.                                                                                      // 351\n\tvar index = 0;                                                                                                      // 352\n\t// If a task schedules additional tasks recursively, the task queue can grow                                        // 353\n\t// unbounded. To prevent memory exhaustion, the task queue will periodically                                        // 354\n\t// truncate already-completed tasks.                                                                                // 355\n\tvar capacity = 1024;                                                                                                // 356\n                                                                                                                     // 357\n\t// The flush function processes all tasks that have been scheduled with                                             // 358\n\t// `rawAsap` unless and until one of those tasks throws an exception.                                               // 359\n\t// If a task throws an exception, `flush` ensures that its state will remain                                        // 360\n\t// consistent and will resume where it left off when called again.                                                  // 361\n\t// However, `flush` does not make any arrangements to be called again if an                                         // 362\n\t// exception is thrown.                                                                                             // 363\n\tfunction flush() {                                                                                                  // 364\n\t    while (index < queue.length) {                                                                                  // 365\n\t        var currentIndex = index;                                                                                   // 366\n\t        // Advance the index before calling the task. This ensures that we will                                     // 367\n\t        // begin flushing on the next task the task throws an error.                                                // 368\n\t        index = index + 1;                                                                                          // 369\n\t        queue[currentIndex].call();                                                                                 // 370\n\t        // Prevent leaking memory for long chains of recursive calls to `asap`.                                     // 371\n\t        // If we call `asap` within tasks scheduled by `asap`, the queue will                                       // 372\n\t        // grow, but to avoid an O(n) walk for every task we execute, we don't                                      // 373\n\t        // shift tasks off the queue after they have been executed.                                                 // 374\n\t        // Instead, we periodically shift 1024 tasks off the queue.                                                 // 375\n\t        if (index > capacity) {                                                                                     // 376\n\t            // Manually shift all values starting at the index back to the                                          // 377\n\t            // beginning of the queue.                                                                              // 378\n\t            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {                        // 379\n\t                queue[scan] = queue[scan + index];                                                                  // 380\n\t            }                                                                                                       // 381\n\t            queue.length -= index;                                                                                  // 382\n\t            index = 0;                                                                                              // 383\n\t        }                                                                                                           // 384\n\t    }                                                                                                               // 385\n\t    queue.length = 0;                                                                                               // 386\n\t    index = 0;                                                                                                      // 387\n\t    flushing = false;                                                                                               // 388\n\t}                                                                                                                   // 389\n                                                                                                                     // 390\n\t// `requestFlush` is implemented using a strategy based on data collected from                                      // 391\n\t// every available SauceLabs Selenium web driver worker at time of writing.                                         // 392\n\t// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593           // 393\n                                                                                                                     // 394\n\t// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that                                        // 395\n\t// have WebKitMutationObserver but not un-prefixed MutationObserver.                                                // 396\n\t// Must use `global` instead of `window` to work in both frames and web                                             // 397\n\t// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.                                                 // 398\n\tvar BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;                             // 399\n                                                                                                                     // 400\n\t// MutationObservers are desirable because they have high priority and work                                         // 401\n\t// reliably everywhere they are implemented.                                                                        // 402\n\t// They are implemented in all modern browsers.                                                                     // 403\n\t//                                                                                                                  // 404\n\t// - Android 4-4.3                                                                                                  // 405\n\t// - Chrome 26-34                                                                                                   // 406\n\t// - Firefox 14-29                                                                                                  // 407\n\t// - Internet Explorer 11                                                                                           // 408\n\t// - iPad Safari 6-7.1                                                                                              // 409\n\t// - iPhone Safari 7-7.1                                                                                            // 410\n\t// - Safari 6-7                                                                                                     // 411\n\tif (typeof BrowserMutationObserver === \"function\") {                                                                // 412\n\t    requestFlush = makeRequestCallFromMutationObserver(flush);                                                      // 413\n                                                                                                                     // 414\n\t// MessageChannels are desirable because they give direct access to the HTML                                        // 415\n\t// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera                                     // 416\n\t// 11-12, and in web workers in many engines.                                                                       // 417\n\t// Although message channels yield to any queued rendering and IO tasks, they                                       // 418\n\t// would be better than imposing the 4ms delay of timers.                                                           // 419\n\t// However, they do not work reliably in Internet Explorer or Safari.                                               // 420\n                                                                                                                     // 421\n\t// Internet Explorer 10 is the only browser that has setImmediate but does                                          // 422\n\t// not have MutationObservers.                                                                                      // 423\n\t// Although setImmediate yields to the browser's renderer, it would be                                              // 424\n\t// preferrable to falling back to setTimeout since it does not have                                                 // 425\n\t// the minimum 4ms penalty.                                                                                         // 426\n\t// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and                                      // 427\n\t// Desktop to a lesser extent) that renders both setImmediate and                                                   // 428\n\t// MessageChannel useless for the purposes of ASAP.                                                                 // 429\n\t// https://github.com/kriskowal/q/issues/396                                                                        // 430\n                                                                                                                     // 431\n\t// Timers are implemented universally.                                                                              // 432\n\t// We fall back to timers in workers in most engines, and in foreground                                             // 433\n\t// contexts in the following browsers.                                                                              // 434\n\t// However, note that even this simple case requires nuances to operate in a                                        // 435\n\t// broad spectrum of browsers.                                                                                      // 436\n\t//                                                                                                                  // 437\n\t// - Firefox 3-13                                                                                                   // 438\n\t// - Internet Explorer 6-9                                                                                          // 439\n\t// - iPad Safari 4.3                                                                                                // 440\n\t// - Lynx 2.8.7                                                                                                     // 441\n\t} else {                                                                                                            // 442\n\t    requestFlush = makeRequestCallFromTimer(flush);                                                                 // 443\n\t}                                                                                                                   // 444\n                                                                                                                     // 445\n\t// `requestFlush` requests that the high priority event queue be flushed as                                         // 446\n\t// soon as possible.                                                                                                // 447\n\t// This is useful to prevent an error thrown in a task from stalling the event                                      // 448\n\t// queue if the exception handled by Node.js’s                                                                      // 449\n\t// `process.on(\"uncaughtException\")` or by a domain.                                                                // 450\n\trawAsap.requestFlush = requestFlush;                                                                                // 451\n                                                                                                                     // 452\n\t// To request a high priority event, we induce a mutation observer by toggling                                      // 453\n\t// the text of a text node between \"1\" and \"-1\".                                                                    // 454\n\tfunction makeRequestCallFromMutationObserver(callback) {                                                            // 455\n\t    var toggle = 1;                                                                                                 // 456\n\t    var observer = new BrowserMutationObserver(callback);                                                           // 457\n\t    var node = document.createTextNode(\"\");                                                                         // 458\n\t    observer.observe(node, {characterData: true});                                                                  // 459\n\t    return function requestCall() {                                                                                 // 460\n\t        toggle = -toggle;                                                                                           // 461\n\t        node.data = toggle;                                                                                         // 462\n\t    };                                                                                                              // 463\n\t}                                                                                                                   // 464\n                                                                                                                     // 465\n\t// The message channel technique was discovered by Malte Ubl and was the                                            // 466\n\t// original foundation for this library.                                                                            // 467\n\t// http://www.nonblocking.io/2011/06/windownexttick.html                                                            // 468\n                                                                                                                     // 469\n\t// Safari 6.0.5 (at least) intermittently fails to create message ports on a                                        // 470\n\t// page's first load. Thankfully, this version of Safari supports                                                   // 471\n\t// MutationObservers, so we don't need to fall back in that case.                                                   // 472\n                                                                                                                     // 473\n\t// function makeRequestCallFromMessageChannel(callback) {                                                           // 474\n\t//     var channel = new MessageChannel();                                                                          // 475\n\t//     channel.port1.onmessage = callback;                                                                          // 476\n\t//     return function requestCall() {                                                                              // 477\n\t//         channel.port2.postMessage(0);                                                                            // 478\n\t//     };                                                                                                           // 479\n\t// }                                                                                                                // 480\n                                                                                                                     // 481\n\t// For reasons explained above, we are also unable to use `setImmediate`                                            // 482\n\t// under any circumstances.                                                                                         // 483\n\t// Even if we were, there is another bug in Internet Explorer 10.                                                   // 484\n\t// It is not sufficient to assign `setImmediate` to `requestFlush` because                                          // 485\n\t// `setImmediate` must be called *by name* and therefore must be wrapped in a                                       // 486\n\t// closure.                                                                                                         // 487\n\t// Never forget.                                                                                                    // 488\n                                                                                                                     // 489\n\t// function makeRequestCallFromSetImmediate(callback) {                                                             // 490\n\t//     return function requestCall() {                                                                              // 491\n\t//         setImmediate(callback);                                                                                  // 492\n\t//     };                                                                                                           // 493\n\t// }                                                                                                                // 494\n                                                                                                                     // 495\n\t// Safari 6.0 has a problem where timers will get lost while the user is                                            // 496\n\t// scrolling. This problem does not impact ASAP because Safari 6.0 supports                                         // 497\n\t// mutation observers, so that implementation is used instead.                                                      // 498\n\t// However, if we ever elect to use timers in Safari, the prevalent work-around                                     // 499\n\t// is to add a scroll event listener that calls for a flush.                                                        // 500\n                                                                                                                     // 501\n\t// `setTimeout` does not call the passed callback if the delay is less than                                         // 502\n\t// approximately 7 in web workers in Firefox 8 through 18, and sometimes not                                        // 503\n\t// even then.                                                                                                       // 504\n                                                                                                                     // 505\n\tfunction makeRequestCallFromTimer(callback) {                                                                       // 506\n\t    return function requestCall() {                                                                                 // 507\n\t        // We dispatch a timeout with a specified delay of 0 for engines that                                       // 508\n\t        // can reliably accommodate that request. This will usually be snapped                                      // 509\n\t        // to a 4 milisecond delay, but once we're flushing, there's no delay                                       // 510\n\t        // between events.                                                                                          // 511\n\t        var timeoutHandle = setTimeout(handleTimer, 0);                                                             // 512\n\t        // However, since this timer gets frequently dropped in Firefox                                             // 513\n\t        // workers, we enlist an interval handle that will try to fire                                              // 514\n\t        // an event 20 times per second until it succeeds.                                                          // 515\n\t        var intervalHandle = setInterval(handleTimer, 50);                                                          // 516\n                                                                                                                     // 517\n\t        function handleTimer() {                                                                                    // 518\n\t            // Whichever timer succeeds will cancel both timers and                                                 // 519\n\t            // execute the callback.                                                                                // 520\n\t            clearTimeout(timeoutHandle);                                                                            // 521\n\t            clearInterval(intervalHandle);                                                                          // 522\n\t            callback();                                                                                             // 523\n\t        }                                                                                                           // 524\n\t    };                                                                                                              // 525\n\t}                                                                                                                   // 526\n                                                                                                                     // 527\n\t// This is for `asap.js` only.                                                                                      // 528\n\t// Its name will be periodically randomized to break any code that depends on                                       // 529\n\t// its existence.                                                                                                   // 530\n\trawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;                                                        // 531\n                                                                                                                     // 532\n\t// ASAP was originally a nextTick shim included in Q. This was factored out                                         // 533\n\t// into this ASAP package. It was later adapted to RSVP which made further                                          // 534\n\t// amendments. These decisions, particularly to marginalize MessageChannel and                                      // 535\n\t// to capture the MutationObserver implementation in a closure, were integrated                                     // 536\n\t// back into ASAP proper.                                                                                           // 537\n\t// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js                // 538\n                                                                                                                     // 539\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))                                        // 540\n                                                                                                                     // 541\n/***/ },                                                                                                             // 542\n/* 6 */                                                                                                              // 543\n/***/ function(module, exports, __webpack_require__) {                                                               // 544\n                                                                                                                     // 545\n\t'use strict';                                                                                                       // 546\n                                                                                                                     // 547\n\tvar Promise = __webpack_require__(4);                                                                               // 548\n                                                                                                                     // 549\n\tmodule.exports = Promise;                                                                                           // 550\n\tPromise.prototype.done = function (onFulfilled, onRejected) {                                                       // 551\n\t  var self = arguments.length ? this.then.apply(this, arguments) : this;                                            // 552\n\t  self.then(null, function (err) {                                                                                  // 553\n\t    setTimeout(function () {                                                                                        // 554\n\t      throw err;                                                                                                    // 555\n\t    }, 0);                                                                                                          // 556\n\t  });                                                                                                               // 557\n\t};                                                                                                                  // 558\n                                                                                                                     // 559\n                                                                                                                     // 560\n/***/ },                                                                                                             // 561\n/* 7 */                                                                                                              // 562\n/***/ function(module, exports, __webpack_require__) {                                                               // 563\n                                                                                                                     // 564\n\t'use strict';                                                                                                       // 565\n                                                                                                                     // 566\n\tvar Promise = __webpack_require__(4);                                                                               // 567\n                                                                                                                     // 568\n\tmodule.exports = Promise;                                                                                           // 569\n\tPromise.prototype['finally'] = function (f) {                                                                       // 570\n\t  return this.then(function (value) {                                                                               // 571\n\t    return Promise.resolve(f()).then(function () {                                                                  // 572\n\t      return value;                                                                                                 // 573\n\t    });                                                                                                             // 574\n\t  }, function (err) {                                                                                               // 575\n\t    return Promise.resolve(f()).then(function () {                                                                  // 576\n\t      throw err;                                                                                                    // 577\n\t    });                                                                                                             // 578\n\t  });                                                                                                               // 579\n\t};                                                                                                                  // 580\n                                                                                                                     // 581\n                                                                                                                     // 582\n/***/ },                                                                                                             // 583\n/* 8 */                                                                                                              // 584\n/***/ function(module, exports, __webpack_require__) {                                                               // 585\n                                                                                                                     // 586\n\t'use strict';                                                                                                       // 587\n                                                                                                                     // 588\n\t//This file contains the ES6 extensions to the core Promises/A+ API                                                 // 589\n                                                                                                                     // 590\n\tvar Promise = __webpack_require__(4);                                                                               // 591\n                                                                                                                     // 592\n\tmodule.exports = Promise;                                                                                           // 593\n                                                                                                                     // 594\n\t/* Static Functions */                                                                                              // 595\n                                                                                                                     // 596\n\tvar TRUE = valuePromise(true);                                                                                      // 597\n\tvar FALSE = valuePromise(false);                                                                                    // 598\n\tvar NULL = valuePromise(null);                                                                                      // 599\n\tvar UNDEFINED = valuePromise(undefined);                                                                            // 600\n\tvar ZERO = valuePromise(0);                                                                                         // 601\n\tvar EMPTYSTRING = valuePromise('');                                                                                 // 602\n                                                                                                                     // 603\n\tfunction valuePromise(value) {                                                                                      // 604\n\t  var p = new Promise(Promise._99);                                                                                 // 605\n\t  p._37 = 1;                                                                                                        // 606\n\t  p._12 = value;                                                                                                    // 607\n\t  return p;                                                                                                         // 608\n\t}                                                                                                                   // 609\n\tPromise.resolve = function (value) {                                                                                // 610\n\t  if (value instanceof Promise) return value;                                                                       // 611\n                                                                                                                     // 612\n\t  if (value === null) return NULL;                                                                                  // 613\n\t  if (value === undefined) return UNDEFINED;                                                                        // 614\n\t  if (value === true) return TRUE;                                                                                  // 615\n\t  if (value === false) return FALSE;                                                                                // 616\n\t  if (value === 0) return ZERO;                                                                                     // 617\n\t  if (value === '') return EMPTYSTRING;                                                                             // 618\n                                                                                                                     // 619\n\t  if (typeof value === 'object' || typeof value === 'function') {                                                   // 620\n\t    try {                                                                                                           // 621\n\t      var then = value.then;                                                                                        // 622\n\t      if (typeof then === 'function') {                                                                             // 623\n\t        return new Promise(then.bind(value));                                                                       // 624\n\t      }                                                                                                             // 625\n\t    } catch (ex) {                                                                                                  // 626\n\t      return new Promise(function (resolve, reject) {                                                               // 627\n\t        reject(ex);                                                                                                 // 628\n\t      });                                                                                                           // 629\n\t    }                                                                                                               // 630\n\t  }                                                                                                                 // 631\n\t  return valuePromise(value);                                                                                       // 632\n\t};                                                                                                                  // 633\n                                                                                                                     // 634\n\tPromise.all = function (arr) {                                                                                      // 635\n\t  var args = Array.prototype.slice.call(arr);                                                                       // 636\n                                                                                                                     // 637\n\t  return new Promise(function (resolve, reject) {                                                                   // 638\n\t    if (args.length === 0) return resolve([]);                                                                      // 639\n\t    var remaining = args.length;                                                                                    // 640\n\t    function res(i, val) {                                                                                          // 641\n\t      if (val && (typeof val === 'object' || typeof val === 'function')) {                                          // 642\n\t        if (val instanceof Promise && val.then === Promise.prototype.then) {                                        // 643\n\t          while (val._37 === 3) {                                                                                   // 644\n\t            val = val._12;                                                                                          // 645\n\t          }                                                                                                         // 646\n\t          if (val._37 === 1) return res(i, val._12);                                                                // 647\n\t          if (val._37 === 2) reject(val._12);                                                                       // 648\n\t          val.then(function (val) {                                                                                 // 649\n\t            res(i, val);                                                                                            // 650\n\t          }, reject);                                                                                               // 651\n\t          return;                                                                                                   // 652\n\t        } else {                                                                                                    // 653\n\t          var then = val.then;                                                                                      // 654\n\t          if (typeof then === 'function') {                                                                         // 655\n\t            var p = new Promise(then.bind(val));                                                                    // 656\n\t            p.then(function (val) {                                                                                 // 657\n\t              res(i, val);                                                                                          // 658\n\t            }, reject);                                                                                             // 659\n\t            return;                                                                                                 // 660\n\t          }                                                                                                         // 661\n\t        }                                                                                                           // 662\n\t      }                                                                                                             // 663\n\t      args[i] = val;                                                                                                // 664\n\t      if (--remaining === 0) {                                                                                      // 665\n\t        resolve(args);                                                                                              // 666\n\t      }                                                                                                             // 667\n\t    }                                                                                                               // 668\n\t    for (var i = 0; i < args.length; i++) {                                                                         // 669\n\t      res(i, args[i]);                                                                                              // 670\n\t    }                                                                                                               // 671\n\t  });                                                                                                               // 672\n\t};                                                                                                                  // 673\n                                                                                                                     // 674\n\tPromise.reject = function (value) {                                                                                 // 675\n\t  return new Promise(function (resolve, reject) {                                                                   // 676\n\t    reject(value);                                                                                                  // 677\n\t  });                                                                                                               // 678\n\t};                                                                                                                  // 679\n                                                                                                                     // 680\n\tPromise.race = function (values) {                                                                                  // 681\n\t  return new Promise(function (resolve, reject) {                                                                   // 682\n\t    values.forEach(function(value){                                                                                 // 683\n\t      Promise.resolve(value).then(resolve, reject);                                                                 // 684\n\t    });                                                                                                             // 685\n\t  });                                                                                                               // 686\n\t};                                                                                                                  // 687\n                                                                                                                     // 688\n\t/* Prototype Methods */                                                                                             // 689\n                                                                                                                     // 690\n\tPromise.prototype['catch'] = function (onRejected) {                                                                // 691\n\t  return this.then(null, onRejected);                                                                               // 692\n\t};                                                                                                                  // 693\n                                                                                                                     // 694\n                                                                                                                     // 695\n/***/ },                                                                                                             // 696\n/* 9 */                                                                                                              // 697\n/***/ function(module, exports, __webpack_require__) {                                                               // 698\n                                                                                                                     // 699\n\t'use strict';                                                                                                       // 700\n                                                                                                                     // 701\n\t// This file contains then/promise specific extensions that are only useful                                         // 702\n\t// for node.js interop                                                                                              // 703\n                                                                                                                     // 704\n\tvar Promise = __webpack_require__(4);                                                                               // 705\n\tvar asap = __webpack_require__(10);                                                                                 // 706\n                                                                                                                     // 707\n\tmodule.exports = Promise;                                                                                           // 708\n                                                                                                                     // 709\n\t/* Static Functions */                                                                                              // 710\n                                                                                                                     // 711\n\tPromise.denodeify = function (fn, argumentCount) {                                                                  // 712\n\t  argumentCount = argumentCount || Infinity;                                                                        // 713\n\t  return function () {                                                                                              // 714\n\t    var self = this;                                                                                                // 715\n\t    var args = Array.prototype.slice.call(arguments, 0,                                                             // 716\n\t        argumentCount > 0 ? argumentCount : 0);                                                                     // 717\n\t    return new Promise(function (resolve, reject) {                                                                 // 718\n\t      args.push(function (err, res) {                                                                               // 719\n\t        if (err) reject(err);                                                                                       // 720\n\t        else resolve(res);                                                                                          // 721\n\t      })                                                                                                            // 722\n\t      var res = fn.apply(self, args);                                                                               // 723\n\t      if (res &&                                                                                                    // 724\n\t        (                                                                                                           // 725\n\t          typeof res === 'object' ||                                                                                // 726\n\t          typeof res === 'function'                                                                                 // 727\n\t        ) &&                                                                                                        // 728\n\t        typeof res.then === 'function'                                                                              // 729\n\t      ) {                                                                                                           // 730\n\t        resolve(res);                                                                                               // 731\n\t      }                                                                                                             // 732\n\t    })                                                                                                              // 733\n\t  }                                                                                                                 // 734\n\t}                                                                                                                   // 735\n\tPromise.nodeify = function (fn) {                                                                                   // 736\n\t  return function () {                                                                                              // 737\n\t    var args = Array.prototype.slice.call(arguments);                                                               // 738\n\t    var callback =                                                                                                  // 739\n\t      typeof args[args.length - 1] === 'function' ? args.pop() : null;                                              // 740\n\t    var ctx = this;                                                                                                 // 741\n\t    try {                                                                                                           // 742\n\t      return fn.apply(this, arguments).nodeify(callback, ctx);                                                      // 743\n\t    } catch (ex) {                                                                                                  // 744\n\t      if (callback === null || typeof callback == 'undefined') {                                                    // 745\n\t        return new Promise(function (resolve, reject) {                                                             // 746\n\t          reject(ex);                                                                                               // 747\n\t        });                                                                                                         // 748\n\t      } else {                                                                                                      // 749\n\t        asap(function () {                                                                                          // 750\n\t          callback.call(ctx, ex);                                                                                   // 751\n\t        })                                                                                                          // 752\n\t      }                                                                                                             // 753\n\t    }                                                                                                               // 754\n\t  }                                                                                                                 // 755\n\t}                                                                                                                   // 756\n                                                                                                                     // 757\n\tPromise.prototype.nodeify = function (callback, ctx) {                                                              // 758\n\t  if (typeof callback != 'function') return this;                                                                   // 759\n                                                                                                                     // 760\n\t  this.then(function (value) {                                                                                      // 761\n\t    asap(function () {                                                                                              // 762\n\t      callback.call(ctx, null, value);                                                                              // 763\n\t    });                                                                                                             // 764\n\t  }, function (err) {                                                                                               // 765\n\t    asap(function () {                                                                                              // 766\n\t      callback.call(ctx, err);                                                                                      // 767\n\t    });                                                                                                             // 768\n\t  });                                                                                                               // 769\n\t}                                                                                                                   // 770\n                                                                                                                     // 771\n                                                                                                                     // 772\n/***/ },                                                                                                             // 773\n/* 10 */                                                                                                             // 774\n/***/ function(module, exports, __webpack_require__) {                                                               // 775\n                                                                                                                     // 776\n\t\"use strict\";                                                                                                       // 777\n                                                                                                                     // 778\n\t// rawAsap provides everything we need except exception management.                                                 // 779\n\tvar rawAsap = __webpack_require__(5);                                                                               // 780\n\t// RawTasks are recycled to reduce GC churn.                                                                        // 781\n\tvar freeTasks = [];                                                                                                 // 782\n\t// We queue errors to ensure they are thrown in right order (FIFO).                                                 // 783\n\t// Array-as-queue is good enough here, since we are just dealing with exceptions.                                   // 784\n\tvar pendingErrors = [];                                                                                             // 785\n\tvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);                                          // 786\n                                                                                                                     // 787\n\tfunction throwFirstError() {                                                                                        // 788\n\t    if (pendingErrors.length) {                                                                                     // 789\n\t        throw pendingErrors.shift();                                                                                // 790\n\t    }                                                                                                               // 791\n\t}                                                                                                                   // 792\n                                                                                                                     // 793\n\t/**                                                                                                                 // 794\n\t * Calls a task as soon as possible after returning, in its own event, with priority                                // 795\n\t * over other events like animation, reflow, and repaint. An error thrown from an                                   // 796\n\t * event will not interrupt, nor even substantially slow down the processing of                                     // 797\n\t * other events, but will be rather postponed to a lower priority event.                                            // 798\n\t * @param {{call}} task A callable object, typically a function that takes no                                       // 799\n\t * arguments.                                                                                                       // 800\n\t */                                                                                                                 // 801\n\tmodule.exports = asap;                                                                                              // 802\n\tfunction asap(task) {                                                                                               // 803\n\t    var rawTask;                                                                                                    // 804\n\t    if (freeTasks.length) {                                                                                         // 805\n\t        rawTask = freeTasks.pop();                                                                                  // 806\n\t    } else {                                                                                                        // 807\n\t        rawTask = new RawTask();                                                                                    // 808\n\t    }                                                                                                               // 809\n\t    rawTask.task = task;                                                                                            // 810\n\t    rawAsap(rawTask);                                                                                               // 811\n\t}                                                                                                                   // 812\n                                                                                                                     // 813\n\t// We wrap tasks with recyclable task objects.  A task object implements                                            // 814\n\t// `call`, just like a function.                                                                                    // 815\n\tfunction RawTask() {                                                                                                // 816\n\t    this.task = null;                                                                                               // 817\n\t}                                                                                                                   // 818\n                                                                                                                     // 819\n\t// The sole purpose of wrapping the task is to catch the exception and recycle                                      // 820\n\t// the task object after its single use.                                                                            // 821\n\tRawTask.prototype.call = function () {                                                                              // 822\n\t    try {                                                                                                           // 823\n\t        this.task.call();                                                                                           // 824\n\t    } catch (error) {                                                                                               // 825\n\t        if (asap.onerror) {                                                                                         // 826\n\t            // This hook exists purely for testing purposes.                                                        // 827\n\t            // Its name will be periodically randomized to break any code that                                      // 828\n\t            // depends on its existence.                                                                            // 829\n\t            asap.onerror(error);                                                                                    // 830\n\t        } else {                                                                                                    // 831\n\t            // In a web browser, exceptions are not fatal. However, to avoid                                        // 832\n\t            // slowing down the queue of pending tasks, we rethrow the error in a                                   // 833\n\t            // lower priority turn.                                                                                 // 834\n\t            pendingErrors.push(error);                                                                              // 835\n\t            requestErrorThrow();                                                                                    // 836\n\t        }                                                                                                           // 837\n\t    } finally {                                                                                                     // 838\n\t        this.task = null;                                                                                           // 839\n\t        freeTasks[freeTasks.length] = this;                                                                         // 840\n\t    }                                                                                                               // 841\n\t};                                                                                                                  // 842\n                                                                                                                     // 843\n                                                                                                                     // 844\n/***/ }                                                                                                              // 845\n/******/ ]);                                                                                                         // 846\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.promise = {\n  Promise: Promise\n};\n\n})();\n","servePath":"/packages/promise.js","sourceMap":{"version":3,"sources":["/packages/promise/.npm/package/node_modules/meteor-promise/promise.bundle.js"],"names":[],"mappingsfile":"/packages/promise.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar MeteorPromise = __webpack_require__(1);\n\n\tvar es6PromiseThen = MeteorPromise.prototype.then;\n\tMeteorPromise.prototype.then = function (onResolved, onRejected) {\n\t  if (typeof Meteor === \"object\" &&\n\t      typeof Meteor.bindEnvironment === \"function\") {\n\t    return es6PromiseThen.call(\n\t      this,\n\t      onResolved && Meteor.bindEnvironment(onResolved, raise),\n\t      onRejected && Meteor.bindEnvironment(onRejected, raise)\n\t    );\n\t  }\n\t  return es6PromiseThen.call(this, onResolved, onRejected);\n\t};\n\n\tfunction raise(exception) {\n\t  throw exception;\n\t}\n\n\tPromise = MeteorPromise;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var hasOwn = Object.prototype.hasOwnProperty;\n\n\tvar g =\n\t  typeof global === \"object\" ? global :\n\t  typeof window === \"object\" ? window :\n\t  typeof self === \"object\" ? self : this;\n\n\tvar GlobalPromise = g.Promise;\n\tvar NpmPromise = __webpack_require__(2);\n\n\tfunction copyMethods(target, source) {\n\t  Object.keys(source).forEach(function (key) {\n\t    var value = source[key];\n\t    if (typeof value === \"function\" &&\n\t        ! hasOwn.call(target, key)) {\n\t      target[key] = value;\n\t    }\n\t  });\n\t}\n\n\tif (typeof GlobalPromise === \"function\") {\n\t  copyMethods(GlobalPromise, NpmPromise);\n\t  copyMethods(GlobalPromise.prototype, NpmPromise.prototype);\n\t  module.exports = GlobalPromise;\n\t} else {\n\t  module.exports = NpmPromise;\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tmodule.exports = __webpack_require__(3)\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tmodule.exports = __webpack_require__(4);\n\t__webpack_require__(6);\n\t__webpack_require__(7);\n\t__webpack_require__(8);\n\t__webpack_require__(9);\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar asap = __webpack_require__(5);\n\n\tfunction noop() {}\n\n\t// States:\n\t//\n\t// 0 - pending\n\t// 1 - fulfilled with _value\n\t// 2 - rejected with _value\n\t// 3 - adopted the state of another promise, _value\n\t//\n\t// once the state is no longer pending (0) it is immutable\n\n\t// All `_` prefixed properties will be reduced to `_{random number}`\n\t// at build time to obfuscate them and discourage their use.\n\t// We don't use symbols or Object.defineProperty to fully hide them\n\t// because the performance isn't good enough.\n\n\n\t// to avoid using try/catch inside critical functions, we\n\t// extract them to here.\n\tvar LAST_ERROR = null;\n\tvar IS_ERROR = {};\n\tfunction getThen(obj) {\n\t  try {\n\t    return obj.then;\n\t  } catch (ex) {\n\t    LAST_ERROR = ex;\n\t    return IS_ERROR;\n\t  }\n\t}\n\n\tfunction tryCallOne(fn, a) {\n\t  try {\n\t    return fn(a);\n\t  } catch (ex) {\n\t    LAST_ERROR = ex;\n\t    return IS_ERROR;\n\t  }\n\t}\n\tfunction tryCallTwo(fn, a, b) {\n\t  try {\n\t    fn(a, b);\n\t  } catch (ex) {\n\t    LAST_ERROR = ex;\n\t    return IS_ERROR;\n\t  }\n\t}\n\n\tmodule.exports = Promise;\n\n\tfunction Promise(fn) {\n\t  if (typeof this !== 'object') {\n\t    throw new TypeError('Promises must be constructed via new');\n\t  }\n\t  if (typeof fn !== 'function') {\n\t    throw new TypeError('not a function');\n\t  }\n\t  this._37 = 0;\n\t  this._12 = null;\n\t  this._59 = [];\n\t  if (fn === noop) return;\n\t  doResolve(fn, this);\n\t}\n\tPromise._99 = noop;\n\n\tPromise.prototype.then = function(onFulfilled, onRejected) {\n\t  if (this.constructor !== Promise) {\n\t    return safeThen(this, onFulfilled, onRejected);\n\t  }\n\t  var res = new Promise(noop);\n\t  handle(this, new Handler(onFulfilled, onRejected, res));\n\t  return res;\n\t};\n\n\tfunction safeThen(self, onFulfilled, onRejected) {\n\t  return new self.constructor(function (resolve, reject) {\n\t    var res = new Promise(noop);\n\t    res.then(resolve, reject);\n\t    handle(self, new Handler(onFulfilled, onRejected, res));\n\t  });\n\t};\n\tfunction handle(self, deferred) {\n\t  while (self._37 === 3) {\n\t    self = self._12;\n\t  }\n\t  if (self._37 === 0) {\n\t    self._59.push(deferred);\n\t    return;\n\t  }\n\t  asap(function() {\n\t    var cb = self._37 === 1 ? deferred.onFulfilled : deferred.onRejected;\n\t    if (cb === null) {\n\t      if (self._37 === 1) {\n\t        resolve(deferred.promise, self._12);\n\t      } else {\n\t        reject(deferred.promise, self._12);\n\t      }\n\t      return;\n\t    }\n\t    var ret = tryCallOne(cb, self._12);\n\t    if (ret === IS_ERROR) {\n\t      reject(deferred.promise, LAST_ERROR);\n\t    } else {\n\t      resolve(deferred.promise, ret);\n\t    }\n\t  });\n\t}\n\tfunction resolve(self, newValue) {\n\t  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n\t  if (newValue === self) {\n\t    return reject(\n\t      self,\n\t      new TypeError('A promise cannot be resolved with itself.')\n\t    );\n\t  }\n\t  if (\n\t    newValue &&\n\t    (typeof newValue === 'object' || typeof newValue === 'function')\n\t  ) {\n\t    var then = getThen(newValue);\n\t    if (then === IS_ERROR) {\n\t      return reject(self, LAST_ERROR);\n\t    }\n\t    if (\n\t      then === self.then &&\n\t      newValue instanceof Promise\n\t    ) {\n\t      self._37 = 3;\n\t      self._12 = newValue;\n\t      finale(self);\n\t      return;\n\t    } else if (typeof then === 'function') {\n\t      doResolve(then.bind(newValue), self);\n\t      return;\n\t    }\n\t  }\n\t  self._37 = 1;\n\t  self._12 = newValue;\n\t  finale(self);\n\t}\n\n\tfunction reject(self, newValue) {\n\t  self._37 = 2;\n\t  self._12 = newValue;\n\t  finale(self);\n\t}\n\tfunction finale(self) {\n\t  for (var i = 0; i < self._59.length; i++) {\n\t    handle(self, self._59[i]);\n\t  }\n\t  self._59 = null;\n\t}\n\n\tfunction Handler(onFulfilled, onRejected, promise){\n\t  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n\t  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n\t  this.promise = promise;\n\t}\n\n\t/**\n\t * Take a potentially misbehaving resolver function and make sure\n\t * onFulfilled and onRejected are only called once.\n\t *\n\t * Makes no guarantees about asynchrony.\n\t */\n\tfunction doResolve(fn, promise) {\n\t  var done = false;\n\t  var res = tryCallTwo(fn, function (value) {\n\t    if (done) return;\n\t    done = true;\n\t    resolve(promise, value);\n\t  }, function (reason) {\n\t    if (done) return;\n\t    done = true;\n\t    reject(promise, reason);\n\t  })\n\t  if (!done && res === IS_ERROR) {\n\t    done = true;\n\t    reject(promise, LAST_ERROR);\n\t  }\n\t}\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\n\t// Use the fastest means possible to execute a task in its own turn, with\n\t// priority over other events including IO, animation, reflow, and redraw\n\t// events in browsers.\n\t//\n\t// An exception thrown by a task will permanently interrupt the processing of\n\t// subsequent tasks. The higher level `asap` function ensures that if an\n\t// exception is thrown by a task, that the task queue will continue flushing as\n\t// soon as possible, but if you use `rawAsap` directly, you are responsible to\n\t// either ensure that no exceptions are thrown from your task, or to manually\n\t// call `rawAsap.requestFlush` if an exception is thrown.\n\tmodule.exports = rawAsap;\n\tfunction rawAsap(task) {\n\t    if (!queue.length) {\n\t        requestFlush();\n\t        flushing = true;\n\t    }\n\t    // Equivalent to push, but avoids a function call.\n\t    queue[queue.length] = task;\n\t}\n\n\tvar queue = [];\n\t// Once a flush has been requested, no further calls to `requestFlush` are\n\t// necessary until the next `flush` completes.\n\tvar flushing = false;\n\t// `requestFlush` is an implementation-specific method that attempts to kick\n\t// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n\t// the event queue before yielding to the browser's own event loop.\n\tvar requestFlush;\n\t// The position of the next task to execute in the task queue. This is\n\t// preserved between calls to `flush` so that it can be resumed if\n\t// a task throws an exception.\n\tvar index = 0;\n\t// If a task schedules additional tasks recursively, the task queue can grow\n\t// unbounded. To prevent memory exhaustion, the task queue will periodically\n\t// truncate already-completed tasks.\n\tvar capacity = 1024;\n\n\t// The flush function processes all tasks that have been scheduled with\n\t// `rawAsap` unless and until one of those tasks throws an exception.\n\t// If a task throws an exception, `flush` ensures that its state will remain\n\t// consistent and will resume where it left off when called again.\n\t// However, `flush` does not make any arrangements to be called again if an\n\t// exception is thrown.\n\tfunction flush() {\n\t    while (index < queue.length) {\n\t        var currentIndex = index;\n\t        // Advance the index before calling the task. This ensures that we will\n\t        // begin flushing on the next task the task throws an error.\n\t        index = index + 1;\n\t        queue[currentIndex].call();\n\t        // Prevent leaking memory for long chains of recursive calls to `asap`.\n\t        // If we call `asap` within tasks scheduled by `asap`, the queue will\n\t        // grow, but to avoid an O(n) walk for every task we execute, we don't\n\t        // shift tasks off the queue after they have been executed.\n\t        // Instead, we periodically shift 1024 tasks off the queue.\n\t        if (index > capacity) {\n\t            // Manually shift all values starting at the index back to the\n\t            // beginning of the queue.\n\t            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n\t                queue[scan] = queue[scan + index];\n\t            }\n\t            queue.length -= index;\n\t            index = 0;\n\t        }\n\t    }\n\t    queue.length = 0;\n\t    index = 0;\n\t    flushing = false;\n\t}\n\n\t// `requestFlush` is implemented using a strategy based on data collected from\n\t// every available SauceLabs Selenium web driver worker at time of writing.\n\t// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n\t// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n\t// have WebKitMutationObserver but not un-prefixed MutationObserver.\n\t// Must use `global` instead of `window` to work in both frames and web\n\t// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\tvar BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;\n\n\t// MutationObservers are desirable because they have high priority and work\n\t// reliably everywhere they are implemented.\n\t// They are implemented in all modern browsers.\n\t//\n\t// - Android 4-4.3\n\t// - Chrome 26-34\n\t// - Firefox 14-29\n\t// - Internet Explorer 11\n\t// - iPad Safari 6-7.1\n\t// - iPhone Safari 7-7.1\n\t// - Safari 6-7\n\tif (typeof BrowserMutationObserver === \"function\") {\n\t    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n\t// MessageChannels are desirable because they give direct access to the HTML\n\t// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n\t// 11-12, and in web workers in many engines.\n\t// Although message channels yield to any queued rendering and IO tasks, they\n\t// would be better than imposing the 4ms delay of timers.\n\t// However, they do not work reliably in Internet Explorer or Safari.\n\n\t// Internet Explorer 10 is the only browser that has setImmediate but does\n\t// not have MutationObservers.\n\t// Although setImmediate yields to the browser's renderer, it would be\n\t// preferrable to falling back to setTimeout since it does not have\n\t// the minimum 4ms penalty.\n\t// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n\t// Desktop to a lesser extent) that renders both setImmediate and\n\t// MessageChannel useless for the purposes of ASAP.\n\t// https://github.com/kriskowal/q/issues/396\n\n\t// Timers are implemented universally.\n\t// We fall back to timers in workers in most engines, and in foreground\n\t// contexts in the following browsers.\n\t// However, note that even this simple case requires nuances to operate in a\n\t// broad spectrum of browsers.\n\t//\n\t// - Firefox 3-13\n\t// - Internet Explorer 6-9\n\t// - iPad Safari 4.3\n\t// - Lynx 2.8.7\n\t} else {\n\t    requestFlush = makeRequestCallFromTimer(flush);\n\t}\n\n\t// `requestFlush` requests that the high priority event queue be flushed as\n\t// soon as possible.\n\t// This is useful to prevent an error thrown in a task from stalling the event\n\t// queue if the exception handled by Node.js’s\n\t// `process.on(\"uncaughtException\")` or by a domain.\n\trawAsap.requestFlush = requestFlush;\n\n\t// To request a high priority event, we induce a mutation observer by toggling\n\t// the text of a text node between \"1\" and \"-1\".\n\tfunction makeRequestCallFromMutationObserver(callback) {\n\t    var toggle = 1;\n\t    var observer = new BrowserMutationObserver(callback);\n\t    var node = document.createTextNode(\"\");\n\t    observer.observe(node, {characterData: true});\n\t    return function requestCall() {\n\t        toggle = -toggle;\n\t        node.data = toggle;\n\t    };\n\t}\n\n\t// The message channel technique was discovered by Malte Ubl and was the\n\t// original foundation for this library.\n\t// http://www.nonblocking.io/2011/06/windownexttick.html\n\n\t// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n\t// page's first load. Thankfully, this version of Safari supports\n\t// MutationObservers, so we don't need to fall back in that case.\n\n\t// function makeRequestCallFromMessageChannel(callback) {\n\t//     var channel = new MessageChannel();\n\t//     channel.port1.onmessage = callback;\n\t//     return function requestCall() {\n\t//         channel.port2.postMessage(0);\n\t//     };\n\t// }\n\n\t// For reasons explained above, we are also unable to use `setImmediate`\n\t// under any circumstances.\n\t// Even if we were, there is another bug in Internet Explorer 10.\n\t// It is not sufficient to assign `setImmediate` to `requestFlush` because\n\t// `setImmediate` must be called *by name* and therefore must be wrapped in a\n\t// closure.\n\t// Never forget.\n\n\t// function makeRequestCallFromSetImmediate(callback) {\n\t//     return function requestCall() {\n\t//         setImmediate(callback);\n\t//     };\n\t// }\n\n\t// Safari 6.0 has a problem where timers will get lost while the user is\n\t// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n\t// mutation observers, so that implementation is used instead.\n\t// However, if we ever elect to use timers in Safari, the prevalent work-around\n\t// is to add a scroll event listener that calls for a flush.\n\n\t// `setTimeout` does not call the passed callback if the delay is less than\n\t// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n\t// even then.\n\n\tfunction makeRequestCallFromTimer(callback) {\n\t    return function requestCall() {\n\t        // We dispatch a timeout with a specified delay of 0 for engines that\n\t        // can reliably accommodate that request. This will usually be snapped\n\t        // to a 4 milisecond delay, but once we're flushing, there's no delay\n\t        // between events.\n\t        var timeoutHandle = setTimeout(handleTimer, 0);\n\t        // However, since this timer gets frequently dropped in Firefox\n\t        // workers, we enlist an interval handle that will try to fire\n\t        // an event 20 times per second until it succeeds.\n\t        var intervalHandle = setInterval(handleTimer, 50);\n\n\t        function handleTimer() {\n\t            // Whichever timer succeeds will cancel both timers and\n\t            // execute the callback.\n\t            clearTimeout(timeoutHandle);\n\t            clearInterval(intervalHandle);\n\t            callback();\n\t        }\n\t    };\n\t}\n\n\t// This is for `asap.js` only.\n\t// Its name will be periodically randomized to break any code that depends on\n\t// its existence.\n\trawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n\t// ASAP was originally a nextTick shim included in Q. This was factored out\n\t// into this ASAP package. It was later adapted to RSVP which made further\n\t// amendments. These decisions, particularly to marginalize MessageChannel and\n\t// to capture the MutationObserver implementation in a closure, were integrated\n\t// back into ASAP proper.\n\t// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar Promise = __webpack_require__(4);\n\n\tmodule.exports = Promise;\n\tPromise.prototype.done = function (onFulfilled, onRejected) {\n\t  var self = arguments.length ? this.then.apply(this, arguments) : this;\n\t  self.then(null, function (err) {\n\t    setTimeout(function () {\n\t      throw err;\n\t    }, 0);\n\t  });\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar Promise = __webpack_require__(4);\n\n\tmodule.exports = Promise;\n\tPromise.prototype['finally'] = function (f) {\n\t  return this.then(function (value) {\n\t    return Promise.resolve(f()).then(function () {\n\t      return value;\n\t    });\n\t  }, function (err) {\n\t    return Promise.resolve(f()).then(function () {\n\t      throw err;\n\t    });\n\t  });\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//This file contains the ES6 extensions to the core Promises/A+ API\n\n\tvar Promise = __webpack_require__(4);\n\n\tmodule.exports = Promise;\n\n\t/* Static Functions */\n\n\tvar TRUE = valuePromise(true);\n\tvar FALSE = valuePromise(false);\n\tvar NULL = valuePromise(null);\n\tvar UNDEFINED = valuePromise(undefined);\n\tvar ZERO = valuePromise(0);\n\tvar EMPTYSTRING = valuePromise('');\n\n\tfunction valuePromise(value) {\n\t  var p = new Promise(Promise._99);\n\t  p._37 = 1;\n\t  p._12 = value;\n\t  return p;\n\t}\n\tPromise.resolve = function (value) {\n\t  if (value instanceof Promise) return value;\n\n\t  if (value === null) return NULL;\n\t  if (value === undefined) return UNDEFINED;\n\t  if (value === true) return TRUE;\n\t  if (value === false) return FALSE;\n\t  if (value === 0) return ZERO;\n\t  if (value === '') return EMPTYSTRING;\n\n\t  if (typeof value === 'object' || typeof value === 'function') {\n\t    try {\n\t      var then = value.then;\n\t      if (typeof then === 'function') {\n\t        return new Promise(then.bind(value));\n\t      }\n\t    } catch (ex) {\n\t      return new Promise(function (resolve, reject) {\n\t        reject(ex);\n\t      });\n\t    }\n\t  }\n\t  return valuePromise(value);\n\t};\n\n\tPromise.all = function (arr) {\n\t  var args = Array.prototype.slice.call(arr);\n\n\t  return new Promise(function (resolve, reject) {\n\t    if (args.length === 0) return resolve([]);\n\t    var remaining = args.length;\n\t    function res(i, val) {\n\t      if (val && (typeof val === 'object' || typeof val === 'function')) {\n\t        if (val instanceof Promise && val.then === Promise.prototype.then) {\n\t          while (val._37 === 3) {\n\t            val = val._12;\n\t          }\n\t          if (val._37 === 1) return res(i, val._12);\n\t          if (val._37 === 2) reject(val._12);\n\t          val.then(function (val) {\n\t            res(i, val);\n\t          }, reject);\n\t          return;\n\t        } else {\n\t          var then = val.then;\n\t          if (typeof then === 'function') {\n\t            var p = new Promise(then.bind(val));\n\t            p.then(function (val) {\n\t              res(i, val);\n\t            }, reject);\n\t            return;\n\t          }\n\t        }\n\t      }\n\t      args[i] = val;\n\t      if (--remaining === 0) {\n\t        resolve(args);\n\t      }\n\t    }\n\t    for (var i = 0; i < args.length; i++) {\n\t      res(i, args[i]);\n\t    }\n\t  });\n\t};\n\n\tPromise.reject = function (value) {\n\t  return new Promise(function (resolve, reject) {\n\t    reject(value);\n\t  });\n\t};\n\n\tPromise.race = function (values) {\n\t  return new Promise(function (resolve, reject) {\n\t    values.forEach(function(value){\n\t      Promise.resolve(value).then(resolve, reject);\n\t    });\n\t  });\n\t};\n\n\t/* Prototype Methods */\n\n\tPromise.prototype['catch'] = function (onRejected) {\n\t  return this.then(null, onRejected);\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t// This file contains then/promise specific extensions that are only useful\n\t// for node.js interop\n\n\tvar Promise = __webpack_require__(4);\n\tvar asap = __webpack_require__(10);\n\n\tmodule.exports = Promise;\n\n\t/* Static Functions */\n\n\tPromise.denodeify = function (fn, argumentCount) {\n\t  argumentCount = argumentCount || Infinity;\n\t  return function () {\n\t    var self = this;\n\t    var args = Array.prototype.slice.call(arguments, 0,\n\t        argumentCount > 0 ? argumentCount : 0);\n\t    return new Promise(function (resolve, reject) {\n\t      args.push(function (err, res) {\n\t        if (err) reject(err);\n\t        else resolve(res);\n\t      })\n\t      var res = fn.apply(self, args);\n\t      if (res &&\n\t        (\n\t          typeof res === 'object' ||\n\t          typeof res === 'function'\n\t        ) &&\n\t        typeof res.then === 'function'\n\t      ) {\n\t        resolve(res);\n\t      }\n\t    })\n\t  }\n\t}\n\tPromise.nodeify = function (fn) {\n\t  return function () {\n\t    var args = Array.prototype.slice.call(arguments);\n\t    var callback =\n\t      typeof args[args.length - 1] === 'function' ? args.pop() : null;\n\t    var ctx = this;\n\t    try {\n\t      return fn.apply(this, arguments).nodeify(callback, ctx);\n\t    } catch (ex) {\n\t      if (callback === null || typeof callback == 'undefined') {\n\t        return new Promise(function (resolve, reject) {\n\t          reject(ex);\n\t        });\n\t      } else {\n\t        asap(function () {\n\t          callback.call(ctx, ex);\n\t        })\n\t      }\n\t    }\n\t  }\n\t}\n\n\tPromise.prototype.nodeify = function (callback, ctx) {\n\t  if (typeof callback != 'function') return this;\n\n\t  this.then(function (value) {\n\t    asap(function () {\n\t      callback.call(ctx, null, value);\n\t    });\n\t  }, function (err) {\n\t    asap(function () {\n\t      callback.call(ctx, err);\n\t    });\n\t  });\n\t}\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\t// rawAsap provides everything we need except exception management.\n\tvar rawAsap = __webpack_require__(5);\n\t// RawTasks are recycled to reduce GC churn.\n\tvar freeTasks = [];\n\t// We queue errors to ensure they are thrown in right order (FIFO).\n\t// Array-as-queue is good enough here, since we are just dealing with exceptions.\n\tvar pendingErrors = [];\n\tvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\n\tfunction throwFirstError() {\n\t    if (pendingErrors.length) {\n\t        throw pendingErrors.shift();\n\t    }\n\t}\n\n\t/**\n\t * Calls a task as soon as possible after returning, in its own event, with priority\n\t * over other events like animation, reflow, and repaint. An error thrown from an\n\t * event will not interrupt, nor even substantially slow down the processing of\n\t * other events, but will be rather postponed to a lower priority event.\n\t * @param {{call}} task A callable object, typically a function that takes no\n\t * arguments.\n\t */\n\tmodule.exports = asap;\n\tfunction asap(task) {\n\t    var rawTask;\n\t    if (freeTasks.length) {\n\t        rawTask = freeTasks.pop();\n\t    } else {\n\t        rawTask = new RawTask();\n\t    }\n\t    rawTask.task = task;\n\t    rawAsap(rawTask);\n\t}\n\n\t// We wrap tasks with recyclable task objects.  A task object implements\n\t// `call`, just like a function.\n\tfunction RawTask() {\n\t    this.task = null;\n\t}\n\n\t// The sole purpose of wrapping the task is to catch the exception and recycle\n\t// the task object after its single use.\n\tRawTask.prototype.call = function () {\n\t    try {\n\t        this.task.call();\n\t    } catch (error) {\n\t        if (asap.onerror) {\n\t            // This hook exists purely for testing purposes.\n\t            // Its name will be periodically randomized to break any code that\n\t            // depends on its existence.\n\t            asap.onerror(error);\n\t        } else {\n\t            // In a web browser, exceptions are not fatal. However, to avoid\n\t            // slowing down the queue of pending tasks, we rethrow the error in a\n\t            // lower priority turn.\n\t            pendingErrors.push(error);\n\t            requestErrorThrow();\n\t        }\n\t    } finally {\n\t        this.task = null;\n\t        freeTasks[freeTasks.length] = this;\n\t    }\n\t};\n\n\n/***/ }\n/******/ ]);"]}}]