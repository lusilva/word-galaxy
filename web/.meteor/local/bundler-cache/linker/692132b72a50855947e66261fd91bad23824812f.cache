[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Random;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/random/random.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                       //\n// window.crypto.getRandomValues() in the browser) when available. If these                                            //\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                           //\n// strong, and we seed it with various sources such as the date, Math.random,                                          //\n// and window size on the client.  When using crypto.getRandomValues(), our                                            //\n// primitive is hexString(), from which we construct fraction(). When using                                            //\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                       //\n// that to construct hex string.                                                                                       //\n                                                                                                                       //\nif (Meteor.isServer) var nodeCrypto = Npm.require('crypto');                                                           // 10\n                                                                                                                       //\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript                                                  //\n// for a full discussion and Alea implementation.                                                                      //\nvar Alea = function () {                                                                                               // 15\n  function Mash() {                                                                                                    // 16\n    var n = 0xefc8249d;                                                                                                // 17\n                                                                                                                       //\n    var mash = function (data) {                                                                                       // 19\n      data = data.toString();                                                                                          // 20\n      for (var i = 0; i < data.length; i++) {                                                                          // 21\n        n += data.charCodeAt(i);                                                                                       // 22\n        var h = 0.02519603282416938 * n;                                                                               // 23\n        n = h >>> 0;                                                                                                   // 24\n        h -= n;                                                                                                        // 25\n        h *= n;                                                                                                        // 26\n        n = h >>> 0;                                                                                                   // 27\n        h -= n;                                                                                                        // 28\n        n += h * 0x100000000; // 2^32                                                                                  // 29\n      }                                                                                                                //\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                              // 31\n    };                                                                                                                 //\n                                                                                                                       //\n    mash.version = 'Mash 0.9';                                                                                         // 34\n    return mash;                                                                                                       // 35\n  }                                                                                                                    //\n                                                                                                                       //\n  return (function (args) {                                                                                            // 38\n    var s0 = 0;                                                                                                        // 39\n    var s1 = 0;                                                                                                        // 40\n    var s2 = 0;                                                                                                        // 41\n    var c = 1;                                                                                                         // 42\n                                                                                                                       //\n    if (args.length == 0) {                                                                                            // 44\n      args = [+new Date()];                                                                                            // 45\n    }                                                                                                                  //\n    var mash = Mash();                                                                                                 // 47\n    s0 = mash(' ');                                                                                                    // 48\n    s1 = mash(' ');                                                                                                    // 49\n    s2 = mash(' ');                                                                                                    // 50\n                                                                                                                       //\n    for (var i = 0; i < args.length; i++) {                                                                            // 52\n      s0 -= mash(args[i]);                                                                                             // 53\n      if (s0 < 0) {                                                                                                    // 54\n        s0 += 1;                                                                                                       // 55\n      }                                                                                                                //\n      s1 -= mash(args[i]);                                                                                             // 57\n      if (s1 < 0) {                                                                                                    // 58\n        s1 += 1;                                                                                                       // 59\n      }                                                                                                                //\n      s2 -= mash(args[i]);                                                                                             // 61\n      if (s2 < 0) {                                                                                                    // 62\n        s2 += 1;                                                                                                       // 63\n      }                                                                                                                //\n    }                                                                                                                  //\n    mash = null;                                                                                                       // 66\n                                                                                                                       //\n    var random = function () {                                                                                         // 68\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                      // 69\n      s0 = s1;                                                                                                         // 70\n      s1 = s2;                                                                                                         // 71\n      return s2 = t - (c = t | 0);                                                                                     // 72\n    };                                                                                                                 //\n    random.uint32 = function () {                                                                                      // 74\n      return random() * 0x100000000; // 2^32                                                                           // 75\n    };                                                                                                                 //\n    random.fract53 = function () {                                                                                     // 77\n      return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                                   // 78\n    };                                                                                                                 //\n    random.version = 'Alea 0.9';                                                                                       // 81\n    random.args = args;                                                                                                // 82\n    return random;                                                                                                     // 83\n  })(Array.prototype.slice.call(arguments));                                                                           //\n};                                                                                                                     //\n                                                                                                                       //\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";                                    // 88\nvar BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"0123456789-_\";                            // 89\n                                                                                                                       //\n// `type` is one of `RandomGenerator.Type` as defined below.                                                           //\n//                                                                                                                     //\n// options:                                                                                                            //\n// - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                                    //\n//   whose items will be `toString`ed and used as the seed to the Alea                                                 //\n//   algorithm                                                                                                         //\nvar RandomGenerator = function (type, options) {                                                                       // 98\n  var self = this;                                                                                                     // 99\n  self.type = type;                                                                                                    // 100\n                                                                                                                       //\n  if (!RandomGenerator.Type[type]) {                                                                                   // 102\n    throw new Error(\"Unknown random generator type: \" + type);                                                         // 103\n  }                                                                                                                    //\n                                                                                                                       //\n  if (type === RandomGenerator.Type.ALEA) {                                                                            // 106\n    if (!options.seeds) {                                                                                              // 107\n      throw new Error(\"No seeds were provided for Alea PRNG\");                                                         // 108\n    }                                                                                                                  //\n    self.alea = Alea.apply(null, options.seeds);                                                                       // 110\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\n// Types of PRNGs supported by the `RandomGenerator` class                                                             //\nRandomGenerator.Type = {                                                                                               // 115\n  // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                                    //\n  // secure but not seedable, runs only on the server). Reverts to                                                     //\n  // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                                 //\n  // there isn't enough entropy yet                                                                                    //\n  NODE_CRYPTO: \"NODE_CRYPTO\",                                                                                          // 120\n                                                                                                                       //\n  // Use non-IE browser's built-in `window.crypto.getRandomValues`                                                     //\n  // (cryptographically secure but not seedable, runs only in the                                                      //\n  // browser).                                                                                                         //\n  BROWSER_CRYPTO: \"BROWSER_CRYPTO\",                                                                                    // 125\n                                                                                                                       //\n  // Use the *fast*, seedaable and not cryptographically secure                                                        //\n  // Alea algorithm                                                                                                    //\n  ALEA: \"ALEA\"                                                                                                         // 129\n};                                                                                                                     //\n                                                                                                                       //\nRandomGenerator.prototype.fraction = function () {                                                                     // 132\n  var self = this;                                                                                                     // 133\n  if (self.type === RandomGenerator.Type.ALEA) {                                                                       // 134\n    return self.alea();                                                                                                // 135\n  } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                         //\n    var numerator = parseInt(self.hexString(8), 16);                                                                   // 137\n    return numerator * 2.3283064365386963e-10; // 2^-32                                                                // 138\n  } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {                                                      //\n      var array = new Uint32Array(1);                                                                                  // 140\n      window.crypto.getRandomValues(array);                                                                            // 141\n      return array[0] * 2.3283064365386963e-10; // 2^-32                                                               // 142\n    } else {                                                                                                           //\n        throw new Error('Unknown random generator type: ' + self.type);                                                // 144\n      }                                                                                                                //\n};                                                                                                                     //\n                                                                                                                       //\nRandomGenerator.prototype.hexString = function (digits) {                                                              // 148\n  var self = this;                                                                                                     // 149\n  if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                                // 150\n    var numBytes = Math.ceil(digits / 2);                                                                              // 151\n    var bytes;                                                                                                         // 152\n    // Try to get cryptographically strong randomness. Fall back to                                                    //\n    // non-cryptographically strong if not available.                                                                  //\n    try {                                                                                                              // 155\n      bytes = nodeCrypto.randomBytes(numBytes);                                                                        // 156\n    } catch (e) {                                                                                                      //\n      // XXX should re-throw any error except insufficient entropy                                                     //\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);                                                                  // 159\n    }                                                                                                                  //\n    var result = bytes.toString(\"hex\");                                                                                // 161\n    // If the number of digits is odd, we'll have generated an extra 4 bits                                            //\n    // of randomness, so we need to trim the last digit.                                                               //\n    return result.substring(0, digits);                                                                                // 164\n  } else {                                                                                                             //\n    return this._randomString(digits, \"0123456789abcdef\");                                                             // 166\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nRandomGenerator.prototype._randomString = function (charsCount, alphabet) {                                            // 170\n  var self = this;                                                                                                     // 172\n  var digits = [];                                                                                                     // 173\n  for (var i = 0; i < charsCount; i++) {                                                                               // 174\n    digits[i] = self.choice(alphabet);                                                                                 // 175\n  }                                                                                                                    //\n  return digits.join(\"\");                                                                                              // 177\n};                                                                                                                     //\n                                                                                                                       //\nRandomGenerator.prototype.id = function (charsCount) {                                                                 // 180\n  var self = this;                                                                                                     // 181\n  // 17 characters is around 96 bits of entropy, which is the amount of                                                //\n  // state in the Alea PRNG.                                                                                           //\n  if (charsCount === undefined) charsCount = 17;                                                                       // 184\n                                                                                                                       //\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);                                                           // 187\n};                                                                                                                     //\n                                                                                                                       //\nRandomGenerator.prototype.secret = function (charsCount) {                                                             // 190\n  var self = this;                                                                                                     // 191\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per                                                    //\n  // character.                                                                                                        //\n  if (charsCount === undefined) charsCount = 43;                                                                       // 194\n  return self._randomString(charsCount, BASE64_CHARS);                                                                 // 196\n};                                                                                                                     //\n                                                                                                                       //\nRandomGenerator.prototype.choice = function (arrayOrString) {                                                          // 199\n  var index = Math.floor(this.fraction() * arrayOrString.length);                                                      // 200\n  if (typeof arrayOrString === \"string\") return arrayOrString.substr(index, 1);else return arrayOrString[index];       // 201\n};                                                                                                                     //\n                                                                                                                       //\n// instantiate RNG.  Heuristically collect entropy from various sources when a                                         //\n// cryptographic PRNG isn't available.                                                                                 //\n                                                                                                                       //\n// client sources                                                                                                      //\nvar height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;\n                                                                                                                       //\nvar width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;\n                                                                                                                       //\nvar agent = typeof navigator !== 'undefined' && navigator.userAgent || \"\";                                             // 229\n                                                                                                                       //\nfunction createAleaGeneratorWithGeneratedSeed() {                                                                      // 231\n  return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: [new Date(), height, width, agent, Math.random()] });\n};                                                                                                                     //\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 237\n  Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);                                                      // 238\n} else {                                                                                                               //\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) {                               // 240\n    Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);                                                 // 242\n  } else {                                                                                                             //\n    // On IE 10 and below, there's no browser crypto API                                                               //\n    // available. Fall back to Alea                                                                                    //\n    //                                                                                                                 //\n    // XXX looks like at the moment, we use Alea in IE 11 as well,                                                     //\n    // which has `window.msCrypto` instead of `window.crypto`.                                                         //\n    Random = createAleaGeneratorWithGeneratedSeed();                                                                   // 249\n  }                                                                                                                    //\n}                                                                                                                      //\n                                                                                                                       //\n// Create a non-cryptographically secure PRNG with a given seed (using                                                 //\n// the Alea algorithm)                                                                                                 //\nRandom.createWithSeeds = function () {                                                                                 // 255\n  for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {                              //\n    seeds[_key] = arguments[_key];                                                                                     // 255\n  }                                                                                                                    //\n                                                                                                                       //\n  if (seeds.length === 0) {                                                                                            // 256\n    throw new Error(\"No seeds were provided\");                                                                         // 257\n  }                                                                                                                    //\n  return new RandomGenerator(RandomGenerator.Type.ALEA, { seeds: seeds });                                             // 259\n};                                                                                                                     //\n                                                                                                                       //\n// Used like `Random`, but much faster and not cryptographically                                                       //\n// secure                                                                                                              //\nRandom.insecure = createAleaGeneratorWithGeneratedSeed();                                                              // 264\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/random/deprecated.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Before this package existed, we used to use this Meteor.uuid()                                                      //\n// implementing the RFC 4122 v4 UUID. It is no longer documented                                                       //\n// and will go away.                                                                                                   //\n// XXX COMPAT WITH 0.5.6                                                                                               //\nMeteor.uuid = function () {                                                                                            // 5\n  var HEX_DIGITS = \"0123456789abcdef\";                                                                                 // 6\n  var s = [];                                                                                                          // 7\n  for (var i = 0; i < 36; i++) {                                                                                       // 8\n    s[i] = Random.choice(HEX_DIGITS);                                                                                  // 9\n  }                                                                                                                    //\n  s[14] = \"4\";                                                                                                         // 11\n  s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1);                                                       // 12\n  s[8] = s[13] = s[18] = s[23] = \"-\";                                                                                  // 13\n                                                                                                                       //\n  var uuid = s.join(\"\");                                                                                               // 15\n  return uuid;                                                                                                         // 16\n};                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.random = {\n  Random: Random\n};\n\n})();\n","servePath":"/packages/random.js","sourceMap":{"version":3,"sources":["/random.js","/deprecated.js"],"names":[],"mappings":"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","file":"/packages/random.js","sourcesContent":["// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,\n// window.crypto.getRandomValues() in the browser) when available. If these\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically\n// strong, and we seed it with various sources such as the date, Math.random,\n// and window size on the client.  When using crypto.getRandomValues(), our\n// primitive is hexString(), from which we construct fraction(). When using\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use\n// that to construct hex string.\n\nif (Meteor.isServer)\n  var nodeCrypto = Npm.require('crypto');\n\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript\n// for a full discussion and Alea implementation.\nvar Alea = function () {\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    mash.version = 'Mash 0.9';\n    return mash;\n  }\n\n  return (function (args) {\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    if (args.length == 0) {\n      args = [+new Date];\n    }\n    var mash = Mash();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < args.length; i++) {\n      s0 -= mash(args[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(args[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(args[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n\n    var random = function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n    random.uint32 = function() {\n      return random() * 0x100000000; // 2^32\n    };\n    random.fract53 = function() {\n      return random() +\n        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n    };\n    random.version = 'Alea 0.9';\n    random.args = args;\n    return random;\n\n  } (Array.prototype.slice.call(arguments)));\n};\n\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";\nvar BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n  \"0123456789-_\";\n\n// `type` is one of `RandomGenerator.Type` as defined below.\n//\n// options:\n// - seeds: (required, only for RandomGenerator.Type.ALEA) an array\n//   whose items will be `toString`ed and used as the seed to the Alea\n//   algorithm\nvar RandomGenerator = function (type, options) {\n  var self = this;\n  self.type = type;\n\n  if (!RandomGenerator.Type[type]) {\n    throw new Error(\"Unknown random generator type: \" + type);\n  }\n\n  if (type === RandomGenerator.Type.ALEA) {\n    if (!options.seeds) {\n      throw new Error(\"No seeds were provided for Alea PRNG\");\n    }\n    self.alea = Alea.apply(null, options.seeds);\n  }\n};\n\n// Types of PRNGs supported by the `RandomGenerator` class\nRandomGenerator.Type = {\n  // Use Node's built-in `crypto.getRandomBytes` (cryptographically\n  // secure but not seedable, runs only on the server). Reverts to\n  // `crypto.getPseudoRandomBytes` in the extremely uncommon case that\n  // there isn't enough entropy yet\n  NODE_CRYPTO: \"NODE_CRYPTO\",\n\n  // Use non-IE browser's built-in `window.crypto.getRandomValues`\n  // (cryptographically secure but not seedable, runs only in the\n  // browser).\n  BROWSER_CRYPTO: \"BROWSER_CRYPTO\",\n\n  // Use the *fast*, seedaable and not cryptographically secure\n  // Alea algorithm\n  ALEA: \"ALEA\",\n};\n\nRandomGenerator.prototype.fraction = function () {\n  var self = this;\n  if (self.type === RandomGenerator.Type.ALEA) {\n    return self.alea();\n  } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\n    var numerator = parseInt(self.hexString(8), 16);\n    return numerator * 2.3283064365386963e-10; // 2^-32\n  } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {\n    var array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0] * 2.3283064365386963e-10; // 2^-32\n  } else {\n    throw new Error('Unknown random generator type: ' + self.type);\n  }\n};\n\nRandomGenerator.prototype.hexString = function (digits) {\n  var self = this;\n  if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\n    var numBytes = Math.ceil(digits / 2);\n    var bytes;\n    // Try to get cryptographically strong randomness. Fall back to\n    // non-cryptographically strong if not available.\n    try {\n      bytes = nodeCrypto.randomBytes(numBytes);\n    } catch (e) {\n      // XXX should re-throw any error except insufficient entropy\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);\n    }\n    var result = bytes.toString(\"hex\");\n    // If the number of digits is odd, we'll have generated an extra 4 bits\n    // of randomness, so we need to trim the last digit.\n    return result.substring(0, digits);\n  } else {\n    return this._randomString(digits, \"0123456789abcdef\");\n  }\n};\n\nRandomGenerator.prototype._randomString = function (charsCount,\n                                                    alphabet) {\n  var self = this;\n  var digits = [];\n  for (var i = 0; i < charsCount; i++) {\n    digits[i] = self.choice(alphabet);\n  }\n  return digits.join(\"\");\n};\n\nRandomGenerator.prototype.id = function (charsCount) {\n  var self = this;\n  // 17 characters is around 96 bits of entropy, which is the amount of\n  // state in the Alea PRNG.\n  if (charsCount === undefined)\n    charsCount = 17;\n\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);\n};\n\nRandomGenerator.prototype.secret = function (charsCount) {\n  var self = this;\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per\n  // character.\n  if (charsCount === undefined)\n    charsCount = 43;\n  return self._randomString(charsCount, BASE64_CHARS);\n};\n\nRandomGenerator.prototype.choice = function (arrayOrString) {\n  var index = Math.floor(this.fraction() * arrayOrString.length);\n  if (typeof arrayOrString === \"string\")\n    return arrayOrString.substr(index, 1);\n  else\n    return arrayOrString[index];\n};\n\n// instantiate RNG.  Heuristically collect entropy from various sources when a\n// cryptographic PRNG isn't available.\n\n// client sources\nvar height = (typeof window !== 'undefined' && window.innerHeight) ||\n      (typeof document !== 'undefined'\n       && document.documentElement\n       && document.documentElement.clientHeight) ||\n      (typeof document !== 'undefined'\n       && document.body\n       && document.body.clientHeight) ||\n      1;\n\nvar width = (typeof window !== 'undefined' && window.innerWidth) ||\n      (typeof document !== 'undefined'\n       && document.documentElement\n       && document.documentElement.clientWidth) ||\n      (typeof document !== 'undefined'\n       && document.body\n       && document.body.clientWidth) ||\n      1;\n\nvar agent = (typeof navigator !== 'undefined' && navigator.userAgent) || \"\";\n\nfunction createAleaGeneratorWithGeneratedSeed() {\n  return new RandomGenerator(\n    RandomGenerator.Type.ALEA,\n    {seeds: [new Date, height, width, agent, Math.random()]});\n};\n\nif (Meteor.isServer) {\n  Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);\n} else {\n  if (typeof window !== \"undefined\" && window.crypto &&\n      window.crypto.getRandomValues) {\n    Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);\n  } else {\n    // On IE 10 and below, there's no browser crypto API\n    // available. Fall back to Alea\n    //\n    // XXX looks like at the moment, we use Alea in IE 11 as well,\n    // which has `window.msCrypto` instead of `window.crypto`.\n    Random = createAleaGeneratorWithGeneratedSeed();\n  }\n}\n\n// Create a non-cryptographically secure PRNG with a given seed (using\n// the Alea algorithm)\nRandom.createWithSeeds = function (...seeds) {\n  if (seeds.length === 0) {\n    throw new Error(\"No seeds were provided\");\n  }\n  return new RandomGenerator(RandomGenerator.Type.ALEA, {seeds: seeds});\n};\n\n// Used like `Random`, but much faster and not cryptographically\n// secure\nRandom.insecure = createAleaGeneratorWithGeneratedSeed();\n","// Before this package existed, we used to use this Meteor.uuid()\n// implementing the RFC 4122 v4 UUID. It is no longer documented\n// and will go away.\n// XXX COMPAT WITH 0.5.6\nMeteor.uuid = function () {\n  var HEX_DIGITS = \"0123456789abcdef\";\n  var s = [];\n  for (var i = 0; i < 36; i++) {\n    s[i] = Random.choice(HEX_DIGITS);\n  }\n  s[14] = \"4\";\n  s[19] = HEX_DIGITS.substr((parseInt(s[19],16) & 0x3) | 0x8, 1);\n  s[8] = s[13] = s[18] = s[23] = \"-\";\n\n  var uuid = s.join(\"\");\n  return uuid;\n};\n"]}}]