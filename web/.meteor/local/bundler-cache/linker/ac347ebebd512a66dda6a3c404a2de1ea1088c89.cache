[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar Base64;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/base64/base64.js                                                            //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// Base 64 encoding                                                                     // 1\n                                                                                        // 2\nvar BASE_64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n                                                                                        // 4\nvar BASE_64_VALS = {};                                                                  // 5\n                                                                                        // 6\nfor (var i = 0; i < BASE_64_CHARS.length; i++) {                                        // 7\n  BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i;                                            // 8\n};                                                                                      // 9\n                                                                                        // 10\nBase64 = {};                                                                            // 11\n                                                                                        // 12\nBase64.encode = function (array) {                                                      // 13\n                                                                                        // 14\n  if (typeof array === \"string\") {                                                      // 15\n    var str = array;                                                                    // 16\n    array = Base64.newBinary(str.length);                                               // 17\n    for (var i = 0; i < str.length; i++) {                                              // 18\n      var ch = str.charCodeAt(i);                                                       // 19\n      if (ch > 0xFF) {                                                                  // 20\n        throw new Error(                                                                // 21\n          \"Not ascii. Base64.encode can only take ascii strings.\");                     // 22\n      }                                                                                 // 23\n      array[i] = ch;                                                                    // 24\n    }                                                                                   // 25\n  }                                                                                     // 26\n                                                                                        // 27\n  var answer = [];                                                                      // 28\n  var a = null;                                                                         // 29\n  var b = null;                                                                         // 30\n  var c = null;                                                                         // 31\n  var d = null;                                                                         // 32\n  for (var i = 0; i < array.length; i++) {                                              // 33\n    switch (i % 3) {                                                                    // 34\n    case 0:                                                                             // 35\n      a = (array[i] >> 2) & 0x3F;                                                       // 36\n      b = (array[i] & 0x03) << 4;                                                       // 37\n      break;                                                                            // 38\n    case 1:                                                                             // 39\n      b = b | (array[i] >> 4) & 0xF;                                                    // 40\n      c = (array[i] & 0xF) << 2;                                                        // 41\n      break;                                                                            // 42\n    case 2:                                                                             // 43\n      c = c | (array[i] >> 6) & 0x03;                                                   // 44\n      d = array[i] & 0x3F;                                                              // 45\n      answer.push(getChar(a));                                                          // 46\n      answer.push(getChar(b));                                                          // 47\n      answer.push(getChar(c));                                                          // 48\n      answer.push(getChar(d));                                                          // 49\n      a = null;                                                                         // 50\n      b = null;                                                                         // 51\n      c = null;                                                                         // 52\n      d = null;                                                                         // 53\n      break;                                                                            // 54\n    }                                                                                   // 55\n  }                                                                                     // 56\n  if (a != null) {                                                                      // 57\n    answer.push(getChar(a));                                                            // 58\n    answer.push(getChar(b));                                                            // 59\n    if (c == null)                                                                      // 60\n      answer.push('=');                                                                 // 61\n    else                                                                                // 62\n      answer.push(getChar(c));                                                          // 63\n    if (d == null)                                                                      // 64\n      answer.push('=');                                                                 // 65\n  }                                                                                     // 66\n  return answer.join(\"\");                                                               // 67\n};                                                                                      // 68\n                                                                                        // 69\nvar getChar = function (val) {                                                          // 70\n  return BASE_64_CHARS.charAt(val);                                                     // 71\n};                                                                                      // 72\n                                                                                        // 73\nvar getVal = function (ch) {                                                            // 74\n  if (ch === '=') {                                                                     // 75\n    return -1;                                                                          // 76\n  }                                                                                     // 77\n  return BASE_64_VALS[ch];                                                              // 78\n};                                                                                      // 79\n                                                                                        // 80\n// XXX This is a weird place for this to live, but it's used both by                    // 81\n// this package and 'ejson', and we can't put it in 'ejson' without                     // 82\n// introducing a circular dependency. It should probably be in its own                  // 83\n// package or as a helper in a package that both 'base64' and 'ejson'                   // 84\n// use.                                                                                 // 85\nBase64.newBinary = function (len) {                                                     // 86\n  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {        // 87\n    var ret = [];                                                                       // 88\n    for (var i = 0; i < len; i++) {                                                     // 89\n      ret.push(0);                                                                      // 90\n    }                                                                                   // 91\n    ret.$Uint8ArrayPolyfill = true;                                                     // 92\n    return ret;                                                                         // 93\n  }                                                                                     // 94\n  return new Uint8Array(new ArrayBuffer(len));                                          // 95\n};                                                                                      // 96\n                                                                                        // 97\nBase64.decode = function (str) {                                                        // 98\n  var len = Math.floor((str.length*3)/4);                                               // 99\n  if (str.charAt(str.length - 1) == '=') {                                              // 100\n    len--;                                                                              // 101\n    if (str.charAt(str.length - 2) == '=')                                              // 102\n      len--;                                                                            // 103\n  }                                                                                     // 104\n  var arr = Base64.newBinary(len);                                                      // 105\n                                                                                        // 106\n  var one = null;                                                                       // 107\n  var two = null;                                                                       // 108\n  var three = null;                                                                     // 109\n                                                                                        // 110\n  var j = 0;                                                                            // 111\n                                                                                        // 112\n  for (var i = 0; i < str.length; i++) {                                                // 113\n    var c = str.charAt(i);                                                              // 114\n    var v = getVal(c);                                                                  // 115\n    switch (i % 4) {                                                                    // 116\n    case 0:                                                                             // 117\n      if (v < 0)                                                                        // 118\n        throw new Error('invalid base64 string');                                       // 119\n      one = v << 2;                                                                     // 120\n      break;                                                                            // 121\n    case 1:                                                                             // 122\n      if (v < 0)                                                                        // 123\n        throw new Error('invalid base64 string');                                       // 124\n      one = one | (v >> 4);                                                             // 125\n      arr[j++] = one;                                                                   // 126\n      two = (v & 0x0F) << 4;                                                            // 127\n      break;                                                                            // 128\n    case 2:                                                                             // 129\n      if (v >= 0) {                                                                     // 130\n        two = two | (v >> 2);                                                           // 131\n        arr[j++] = two;                                                                 // 132\n        three = (v & 0x03) << 6;                                                        // 133\n      }                                                                                 // 134\n      break;                                                                            // 135\n    case 3:                                                                             // 136\n      if (v >= 0) {                                                                     // 137\n        arr[j++] = three | v;                                                           // 138\n      }                                                                                 // 139\n      break;                                                                            // 140\n    }                                                                                   // 141\n  }                                                                                     // 142\n  return arr;                                                                           // 143\n};                                                                                      // 144\n                                                                                        // 145\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.base64 = {\n  Base64: Base64\n};\n\n})();\n","servePath":"/packages/base64.js","sourceMap":{"version":3,"sources":["/packages/base64/base64.js"],"names":[],"mappingsfile":"/packages/base64.js","sourcesContent":["// Base 64 encoding\n\nvar BASE_64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nvar BASE_64_VALS = {};\n\nfor (var i = 0; i < BASE_64_CHARS.length; i++) {\n  BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i;\n};\n\nBase64 = {};\n\nBase64.encode = function (array) {\n\n  if (typeof array === \"string\") {\n    var str = array;\n    array = Base64.newBinary(str.length);\n    for (var i = 0; i < str.length; i++) {\n      var ch = str.charCodeAt(i);\n      if (ch > 0xFF) {\n        throw new Error(\n          \"Not ascii. Base64.encode can only take ascii strings.\");\n      }\n      array[i] = ch;\n    }\n  }\n\n  var answer = [];\n  var a = null;\n  var b = null;\n  var c = null;\n  var d = null;\n  for (var i = 0; i < array.length; i++) {\n    switch (i % 3) {\n    case 0:\n      a = (array[i] >> 2) & 0x3F;\n      b = (array[i] & 0x03) << 4;\n      break;\n    case 1:\n      b = b | (array[i] >> 4) & 0xF;\n      c = (array[i] & 0xF) << 2;\n      break;\n    case 2:\n      c = c | (array[i] >> 6) & 0x03;\n      d = array[i] & 0x3F;\n      answer.push(getChar(a));\n      answer.push(getChar(b));\n      answer.push(getChar(c));\n      answer.push(getChar(d));\n      a = null;\n      b = null;\n      c = null;\n      d = null;\n      break;\n    }\n  }\n  if (a != null) {\n    answer.push(getChar(a));\n    answer.push(getChar(b));\n    if (c == null)\n      answer.push('=');\n    else\n      answer.push(getChar(c));\n    if (d == null)\n      answer.push('=');\n  }\n  return answer.join(\"\");\n};\n\nvar getChar = function (val) {\n  return BASE_64_CHARS.charAt(val);\n};\n\nvar getVal = function (ch) {\n  if (ch === '=') {\n    return -1;\n  }\n  return BASE_64_VALS[ch];\n};\n\n// XXX This is a weird place for this to live, but it's used both by\n// this package and 'ejson', and we can't put it in 'ejson' without\n// introducing a circular dependency. It should probably be in its own\n// package or as a helper in a package that both 'base64' and 'ejson'\n// use.\nBase64.newBinary = function (len) {\n  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {\n    var ret = [];\n    for (var i = 0; i < len; i++) {\n      ret.push(0);\n    }\n    ret.$Uint8ArrayPolyfill = true;\n    return ret;\n  }\n  return new Uint8Array(new ArrayBuffer(len));\n};\n\nBase64.decode = function (str) {\n  var len = Math.floor((str.length*3)/4);\n  if (str.charAt(str.length - 1) == '=') {\n    len--;\n    if (str.charAt(str.length - 2) == '=')\n      len--;\n  }\n  var arr = Base64.newBinary(len);\n\n  var one = null;\n  var two = null;\n  var three = null;\n\n  var j = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charAt(i);\n    var v = getVal(c);\n    switch (i % 4) {\n    case 0:\n      if (v < 0)\n        throw new Error('invalid base64 string');\n      one = v << 2;\n      break;\n    case 1:\n      if (v < 0)\n        throw new Error('invalid base64 string');\n      one = one | (v >> 4);\n      arr[j++] = one;\n      two = (v & 0x0F) << 4;\n      break;\n    case 2:\n      if (v >= 0) {\n        two = two | (v >> 2);\n        arr[j++] = two;\n        three = (v & 0x03) << 6;\n      }\n      break;\n    case 3:\n      if (v >= 0) {\n        arr[j++] = three | v;\n      }\n      break;\n    }\n  }\n  return arr;\n};\n"]}}]