[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar EJSON = Package.ejson.EJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar Random = Package.random.Random;\n\n/* Package-scope variables */\nvar MongoID;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/mongo-id/id.js                                                                            //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nMongoID = {};                                                                                         // 1\n                                                                                                      // 2\nMongoID._looksLikeObjectID = function (str) {                                                         // 3\n  return str.length === 24 && str.match(/^[0-9a-f]*$/);                                               // 4\n};                                                                                                    // 5\n                                                                                                      // 6\nMongoID.ObjectID = function (hexString) {                                                             // 7\n  //random-based impl of Mongo ObjectID                                                               // 8\n  var self = this;                                                                                    // 9\n  if (hexString) {                                                                                    // 10\n    hexString = hexString.toLowerCase();                                                              // 11\n    if (!MongoID._looksLikeObjectID(hexString)) {                                                     // 12\n      throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");                         // 13\n    }                                                                                                 // 14\n    // meant to work with _.isEqual(), which relies on structural equality                            // 15\n    self._str = hexString;                                                                            // 16\n  } else {                                                                                            // 17\n    self._str = Random.hexString(24);                                                                 // 18\n  }                                                                                                   // 19\n};                                                                                                    // 20\n                                                                                                      // 21\nMongoID.ObjectID.prototype.toString = function () {                                                   // 22\n  var self = this;                                                                                    // 23\n  return \"ObjectID(\\\"\" + self._str + \"\\\")\";                                                           // 24\n};                                                                                                    // 25\n                                                                                                      // 26\nMongoID.ObjectID.prototype.equals = function (other) {                                                // 27\n  var self = this;                                                                                    // 28\n  return other instanceof MongoID.ObjectID &&                                                         // 29\n    self.valueOf() === other.valueOf();                                                               // 30\n};                                                                                                    // 31\n                                                                                                      // 32\nMongoID.ObjectID.prototype.clone = function () {                                                      // 33\n  var self = this;                                                                                    // 34\n  return new MongoID.ObjectID(self._str);                                                             // 35\n};                                                                                                    // 36\n                                                                                                      // 37\nMongoID.ObjectID.prototype.typeName = function() {                                                    // 38\n  return \"oid\";                                                                                       // 39\n};                                                                                                    // 40\n                                                                                                      // 41\nMongoID.ObjectID.prototype.getTimestamp = function() {                                                // 42\n  var self = this;                                                                                    // 43\n  return parseInt(self._str.substr(0, 8), 16);                                                        // 44\n};                                                                                                    // 45\n                                                                                                      // 46\nMongoID.ObjectID.prototype.valueOf =                                                                  // 47\n    MongoID.ObjectID.prototype.toJSONValue =                                                          // 48\n    MongoID.ObjectID.prototype.toHexString =                                                          // 49\n    function () { return this._str; };                                                                // 50\n                                                                                                      // 51\nEJSON.addType(\"oid\",  function (str) {                                                                // 52\n  return new MongoID.ObjectID(str);                                                                   // 53\n});                                                                                                   // 54\n                                                                                                      // 55\nMongoID.idStringify = function (id) {                                                                 // 56\n  if (id instanceof MongoID.ObjectID) {                                                               // 57\n    return id.valueOf();                                                                              // 58\n  } else if (typeof id === 'string') {                                                                // 59\n    if (id === \"\") {                                                                                  // 60\n      return id;                                                                                      // 61\n    } else if (id.substr(0, 1) === \"-\" || // escape previously dashed strings                         // 62\n               id.substr(0, 1) === \"~\" || // escape escaped numbers, true, false                      // 63\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings                     // 64\n               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later\n      return \"-\" + id;                                                                                // 66\n    } else {                                                                                          // 67\n      return id; // other strings go through unchanged.                                               // 68\n    }                                                                                                 // 69\n  } else if (id === undefined) {                                                                      // 70\n    return '-';                                                                                       // 71\n  } else if (typeof id === 'object' && id !== null) {                                                 // 72\n    throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");          // 73\n  } else { // Numbers, true, false, null                                                              // 74\n    return \"~\" + JSON.stringify(id);                                                                  // 75\n  }                                                                                                   // 76\n};                                                                                                    // 77\n                                                                                                      // 78\n                                                                                                      // 79\nMongoID.idParse = function (id) {                                                                     // 80\n  if (id === \"\") {                                                                                    // 81\n    return id;                                                                                        // 82\n  } else if (id === '-') {                                                                            // 83\n    return undefined;                                                                                 // 84\n  } else if (id.substr(0, 1) === '-') {                                                               // 85\n    return id.substr(1);                                                                              // 86\n  } else if (id.substr(0, 1) === '~') {                                                               // 87\n    return JSON.parse(id.substr(1));                                                                  // 88\n  } else if (MongoID._looksLikeObjectID(id)) {                                                        // 89\n    return new MongoID.ObjectID(id);                                                                  // 90\n  } else {                                                                                            // 91\n    return id;                                                                                        // 92\n  }                                                                                                   // 93\n};                                                                                                    // 94\n                                                                                                      // 95\n                                                                                                      // 96\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mongo-id'] = {\n  MongoID: MongoID\n};\n\n})();\n","servePath":"/packages/mongo-id.js","sourceMap":{"version":3,"sources":["/packages/mongo-id/id.js"],"names":[],"mappingsfile":"/packages/mongo-id.js","sourcesContent":["MongoID = {};\n\nMongoID._looksLikeObjectID = function (str) {\n  return str.length === 24 && str.match(/^[0-9a-f]*$/);\n};\n\nMongoID.ObjectID = function (hexString) {\n  //random-based impl of Mongo ObjectID\n  var self = this;\n  if (hexString) {\n    hexString = hexString.toLowerCase();\n    if (!MongoID._looksLikeObjectID(hexString)) {\n      throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");\n    }\n    // meant to work with _.isEqual(), which relies on structural equality\n    self._str = hexString;\n  } else {\n    self._str = Random.hexString(24);\n  }\n};\n\nMongoID.ObjectID.prototype.toString = function () {\n  var self = this;\n  return \"ObjectID(\\\"\" + self._str + \"\\\")\";\n};\n\nMongoID.ObjectID.prototype.equals = function (other) {\n  var self = this;\n  return other instanceof MongoID.ObjectID &&\n    self.valueOf() === other.valueOf();\n};\n\nMongoID.ObjectID.prototype.clone = function () {\n  var self = this;\n  return new MongoID.ObjectID(self._str);\n};\n\nMongoID.ObjectID.prototype.typeName = function() {\n  return \"oid\";\n};\n\nMongoID.ObjectID.prototype.getTimestamp = function() {\n  var self = this;\n  return parseInt(self._str.substr(0, 8), 16);\n};\n\nMongoID.ObjectID.prototype.valueOf =\n    MongoID.ObjectID.prototype.toJSONValue =\n    MongoID.ObjectID.prototype.toHexString =\n    function () { return this._str; };\n\nEJSON.addType(\"oid\",  function (str) {\n  return new MongoID.ObjectID(str);\n});\n\nMongoID.idStringify = function (id) {\n  if (id instanceof MongoID.ObjectID) {\n    return id.valueOf();\n  } else if (typeof id === 'string') {\n    if (id === \"\") {\n      return id;\n    } else if (id.substr(0, 1) === \"-\" || // escape previously dashed strings\n               id.substr(0, 1) === \"~\" || // escape escaped numbers, true, false\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings\n               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later\n      return \"-\" + id;\n    } else {\n      return id; // other strings go through unchanged.\n    }\n  } else if (id === undefined) {\n    return '-';\n  } else if (typeof id === 'object' && id !== null) {\n    throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");\n  } else { // Numbers, true, false, null\n    return \"~\" + JSON.stringify(id);\n  }\n};\n\n\nMongoID.idParse = function (id) {\n  if (id === \"\") {\n    return id;\n  } else if (id === '-') {\n    return undefined;\n  } else if (id.substr(0, 1) === '-') {\n    return id.substr(1);\n  } else if (id.substr(0, 1) === '~') {\n    return JSON.parse(id.substr(1));\n  } else if (MongoID._looksLikeObjectID(id)) {\n    return new MongoID.ObjectID(id);\n  } else {\n    return id;\n  }\n};\n\n"]}}]