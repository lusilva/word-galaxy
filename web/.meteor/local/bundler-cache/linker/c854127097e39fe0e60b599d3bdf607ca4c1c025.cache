[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar Hook = Package['callback-hook'].Hook;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar AccountsCommon, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS, AccountsServer, Accounts, AccountsTest;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-base/accounts_common.js                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n/**                                                                                                                //\n * @summary Super-constructor for AccountsClient and AccountsServer.                                               //\n * @locus Anywhere                                                                                                 //\n * @class AccountsCommon                                                                                           //\n * @instancename accountsClientOrServer                                                                            //\n * @param options {Object} an object with fields:                                                                  //\n * - connection {Object} Optional DDP connection to reuse.                                                         //\n * - ddpUrl {String} Optional URL for creating a new DDP connection.                                               //\n */                                                                                                                //\nAccountsCommon = (function () {                                                                                    // 10\n  function AccountsCommon(options) {                                                                               // 11\n    babelHelpers.classCallCheck(this, AccountsCommon);                                                             //\n                                                                                                                   //\n    // Currently this is read directly by packages like accounts-password                                          //\n    // and accounts-ui-unstyled.                                                                                   //\n    this._options = {};                                                                                            // 14\n                                                                                                                   //\n    // Note that setting this.connection = null causes this.users to be a                                          //\n    // LocalCollection, which is not what we want.                                                                 //\n    this.connection = undefined;                                                                                   // 18\n    this._initConnection(options || {});                                                                           // 19\n                                                                                                                   //\n    // There is an allow call in accounts_server.js that restricts writes to                                       //\n    // this collection.                                                                                            //\n    this.users = new Mongo.Collection(\"users\", {                                                                   // 23\n      _preventAutopublish: true,                                                                                   // 24\n      connection: this.connection                                                                                  // 25\n    });                                                                                                            //\n                                                                                                                   //\n    // Callback exceptions are printed with Meteor._debug and ignored.                                             //\n    this._onLoginHook = new Hook({                                                                                 // 29\n      bindEnvironment: false,                                                                                      // 30\n      debugPrintExceptions: \"onLogin callback\"                                                                     // 31\n    });                                                                                                            //\n                                                                                                                   //\n    this._onLoginFailureHook = new Hook({                                                                          // 34\n      bindEnvironment: false,                                                                                      // 35\n      debugPrintExceptions: \"onLoginFailure callback\"                                                              // 36\n    });                                                                                                            //\n  }                                                                                                                //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                  //\n   * @locus Anywhere but publish functions                                                                         //\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsCommon.prototype.userId = (function () {                                                                 // 10\n    function userId() {                                                                                            // 44\n      throw new Error(\"userId method not implemented\");                                                            // 45\n    }                                                                                                              //\n                                                                                                                   //\n    return userId;                                                                                                 //\n  })();                                                                                                            //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.              //\n   * @locus Anywhere but publish functions                                                                         //\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsCommon.prototype.user = (function () {                                                                   // 10\n    function user() {                                                                                              // 52\n      var userId = this.userId();                                                                                  // 53\n      return userId ? this.users.findOne(userId) : null;                                                           // 54\n    }                                                                                                              //\n                                                                                                                   //\n    return user;                                                                                                   //\n  })();                                                                                                            //\n                                                                                                                   //\n  // Set up config for the accounts system. Call this on both the client                                           //\n  // and the server.                                                                                               //\n  //                                                                                                               //\n  // Note that this method gets overridden on AccountsServer.prototype, but                                        //\n  // the overriding method calls the overridden method.                                                            //\n  //                                                                                                               //\n  // XXX we should add some enforcement that this is called on both the                                            //\n  // client and the server. Otherwise, a user can                                                                  //\n  // 'forbidClientAccountCreation' only on the client and while it looks                                           //\n  // like their app is secure, the server will still accept createUser                                             //\n  // calls. https://github.com/meteor/meteor/issues/828                                                            //\n  //                                                                                                               //\n  // @param options {Object} an object with fields:                                                                //\n  // - sendVerificationEmail {Boolean}                                                                             //\n  //     Send email address verification emails to new users created from                                          //\n  //     client signups.                                                                                           //\n  // - forbidClientAccountCreation {Boolean}                                                                       //\n  //     Do not allow clients to create accounts directly.                                                         //\n  // - restrictCreationByEmailDomain {Function or String}                                                          //\n  //     Require created users to have an email matching the function or                                           //\n  //     having the string as domain.                                                                              //\n  // - loginExpirationInDays {Number}                                                                              //\n  //     Number of days since login until a user is logged out (login token                                        //\n  //     expires).                                                                                                 //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Set global accounts options.                                                                         //\n   * @locus Anywhere                                                                                               //\n   * @param {Object} options                                                                                       //\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsCommon.prototype.config = (function () {                                                                 // 10\n    function config(options) {                                                                                     // 92\n      var self = this;                                                                                             // 93\n                                                                                                                   //\n      // We don't want users to accidentally only call Accounts.config on the                                      //\n      // client, where some of the options will have partial effects (eg removing                                  //\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation                               //\n      // is set, or redirecting Google login to a specific-domain page) without                                    //\n      // having their full effects.                                                                                //\n      if (Meteor.isServer) {                                                                                       // 100\n        __meteor_runtime_config__.accountsConfigCalled = true;                                                     // 101\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {                                                //\n        // XXX would be nice to \"crash\" the client and replace the UI with an error                                //\n        // message, but there's no trivial way to do this.                                                         //\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      }                                                                                                            //\n                                                                                                                   //\n      // We need to validate the oauthSecretKey option at the time                                                 //\n      // Accounts.config is called. We also deliberately don't store the                                           //\n      // oauthSecretKey in Accounts._options.                                                                      //\n      if (_.has(options, \"oauthSecretKey\")) {                                                                      // 112\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");     // 113\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);                               // 117\n        options = _.omit(options, \"oauthSecretKey\");                                                               // 118\n      }                                                                                                            //\n                                                                                                                   //\n      // validate option keys                                                                                      //\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n      _.each(_.keys(options), function (key) {                                                                     // 124\n        if (!_.contains(VALID_KEYS, key)) {                                                                        // 125\n          throw new Error(\"Accounts.config: Invalid key: \" + key);                                                 // 126\n        }                                                                                                          //\n      });                                                                                                          //\n                                                                                                                   //\n      // set values in Accounts._options                                                                           //\n      _.each(VALID_KEYS, function (key) {                                                                          // 131\n        if (key in options) {                                                                                      // 132\n          if (key in self._options) {                                                                              // 133\n            throw new Error(\"Can't set `\" + key + \"` more than once\");                                             // 134\n          }                                                                                                        //\n          self._options[key] = options[key];                                                                       // 136\n        }                                                                                                          //\n      });                                                                                                          //\n    }                                                                                                              //\n                                                                                                                   //\n    return config;                                                                                                 //\n  })();                                                                                                            //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Register a callback to be called after a login attempt succeeds.                                     //\n   * @locus Anywhere                                                                                               //\n   * @param {Function} func The callback to be called when login is successful.                                    //\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsCommon.prototype.onLogin = (function () {                                                                // 10\n    function onLogin(func) {                                                                                       // 146\n      return this._onLoginHook.register(func);                                                                     // 147\n    }                                                                                                              //\n                                                                                                                   //\n    return onLogin;                                                                                                //\n  })();                                                                                                            //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Register a callback to be called after a login attempt fails.                                        //\n   * @locus Anywhere                                                                                               //\n   * @param {Function} func The callback to be called after the login has failed.                                  //\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsCommon.prototype.onLoginFailure = (function () {                                                         // 10\n    function onLoginFailure(func) {                                                                                // 155\n      return this._onLoginFailureHook.register(func);                                                              // 156\n    }                                                                                                              //\n                                                                                                                   //\n    return onLoginFailure;                                                                                         //\n  })();                                                                                                            //\n                                                                                                                   //\n  AccountsCommon.prototype._initConnection = (function () {                                                        // 10\n    function _initConnection(options) {                                                                            // 159\n      if (!Meteor.isClient) {                                                                                      // 160\n        return;                                                                                                    // 161\n      }                                                                                                            //\n                                                                                                                   //\n      // The connection used by the Accounts system. This is the connection                                        //\n      // that will get logged in by Meteor.login(), and this is the                                                //\n      // connection whose login state will be reflected by Meteor.userId().                                        //\n      //                                                                                                           //\n      // It would be much preferable for this to be in accounts_client.js,                                         //\n      // but it has to be here because it's needed to create the                                                   //\n      // Meteor.users collection.                                                                                  //\n                                                                                                                   //\n      if (options.connection) {                                                                                    // 172\n        this.connection = options.connection;                                                                      // 173\n      } else if (options.ddpUrl) {                                                                                 //\n        this.connection = DDP.connect(options.ddpUrl);                                                             // 175\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client                                        //\n        // to a different authentication server. This is for a very                                                //\n        // particular use case that comes up when implementing a oauth                                             //\n        // server. Unsupported and may go away at any point in time.                                               //\n        //                                                                                                         //\n        // We will eventually provide a general way to use account-base                                            //\n        // against any DDP connection, not just one special one.                                                   //\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);                          // 185\n      } else {                                                                                                     //\n        this.connection = Meteor.connection;                                                                       // 188\n      }                                                                                                            //\n    }                                                                                                              //\n                                                                                                                   //\n    return _initConnection;                                                                                        //\n  })();                                                                                                            //\n                                                                                                                   //\n  AccountsCommon.prototype._getTokenLifetimeMs = (function () {                                                    // 10\n    function _getTokenLifetimeMs() {                                                                               // 192\n      return (this._options.loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;         // 193\n    }                                                                                                              //\n                                                                                                                   //\n    return _getTokenLifetimeMs;                                                                                    //\n  })();                                                                                                            //\n                                                                                                                   //\n  AccountsCommon.prototype._tokenExpiration = (function () {                                                       // 10\n    function _tokenExpiration(when) {                                                                              // 197\n      // We pass when through the Date constructor for backwards compatibility;                                    //\n      // `when` used to be a number.                                                                               //\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());                                      // 200\n    }                                                                                                              //\n                                                                                                                   //\n    return _tokenExpiration;                                                                                       //\n  })();                                                                                                            //\n                                                                                                                   //\n  AccountsCommon.prototype._tokenExpiresSoon = (function () {                                                      // 10\n    function _tokenExpiresSoon(when) {                                                                             // 203\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();                                                         // 204\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;                                                   // 205\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;                                      // 206\n      return new Date() > new Date(when) - minLifetimeMs;                                                          // 208\n    }                                                                                                              //\n                                                                                                                   //\n    return _tokenExpiresSoon;                                                                                      //\n  })();                                                                                                            //\n                                                                                                                   //\n  return AccountsCommon;                                                                                           //\n})();                                                                                                              //\n                                                                                                                   //\nvar Ap = AccountsCommon.prototype;                                                                                 // 212\n                                                                                                                   //\n// Note that Accounts is defined separately in accounts_client.js and                                              //\n// accounts_server.js.                                                                                             //\n                                                                                                                   //\n/**                                                                                                                //\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                    //\n * @locus Anywhere but publish functions                                                                           //\n */                                                                                                                //\nMeteor.userId = function () {                                                                                      // 221\n  return Accounts.userId();                                                                                        // 222\n};                                                                                                                 //\n                                                                                                                   //\n/**                                                                                                                //\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                //\n * @locus Anywhere but publish functions                                                                           //\n */                                                                                                                //\nMeteor.user = function () {                                                                                        // 229\n  return Accounts.user();                                                                                          // 230\n};                                                                                                                 //\n                                                                                                                   //\n// how long (in days) until a login token expires                                                                  //\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;                                                                            // 234\n// Clients don't try to auto-login with a token that is going to expire within                                     //\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.                                      //\n// Tries to avoid abrupt disconnects from expiring tokens.                                                         //\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour                                                                // 238\n// how often (in milliseconds) we check for expired tokens                                                         //\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes                                                              // 240\n// how long we wait before logging out clients when Meteor.logoutOtherClients is                                   //\n// called                                                                                                          //\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;                                                                             // 243\n                                                                                                                   //\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility                            //\nMeteor.startup(function () {                                                                                       // 246\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                                // 247\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;                                              // 249\n  Ap.ConfigError = ServiceConfiguration.ConfigError;                                                               // 250\n});                                                                                                                //\n                                                                                                                   //\n// Thrown when the user cancels the login process (eg, closes an oauth                                             //\n// popup, declines retina scan, etc)                                                                               //\nvar lceName = 'Accounts.LoginCancelledError';                                                                      // 255\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {                                    // 256\n  this.message = description;                                                                                      // 259\n});                                                                                                                //\nAp.LoginCancelledError.prototype.name = lceName;                                                                   // 262\n                                                                                                                   //\n// This is used to transmit specific subclass errors over the wire. We should                                      //\n// come up with a more generic way to do this (eg, with some sort of symbolic                                      //\n// error code rather than a number).                                                                               //\nAp.LoginCancelledError.numericError = 0x8acdc2f;                                                                   // 267\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-base/accounts_server.js                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar crypto = Npm.require('crypto');                                                                                // 1\n                                                                                                                   //\n/**                                                                                                                //\n * @summary Constructor for the `Accounts` namespace on the server.                                                //\n * @locus Server                                                                                                   //\n * @class                                                                                                          //\n * @extends AccountsCommon                                                                                         //\n * @instancename accountsServer                                                                                    //\n * @param {Object} server A server object such as `Meteor.server`.                                                 //\n */                                                                                                                //\nAccountsServer = (function (_AccountsCommon) {                                                                     // 11\n  babelHelpers.inherits(AccountsServer, _AccountsCommon);                                                          //\n                                                                                                                   //\n  // Note that this constructor is less likely to be instantiated multiple                                         //\n  // times than the `AccountsClient` constructor, because a single server                                          //\n  // can provide only one set of methods.                                                                          //\n                                                                                                                   //\n  function AccountsServer(server) {                                                                                // 15\n    babelHelpers.classCallCheck(this, AccountsServer);                                                             //\n                                                                                                                   //\n    _AccountsCommon.call(this);                                                                                    // 16\n                                                                                                                   //\n    this._server = server || Meteor.server;                                                                        // 18\n    // Set up the server's methods, as if by calling Meteor.methods.                                               //\n    this._initServerMethods();                                                                                     // 20\n                                                                                                                   //\n    this._initAccountDataHooks();                                                                                  // 22\n                                                                                                                   //\n    // If autopublish is on, publish these user fields. Login service                                              //\n    // packages (eg accounts-google) add to these by calling                                                       //\n    // addAutopublishFields.  Notably, this isn't implemented with multiple                                        //\n    // publishes since DDP only merges only across top-level fields, not                                           //\n    // subfields (such as 'services.facebook.accessToken')                                                         //\n    this._autopublishFields = {                                                                                    // 29\n      loggedInUser: ['profile', 'username', 'emails'],                                                             // 30\n      otherUsers: ['profile', 'username']                                                                          // 31\n    };                                                                                                             //\n    this._initServerPublications();                                                                                // 33\n                                                                                                                   //\n    // connectionId -> {connection, loginToken}                                                                    //\n    this._accountData = {};                                                                                        // 36\n                                                                                                                   //\n    // connection id -> observe handle for the login token that this connection is                                 //\n    // currently associated with, or a number. The number indicates that we are in                                 //\n    // the process of setting up the observe (using a number instead of a single                                   //\n    // sentinel allows multiple attempts to set up the observe to identify which                                   //\n    // one was theirs).                                                                                            //\n    this._userObservesForConnections = {};                                                                         // 43\n    this._nextUserObserveNumber = 1; // for the number described above.                                            // 44\n                                                                                                                   //\n    // list of all registered handlers.                                                                            //\n    this._loginHandlers = [];                                                                                      // 47\n                                                                                                                   //\n    setupUsersCollection(this.users);                                                                              // 49\n    setupDefaultLoginHandlers(this);                                                                               // 50\n    setExpireTokensInterval(this);                                                                                 // 51\n                                                                                                                   //\n    this._validateLoginHook = new Hook({ bindEnvironment: false });                                                // 53\n    this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];                                          // 54\n                                                                                                                   //\n    this._deleteSavedTokensForAllUsersOnStartup();                                                                 // 58\n                                                                                                                   //\n    this._skipCaseInsensitiveChecksForTest = {};                                                                   // 60\n  }                                                                                                                //\n                                                                                                                   //\n  ///                                                                                                              //\n  /// CURRENT USER                                                                                                 //\n  ///                                                                                                              //\n                                                                                                                   //\n  // @override of \"abstract\" non-implementation in accounts_common.js                                              //\n                                                                                                                   //\n  AccountsServer.prototype.userId = (function () {                                                                 // 11\n    function userId() {                                                                                            // 68\n      // This function only works if called inside a method. In theory, it                                         //\n      // could also be called from publish statements, since they also                                             //\n      // have a userId associated with them. However, given that publish                                           //\n      // functions aren't reactive, using any of the infomation from                                               //\n      // Meteor.user() in a publish function will always use the value                                             //\n      // from when the function first runs. This is likely not what the                                            //\n      // user expects. The way to make this work in a publish is to do                                             //\n      // Meteor.find(this.userId).observe and recompute when the user                                              //\n      // record changes.                                                                                           //\n      var currentInvocation = DDP._CurrentInvocation.get();                                                        // 78\n      if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls. Use this.userId in publish functions.\");\n      return currentInvocation.userId;                                                                             // 81\n    }                                                                                                              //\n                                                                                                                   //\n    return userId;                                                                                                 //\n  })();                                                                                                            //\n                                                                                                                   //\n  ///                                                                                                              //\n  /// LOGIN HOOKS                                                                                                  //\n  ///                                                                                                              //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Validate login attempts.                                                                             //\n   * @locus Server                                                                                                 //\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsServer.prototype.validateLoginAttempt = (function () {                                                   // 11\n    function validateLoginAttempt(func) {                                                                          // 93\n      // Exceptions inside the hook callback are passed up to us.                                                  //\n      return this._validateLoginHook.register(func);                                                               // 95\n    }                                                                                                              //\n                                                                                                                   //\n    return validateLoginAttempt;                                                                                   //\n  })();                                                                                                            //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Set restrictions on new user creation.                                                               //\n   * @locus Server                                                                                                 //\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsServer.prototype.validateNewUser = (function () {                                                        // 11\n    function validateNewUser(func) {                                                                               // 103\n      this._validateNewUserHooks.push(func);                                                                       // 104\n    }                                                                                                              //\n                                                                                                                   //\n    return validateNewUser;                                                                                        //\n  })();                                                                                                            //\n                                                                                                                   //\n  ///                                                                                                              //\n  /// CREATE USER HOOKS                                                                                            //\n  ///                                                                                                              //\n                                                                                                                   //\n  /**                                                                                                              //\n   * @summary Customize new user creation.                                                                         //\n   * @locus Server                                                                                                 //\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */                                                                                                              //\n                                                                                                                   //\n  AccountsServer.prototype.onCreateUser = (function () {                                                           // 11\n    function onCreateUser(func) {                                                                                  // 116\n      if (this._onCreateUserHook) {                                                                                // 117\n        throw new Error(\"Can only call onCreateUser once\");                                                        // 118\n      }                                                                                                            //\n                                                                                                                   //\n      this._onCreateUserHook = func;                                                                               // 121\n    }                                                                                                              //\n                                                                                                                   //\n    return onCreateUser;                                                                                           //\n  })();                                                                                                            //\n                                                                                                                   //\n  return AccountsServer;                                                                                           //\n})(AccountsCommon);                                                                                                //\n                                                                                                                   //\nvar Ap = AccountsServer.prototype;                                                                                 // 125\n                                                                                                                   //\n// Give each login hook callback a fresh cloned copy of the attempt                                                //\n// object, but don't clone the connection.                                                                         //\n//                                                                                                                 //\nfunction cloneAttemptWithConnection(connection, attempt) {                                                         // 130\n  var clonedAttempt = EJSON.clone(attempt);                                                                        // 131\n  clonedAttempt.connection = connection;                                                                           // 132\n  return clonedAttempt;                                                                                            // 133\n}                                                                                                                  //\n                                                                                                                   //\nAp._validateLogin = function (connection, attempt) {                                                               // 136\n  this._validateLoginHook.each(function (callback) {                                                               // 137\n    var ret;                                                                                                       // 138\n    try {                                                                                                          // 139\n      ret = callback(cloneAttemptWithConnection(connection, attempt));                                             // 140\n    } catch (e) {                                                                                                  //\n      attempt.allowed = false;                                                                                     // 143\n      // XXX this means the last thrown error overrides previous error                                             //\n      // messages. Maybe this is surprising to users and we should make                                            //\n      // overriding errors more explicit. (see                                                                     //\n      // https://github.com/meteor/meteor/issues/1960)                                                             //\n      attempt.error = e;                                                                                           // 148\n      return true;                                                                                                 // 149\n    }                                                                                                              //\n    if (!ret) {                                                                                                    // 151\n      attempt.allowed = false;                                                                                     // 152\n      // don't override a specific error provided by a previous                                                    //\n      // validator or the initial attempt (eg \"incorrect password\").                                               //\n      if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");                                // 155\n    }                                                                                                              //\n    return true;                                                                                                   // 158\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\nAp._successfulLogin = function (connection, attempt) {                                                             // 163\n  this._onLoginHook.each(function (callback) {                                                                     // 164\n    callback(cloneAttemptWithConnection(connection, attempt));                                                     // 165\n    return true;                                                                                                   // 166\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\nAp._failedLogin = function (connection, attempt) {                                                                 // 170\n  this._onLoginFailureHook.each(function (callback) {                                                              // 171\n    callback(cloneAttemptWithConnection(connection, attempt));                                                     // 172\n    return true;                                                                                                   // 173\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\n///                                                                                                                //\n/// LOGIN METHODS                                                                                                  //\n///                                                                                                                //\n                                                                                                                   //\n// Login methods return to the client an object containing these                                                   //\n// fields when the user was logged in successfully:                                                                //\n//                                                                                                                 //\n//   id: userId                                                                                                    //\n//   token: *                                                                                                      //\n//   tokenExpires: *                                                                                               //\n//                                                                                                                 //\n// tokenExpires is optional and intends to provide a hint to the                                                   //\n// client as to when the token will expire. If not provided, the                                                   //\n// client will call Accounts._tokenExpiration, passing it the date                                                 //\n// that it received the token.                                                                                     //\n//                                                                                                                 //\n// The login method will throw an error back to the client if the user                                             //\n// failed to log in.                                                                                               //\n//                                                                                                                 //\n//                                                                                                                 //\n// Login handlers and service specific login methods such as                                                       //\n// `createUser` internally return a `result` object containing these                                               //\n// fields:                                                                                                         //\n//                                                                                                                 //\n//   type:                                                                                                         //\n//     optional string; the service name, overrides the handler                                                    //\n//     default if present.                                                                                         //\n//                                                                                                                 //\n//   error:                                                                                                        //\n//     exception; if the user is not allowed to login, the reason why.                                             //\n//                                                                                                                 //\n//   userId:                                                                                                       //\n//     string; the user id of the user attempting to login (if                                                     //\n//     known), required for an allowed login.                                                                      //\n//                                                                                                                 //\n//   options:                                                                                                      //\n//     optional object merged into the result returned by the login                                                //\n//     method; used by HAMK from SRP.                                                                              //\n//                                                                                                                 //\n//   stampedLoginToken:                                                                                            //\n//     optional object with `token` and `when` indicating the login                                                //\n//     token is already present in the database, returned by the                                                   //\n//     \"resume\" login handler.                                                                                     //\n//                                                                                                                 //\n// For convenience, login methods can also throw an exception, which                                               //\n// is converted into an {error} result.  However, if the id of the                                                 //\n// user attempting the login is known, a {userId, error} result should                                             //\n// be returned instead since the user id is not captured when an                                                   //\n// exception is thrown.                                                                                            //\n//                                                                                                                 //\n// This internal `result` object is automatically converted into the                                               //\n// public {id, token, tokenExpires} object returned to the client.                                                 //\n                                                                                                                   //\n// Try a login method, converting thrown exceptions into an {error}                                                //\n// result.  The `type` argument is a default, inserted into the result                                             //\n// object if not explicitly returned.                                                                              //\n//                                                                                                                 //\nvar tryLoginMethod = function (type, fn) {                                                                         // 236\n  var result;                                                                                                      // 237\n  try {                                                                                                            // 238\n    result = fn();                                                                                                 // 239\n  } catch (e) {                                                                                                    //\n    result = { error: e };                                                                                         // 242\n  }                                                                                                                //\n                                                                                                                   //\n  if (result && !result.type && type) result.type = type;                                                          // 245\n                                                                                                                   //\n  return result;                                                                                                   // 248\n};                                                                                                                 //\n                                                                                                                   //\n// Log in a user on a connection.                                                                                  //\n//                                                                                                                 //\n// We use the method invocation to set the user id on the connection,                                              //\n// not the connection object directly. setUserId is tied to methods to                                             //\n// enforce clear ordering of method application (using wait methods on                                             //\n// the client, and a no setUserId after unblock restriction on the                                                 //\n// server)                                                                                                         //\n//                                                                                                                 //\n// The `stampedLoginToken` parameter is optional.  When present, it                                                //\n// indicates that the login token has already been inserted into the                                               //\n// database and doesn't need to be inserted again.  (It's used by the                                              //\n// \"resume\" login handler).                                                                                        //\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {                                           // 264\n  var self = this;                                                                                                 // 265\n                                                                                                                   //\n  if (!stampedLoginToken) {                                                                                        // 267\n    stampedLoginToken = self._generateStampedLoginToken();                                                         // 268\n    self._insertLoginToken(userId, stampedLoginToken);                                                             // 269\n  }                                                                                                                //\n                                                                                                                   //\n  // This order (and the avoidance of yields) is important to make                                                 //\n  // sure that when publish functions are rerun, they see a                                                        //\n  // consistent view of the world: the userId is set and matches                                                   //\n  // the login token on the connection (not that there is                                                          //\n  // currently a public API for reading the login token on a                                                       //\n  // connection).                                                                                                  //\n  Meteor._noYieldsAllowed(function () {                                                                            // 278\n    self._setLoginToken(userId, methodInvocation.connection, self._hashLoginToken(stampedLoginToken.token));       // 279\n  });                                                                                                              //\n                                                                                                                   //\n  methodInvocation.setUserId(userId);                                                                              // 286\n                                                                                                                   //\n  return {                                                                                                         // 288\n    id: userId,                                                                                                    // 289\n    token: stampedLoginToken.token,                                                                                // 290\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)                                                    // 291\n  };                                                                                                               //\n};                                                                                                                 //\n                                                                                                                   //\n// After a login method has completed, call the login hooks.  Note                                                 //\n// that `attemptLogin` is called for *all* login attempts, even ones                                               //\n// which aren't successful (such as an invalid password, etc).                                                     //\n//                                                                                                                 //\n// If the login is allowed and isn't aborted by a validate login hook                                              //\n// callback, log in the user.                                                                                      //\n//                                                                                                                 //\nAp._attemptLogin = function (methodInvocation, methodName, methodArgs, result) {                                   // 303\n  if (!result) throw new Error(\"result is required\");                                                              // 309\n                                                                                                                   //\n  // XXX A programming error in a login handler can lead to this occuring, and                                     //\n  // then we don't call onLogin or onLoginFailure callbacks. Should                                                //\n  // tryLoginMethod catch this case and turn it into an error?                                                     //\n  if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");        // 315\n                                                                                                                   //\n  var user;                                                                                                        // 318\n  if (result.userId) user = this.users.findOne(result.userId);                                                     // 319\n                                                                                                                   //\n  var attempt = {                                                                                                  // 322\n    type: result.type || \"unknown\",                                                                                // 323\n    allowed: !!(result.userId && !result.error),                                                                   // 324\n    methodName: methodName,                                                                                        // 325\n    methodArguments: _.toArray(methodArgs)                                                                         // 326\n  };                                                                                                               //\n  if (result.error) attempt.error = result.error;                                                                  // 328\n  if (user) attempt.user = user;                                                                                   // 330\n                                                                                                                   //\n  // _validateLogin may mutate `attempt` by adding an error and changing allowed                                   //\n  // to false, but that's the only change it can make (and the user's callbacks                                    //\n  // only get a clone of `attempt`).                                                                               //\n  this._validateLogin(methodInvocation.connection, attempt);                                                       // 336\n                                                                                                                   //\n  if (attempt.allowed) {                                                                                           // 338\n    var ret = _.extend(this._loginUser(methodInvocation, result.userId, result.stampedLoginToken), result.options || {});\n    this._successfulLogin(methodInvocation.connection, attempt);                                                   // 347\n    return ret;                                                                                                    // 348\n  } else {                                                                                                         //\n    this._failedLogin(methodInvocation.connection, attempt);                                                       // 351\n    throw attempt.error;                                                                                           // 352\n  }                                                                                                                //\n};                                                                                                                 //\n                                                                                                                   //\n// All service specific login methods should go through this function.                                             //\n// Ensure that thrown exceptions are caught and that login hook                                                    //\n// callbacks are still called.                                                                                     //\n//                                                                                                                 //\nAp._loginMethod = function (methodInvocation, methodName, methodArgs, type, fn) {                                  // 361\n  return this._attemptLogin(methodInvocation, methodName, methodArgs, tryLoginMethod(type, fn));                   // 368\n};                                                                                                                 //\n                                                                                                                   //\n// Report a login attempt failed outside the context of a normal login                                             //\n// method. This is for use in the case where there is a multi-step login                                           //\n// procedure (eg SRP based password login). If a method early in the                                               //\n// chain fails, it should call this function to report a failure. There                                            //\n// is no corresponding method for a successful login; methods that can                                             //\n// succeed at logging a user in should always be actual login methods                                              //\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).                                          //\nAp._reportLoginFailure = function (methodInvocation, methodName, methodArgs, result) {                             // 384\n  var attempt = {                                                                                                  // 390\n    type: result.type || \"unknown\",                                                                                // 391\n    allowed: false,                                                                                                // 392\n    error: result.error,                                                                                           // 393\n    methodName: methodName,                                                                                        // 394\n    methodArguments: _.toArray(methodArgs)                                                                         // 395\n  };                                                                                                               //\n                                                                                                                   //\n  if (result.userId) {                                                                                             // 398\n    attempt.user = this.users.findOne(result.userId);                                                              // 399\n  }                                                                                                                //\n                                                                                                                   //\n  this._validateLogin(methodInvocation.connection, attempt);                                                       // 402\n  this._failedLogin(methodInvocation.connection, attempt);                                                         // 403\n                                                                                                                   //\n  // _validateLogin may mutate attempt to set a new error message. Return                                          //\n  // the modified version.                                                                                         //\n  return attempt;                                                                                                  // 407\n};                                                                                                                 //\n                                                                                                                   //\n///                                                                                                                //\n/// LOGIN HANDLERS                                                                                                 //\n///                                                                                                                //\n                                                                                                                   //\n// The main entry point for auth packages to hook in to login.                                                     //\n//                                                                                                                 //\n// A login handler is a login method which can return `undefined` to                                               //\n// indicate that the login request is not handled by this handler.                                                 //\n//                                                                                                                 //\n// @param name {String} Optional.  The service name, used by default                                               //\n// if a specific service name isn't returned in the result.                                                        //\n//                                                                                                                 //\n// @param handler {Function} A function that receives an options object                                            //\n// (as passed as an argument to the `login` method) and returns one of:                                            //\n// - `undefined`, meaning don't handle;                                                                            //\n// - a login method result object                                                                                  //\n                                                                                                                   //\nAp.registerLoginHandler = function (name, handler) {                                                               // 428\n  if (!handler) {                                                                                                  // 429\n    handler = name;                                                                                                // 430\n    name = null;                                                                                                   // 431\n  }                                                                                                                //\n                                                                                                                   //\n  this._loginHandlers.push({                                                                                       // 434\n    name: name,                                                                                                    // 435\n    handler: handler                                                                                               // 436\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\n// Checks a user's credentials against all the registered login                                                    //\n// handlers, and returns a login token if the credentials are valid. It                                            //\n// is like the login method, except that it doesn't set the logged-in                                              //\n// user on the connection. Throws a Meteor.Error if logging in fails,                                              //\n// including the case where none of the login handlers handled the login                                           //\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.                                            //\n//                                                                                                                 //\n// For example, if you want to login with a plaintext password, `options` could be                                 //\n//   { user: { username: <username> }, password: <password> }, or                                                  //\n//   { user: { email: <email> }, password: <password> }.                                                           //\n                                                                                                                   //\n// Try all of the registered login handlers until one of them doesn't                                              //\n// return `undefined`, meaning it handled this call to `login`. Return                                             //\n// that return value.                                                                                              //\nAp._runLoginHandlers = function (methodInvocation, options) {                                                      // 455\n  for (var i = 0; i < this._loginHandlers.length; ++i) {                                                           // 456\n    var handler = this._loginHandlers[i];                                                                          // 457\n                                                                                                                   //\n    var result = tryLoginMethod(handler.name, function () {                                                        // 459\n      return handler.handler.call(methodInvocation, options);                                                      // 462\n    });                                                                                                            //\n                                                                                                                   //\n    if (result) {                                                                                                  // 466\n      return result;                                                                                               // 467\n    }                                                                                                              //\n                                                                                                                   //\n    if (result !== undefined) {                                                                                    // 470\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");                          // 471\n    }                                                                                                              //\n  }                                                                                                                //\n                                                                                                                   //\n  return {                                                                                                         // 475\n    type: null,                                                                                                    // 476\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")                                         // 477\n  };                                                                                                               //\n};                                                                                                                 //\n                                                                                                                   //\n// Deletes the given loginToken from the database.                                                                 //\n//                                                                                                                 //\n// For new-style hashed token, this will cause all connections                                                     //\n// associated with the token to be closed.                                                                         //\n//                                                                                                                 //\n// Any connections associated with old-style unhashed tokens will be                                               //\n// in the process of becoming associated with hashed tokens and then                                               //\n// they'll get closed.                                                                                             //\nAp.destroyToken = function (userId, loginToken) {                                                                  // 489\n  this.users.update(userId, {                                                                                      // 490\n    $pull: {                                                                                                       // 491\n      \"services.resume.loginTokens\": {                                                                             // 492\n        $or: [{ hashedToken: loginToken }, { token: loginToken }]                                                  // 493\n      }                                                                                                            //\n    }                                                                                                              //\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\nAp._initServerMethods = function () {                                                                              // 502\n  // The methods created in this function need to be created here so that                                          //\n  // this variable is available in their scope.                                                                    //\n  var accounts = this;                                                                                             // 505\n                                                                                                                   //\n  // This object will be populated with methods and then passed to                                                 //\n  // accounts._server.methods further below.                                                                       //\n  var methods = {};                                                                                                // 509\n                                                                                                                   //\n  // @returns {Object|null}                                                                                        //\n  //   If successful, returns {token: reconnectToken, id: userId}                                                  //\n  //   If unsuccessful (for example, if the user closed the oauth login popup),                                    //\n  //     throws an error describing the reason                                                                     //\n  methods.login = function (options) {                                                                             // 515\n    var self = this;                                                                                               // 516\n                                                                                                                   //\n    // Login handlers should really also check whatever field they look at in                                      //\n    // options, but we don't enforce it.                                                                           //\n    check(options, Object);                                                                                        // 520\n                                                                                                                   //\n    var result = accounts._runLoginHandlers(self, options);                                                        // 522\n                                                                                                                   //\n    return accounts._attemptLogin(self, \"login\", arguments, result);                                               // 524\n  };                                                                                                               //\n                                                                                                                   //\n  methods.logout = function () {                                                                                   // 527\n    var token = accounts._getLoginToken(this.connection.id);                                                       // 528\n    accounts._setLoginToken(this.userId, this.connection, null);                                                   // 529\n    if (token && this.userId) accounts.destroyToken(this.userId, token);                                           // 530\n    this.setUserId(null);                                                                                          // 532\n  };                                                                                                               //\n                                                                                                                   //\n  // Delete all the current user's tokens and close all open connections logged                                    //\n  // in as this user. Returns a fresh new login token that this client can                                         //\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens                                       //\n  // immediately instead of using a delay.                                                                         //\n  //                                                                                                               //\n  // XXX COMPAT WITH 0.7.2                                                                                         //\n  // This single `logoutOtherClients` method has been replaced with two                                            //\n  // methods, one that you call to get a new token, and another that you                                           //\n  // call to remove all tokens except your own. The new design allows                                              //\n  // clients to know when other clients have actually been logged                                                  //\n  // out. (The `logoutOtherClients` method guarantees the caller that                                              //\n  // the other clients will be logged out at some point, but makes no                                              //\n  // guarantees about when.) This method is left in for backwards                                                  //\n  // compatibility, especially since application code might be calling                                             //\n  // this method directly.                                                                                         //\n  //                                                                                                               //\n  // @returns {Object} Object with token and tokenExpires keys.                                                    //\n  methods.logoutOtherClients = function () {                                                                       // 552\n    var self = this;                                                                                               // 553\n    var user = accounts.users.findOne(self.userId, {                                                               // 554\n      fields: {                                                                                                    // 555\n        \"services.resume.loginTokens\": true                                                                        // 556\n      }                                                                                                            //\n    });                                                                                                            //\n    if (user) {                                                                                                    // 559\n      // Save the current tokens in the database to be deleted in                                                  //\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the                                         //\n      // caller's browser time to find the fresh token in localStorage. We save                                    //\n      // the tokens in the database in case we crash before actually deleting                                      //\n      // them.                                                                                                     //\n      var tokens = user.services.resume.loginTokens;                                                               // 565\n      var newToken = accounts._generateStampedLoginToken();                                                        // 566\n      var userId = self.userId;                                                                                    // 567\n      accounts.users.update(userId, {                                                                              // 568\n        $set: {                                                                                                    // 569\n          \"services.resume.loginTokensToDelete\": tokens,                                                           // 570\n          \"services.resume.haveLoginTokensToDelete\": true                                                          // 571\n        },                                                                                                         //\n        $push: { \"services.resume.loginTokens\": accounts._hashStampedToken(newToken) }                             // 573\n      });                                                                                                          //\n      Meteor.setTimeout(function () {                                                                              // 575\n        // The observe on Meteor.users will take care of closing the connections                                   //\n        // associated with `tokens`.                                                                               //\n        accounts._deleteSavedTokensForUser(userId, tokens);                                                        // 578\n      }, accounts._noConnectionCloseDelayForTest ? 0 : CONNECTION_CLOSE_DELAY_MS);                                 //\n      // We do not set the login token on this connection, but instead the                                         //\n      // observe closes the connection and the client will reconnect with the                                      //\n      // new token.                                                                                                //\n      return {                                                                                                     // 584\n        token: newToken.token,                                                                                     // 585\n        tokenExpires: accounts._tokenExpiration(newToken.when)                                                     // 586\n      };                                                                                                           //\n    } else {                                                                                                       //\n      throw new Meteor.Error(\"You are not logged in.\");                                                            // 589\n    }                                                                                                              //\n  };                                                                                                               //\n                                                                                                                   //\n  // Generates a new login token with the same expiration as the                                                   //\n  // connection's current token and saves it to the database. Associates                                           //\n  // the connection with this new token and returns it. Throws an error                                            //\n  // if called on a connection that isn't logged in.                                                               //\n  //                                                                                                               //\n  // @returns Object                                                                                               //\n  //   If successful, returns { token: <new token>, id: <user id>,                                                 //\n  //   tokenExpires: <expiration date> }.                                                                          //\n  methods.getNewToken = function () {                                                                              // 601\n    var self = this;                                                                                               // 602\n    var user = accounts.users.findOne(self.userId, {                                                               // 603\n      fields: { \"services.resume.loginTokens\": 1 }                                                                 // 604\n    });                                                                                                            //\n    if (!self.userId || !user) {                                                                                   // 606\n      throw new Meteor.Error(\"You are not logged in.\");                                                            // 607\n    }                                                                                                              //\n    // Be careful not to generate a new token that has a later                                                     //\n    // expiration than the curren token. Otherwise, a bad guy with a                                               //\n    // stolen token could use this method to stop his stolen token from                                            //\n    // ever expiring.                                                                                              //\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);                                          // 613\n    var currentStampedToken = _.find(user.services.resume.loginTokens, function (stampedToken) {                   // 614\n      return stampedToken.hashedToken === currentHashedToken;                                                      // 617\n    });                                                                                                            //\n    if (!currentStampedToken) {                                                                                    // 620\n      // safety belt: this should never happen                                                                     //\n      throw new Meteor.Error(\"Invalid login token\");                                                               // 621\n    }                                                                                                              //\n    var newStampedToken = accounts._generateStampedLoginToken();                                                   // 623\n    newStampedToken.when = currentStampedToken.when;                                                               // 624\n    accounts._insertLoginToken(self.userId, newStampedToken);                                                      // 625\n    return accounts._loginUser(self, self.userId, newStampedToken);                                                // 626\n  };                                                                                                               //\n                                                                                                                   //\n  // Removes all tokens except the token associated with the current                                               //\n  // connection. Throws an error if the connection is not logged                                                   //\n  // in. Returns nothing on success.                                                                               //\n  methods.removeOtherTokens = function () {                                                                        // 632\n    var self = this;                                                                                               // 633\n    if (!self.userId) {                                                                                            // 634\n      throw new Meteor.Error(\"You are not logged in.\");                                                            // 635\n    }                                                                                                              //\n    var currentToken = accounts._getLoginToken(self.connection.id);                                                // 637\n    accounts.users.update(self.userId, {                                                                           // 638\n      $pull: {                                                                                                     // 639\n        \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }                                      // 640\n      }                                                                                                            //\n    });                                                                                                            //\n  };                                                                                                               //\n                                                                                                                   //\n  // Allow a one-time configuration for a login service. Modifications                                             //\n  // to this collection are also allowed in insecure mode.                                                         //\n  methods.configureLoginService = function (options) {                                                             // 647\n    check(options, Match.ObjectIncluding({ service: String }));                                                    // 648\n    // Don't let random users configure a service we haven't added yet (so                                         //\n    // that when we do later add it, it's set up with their configuration                                          //\n    // instead of ours).                                                                                           //\n    // XXX if service configuration is oauth-specific then this code should                                        //\n    //     be in accounts-oauth; if it's not then the registry should be                                           //\n    //     in this package                                                                                         //\n    if (!(accounts.oauth && _.contains(accounts.oauth.serviceNames(), options.service))) {                         // 655\n      throw new Meteor.Error(403, \"Service unknown\");                                                              // 657\n    }                                                                                                              //\n                                                                                                                   //\n    var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                              // 660\n    if (ServiceConfiguration.configurations.findOne({ service: options.service })) throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n                                                                                                                   //\n    if (_.has(options, \"secret\") && usingOAuthEncryption()) options.secret = OAuthEncryption.seal(options.secret);\n                                                                                                                   //\n    ServiceConfiguration.configurations.insert(options);                                                           // 668\n  };                                                                                                               //\n                                                                                                                   //\n  accounts._server.methods(methods);                                                                               // 671\n};                                                                                                                 //\n                                                                                                                   //\nAp._initAccountDataHooks = function () {                                                                           // 674\n  var accounts = this;                                                                                             // 675\n                                                                                                                   //\n  accounts._server.onConnection(function (connection) {                                                            // 677\n    accounts._accountData[connection.id] = {                                                                       // 678\n      connection: connection                                                                                       // 679\n    };                                                                                                             //\n                                                                                                                   //\n    connection.onClose(function () {                                                                               // 682\n      accounts._removeTokenFromConnection(connection.id);                                                          // 683\n      delete accounts._accountData[connection.id];                                                                 // 684\n    });                                                                                                            //\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\nAp._initServerPublications = function () {                                                                         // 689\n  var accounts = this;                                                                                             // 690\n                                                                                                                   //\n  // Publish all login service configuration fields other than secret.                                             //\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {                                       // 693\n    var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                              // 694\n    return ServiceConfiguration.configurations.find({}, { fields: { secret: 0 } });                                // 696\n  }, { is_auto: true }); // not techincally autopublish, but stops the warning.                                    //\n                                                                                                                   //\n  // Publish the current user's record to the client.                                                              //\n  accounts._server.publish(null, function () {                                                                     // 700\n    if (this.userId) {                                                                                             // 701\n      return accounts.users.find({                                                                                 // 702\n        _id: this.userId                                                                                           // 703\n      }, {                                                                                                         //\n        fields: {                                                                                                  // 705\n          profile: 1,                                                                                              // 706\n          username: 1,                                                                                             // 707\n          emails: 1                                                                                                // 708\n        }                                                                                                          //\n      });                                                                                                          //\n    } else {                                                                                                       //\n      return null;                                                                                                 // 712\n    }                                                                                                              //\n  }, /*suppress autopublish warning*/{ is_auto: true });                                                           //\n                                                                                                                   //\n  // Use Meteor.startup to give other packages a chance to call                                                    //\n  // addAutopublishFields.                                                                                         //\n  Package.autopublish && Meteor.startup(function () {                                                              // 718\n    // ['profile', 'username'] -> {profile: 1, username: 1}                                                        //\n    var toFieldSelector = function (fields) {                                                                      // 720\n      return _.object(_.map(fields, function (field) {                                                             // 721\n        return [field, 1];                                                                                         // 722\n      }));                                                                                                         //\n    };                                                                                                             //\n                                                                                                                   //\n    accounts._server.publish(null, function () {                                                                   // 726\n      if (this.userId) {                                                                                           // 727\n        return accounts.users.find({                                                                               // 728\n          _id: this.userId                                                                                         // 729\n        }, {                                                                                                       //\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)                                        // 731\n        });                                                                                                        //\n      } else {                                                                                                     //\n        return null;                                                                                               // 734\n      }                                                                                                            //\n    }, /*suppress autopublish warning*/{ is_auto: true });                                                         //\n                                                                                                                   //\n    // XXX this publish is neither dedup-able nor is it optimized by our special                                   //\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)                                     //\n    // run-time performance every time a user document is changed (eg someone                                      //\n    // logging in). If this is a problem, we can instead write a manual publish                                    //\n    // function which filters out fields based on 'this.userId'.                                                   //\n    accounts._server.publish(null, function () {                                                                   // 743\n      var selector = this.userId ? {                                                                               // 744\n        _id: { $ne: this.userId }                                                                                  // 745\n      } : {};                                                                                                      //\n                                                                                                                   //\n      return accounts.users.find(selector, {                                                                       // 748\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)                                            // 749\n      });                                                                                                          //\n    }, /*suppress autopublish warning*/{ is_auto: true });                                                         //\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\n// Add to the list of fields or subfields to be automatically                                                      //\n// published if autopublish is on. Must be called from top-level                                                   //\n// code (ie, before Meteor.startup hooks run).                                                                     //\n//                                                                                                                 //\n// @param opts {Object} with:                                                                                      //\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user                                     //\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in                              //\nAp.addAutopublishFields = function (opts) {                                                                        // 762\n  this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);     // 763\n  this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);           // 765\n};                                                                                                                 //\n                                                                                                                   //\n///                                                                                                                //\n/// ACCOUNT DATA                                                                                                   //\n///                                                                                                                //\n                                                                                                                   //\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a                                             //\n// connection. Maybe there should be a public way to do that.                                                      //\nAp._getAccountData = function (connectionId, field) {                                                              // 775\n  var data = this._accountData[connectionId];                                                                      // 776\n  return data && data[field];                                                                                      // 777\n};                                                                                                                 //\n                                                                                                                   //\nAp._setAccountData = function (connectionId, field, value) {                                                       // 780\n  var data = this._accountData[connectionId];                                                                      // 781\n                                                                                                                   //\n  // safety belt. shouldn't happen. accountData is set in onConnection,                                            //\n  // we don't have a connectionId until it is set.                                                                 //\n  if (!data) return;                                                                                               // 785\n                                                                                                                   //\n  if (value === undefined) delete data[field];else data[field] = value;                                            // 788\n};                                                                                                                 //\n                                                                                                                   //\n///                                                                                                                //\n/// RECONNECT TOKENS                                                                                               //\n///                                                                                                                //\n/// support reconnecting using a meteor login token                                                                //\n                                                                                                                   //\nAp._hashLoginToken = function (loginToken) {                                                                       // 800\n  var hash = crypto.createHash('sha256');                                                                          // 801\n  hash.update(loginToken);                                                                                         // 802\n  return hash.digest('base64');                                                                                    // 803\n};                                                                                                                 //\n                                                                                                                   //\n// {token, when} => {hashedToken, when}                                                                            //\nAp._hashStampedToken = function (stampedToken) {                                                                   // 808\n  return _.extend(_.omit(stampedToken, 'token'), {                                                                 // 809\n    hashedToken: this._hashLoginToken(stampedToken.token)                                                          // 810\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\n// Using $addToSet avoids getting an index error if another client                                                 //\n// logging in simultaneously has already inserted the new hashed                                                   //\n// token.                                                                                                          //\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {                                               // 818\n  query = query ? _.clone(query) : {};                                                                             // 819\n  query._id = userId;                                                                                              // 820\n  this.users.update(query, {                                                                                       // 821\n    $addToSet: {                                                                                                   // 822\n      \"services.resume.loginTokens\": hashedToken                                                                   // 823\n    }                                                                                                              //\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\n// Exported for tests.                                                                                             //\nAp._insertLoginToken = function (userId, stampedToken, query) {                                                    // 830\n  this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);                               // 831\n};                                                                                                                 //\n                                                                                                                   //\nAp._clearAllLoginTokens = function (userId) {                                                                      // 839\n  this.users.update(userId, {                                                                                      // 840\n    $set: {                                                                                                        // 841\n      'services.resume.loginTokens': []                                                                            // 842\n    }                                                                                                              //\n  });                                                                                                              //\n};                                                                                                                 //\n                                                                                                                   //\n// test hook                                                                                                       //\nAp._getUserObserve = function (connectionId) {                                                                     // 848\n  return this._userObservesForConnections[connectionId];                                                           // 849\n};                                                                                                                 //\n                                                                                                                   //\n// Clean up this connection's association with the token: that is, stop                                            //\n// the observe that we started when we associated the connection with                                              //\n// this token.                                                                                                     //\nAp._removeTokenFromConnection = function (connectionId) {                                                          // 855\n  if (_.has(this._userObservesForConnections, connectionId)) {                                                     // 856\n    var observe = this._userObservesForConnections[connectionId];                                                  // 857\n    if (typeof observe === 'number') {                                                                             // 858\n      // We're in the process of setting up an observe for this connection. We                                     //\n      // can't clean up that observe yet, but if we delete the placeholder for                                     //\n      // this connection, then the observe will get cleaned up as soon as it has                                   //\n      // been set up.                                                                                              //\n      delete this._userObservesForConnections[connectionId];                                                       // 863\n    } else {                                                                                                       //\n      delete this._userObservesForConnections[connectionId];                                                       // 865\n      observe.stop();                                                                                              // 866\n    }                                                                                                              //\n  }                                                                                                                //\n};                                                                                                                 //\n                                                                                                                   //\nAp._getLoginToken = function (connectionId) {                                                                      // 871\n  return this._getAccountData(connectionId, 'loginToken');                                                         // 872\n};                                                                                                                 //\n                                                                                                                   //\n// newToken is a hashed token.                                                                                     //\nAp._setLoginToken = function (userId, connection, newToken) {                                                      // 876\n  var self = this;                                                                                                 // 877\n                                                                                                                   //\n  self._removeTokenFromConnection(connection.id);                                                                  // 879\n  self._setAccountData(connection.id, 'loginToken', newToken);                                                     // 880\n                                                                                                                   //\n  if (newToken) {                                                                                                  // 882\n    // Set up an observe for this token. If the token goes away, we need                                           //\n    // to close the connection.  We defer the observe because there's                                              //\n    // no need for it to be on the critical path for login; we just need                                           //\n    // to ensure that the connection will get closed at some point if                                              //\n    // the token gets deleted.                                                                                     //\n    //                                                                                                             //\n    // Initially, we set the observe for this connection to a number; this                                         //\n    // signifies to other code (which might run while we yield) that we are in                                     //\n    // the process of setting up an observe for this connection. Once the                                          //\n    // observe is ready to go, we replace the number with the real observe                                         //\n    // handle (unless the placeholder has been deleted or replaced by a                                            //\n    // different placehold number, signifying that the connection was closed                                       //\n    // already -- in this case we just clean up the observe that we started).                                      //\n    var myObserveNumber = ++self._nextUserObserveNumber;                                                           // 896\n    self._userObservesForConnections[connection.id] = myObserveNumber;                                             // 897\n    Meteor.defer(function () {                                                                                     // 898\n      // If something else happened on this connection in the meantime (it got                                     //\n      // closed, or another call to _setLoginToken happened), just do                                              //\n      // nothing. We don't need to start an observe for an old connection or old                                   //\n      // token.                                                                                                    //\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {                                   // 903\n        return;                                                                                                    // 904\n      }                                                                                                            //\n                                                                                                                   //\n      var foundMatchingUser;                                                                                       // 907\n      // Because we upgrade unhashed login tokens to hashed tokens at                                              //\n      // login time, sessions will only be logged in with a hashed                                                 //\n      // token. Thus we only need to observe hashed tokens here.                                                   //\n      var observe = self.users.find({                                                                              // 911\n        _id: userId,                                                                                               // 912\n        'services.resume.loginTokens.hashedToken': newToken                                                        // 913\n      }, { fields: { _id: 1 } }).observeChanges({                                                                  //\n        added: function () {                                                                                       // 915\n          foundMatchingUser = true;                                                                                // 916\n        },                                                                                                         //\n        removed: function () {                                                                                     // 918\n          connection.close();                                                                                      // 919\n          // The onClose callback for the connection takes care of                                                 //\n          // cleaning up the observe handle and any other state we have                                            //\n          // lying around.                                                                                         //\n        }                                                                                                          //\n      });                                                                                                          //\n                                                                                                                   //\n      // If the user ran another login or logout command we were waiting for the                                   //\n      // defer or added to fire (ie, another call to _setLoginToken occurred),                                     //\n      // then we let the later one win (start an observe, etc) and just stop our                                   //\n      // observe now.                                                                                              //\n      //                                                                                                           //\n      // Similarly, if the connection was already closed, then the onClose                                         //\n      // callback would have called _removeTokenFromConnection and there won't                                     //\n      // be an entry in _userObservesForConnections. We can stop the observe.                                      //\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {                                   // 934\n        observe.stop();                                                                                            // 935\n        return;                                                                                                    // 936\n      }                                                                                                            //\n                                                                                                                   //\n      self._userObservesForConnections[connection.id] = observe;                                                   // 939\n                                                                                                                   //\n      if (!foundMatchingUser) {                                                                                    // 941\n        // We've set up an observe on the user associated with `newToken`,                                         //\n        // so if the new token is removed from the database, we'll close                                           //\n        // the connection. But the token might have already been deleted                                           //\n        // before we set up the observe, which wouldn't have closed the                                            //\n        // connection because the observe wasn't running yet.                                                      //\n        connection.close();                                                                                        // 947\n      }                                                                                                            //\n    });                                                                                                            //\n  }                                                                                                                //\n};                                                                                                                 //\n                                                                                                                   //\nfunction setupDefaultLoginHandlers(accounts) {                                                                     // 953\n  accounts.registerLoginHandler(\"resume\", function (options) {                                                     // 954\n    return defaultResumeLoginHandler.call(this, accounts, options);                                                // 955\n  });                                                                                                              //\n}                                                                                                                  //\n                                                                                                                   //\n// Login handler for resume tokens.                                                                                //\nfunction defaultResumeLoginHandler(accounts, options) {                                                            // 960\n  if (!options.resume) return undefined;                                                                           // 961\n                                                                                                                   //\n  check(options.resume, String);                                                                                   // 964\n                                                                                                                   //\n  var hashedToken = accounts._hashLoginToken(options.resume);                                                      // 966\n                                                                                                                   //\n  // First look for just the new-style hashed login token, to avoid                                                //\n  // sending the unhashed token to the database in a query if we don't                                             //\n  // need to.                                                                                                      //\n  var user = accounts.users.findOne({ \"services.resume.loginTokens.hashedToken\": hashedToken });                   // 971\n                                                                                                                   //\n  if (!user) {                                                                                                     // 974\n    // If we didn't find the hashed login token, try also looking for                                              //\n    // the old-style unhashed token.  But we need to look for either                                               //\n    // the old-style token OR the new-style token, because another                                                 //\n    // client connection logging in simultaneously might have already                                              //\n    // converted the token.                                                                                        //\n    user = accounts.users.findOne({                                                                                // 980\n      $or: [{ \"services.resume.loginTokens.hashedToken\": hashedToken }, { \"services.resume.loginTokens.token\": options.resume }]\n    });                                                                                                            //\n  }                                                                                                                //\n                                                                                                                   //\n  if (!user) return {                                                                                              // 988\n    error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")                     // 990\n  };                                                                                                               //\n                                                                                                                   //\n  // Find the token, which will either be an object with fields                                                    //\n  // {hashedToken, when} for a hashed token or {token, when} for an                                                //\n  // unhashed token.                                                                                               //\n  var oldUnhashedStyleToken;                                                                                       // 996\n  var token = _.find(user.services.resume.loginTokens, function (token) {                                          // 997\n    return token.hashedToken === hashedToken;                                                                      // 998\n  });                                                                                                              //\n  if (token) {                                                                                                     // 1000\n    oldUnhashedStyleToken = false;                                                                                 // 1001\n  } else {                                                                                                         //\n    token = _.find(user.services.resume.loginTokens, function (token) {                                            // 1003\n      return token.token === options.resume;                                                                       // 1004\n    });                                                                                                            //\n    oldUnhashedStyleToken = true;                                                                                  // 1006\n  }                                                                                                                //\n                                                                                                                   //\n  var tokenExpires = accounts._tokenExpiration(token.when);                                                        // 1009\n  if (new Date() >= tokenExpires) return {                                                                         // 1010\n    userId: user._id,                                                                                              // 1012\n    error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")                                 // 1013\n  };                                                                                                               //\n                                                                                                                   //\n  // Update to a hashed token when an unhashed token is encountered.                                               //\n  if (oldUnhashedStyleToken) {                                                                                     // 1017\n    // Only add the new hashed token if the old unhashed token still                                               //\n    // exists (this avoids resurrecting the token if it was deleted                                                //\n    // after we read it).  Using $addToSet avoids getting an index                                                 //\n    // error if another client logging in simultaneously has already                                               //\n    // inserted the new hashed token.                                                                              //\n    accounts.users.update({                                                                                        // 1023\n      _id: user._id,                                                                                               // 1025\n      \"services.resume.loginTokens.token\": options.resume                                                          // 1026\n    }, { $addToSet: {                                                                                              //\n        \"services.resume.loginTokens\": {                                                                           // 1029\n          \"hashedToken\": hashedToken,                                                                              // 1030\n          \"when\": token.when                                                                                       // 1031\n        }                                                                                                          //\n      } });                                                                                                        //\n                                                                                                                   //\n    // Remove the old token *after* adding the new, since otherwise                                                //\n    // another client trying to login between our removing the old and                                             //\n    // adding the new wouldn't find a token to login with.                                                         //\n    accounts.users.update(user._id, {                                                                              // 1039\n      $pull: {                                                                                                     // 1040\n        \"services.resume.loginTokens\": { \"token\": options.resume }                                                 // 1041\n      }                                                                                                            //\n    });                                                                                                            //\n  }                                                                                                                //\n                                                                                                                   //\n  return {                                                                                                         // 1046\n    userId: user._id,                                                                                              // 1047\n    stampedLoginToken: {                                                                                           // 1048\n      token: options.resume,                                                                                       // 1049\n      when: token.when                                                                                             // 1050\n    }                                                                                                              //\n  };                                                                                                               //\n}                                                                                                                  //\n                                                                                                                   //\n// (Also used by Meteor Accounts server and tests).                                                                //\n//                                                                                                                 //\nAp._generateStampedLoginToken = function () {                                                                      // 1057\n  return {                                                                                                         // 1058\n    token: Random.secret(),                                                                                        // 1059\n    when: new Date()                                                                                               // 1060\n  };                                                                                                               //\n};                                                                                                                 //\n                                                                                                                   //\n///                                                                                                                //\n/// TOKEN EXPIRATION                                                                                               //\n///                                                                                                                //\n                                                                                                                   //\n// Deletes expired tokens from the database and closes all open connections                                        //\n// associated with these tokens.                                                                                   //\n//                                                                                                                 //\n// Exported for tests. Also, the arguments are only used by                                                        //\n// tests. oldestValidDate is simulate expiring tokens without waiting                                              //\n// for them to actually expire. userId is used by tests to only expire                                             //\n// tokens for the test user.                                                                                       //\nAp._expireTokens = function (oldestValidDate, userId) {                                                            // 1075\n  var tokenLifetimeMs = this._getTokenLifetimeMs();                                                                // 1076\n                                                                                                                   //\n  // when calling from a test with extra arguments, you must specify both!                                         //\n  if (oldestValidDate && !userId || !oldestValidDate && userId) {                                                  // 1079\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");                                    // 1080\n  }                                                                                                                //\n                                                                                                                   //\n  oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);                                     // 1083\n  var userFilter = userId ? { _id: userId } : {};                                                                  // 1085\n                                                                                                                   //\n  // Backwards compatible with older versions of meteor that stored login token                                    //\n  // timestamps as numbers.                                                                                        //\n  this.users.update(_.extend(userFilter, {                                                                         // 1090\n    $or: [{ \"services.resume.loginTokens.when\": { $lt: oldestValidDate } }, { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }]\n  }), {                                                                                                            //\n    $pull: {                                                                                                       // 1096\n      \"services.resume.loginTokens\": {                                                                             // 1097\n        $or: [{ when: { $lt: oldestValidDate } }, { when: { $lt: +oldestValidDate } }]                             // 1098\n      }                                                                                                            //\n    }                                                                                                              //\n  }, { multi: true });                                                                                             //\n  // The observe on Meteor.users will take care of closing connections for                                         //\n  // expired tokens.                                                                                               //\n};                                                                                                                 //\n                                                                                                                   //\n// @override from accounts_common.js                                                                               //\nAp.config = function (options) {                                                                                   // 1110\n  // Call the overridden implementation of the method.                                                             //\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments);                                        // 1112\n                                                                                                                   //\n  // If the user set loginExpirationInDays to null, then we need to clear the                                      //\n  // timer that periodically expires tokens.                                                                       //\n  if (_.has(this._options, \"loginExpirationInDays\") && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);                                                                // 1119\n    this.expireTokenInterval = null;                                                                               // 1120\n  }                                                                                                                //\n                                                                                                                   //\n  return superResult;                                                                                              // 1123\n};                                                                                                                 //\n                                                                                                                   //\nfunction setExpireTokensInterval(accounts) {                                                                       // 1126\n  accounts.expireTokenInterval = Meteor.setInterval(function () {                                                  // 1127\n    accounts._expireTokens();                                                                                      // 1128\n  }, EXPIRE_TOKENS_INTERVAL_MS);                                                                                   //\n}                                                                                                                  //\n                                                                                                                   //\n///                                                                                                                //\n/// OAuth Encryption Support                                                                                       //\n///                                                                                                                //\n                                                                                                                   //\nvar OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;                  // 1137\n                                                                                                                   //\nfunction usingOAuthEncryption() {                                                                                  // 1141\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();                                                         // 1142\n}                                                                                                                  //\n                                                                                                                   //\n// OAuth service data is temporarily stored in the pending credentials                                             //\n// collection during the oauth authentication process.  Sensitive data                                             //\n// such as access tokens are encrypted without the user id because                                                 //\n// we don't know the user id yet.  We re-encrypt these fields with the                                             //\n// user id included when storing the service data permanently in                                                   //\n// the users collection.                                                                                           //\n//                                                                                                                 //\nfunction pinEncryptedFieldsToUser(serviceData, userId) {                                                           // 1153\n  _.each(_.keys(serviceData), function (key) {                                                                     // 1154\n    var value = serviceData[key];                                                                                  // 1155\n    if (OAuthEncryption && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;                                                                                      // 1158\n  });                                                                                                              //\n}                                                                                                                  //\n                                                                                                                   //\n// Encrypt unencrypted login service secrets when oauth-encryption is                                              //\n// added.                                                                                                          //\n//                                                                                                                 //\n// XXX For the oauthSecretKey to be available here at startup, the                                                 //\n// developer must call Accounts.config({oauthSecretKey: ...}) at load                                              //\n// time, instead of in a Meteor.startup block, because the startup                                                 //\n// block in the app code will run after this accounts-base startup                                                 //\n// block.  Perhaps we need a post-startup callback?                                                                //\n                                                                                                                   //\nMeteor.startup(function () {                                                                                       // 1172\n  if (!usingOAuthEncryption()) {                                                                                   // 1173\n    return;                                                                                                        // 1174\n  }                                                                                                                //\n                                                                                                                   //\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                                // 1177\n                                                                                                                   //\n  ServiceConfiguration.configurations.find({                                                                       // 1180\n    $and: [{                                                                                                       // 1181\n      secret: { $exists: true }                                                                                    // 1182\n    }, {                                                                                                           //\n      \"secret.algorithm\": { $exists: false }                                                                       // 1184\n    }]                                                                                                             //\n  }).forEach(function (config) {                                                                                   //\n    ServiceConfiguration.configurations.update(config._id, {                                                       // 1187\n      $set: {                                                                                                      // 1188\n        secret: OAuthEncryption.seal(config.secret)                                                                // 1189\n      }                                                                                                            //\n    });                                                                                                            //\n  });                                                                                                              //\n});                                                                                                                //\n                                                                                                                   //\n// XXX see comment on Accounts.createUser in passwords_server about adding a                                       //\n// second \"server options\" argument.                                                                               //\nfunction defaultCreateUserHook(options, user) {                                                                    // 1197\n  if (options.profile) user.profile = options.profile;                                                             // 1198\n  return user;                                                                                                     // 1200\n}                                                                                                                  //\n                                                                                                                   //\n// Called by accounts-password                                                                                     //\nAp.insertUserDoc = function (options, user) {                                                                      // 1204\n  // - clone user document, to protect from modification                                                           //\n  // - add createdAt timestamp                                                                                     //\n  // - prepare an _id, so that you can modify other collections (eg                                                //\n  // create a first task for every new user)                                                                       //\n  //                                                                                                               //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might                                               //\n  // end up having modified some other collection                                                                  //\n  // inappropriately. The solution is probably to have onCreateUser                                                //\n  // accept two callbacks - one that gets called before inserting                                                  //\n  // the user document (in which you can modify its contents), and                                                 //\n  // one that gets called after (in which you should change other                                                  //\n  // collections)                                                                                                  //\n  user = _.extend({                                                                                                // 1217\n    createdAt: new Date(),                                                                                         // 1218\n    _id: Random.id()                                                                                               // 1219\n  }, user);                                                                                                        //\n                                                                                                                   //\n  if (user.services) {                                                                                             // 1222\n    _.each(user.services, function (serviceData) {                                                                 // 1223\n      pinEncryptedFieldsToUser(serviceData, user._id);                                                             // 1224\n    });                                                                                                            //\n  }                                                                                                                //\n                                                                                                                   //\n  var fullUser;                                                                                                    // 1228\n  if (this._onCreateUserHook) {                                                                                    // 1229\n    fullUser = this._onCreateUserHook(options, user);                                                              // 1230\n                                                                                                                   //\n    // This is *not* part of the API. We need this because we can't isolate                                        //\n    // the global server environment between tests, meaning we can't test                                          //\n    // both having a create user hook set and not having one set.                                                  //\n    if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);                         // 1235\n  } else {                                                                                                         //\n    fullUser = defaultCreateUserHook(options, user);                                                               // 1238\n  }                                                                                                                //\n                                                                                                                   //\n  _.each(this._validateNewUserHooks, function (hook) {                                                             // 1241\n    if (!hook(fullUser)) throw new Meteor.Error(403, \"User validation failed\");                                    // 1242\n  });                                                                                                              //\n                                                                                                                   //\n  var userId;                                                                                                      // 1246\n  try {                                                                                                            // 1247\n    userId = this.users.insert(fullUser);                                                                          // 1248\n  } catch (e) {                                                                                                    //\n    // XXX string parsing sucks, maybe                                                                             //\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day                                          //\n    if (e.name !== 'MongoError') throw e;                                                                          // 1252\n    if (e.code !== 11000) throw e;                                                                                 // 1253\n    if (e.err.indexOf('emails.address') !== -1) throw new Meteor.Error(403, \"Email already exists.\");              // 1254\n    if (e.err.indexOf('username') !== -1) throw new Meteor.Error(403, \"Username already exists.\");                 // 1256\n    // XXX better error reporting for services.facebook.id duplicate, etc                                          //\n    throw e;                                                                                                       // 1259\n  }                                                                                                                //\n  return userId;                                                                                                   // 1261\n};                                                                                                                 //\n                                                                                                                   //\n// Helper function: returns false if email does not match company domain from                                      //\n// the configuration.                                                                                              //\nAp._testEmailDomain = function (email) {                                                                           // 1266\n  var domain = this._options.restrictCreationByEmailDomain;                                                        // 1267\n  return !domain || _.isFunction(domain) && domain(email) || _.isString(domain) && new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i').test(email);\n};                                                                                                                 //\n                                                                                                                   //\n// Validate new user's email or Google/Facebook/GitHub account's email                                             //\nfunction defaultValidateNewUserHook(user) {                                                                        // 1275\n  var self = this;                                                                                                 // 1276\n  var domain = self._options.restrictCreationByEmailDomain;                                                        // 1277\n  if (!domain) return true;                                                                                        // 1278\n                                                                                                                   //\n  var emailIsGood = false;                                                                                         // 1281\n  if (!_.isEmpty(user.emails)) {                                                                                   // 1282\n    emailIsGood = _.any(user.emails, function (email) {                                                            // 1283\n      return self._testEmailDomain(email.address);                                                                 // 1284\n    });                                                                                                            //\n  } else if (!_.isEmpty(user.services)) {                                                                          //\n    // Find any email of any service and check it                                                                  //\n    emailIsGood = _.any(user.services, function (service) {                                                        // 1288\n      return service.email && self._testEmailDomain(service.email);                                                // 1289\n    });                                                                                                            //\n  }                                                                                                                //\n                                                                                                                   //\n  if (emailIsGood) return true;                                                                                    // 1293\n                                                                                                                   //\n  if (_.isString(domain)) throw new Meteor.Error(403, \"@\" + domain + \" email required\");else throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n}                                                                                                                  //\n                                                                                                                   //\n///                                                                                                                //\n/// MANAGING USER OBJECTS                                                                                          //\n///                                                                                                                //\n                                                                                                                   //\n// Updates or creates a user after we authenticate with a 3rd party.                                               //\n//                                                                                                                 //\n// @param serviceName {String} Service name (eg, twitter).                                                         //\n// @param serviceData {Object} Data to store in the user's record                                                  //\n//        under services[serviceName]. Must include an \"id\" field                                                  //\n//        which is a unique identifier for the user in the service.                                                //\n// @param options {Object, optional} Other options to pass to insertUserDoc                                        //\n//        (eg, profile)                                                                                            //\n// @returns {Object} Object with token and id keys, like the result                                                //\n//        of the \"login\" method.                                                                                   //\n//                                                                                                                 //\nAp.updateOrCreateUserFromExternalService = function (serviceName, serviceData, options) {                          // 1317\n  options = _.clone(options || {});                                                                                // 1322\n                                                                                                                   //\n  if (serviceName === \"password\" || serviceName === \"resume\") throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n  if (!_.has(serviceData, 'id')) throw new Error(\"Service data for service \" + serviceName + \" must include id\");  // 1328\n                                                                                                                   //\n  // Look for a user with the appropriate service user id.                                                         //\n  var selector = {};                                                                                               // 1333\n  var serviceIdKey = \"services.\" + serviceName + \".id\";                                                            // 1334\n                                                                                                                   //\n  // XXX Temporary special case for Twitter. (Issue #629)                                                          //\n  //   The serviceData.id will be a string representation of an integer.                                           //\n  //   We want it to match either a stored string or int representation.                                           //\n  //   This is to cater to earlier versions of Meteor storing twitter                                              //\n  //   user IDs in number form, and recent versions storing them as strings.                                       //\n  //   This can be removed once migration technology is in place, and twitter                                      //\n  //   users stored with integer IDs have been migrated to string IDs.                                             //\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {                                                       // 1343\n    selector[\"$or\"] = [{}, {}];                                                                                    // 1344\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;                                                             // 1345\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);                                               // 1346\n  } else {                                                                                                         //\n    selector[serviceIdKey] = serviceData.id;                                                                       // 1348\n  }                                                                                                                //\n                                                                                                                   //\n  var user = this.users.findOne(selector);                                                                         // 1351\n                                                                                                                   //\n  if (user) {                                                                                                      // 1353\n    pinEncryptedFieldsToUser(serviceData, user._id);                                                               // 1354\n                                                                                                                   //\n    // We *don't* process options (eg, profile) for update, but we do replace                                      //\n    // the serviceData (eg, so that we keep an unexpired access token and                                          //\n    // don't cache old email addresses in serviceData.email).                                                      //\n    // XXX provide an onUpdateUser hook which would let apps update                                                //\n    //     the profile too                                                                                         //\n    var setAttrs = {};                                                                                             // 1361\n    _.each(serviceData, function (value, key) {                                                                    // 1362\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;                                                     // 1363\n    });                                                                                                            //\n                                                                                                                   //\n    // XXX Maybe we should re-use the selector above and notice if the update                                      //\n    //     touches nothing?                                                                                        //\n    this.users.update(user._id, {                                                                                  // 1368\n      $set: setAttrs                                                                                               // 1369\n    });                                                                                                            //\n                                                                                                                   //\n    return {                                                                                                       // 1372\n      type: serviceName,                                                                                           // 1373\n      userId: user._id                                                                                             // 1374\n    };                                                                                                             //\n  } else {                                                                                                         //\n    // Create a new user with the service data. Pass other options through to                                      //\n    // insertUserDoc.                                                                                              //\n    user = { services: {} };                                                                                       // 1380\n    user.services[serviceName] = serviceData;                                                                      // 1381\n    return {                                                                                                       // 1382\n      type: serviceName,                                                                                           // 1383\n      userId: this.insertUserDoc(options, user)                                                                    // 1384\n    };                                                                                                             //\n  }                                                                                                                //\n};                                                                                                                 //\n                                                                                                                   //\nfunction setupUsersCollection(users) {                                                                             // 1389\n  ///                                                                                                              //\n  /// RESTRICTING WRITES TO USER OBJECTS                                                                           //\n  ///                                                                                                              //\n  users.allow({                                                                                                    // 1393\n    // clients can modify the profile field of their own document, and                                             //\n    // nothing else.                                                                                               //\n    update: function (userId, user, fields, modifier) {                                                            // 1396\n      // make sure it is our record                                                                                //\n      if (user._id !== userId) return false;                                                                       // 1398\n                                                                                                                   //\n      // user can only modify the 'profile' field. sets to multiple                                                //\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry                                           //\n      // in the fields list.                                                                                       //\n      if (fields.length !== 1 || fields[0] !== 'profile') return false;                                            // 1404\n                                                                                                                   //\n      return true;                                                                                                 // 1407\n    },                                                                                                             //\n    fetch: ['_id'] // we only look at _id.                                                                         // 1409\n  });                                                                                                              //\n                                                                                                                   //\n  /// DEFAULT INDEXES ON USERS                                                                                     //\n  users._ensureIndex('username', { unique: 1, sparse: 1 });                                                        // 1413\n  users._ensureIndex('emails.address', { unique: 1, sparse: 1 });                                                  // 1414\n  users._ensureIndex('services.resume.loginTokens.hashedToken', { unique: 1, sparse: 1 });                         // 1415\n  users._ensureIndex('services.resume.loginTokens.token', { unique: 1, sparse: 1 });                               // 1417\n  // For taking care of logoutOtherClients calls that crashed before the                                           //\n  // tokens were deleted.                                                                                          //\n  users._ensureIndex('services.resume.haveLoginTokensToDelete', { sparse: 1 });                                    // 1421\n  // For expiring login tokens                                                                                     //\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: 1 });                                           // 1424\n}                                                                                                                  //\n                                                                                                                   //\n///                                                                                                                //\n/// CLEAN UP FOR `logoutOtherClients`                                                                              //\n///                                                                                                                //\n                                                                                                                   //\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {                                                 // 1431\n  if (tokensToDelete) {                                                                                            // 1432\n    this.users.update(userId, {                                                                                    // 1433\n      $unset: {                                                                                                    // 1434\n        \"services.resume.haveLoginTokensToDelete\": 1,                                                              // 1435\n        \"services.resume.loginTokensToDelete\": 1                                                                   // 1436\n      },                                                                                                           //\n      $pullAll: {                                                                                                  // 1438\n        \"services.resume.loginTokens\": tokensToDelete                                                              // 1439\n      }                                                                                                            //\n    });                                                                                                            //\n  }                                                                                                                //\n};                                                                                                                 //\n                                                                                                                   //\nAp._deleteSavedTokensForAllUsersOnStartup = function () {                                                          // 1445\n  var self = this;                                                                                                 // 1446\n                                                                                                                   //\n  // If we find users who have saved tokens to delete on startup, delete                                           //\n  // them now. It's possible that the server could have crashed and come                                           //\n  // back up before new tokens are found in localStorage, but this                                                 //\n  // shouldn't happen very often. We shouldn't put a delay here because                                            //\n  // that would give a lot of power to an attacker with a stolen login                                             //\n  // token and the ability to crash the server.                                                                    //\n  Meteor.startup(function () {                                                                                     // 1454\n    self.users.find({                                                                                              // 1455\n      \"services.resume.haveLoginTokensToDelete\": true                                                              // 1456\n    }, {                                                                                                           //\n      \"services.resume.loginTokensToDelete\": 1                                                                     // 1458\n    }).forEach(function (user) {                                                                                   //\n      self._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete);                          // 1460\n    });                                                                                                            //\n  });                                                                                                              //\n};                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-base/accounts_rate_limit.js                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar Ap = AccountsCommon.prototype;                                                                                 // 1\nvar defaultRateLimiterRuleId;                                                                                      // 2\n// Removes default rate limiting rule                                                                              //\nAp.removeDefaultRateLimit = function () {                                                                          // 4\n  var resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);                                                  // 5\n  defaultRateLimiterRuleId = null;                                                                                 // 6\n  return resp;                                                                                                     // 7\n};                                                                                                                 //\n                                                                                                                   //\n// Add a default rule of limiting logins, creating new users and password reset                                    //\n// to 5 times every 10 seconds per connection.                                                                     //\nAp.addDefaultRateLimit = function () {                                                                             // 12\n  if (!defaultRateLimiterRuleId) {                                                                                 // 13\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({                                                            // 14\n      userId: null,                                                                                                // 15\n      clientAddress: null,                                                                                         // 16\n      type: 'method',                                                                                              // 17\n      name: function (name) {                                                                                      // 18\n        return _.contains(['login', 'createUser', 'resetPassword', 'forgotPassword'], name);                       // 19\n      },                                                                                                           //\n      connectionId: function (connectionId) {                                                                      // 22\n        return true;                                                                                               // 23\n      }                                                                                                            //\n    }, 5, 10000);                                                                                                  //\n  }                                                                                                                //\n};                                                                                                                 //\n                                                                                                                   //\nAp.addDefaultRateLimit();                                                                                          // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-base/url_server.js                                                                            //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// XXX These should probably not actually be public?                                                               //\n                                                                                                                   //\nAccountsServer.prototype.urls = {                                                                                  // 3\n  resetPassword: function (token) {                                                                                // 4\n    return Meteor.absoluteUrl('#/reset-password/' + token);                                                        // 5\n  },                                                                                                               //\n                                                                                                                   //\n  verifyEmail: function (token) {                                                                                  // 8\n    return Meteor.absoluteUrl('#/verify-email/' + token);                                                          // 9\n  },                                                                                                               //\n                                                                                                                   //\n  enrollAccount: function (token) {                                                                                // 12\n    return Meteor.absoluteUrl('#/enroll-account/' + token);                                                        // 13\n  }                                                                                                                //\n};                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-base/globals_server.js                                                                        //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n/**                                                                                                                //\n * @namespace Accounts                                                                                             //\n * @summary The namespace for all server-side accounts-related methods.                                            //\n */                                                                                                                //\nAccounts = new AccountsServer(Meteor.server);                                                                      // 5\n                                                                                                                   //\n// Users table. Don't use the normal autopublish, since we want to hide                                            //\n// some fields. Code to autopublish this is in accounts_server.js.                                                 //\n// XXX Allow users to configure this collection name.                                                              //\n                                                                                                                   //\n/**                                                                                                                //\n * @summary A [Mongo.Collection](#collections) containing user documents.                                          //\n * @locus Anywhere                                                                                                 //\n * @type {Mongo.Collection}                                                                                        //\n */                                                                                                                //\nMeteor.users = Accounts.users;                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-base'] = {\n  Accounts: Accounts,\n  AccountsServer: AccountsServer,\n  AccountsTest: AccountsTest\n};\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["/accounts_common.js","/accounts_server.js","/accounts_rate_limit.js","/url_server.js","/globals_server.js"],"names":[],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nAccountsCommon = class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","var crypto = Npm.require('crypto');\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nAccountsServer = class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method. In theory, it\n    // could also be called from publish statements, since they also\n    // have a userId associated with them. However, given that publish\n    // functions aren't reactive, using any of the infomation from\n    // Meteor.user() in a publish function will always use the value\n    // from when the function first runs. This is likely not what the\n    // user expects. The way to make this work in a publish is to do\n    // Meteor.find(this.userId).observe and recompute when the user\n    // record changes.\n    var currentInvocation = DDP._CurrentInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls. Use this.userId in publish functions.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n};\n\nvar Ap = AccountsServer.prototype;\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nfunction cloneAttemptWithConnection(connection, attempt) {\n  var clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n}\n\nAp._validateLogin = function (connection, attempt) {\n  this._validateLoginHook.each(function (callback) {\n    var ret;\n    try {\n      ret = callback(cloneAttemptWithConnection(connection, attempt));\n    }\n    catch (e) {\n      attempt.allowed = false;\n      // XXX this means the last thrown error overrides previous error\n      // messages. Maybe this is surprising to users and we should make\n      // overriding errors more explicit. (see\n      // https://github.com/meteor/meteor/issues/1960)\n      attempt.error = e;\n      return true;\n    }\n    if (! ret) {\n      attempt.allowed = false;\n      // don't override a specific error provided by a previous\n      // validator or the initial attempt (eg \"incorrect password\").\n      if (!attempt.error)\n        attempt.error = new Meteor.Error(403, \"Login forbidden\");\n    }\n    return true;\n  });\n};\n\n\nAp._successfulLogin = function (connection, attempt) {\n  this._onLoginHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._failedLogin = function (connection, attempt) {\n  this._onLoginFailureHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\n\n///\n/// LOGIN METHODS\n///\n\n// Login methods return to the client an object containing these\n// fields when the user was logged in successfully:\n//\n//   id: userId\n//   token: *\n//   tokenExpires: *\n//\n// tokenExpires is optional and intends to provide a hint to the\n// client as to when the token will expire. If not provided, the\n// client will call Accounts._tokenExpiration, passing it the date\n// that it received the token.\n//\n// The login method will throw an error back to the client if the user\n// failed to log in.\n//\n//\n// Login handlers and service specific login methods such as\n// `createUser` internally return a `result` object containing these\n// fields:\n//\n//   type:\n//     optional string; the service name, overrides the handler\n//     default if present.\n//\n//   error:\n//     exception; if the user is not allowed to login, the reason why.\n//\n//   userId:\n//     string; the user id of the user attempting to login (if\n//     known), required for an allowed login.\n//\n//   options:\n//     optional object merged into the result returned by the login\n//     method; used by HAMK from SRP.\n//\n//   stampedLoginToken:\n//     optional object with `token` and `when` indicating the login\n//     token is already present in the database, returned by the\n//     \"resume\" login handler.\n//\n// For convenience, login methods can also throw an exception, which\n// is converted into an {error} result.  However, if the id of the\n// user attempting the login is known, a {userId, error} result should\n// be returned instead since the user id is not captured when an\n// exception is thrown.\n//\n// This internal `result` object is automatically converted into the\n// public {id, token, tokenExpires} object returned to the client.\n\n\n// Try a login method, converting thrown exceptions into an {error}\n// result.  The `type` argument is a default, inserted into the result\n// object if not explicitly returned.\n//\nvar tryLoginMethod = function (type, fn) {\n  var result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\n\n// Log in a user on a connection.\n//\n// We use the method invocation to set the user id on the connection,\n// not the connection object directly. setUserId is tied to methods to\n// enforce clear ordering of method application (using wait methods on\n// the client, and a no setUserId after unblock restriction on the\n// server)\n//\n// The `stampedLoginToken` parameter is optional.  When present, it\n// indicates that the login token has already been inserted into the\n// database and doesn't need to be inserted again.  (It's used by the\n// \"resume\" login handler).\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {\n  var self = this;\n\n  if (! stampedLoginToken) {\n    stampedLoginToken = self._generateStampedLoginToken();\n    self._insertLoginToken(userId, stampedLoginToken);\n  }\n\n  // This order (and the avoidance of yields) is important to make\n  // sure that when publish functions are rerun, they see a\n  // consistent view of the world: the userId is set and matches\n  // the login token on the connection (not that there is\n  // currently a public API for reading the login token on a\n  // connection).\n  Meteor._noYieldsAllowed(function () {\n    self._setLoginToken(\n      userId,\n      methodInvocation.connection,\n      self._hashLoginToken(stampedLoginToken.token)\n    );\n  });\n\n  methodInvocation.setUserId(userId);\n\n  return {\n    id: userId,\n    token: stampedLoginToken.token,\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)\n  };\n};\n\n\n// After a login method has completed, call the login hooks.  Note\n// that `attemptLogin` is called for *all* login attempts, even ones\n// which aren't successful (such as an invalid password, etc).\n//\n// If the login is allowed and isn't aborted by a validate login hook\n// callback, log in the user.\n//\nAp._attemptLogin = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  if (!result)\n    throw new Error(\"result is required\");\n\n  // XXX A programming error in a login handler can lead to this occuring, and\n  // then we don't call onLogin or onLoginFailure callbacks. Should\n  // tryLoginMethod catch this case and turn it into an error?\n  if (!result.userId && !result.error)\n    throw new Error(\"A login method must specify a userId or an error\");\n\n  var user;\n  if (result.userId)\n    user = this.users.findOne(result.userId);\n\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: !! (result.userId && !result.error),\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n  if (result.error)\n    attempt.error = result.error;\n  if (user)\n    attempt.user = user;\n\n  // _validateLogin may mutate `attempt` by adding an error and changing allowed\n  // to false, but that's the only change it can make (and the user's callbacks\n  // only get a clone of `attempt`).\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  if (attempt.allowed) {\n    var ret = _.extend(\n      this._loginUser(\n        methodInvocation,\n        result.userId,\n        result.stampedLoginToken\n      ),\n      result.options || {}\n    );\n    this._successfulLogin(methodInvocation.connection, attempt);\n    return ret;\n  }\n  else {\n    this._failedLogin(methodInvocation.connection, attempt);\n    throw attempt.error;\n  }\n};\n\n\n// All service specific login methods should go through this function.\n// Ensure that thrown exceptions are caught and that login hook\n// callbacks are still called.\n//\nAp._loginMethod = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  type,\n  fn\n) {\n  return this._attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    tryLoginMethod(type, fn)\n  );\n};\n\n\n// Report a login attempt failed outside the context of a normal login\n// method. This is for use in the case where there is a multi-step login\n// procedure (eg SRP based password login). If a method early in the\n// chain fails, it should call this function to report a failure. There\n// is no corresponding method for a successful login; methods that can\n// succeed at logging a user in should always be actual login methods\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).\nAp._reportLoginFailure = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: false,\n    error: result.error,\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n\n  if (result.userId) {\n    attempt.user = this.users.findOne(result.userId);\n  }\n\n  this._validateLogin(methodInvocation.connection, attempt);\n  this._failedLogin(methodInvocation.connection, attempt);\n\n  // _validateLogin may mutate attempt to set a new error message. Return\n  // the modified version.\n  return attempt;\n};\n\n\n///\n/// LOGIN HANDLERS\n///\n\n// The main entry point for auth packages to hook in to login.\n//\n// A login handler is a login method which can return `undefined` to\n// indicate that the login request is not handled by this handler.\n//\n// @param name {String} Optional.  The service name, used by default\n// if a specific service name isn't returned in the result.\n//\n// @param handler {Function} A function that receives an options object\n// (as passed as an argument to the `login` method) and returns one of:\n// - `undefined`, meaning don't handle;\n// - a login method result object\n\nAp.registerLoginHandler = function (name, handler) {\n  if (! handler) {\n    handler = name;\n    name = null;\n  }\n\n  this._loginHandlers.push({\n    name: name,\n    handler: handler\n  });\n};\n\n\n// Checks a user's credentials against all the registered login\n// handlers, and returns a login token if the credentials are valid. It\n// is like the login method, except that it doesn't set the logged-in\n// user on the connection. Throws a Meteor.Error if logging in fails,\n// including the case where none of the login handlers handled the login\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n//\n// For example, if you want to login with a plaintext password, `options` could be\n//   { user: { username: <username> }, password: <password> }, or\n//   { user: { email: <email> }, password: <password> }.\n\n// Try all of the registered login handlers until one of them doesn't\n// return `undefined`, meaning it handled this call to `login`. Return\n// that return value.\nAp._runLoginHandlers = function (methodInvocation, options) {\n  for (var i = 0; i < this._loginHandlers.length; ++i) {\n    var handler = this._loginHandlers[i];\n\n    var result = tryLoginMethod(\n      handler.name,\n      function () {\n        return handler.handler.call(methodInvocation, options);\n      }\n    );\n\n    if (result) {\n      return result;\n    }\n\n    if (result !== undefined) {\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n    }\n  }\n\n  return {\n    type: null,\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")\n  };\n};\n\n// Deletes the given loginToken from the database.\n//\n// For new-style hashed token, this will cause all connections\n// associated with the token to be closed.\n//\n// Any connections associated with old-style unhashed tokens will be\n// in the process of becoming associated with hashed tokens and then\n// they'll get closed.\nAp.destroyToken = function (userId, loginToken) {\n  this.users.update(userId, {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { hashedToken: loginToken },\n          { token: loginToken }\n        ]\n      }\n    }\n  });\n};\n\nAp._initServerMethods = function () {\n  // The methods created in this function need to be created here so that\n  // this variable is available in their scope.\n  var accounts = this;\n\n  // This object will be populated with methods and then passed to\n  // accounts._server.methods further below.\n  var methods = {};\n\n  // @returns {Object|null}\n  //   If successful, returns {token: reconnectToken, id: userId}\n  //   If unsuccessful (for example, if the user closed the oauth login popup),\n  //     throws an error describing the reason\n  methods.login = function (options) {\n    var self = this;\n\n    // Login handlers should really also check whatever field they look at in\n    // options, but we don't enforce it.\n    check(options, Object);\n\n    var result = accounts._runLoginHandlers(self, options);\n\n    return accounts._attemptLogin(self, \"login\", arguments, result);\n  };\n\n  methods.logout = function () {\n    var token = accounts._getLoginToken(this.connection.id);\n    accounts._setLoginToken(this.userId, this.connection, null);\n    if (token && this.userId)\n      accounts.destroyToken(this.userId, token);\n    this.setUserId(null);\n  };\n\n  // Delete all the current user's tokens and close all open connections logged\n  // in as this user. Returns a fresh new login token that this client can\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n  // immediately instead of using a delay.\n  //\n  // XXX COMPAT WITH 0.7.2\n  // This single `logoutOtherClients` method has been replaced with two\n  // methods, one that you call to get a new token, and another that you\n  // call to remove all tokens except your own. The new design allows\n  // clients to know when other clients have actually been logged\n  // out. (The `logoutOtherClients` method guarantees the caller that\n  // the other clients will be logged out at some point, but makes no\n  // guarantees about when.) This method is left in for backwards\n  // compatibility, especially since application code might be calling\n  // this method directly.\n  //\n  // @returns {Object} Object with token and tokenExpires keys.\n  methods.logoutOtherClients = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": true\n      }\n    });\n    if (user) {\n      // Save the current tokens in the database to be deleted in\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n      // caller's browser time to find the fresh token in localStorage. We save\n      // the tokens in the database in case we crash before actually deleting\n      // them.\n      var tokens = user.services.resume.loginTokens;\n      var newToken = accounts._generateStampedLoginToken();\n      var userId = self.userId;\n      accounts.users.update(userId, {\n        $set: {\n          \"services.resume.loginTokensToDelete\": tokens,\n          \"services.resume.haveLoginTokensToDelete\": true\n        },\n        $push: { \"services.resume.loginTokens\": accounts._hashStampedToken(newToken) }\n      });\n      Meteor.setTimeout(function () {\n        // The observe on Meteor.users will take care of closing the connections\n        // associated with `tokens`.\n        accounts._deleteSavedTokensForUser(userId, tokens);\n      }, accounts._noConnectionCloseDelayForTest ? 0 :\n                        CONNECTION_CLOSE_DELAY_MS);\n      // We do not set the login token on this connection, but instead the\n      // observe closes the connection and the client will reconnect with the\n      // new token.\n      return {\n        token: newToken.token,\n        tokenExpires: accounts._tokenExpiration(newToken.when)\n      };\n    } else {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n  };\n\n  // Generates a new login token with the same expiration as the\n  // connection's current token and saves it to the database. Associates\n  // the connection with this new token and returns it. Throws an error\n  // if called on a connection that isn't logged in.\n  //\n  // @returns Object\n  //   If successful, returns { token: <new token>, id: <user id>,\n  //   tokenExpires: <expiration date> }.\n  methods.getNewToken = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: { \"services.resume.loginTokens\": 1 }\n    });\n    if (! self.userId || ! user) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    // Be careful not to generate a new token that has a later\n    // expiration than the curren token. Otherwise, a bad guy with a\n    // stolen token could use this method to stop his stolen token from\n    // ever expiring.\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);\n    var currentStampedToken = _.find(\n      user.services.resume.loginTokens,\n      function (stampedToken) {\n        return stampedToken.hashedToken === currentHashedToken;\n      }\n    );\n    if (! currentStampedToken) { // safety belt: this should never happen\n      throw new Meteor.Error(\"Invalid login token\");\n    }\n    var newStampedToken = accounts._generateStampedLoginToken();\n    newStampedToken.when = currentStampedToken.when;\n    accounts._insertLoginToken(self.userId, newStampedToken);\n    return accounts._loginUser(self, self.userId, newStampedToken);\n  };\n\n  // Removes all tokens except the token associated with the current\n  // connection. Throws an error if the connection is not logged\n  // in. Returns nothing on success.\n  methods.removeOtherTokens = function () {\n    var self = this;\n    if (! self.userId) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    var currentToken = accounts._getLoginToken(self.connection.id);\n    accounts.users.update(self.userId, {\n      $pull: {\n        \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n      }\n    });\n  };\n\n  // Allow a one-time configuration for a login service. Modifications\n  // to this collection are also allowed in insecure mode.\n  methods.configureLoginService = function (options) {\n    check(options, Match.ObjectIncluding({service: String}));\n    // Don't let random users configure a service we haven't added yet (so\n    // that when we do later add it, it's set up with their configuration\n    // instead of ours).\n    // XXX if service configuration is oauth-specific then this code should\n    //     be in accounts-oauth; if it's not then the registry should be\n    //     in this package\n    if (!(accounts.oauth\n          && _.contains(accounts.oauth.serviceNames(), options.service))) {\n      throw new Meteor.Error(403, \"Service unknown\");\n    }\n\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    if (ServiceConfiguration.configurations.findOne({service: options.service}))\n      throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n\n    if (_.has(options, \"secret\") && usingOAuthEncryption())\n      options.secret = OAuthEncryption.seal(options.secret);\n\n    ServiceConfiguration.configurations.insert(options);\n  };\n\n  accounts._server.methods(methods);\n};\n\nAp._initAccountDataHooks = function () {\n  var accounts = this;\n\n  accounts._server.onConnection(function (connection) {\n    accounts._accountData[connection.id] = {\n      connection: connection\n    };\n\n    connection.onClose(function () {\n      accounts._removeTokenFromConnection(connection.id);\n      delete accounts._accountData[connection.id];\n    });\n  });\n};\n\nAp._initServerPublications = function () {\n  var accounts = this;\n\n  // Publish all login service configuration fields other than secret.\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n  }, {is_auto: true}); // not techincally autopublish, but stops the warning.\n\n  // Publish the current user's record to the client.\n  accounts._server.publish(null, function () {\n    if (this.userId) {\n      return accounts.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          profile: 1,\n          username: 1,\n          emails: 1\n        }\n      });\n    } else {\n      return null;\n    }\n  }, /*suppress autopublish warning*/{is_auto: true});\n\n  // Use Meteor.startup to give other packages a chance to call\n  // addAutopublishFields.\n  Package.autopublish && Meteor.startup(function () {\n    // ['profile', 'username'] -> {profile: 1, username: 1}\n    var toFieldSelector = function (fields) {\n      return _.object(_.map(fields, function (field) {\n        return [field, 1];\n      }));\n    };\n\n    accounts._server.publish(null, function () {\n      if (this.userId) {\n        return accounts.users.find({\n          _id: this.userId\n        }, {\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)\n        });\n      } else {\n        return null;\n      }\n    }, /*suppress autopublish warning*/{is_auto: true});\n\n    // XXX this publish is neither dedup-able nor is it optimized by our special\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)\n    // run-time performance every time a user document is changed (eg someone\n    // logging in). If this is a problem, we can instead write a manual publish\n    // function which filters out fields based on 'this.userId'.\n    accounts._server.publish(null, function () {\n      var selector = this.userId ? {\n        _id: { $ne: this.userId }\n      } : {};\n\n      return accounts.users.find(selector, {\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)\n      });\n    }, /*suppress autopublish warning*/{is_auto: true});\n  });\n};\n\n// Add to the list of fields or subfields to be automatically\n// published if autopublish is on. Must be called from top-level\n// code (ie, before Meteor.startup hooks run).\n//\n// @param opts {Object} with:\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in\nAp.addAutopublishFields = function (opts) {\n  this._autopublishFields.loggedInUser.push.apply(\n    this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n  this._autopublishFields.otherUsers.push.apply(\n    this._autopublishFields.otherUsers, opts.forOtherUsers);\n};\n\n///\n/// ACCOUNT DATA\n///\n\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a\n// connection. Maybe there should be a public way to do that.\nAp._getAccountData = function (connectionId, field) {\n  var data = this._accountData[connectionId];\n  return data && data[field];\n};\n\nAp._setAccountData = function (connectionId, field, value) {\n  var data = this._accountData[connectionId];\n\n  // safety belt. shouldn't happen. accountData is set in onConnection,\n  // we don't have a connectionId until it is set.\n  if (!data)\n    return;\n\n  if (value === undefined)\n    delete data[field];\n  else\n    data[field] = value;\n};\n\n\n///\n/// RECONNECT TOKENS\n///\n/// support reconnecting using a meteor login token\n\nAp._hashLoginToken = function (loginToken) {\n  var hash = crypto.createHash('sha256');\n  hash.update(loginToken);\n  return hash.digest('base64');\n};\n\n\n// {token, when} => {hashedToken, when}\nAp._hashStampedToken = function (stampedToken) {\n  return _.extend(_.omit(stampedToken, 'token'), {\n    hashedToken: this._hashLoginToken(stampedToken.token)\n  });\n};\n\n\n// Using $addToSet avoids getting an index error if another client\n// logging in simultaneously has already inserted the new hashed\n// token.\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {\n  query = query ? _.clone(query) : {};\n  query._id = userId;\n  this.users.update(query, {\n    $addToSet: {\n      \"services.resume.loginTokens\": hashedToken\n    }\n  });\n};\n\n\n// Exported for tests.\nAp._insertLoginToken = function (userId, stampedToken, query) {\n  this._insertHashedLoginToken(\n    userId,\n    this._hashStampedToken(stampedToken),\n    query\n  );\n};\n\n\nAp._clearAllLoginTokens = function (userId) {\n  this.users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': []\n    }\n  });\n};\n\n// test hook\nAp._getUserObserve = function (connectionId) {\n  return this._userObservesForConnections[connectionId];\n};\n\n// Clean up this connection's association with the token: that is, stop\n// the observe that we started when we associated the connection with\n// this token.\nAp._removeTokenFromConnection = function (connectionId) {\n  if (_.has(this._userObservesForConnections, connectionId)) {\n    var observe = this._userObservesForConnections[connectionId];\n    if (typeof observe === 'number') {\n      // We're in the process of setting up an observe for this connection. We\n      // can't clean up that observe yet, but if we delete the placeholder for\n      // this connection, then the observe will get cleaned up as soon as it has\n      // been set up.\n      delete this._userObservesForConnections[connectionId];\n    } else {\n      delete this._userObservesForConnections[connectionId];\n      observe.stop();\n    }\n  }\n};\n\nAp._getLoginToken = function (connectionId) {\n  return this._getAccountData(connectionId, 'loginToken');\n};\n\n// newToken is a hashed token.\nAp._setLoginToken = function (userId, connection, newToken) {\n  var self = this;\n\n  self._removeTokenFromConnection(connection.id);\n  self._setAccountData(connection.id, 'loginToken', newToken);\n\n  if (newToken) {\n    // Set up an observe for this token. If the token goes away, we need\n    // to close the connection.  We defer the observe because there's\n    // no need for it to be on the critical path for login; we just need\n    // to ensure that the connection will get closed at some point if\n    // the token gets deleted.\n    //\n    // Initially, we set the observe for this connection to a number; this\n    // signifies to other code (which might run while we yield) that we are in\n    // the process of setting up an observe for this connection. Once the\n    // observe is ready to go, we replace the number with the real observe\n    // handle (unless the placeholder has been deleted or replaced by a\n    // different placehold number, signifying that the connection was closed\n    // already -- in this case we just clean up the observe that we started).\n    var myObserveNumber = ++self._nextUserObserveNumber;\n    self._userObservesForConnections[connection.id] = myObserveNumber;\n    Meteor.defer(function () {\n      // If something else happened on this connection in the meantime (it got\n      // closed, or another call to _setLoginToken happened), just do\n      // nothing. We don't need to start an observe for an old connection or old\n      // token.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        return;\n      }\n\n      var foundMatchingUser;\n      // Because we upgrade unhashed login tokens to hashed tokens at\n      // login time, sessions will only be logged in with a hashed\n      // token. Thus we only need to observe hashed tokens here.\n      var observe = self.users.find({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': newToken\n      }, { fields: { _id: 1 } }).observeChanges({\n        added: function () {\n          foundMatchingUser = true;\n        },\n        removed: function () {\n          connection.close();\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }\n      });\n\n      // If the user ran another login or logout command we were waiting for the\n      // defer or added to fire (ie, another call to _setLoginToken occurred),\n      // then we let the later one win (start an observe, etc) and just stop our\n      // observe now.\n      //\n      // Similarly, if the connection was already closed, then the onClose\n      // callback would have called _removeTokenFromConnection and there won't\n      // be an entry in _userObservesForConnections. We can stop the observe.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        observe.stop();\n        return;\n      }\n\n      self._userObservesForConnections[connection.id] = observe;\n\n      if (! foundMatchingUser) {\n        // We've set up an observe on the user associated with `newToken`,\n        // so if the new token is removed from the database, we'll close\n        // the connection. But the token might have already been deleted\n        // before we set up the observe, which wouldn't have closed the\n        // connection because the observe wasn't running yet.\n        connection.close();\n      }\n    });\n  }\n};\n\nfunction setupDefaultLoginHandlers(accounts) {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}\n\n// Login handler for resume tokens.\nfunction defaultResumeLoginHandler(accounts, options) {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  var hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  var user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {\"services.resume.loginTokens.token\": options.resume}\n      ]\n    });\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  var oldUnhashedStyleToken;\n  var token = _.find(user.services.resume.loginTokens, function (token) {\n    return token.hashedToken === hashedToken;\n  });\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = _.find(user.services.resume.loginTokens, function (token) {\n      return token.token === options.resume;\n    });\n    oldUnhashedStyleToken = true;\n  }\n\n  var tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n}\n\n// (Also used by Meteor Accounts server and tests).\n//\nAp._generateStampedLoginToken = function () {\n  return {\n    token: Random.secret(),\n    when: new Date\n  };\n};\n\n///\n/// TOKEN EXPIRATION\n///\n\n// Deletes expired tokens from the database and closes all open connections\n// associated with these tokens.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expireTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n  var userFilter = userId ? {_id: userId} : {};\n\n\n  // Backwards compatible with older versions of meteor that stored login token\n  // timestamps as numbers.\n  this.users.update(_.extend(userFilter, {\n    $or: [\n      { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n      { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n    ]\n  }), {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { when: { $lt: oldestValidDate } },\n          { when: { $lt: +oldestValidDate } }\n        ]\n      }\n    }\n  }, { multi: true });\n  // The observe on Meteor.users will take care of closing connections for\n  // expired tokens.\n};\n\n// @override from accounts_common.js\nAp.config = function (options) {\n  // Call the overridden implementation of the method.\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n  // If the user set loginExpirationInDays to null, then we need to clear the\n  // timer that periodically expires tokens.\n  if (_.has(this._options, \"loginExpirationInDays\") &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);\n    this.expireTokenInterval = null;\n  }\n\n  return superResult;\n};\n\nfunction setExpireTokensInterval(accounts) {\n  accounts.expireTokenInterval = Meteor.setInterval(function () {\n    accounts._expireTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}\n\n\n///\n/// OAuth Encryption Support\n///\n\nvar OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nfunction usingOAuthEncryption() {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}\n\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nfunction pinEncryptedFieldsToUser(serviceData, userId) {\n  _.each(_.keys(serviceData), function (key) {\n    var value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(function () {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(function (config) {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nfunction defaultCreateUserHook(options, user) {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n}\n\n// Called by accounts-password\nAp.insertUserDoc = function (options, user) {\n  // - clone user document, to protect from modification\n  // - add createdAt timestamp\n  // - prepare an _id, so that you can modify other collections (eg\n  // create a first task for every new user)\n  //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might\n  // end up having modified some other collection\n  // inappropriately. The solution is probably to have onCreateUser\n  // accept two callbacks - one that gets called before inserting\n  // the user document (in which you can modify its contents), and\n  // one that gets called after (in which you should change other\n  // collections)\n  user = _.extend({\n    createdAt: new Date(),\n    _id: Random.id()\n  }, user);\n\n  if (user.services) {\n    _.each(user.services, function (serviceData) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n    });\n  }\n\n  var fullUser;\n  if (this._onCreateUserHook) {\n    fullUser = this._onCreateUserHook(options, user);\n\n    // This is *not* part of the API. We need this because we can't isolate\n    // the global server environment between tests, meaning we can't test\n    // both having a create user hook set and not having one set.\n    if (fullUser === 'TEST DEFAULT HOOK')\n      fullUser = defaultCreateUserHook(options, user);\n  } else {\n    fullUser = defaultCreateUserHook(options, user);\n  }\n\n  _.each(this._validateNewUserHooks, function (hook) {\n    if (! hook(fullUser))\n      throw new Meteor.Error(403, \"User validation failed\");\n  });\n\n  var userId;\n  try {\n    userId = this.users.insert(fullUser);\n  } catch (e) {\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e;\n    if (e.code !== 11000) throw e;\n    if (e.err.indexOf('emails.address') !== -1)\n      throw new Meteor.Error(403, \"Email already exists.\");\n    if (e.err.indexOf('username') !== -1)\n      throw new Meteor.Error(403, \"Username already exists.\");\n    // XXX better error reporting for services.facebook.id duplicate, etc\n    throw e;\n  }\n  return userId;\n};\n\n// Helper function: returns false if email does not match company domain from\n// the configuration.\nAp._testEmailDomain = function (email) {\n  var domain = this._options.restrictCreationByEmailDomain;\n  return !domain ||\n    (_.isFunction(domain) && domain(email)) ||\n    (_.isString(domain) &&\n      (new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i')).test(email));\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  var self = this;\n  var domain = self._options.restrictCreationByEmailDomain;\n  if (!domain)\n    return true;\n\n  var emailIsGood = false;\n  if (!_.isEmpty(user.emails)) {\n    emailIsGood = _.any(user.emails, function (email) {\n      return self._testEmailDomain(email.address);\n    });\n  } else if (!_.isEmpty(user.services)) {\n    // Find any email of any service and check it\n    emailIsGood = _.any(user.services, function (service) {\n      return service.email && self._testEmailDomain(service.email);\n    });\n  }\n\n  if (emailIsGood)\n    return true;\n\n  if (_.isString(domain))\n    throw new Meteor.Error(403, \"@\" + domain + \" email required\");\n  else\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n}\n\n///\n/// MANAGING USER OBJECTS\n///\n\n// Updates or creates a user after we authenticate with a 3rd party.\n//\n// @param serviceName {String} Service name (eg, twitter).\n// @param serviceData {Object} Data to store in the user's record\n//        under services[serviceName]. Must include an \"id\" field\n//        which is a unique identifier for the user in the service.\n// @param options {Object, optional} Other options to pass to insertUserDoc\n//        (eg, profile)\n// @returns {Object} Object with token and id keys, like the result\n//        of the \"login\" method.\n//\nAp.updateOrCreateUserFromExternalService = function (\n  serviceName,\n  serviceData,\n  options\n) {\n  options = _.clone(options || {});\n\n  if (serviceName === \"password\" || serviceName === \"resume\")\n    throw new Error(\n      \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n  if (!_.has(serviceData, 'id'))\n    throw new Error(\n      \"Service data for service \" + serviceName + \" must include id\");\n\n  // Look for a user with the appropriate service user id.\n  var selector = {};\n  var serviceIdKey = \"services.\" + serviceName + \".id\";\n\n  // XXX Temporary special case for Twitter. (Issue #629)\n  //   The serviceData.id will be a string representation of an integer.\n  //   We want it to match either a stored string or int representation.\n  //   This is to cater to earlier versions of Meteor storing twitter\n  //   user IDs in number form, and recent versions storing them as strings.\n  //   This can be removed once migration technology is in place, and twitter\n  //   users stored with integer IDs have been migrated to string IDs.\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n    selector[\"$or\"] = [{},{}];\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n  } else {\n    selector[serviceIdKey] = serviceData.id;\n  }\n\n  var user = this.users.findOne(selector);\n\n  if (user) {\n    pinEncryptedFieldsToUser(serviceData, user._id);\n\n    // We *don't* process options (eg, profile) for update, but we do replace\n    // the serviceData (eg, so that we keep an unexpired access token and\n    // don't cache old email addresses in serviceData.email).\n    // XXX provide an onUpdateUser hook which would let apps update\n    //     the profile too\n    var setAttrs = {};\n    _.each(serviceData, function (value, key) {\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;\n    });\n\n    // XXX Maybe we should re-use the selector above and notice if the update\n    //     touches nothing?\n    this.users.update(user._id, {\n      $set: setAttrs\n    });\n\n    return {\n      type: serviceName,\n      userId: user._id\n    };\n\n  } else {\n    // Create a new user with the service data. Pass other options through to\n    // insertUserDoc.\n    user = {services: {}};\n    user.services[serviceName] = serviceData;\n    return {\n      type: serviceName,\n      userId: this.insertUserDoc(options, user)\n    };\n  }\n};\n\nfunction setupUsersCollection(users) {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: function (userId, user, fields, modifier) {\n      // make sure it is our record\n      if (user._id !== userId)\n        return false;\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile')\n        return false;\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users._ensureIndex('username', {unique: 1, sparse: 1});\n  users._ensureIndex('emails.address', {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.hashedToken',\n                     {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.token',\n                     {unique: 1, sparse: 1});\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users._ensureIndex('services.resume.haveLoginTokensToDelete',\n                     { sparse: 1 });\n  // For expiring login tokens\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: 1 });\n}\n\n///\n/// CLEAN UP FOR `logoutOtherClients`\n///\n\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {\n  if (tokensToDelete) {\n    this.users.update(userId, {\n      $unset: {\n        \"services.resume.haveLoginTokensToDelete\": 1,\n        \"services.resume.loginTokensToDelete\": 1\n      },\n      $pullAll: {\n        \"services.resume.loginTokens\": tokensToDelete\n      }\n    });\n  }\n};\n\nAp._deleteSavedTokensForAllUsersOnStartup = function () {\n  var self = this;\n\n  // If we find users who have saved tokens to delete on startup, delete\n  // them now. It's possible that the server could have crashed and come\n  // back up before new tokens are found in localStorage, but this\n  // shouldn't happen very often. We shouldn't put a delay here because\n  // that would give a lot of power to an attacker with a stolen login\n  // token and the ability to crash the server.\n  Meteor.startup(function () {\n    self.users.find({\n      \"services.resume.haveLoginTokensToDelete\": true\n    }, {\n      \"services.resume.loginTokensToDelete\": 1\n    }).forEach(function (user) {\n      self._deleteSavedTokensForUser(\n        user._id,\n        user.services.resume.loginTokensToDelete\n      );\n    });\n  });\n};\n","var Ap = AccountsCommon.prototype;\nvar defaultRateLimiterRuleId;\n// Removes default rate limiting rule\nAp.removeDefaultRateLimit = function () {\n  const resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);\n  defaultRateLimiterRuleId = null;\n  return resp;\n};\n\n// Add a default rule of limiting logins, creating new users and password reset\n// to 5 times every 10 seconds per connection.\nAp.addDefaultRateLimit = function () {\n  if (!defaultRateLimiterRuleId) {\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n      userId: null,\n      clientAddress: null,\n      type: 'method',\n      name: function (name) {\n        return _.contains(['login', 'createUser', 'resetPassword',\n          'forgotPassword'], name);\n      },\n      connectionId: function (connectionId) {\n        return true;\n      }\n    }, 5, 10000);\n  }\n};\n\nAp.addDefaultRateLimit();\n","// XXX These should probably not actually be public?\n\nAccountsServer.prototype.urls = {\n  resetPassword: function (token) {\n    return Meteor.absoluteUrl('#/reset-password/' + token);\n  },\n\n  verifyEmail: function (token) {\n    return Meteor.absoluteUrl('#/verify-email/' + token);\n  },\n\n  enrollAccount: function (token) {\n    return Meteor.absoluteUrl('#/enroll-account/' + token);\n  }\n};\n","/**\n * @namespace Accounts\n * @summary The namespace for all server-side accounts-related methods.\n */\nAccounts = new AccountsServer(Meteor.server);\n\n// Users table. Don't use the normal autopublish, since we want to hide\n// some fields. Code to autopublish this is in accounts_server.js.\n// XXX Allow users to configure this collection name.\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n */\nMeteor.users = Accounts.users;\n"]}}]