[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar InjectData = Package['meteorhacks:inject-data'].InjectData;\nvar Picker = Package['meteorhacks:picker'].Picker;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsServer = Package['accounts-base'].AccountsServer;\n\n/* Package-scope variables */\nvar AddedToChanged, ApplyDDP, DeepExtend, FastRender, IsAppUrl, PublishContext, Context;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks_fast-render/lib/utils.js                                                                  //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nAddedToChanged = function(localCopy, added) {                                                                     // 1\n  added.msg = \"changed\";                                                                                          // 2\n  added.cleared = [];                                                                                             // 3\n  added.fields = added.fields || {};                                                                              // 4\n                                                                                                                  // 5\n  _.each(localCopy, function(value, key) {                                                                        // 6\n    if(key != '_id') {                                                                                            // 7\n      if(typeof added.fields[key] == \"undefined\") {                                                               // 8\n        added.cleared.push(key);                                                                                  // 9\n      }                                                                                                           // 10\n    }                                                                                                             // 11\n  });                                                                                                             // 12\n};                                                                                                                // 13\n                                                                                                                  // 14\nApplyDDP = function(existing, message) {                                                                          // 15\n  var newDoc = (!existing)? {}: _.clone(existing);                                                                // 16\n  if(message.msg == 'added') {                                                                                    // 17\n    _.each(message.fields, function(value, key) {                                                                 // 18\n      newDoc[key] = value;                                                                                        // 19\n    });                                                                                                           // 20\n  } else if(message.msg == \"changed\") {                                                                           // 21\n    _.each(message.fields, function(value, key) {                                                                 // 22\n      newDoc[key] = value;                                                                                        // 23\n    });                                                                                                           // 24\n    _.each(message.cleared, function(key) {                                                                       // 25\n      delete newDoc[key];                                                                                         // 26\n    });                                                                                                           // 27\n  } else if(message.msg == \"removed\") {                                                                           // 28\n    newDoc = null;                                                                                                // 29\n  }                                                                                                               // 30\n                                                                                                                  // 31\n  return newDoc;                                                                                                  // 32\n};                                                                                                                // 33\n                                                                                                                  // 34\n// source: https://gist.github.com/kurtmilam/1868955                                                              // 35\n//  modified a bit to not to expose this as an _ api                                                              // 36\nDeepExtend = function deepExtend (obj) {                                                                          // 37\n  var parentRE = /#{\\s*?_\\s*?}/,                                                                                  // 38\n      slice = Array.prototype.slice,                                                                              // 39\n      hasOwnProperty = Object.prototype.hasOwnProperty;                                                           // 40\n                                                                                                                  // 41\n  _.each(slice.call(arguments, 1), function(source) {                                                             // 42\n    for (var prop in source) {                                                                                    // 43\n      if (hasOwnProperty.call(source, prop)) {                                                                    // 44\n        if (_.isNull(obj[prop]) || _.isUndefined(obj[prop]) || _.isFunction(obj[prop]) || _.isNull(source[prop]) || _.isDate(source[prop])) {\n          obj[prop] = source[prop];                                                                               // 46\n        }                                                                                                         // 47\n        else if (_.isString(source[prop]) && parentRE.test(source[prop])) {                                       // 48\n          if (_.isString(obj[prop])) {                                                                            // 49\n            obj[prop] = source[prop].replace(parentRE, obj[prop]);                                                // 50\n          }                                                                                                       // 51\n        }                                                                                                         // 52\n        else if (_.isArray(obj[prop]) || _.isArray(source[prop])){                                                // 53\n          if (!_.isArray(obj[prop]) || !_.isArray(source[prop])){                                                 // 54\n            throw 'Error: Trying to combine an array with a non-array (' + prop + ')';                            // 55\n          } else {                                                                                                // 56\n            obj[prop] = _.reject(DeepExtend(obj[prop], source[prop]), function (item) { return _.isNull(item);});\n          }                                                                                                       // 58\n        }                                                                                                         // 59\n        else if (_.isObject(obj[prop]) || _.isObject(source[prop])){                                              // 60\n          if (!_.isObject(obj[prop]) || !_.isObject(source[prop])){                                               // 61\n            throw 'Error: Trying to combine an object with a non-object (' + prop + ')';                          // 62\n          } else {                                                                                                // 63\n            obj[prop] = DeepExtend(obj[prop], source[prop]);                                                      // 64\n          }                                                                                                       // 65\n        } else {                                                                                                  // 66\n          obj[prop] = source[prop];                                                                               // 67\n        }                                                                                                         // 68\n      }                                                                                                           // 69\n    }                                                                                                             // 70\n  });                                                                                                             // 71\n  return obj;                                                                                                     // 72\n};                                                                                                                // 73\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks_fast-render/lib/server/namespace.js                                                       //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nFastRender = {                                                                                                    // 1\n  _routes: [],                                                                                                    // 2\n  _onAllRoutes: []                                                                                                // 3\n};                                                                                                                // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks_fast-render/lib/server/utils.js                                                           //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n// meteor algorithm to check if this is a meteor serving http request or not                                      // 1\nIsAppUrl = function (req) {                                                                                       // 2\n  var url = req.url                                                                                               // 3\n  if(url === '/favicon.ico' || url === '/robots.txt') {                                                           // 4\n    return false;                                                                                                 // 5\n  }                                                                                                               // 6\n                                                                                                                  // 7\n  // NOTE: app.manifest is not a web standard like favicon.ico and                                                // 8\n  // robots.txt. It is a file name we have chosen to use for HTML5                                                // 9\n  // appcache URLs. It is included here to prevent using an appcache                                              // 10\n  // then removing it from poisoning an app permanently. Eventually,                                              // 11\n  // once we have server side routing, this won't be needed as                                                    // 12\n  // unknown URLs with return a 404 automatically.                                                                // 13\n  if(url === '/app.manifest') {                                                                                   // 14\n    return false;                                                                                                 // 15\n  }                                                                                                               // 16\n                                                                                                                  // 17\n  // Avoid serving app HTML for declared routes such as /sockjs/.                                                 // 18\n  if(RoutePolicy.classify(url)) {                                                                                 // 19\n    return false;                                                                                                 // 20\n  }                                                                                                               // 21\n                                                                                                                  // 22\n  // we only need to support HTML pages only                                                                      // 23\n  // this is a check to do it                                                                                     // 24\n  return /html/.test(req.headers['accept']);                                                                      // 25\n};                                                                                                                // 26\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks_fast-render/lib/server/routes.js                                                          //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar Fiber = Npm.require('fibers');                                                                                // 1\nFastRender._onAllRoutes = [];                                                                                     // 2\nFastRender.frContext = new Meteor.EnvironmentVariable();                                                          // 3\n                                                                                                                  // 4\nvar fastRenderRoutes = Picker.filter(function(req, res) {                                                         // 5\n  return IsAppUrl(req);                                                                                           // 6\n});                                                                                                               // 7\nfastRenderRoutes.middleware(Npm.require('connect').cookieParser());                                               // 8\nfastRenderRoutes.middleware(function(req, res, next) {                                                            // 9\n  FastRender.handleOnAllRoutes(req, res, next);                                                                   // 10\n});                                                                                                               // 11\n                                                                                                                  // 12\n// handling specific routes                                                                                       // 13\nFastRender.route = function route(path, callback) {                                                               // 14\n  if(path.indexOf('/') !== 0){                                                                                    // 15\n    throw new Error('Error: path (' + path + ') must begin with a leading slash \"/\"')                             // 16\n  }                                                                                                               // 17\n  fastRenderRoutes.route(path, FastRender.handleRoute.bind(null, callback));                                      // 18\n};                                                                                                                // 19\n                                                                                                                  // 20\nfunction setQueryDataCallback(res, next) {                                                                        // 21\n  return function(queryData) {                                                                                    // 22\n    if(!queryData) return next();                                                                                 // 23\n                                                                                                                  // 24\n    var existingPayload = InjectData.getData(res, \"fast-render-data\");                                            // 25\n    if(!existingPayload) {                                                                                        // 26\n      InjectData.pushData(res, \"fast-render-data\", queryData);                                                    // 27\n    } else {                                                                                                      // 28\n      // it's possible to execute this callback twice                                                             // 29\n      // the we need to merge exisitng data with the new one                                                      // 30\n      _.extend(existingPayload.subscriptions, queryData.subscriptions);                                           // 31\n      _.each(queryData.collectionData, function(data, pubName) {                                                  // 32\n        var existingData = existingPayload.collectionData[pubName]                                                // 33\n        if(existingData) {                                                                                        // 34\n          data = existingData.concat(data);                                                                       // 35\n        }                                                                                                         // 36\n                                                                                                                  // 37\n        existingPayload.collectionData[pubName] = data;                                                           // 38\n        InjectData.pushData(res, 'fast-render-data', existingPayload);                                            // 39\n      });                                                                                                         // 40\n    }                                                                                                             // 41\n    next();                                                                                                       // 42\n  };                                                                                                              // 43\n}                                                                                                                 // 44\n                                                                                                                  // 45\nFastRender.handleRoute = function(processingCallback, params, req, res, next) {                                   // 46\n  var afterProcessed = setQueryDataCallback(res, next);                                                           // 47\n  FastRender._processRoutes(params, req, processingCallback, afterProcessed);                                     // 48\n};                                                                                                                // 49\n                                                                                                                  // 50\nFastRender.handleOnAllRoutes = function(req, res, next) {                                                         // 51\n  var afterProcessed = setQueryDataCallback(res, next);                                                           // 52\n  FastRender._processAllRoutes(req, afterProcessed);                                                              // 53\n};                                                                                                                // 54\n                                                                                                                  // 55\nFastRender.onAllRoutes = function onAllRoutes(callback) {                                                         // 56\n  FastRender._onAllRoutes.push(callback);                                                                         // 57\n};                                                                                                                // 58\n                                                                                                                  // 59\nFastRender._processRoutes =                                                                                       // 60\n  function _processRoutes(params, req, routeCallback, callback) {                                                 // 61\n  callback = callback || function() {};                                                                           // 62\n                                                                                                                  // 63\n  var path = req.url;                                                                                             // 64\n  var loginToken = req.cookies['meteor_login_token'];                                                             // 65\n  var headers = req.headers;                                                                                      // 66\n                                                                                                                  // 67\n  var context = new Context(loginToken, { headers: headers });                                                    // 68\n                                                                                                                  // 69\n  try {                                                                                                           // 70\n    FastRender.frContext.withValue(context, function() {                                                          // 71\n      routeCallback.call(context, params, path);                                                                  // 72\n    });                                                                                                           // 73\n                                                                                                                  // 74\n    if(context.stop) {                                                                                            // 75\n      return;                                                                                                     // 76\n    }                                                                                                             // 77\n                                                                                                                  // 78\n    callback(context.getData());                                                                                  // 79\n  } catch(err) {                                                                                                  // 80\n    handleError(err, path, callback);                                                                             // 81\n  }                                                                                                               // 82\n};                                                                                                                // 83\n                                                                                                                  // 84\nFastRender._processAllRoutes =                                                                                    // 85\n  function _processAllRoutes(req, callback) {                                                                     // 86\n  callback = callback || function() {};                                                                           // 87\n                                                                                                                  // 88\n  var path = req.url;                                                                                             // 89\n  var loginToken = req.cookies['meteor_login_token'];                                                             // 90\n  var headers = req.headers;                                                                                      // 91\n                                                                                                                  // 92\n  new Fiber(function() {                                                                                          // 93\n    var context = new Context(loginToken, { headers: headers });                                                  // 94\n                                                                                                                  // 95\n    try {                                                                                                         // 96\n      FastRender._onAllRoutes.forEach(function(callback) {                                                        // 97\n        callback.call(context, req.url);                                                                          // 98\n      });                                                                                                         // 99\n                                                                                                                  // 100\n      callback(context.getData());                                                                                // 101\n    } catch(err) {                                                                                                // 102\n      handleError(err, path, callback);                                                                           // 103\n    }                                                                                                             // 104\n  }).run();                                                                                                       // 105\n};                                                                                                                // 106\n                                                                                                                  // 107\nfunction handleError(err, path, callback) {                                                                       // 108\n  var message =                                                                                                   // 109\n    'error on fast-rendering path: ' +                                                                            // 110\n    path +                                                                                                        // 111\n    \" ; error: \" + err.stack;                                                                                     // 112\n  console.error(message);                                                                                         // 113\n  callback(null);                                                                                                 // 114\n}                                                                                                                 // 115\n                                                                                                                  // 116\n// adding support for null publications                                                                           // 117\nFastRender.onAllRoutes(function() {                                                                               // 118\n  var context = this;                                                                                             // 119\n  var nullHandlers = Meteor.default_server.universal_publish_handlers;                                            // 120\n                                                                                                                  // 121\n  if(nullHandlers) {                                                                                              // 122\n    nullHandlers.forEach(function(publishHandler) {                                                               // 123\n      // console.log(publishHandler.toString());                                                                  // 124\n      var publishContext = new PublishContext(context, null);                                                     // 125\n      var params = [];                                                                                            // 126\n      context.processPublication(publishHandler, publishContext, params);                                         // 127\n                                                                                                                  // 128\n    });                                                                                                           // 129\n  }                                                                                                               // 130\n});                                                                                                               // 131\n                                                                                                                  // 132\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks_fast-render/lib/server/publish_context.js                                                 //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nPublishContext = function PublishContext(context, subscription) {                                                 // 1\n  this.userId = context.userId;                                                                                   // 2\n  this.unblock = function() {};                                                                                   // 3\n  this._subscription = subscription;                                                                              // 4\n  this._context = context;                                                                                        // 5\n  this._collectionData = {};                                                                                      // 6\n  this._onStop = [];                                                                                              // 7\n  this._stopped = false;                                                                                          // 8\n                                                                                                                  // 9\n  // connection object                                                                                            // 10\n  this.connection = {                                                                                             // 11\n    _id: Meteor.uuid(),                                                                                           // 12\n    close: function() {},                                                                                         // 13\n    onClose: function() {},                                                                                       // 14\n    // fake value, will be supported later on                                                                     // 15\n    clientAddress: \"127.0.0.1\",                                                                                   // 16\n    httpHeaders: context.headers                                                                                  // 17\n  };                                                                                                              // 18\n                                                                                                                  // 19\n  // we won't be supporting all the other fields of the Meteor's                                                  // 20\n  // Subscription class since they are private variables                                                          // 21\n};                                                                                                                // 22\n                                                                                                                  // 23\nPublishContext.prototype._addCursor = function(cursor) {                                                          // 24\n  var self = this;                                                                                                // 25\n  cursor.rewind();                                                                                                // 26\n  var collectionName =                                                                                            // 27\n    (cursor._cursorDescription)? cursor._cursorDescription.collectionName: null || //for meteor-collections       // 28\n    (cursor._collection)? cursor._collection._name: null; //for smart-collections                                 // 29\n                                                                                                                  // 30\n  this._ensureCollection(collectionName);                                                                         // 31\n  var cursorData = cursor.fetch();                                                                                // 32\n  cursorData.forEach(function(doc) {                                                                              // 33\n    self.added(collectionName, doc._id, doc);                                                                     // 34\n  });                                                                                                             // 35\n};                                                                                                                // 36\n                                                                                                                  // 37\nPublishContext.prototype._ensureCollection = function(collection) {                                               // 38\n  if (!this._collectionData[collection]) {                                                                        // 39\n    this._collectionData[collection] = [];                                                                        // 40\n  }                                                                                                               // 41\n};                                                                                                                // 42\n                                                                                                                  // 43\nPublishContext.prototype.added = function(collection, id, fields) {                                               // 44\n  this._ensureCollection(collection);                                                                             // 45\n  var doc = _.clone(fields);                                                                                      // 46\n  doc._id = id;                                                                                                   // 47\n  this._collectionData[collection].push(doc);                                                                     // 48\n};                                                                                                                // 49\n                                                                                                                  // 50\nPublishContext.prototype.changed = function(collection, id, fields) {                                             // 51\n  var collectionData = this._collectionData;                                                                      // 52\n                                                                                                                  // 53\n  collectionData[collection] = collectionData[collection].map(function(doc) {                                     // 54\n    if (doc._id === id) {                                                                                         // 55\n      return _.extend(doc, fields);                                                                               // 56\n    }                                                                                                             // 57\n                                                                                                                  // 58\n    return doc;                                                                                                   // 59\n  });                                                                                                             // 60\n};                                                                                                                // 61\n                                                                                                                  // 62\nPublishContext.prototype.removed = function(collection, id) {                                                     // 63\n  var collectionData = this._collectionData;                                                                      // 64\n                                                                                                                  // 65\n  collectionData[collection] = collectionData[collection].filter(function(doc) {                                  // 66\n    return doc._id !== id;                                                                                        // 67\n  });                                                                                                             // 68\n};                                                                                                                // 69\n                                                                                                                  // 70\nPublishContext.prototype.onStop = function(cb) {                                                                  // 71\n  if (this._stopped) {                                                                                            // 72\n    cb();                                                                                                         // 73\n  } else {                                                                                                        // 74\n    this._onStop.push(cb);                                                                                        // 75\n  }                                                                                                               // 76\n};                                                                                                                // 77\n                                                                                                                  // 78\nPublishContext.prototype.ready = function() {                                                                     // 79\n  this._stopped = true;                                                                                           // 80\n                                                                                                                  // 81\n  //make the subscription be marked as ready                                                                      // 82\n  if(this._subscription) {                                                                                        // 83\n    //don't do this for null subscriptions                                                                        // 84\n    this._context.completeSubscriptions(this._subscription);                                                      // 85\n  }                                                                                                               // 86\n                                                                                                                  // 87\n  //make sure that any observe callbacks are cancelled                                                            // 88\n  this._onStop.forEach(function(cb) {                                                                             // 89\n    cb();                                                                                                         // 90\n  });                                                                                                             // 91\n};                                                                                                                // 92\n                                                                                                                  // 93\nPublishContext.prototype.error = function() {};                                                                   // 94\nPublishContext.prototype.stop = function() {};                                                                    // 95\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks_fast-render/lib/server/context.js                                                         //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar Fibers = Npm.require('fibers');                                                                               // 1\nvar Future = Npm.require('fibers/future');                                                                        // 2\n                                                                                                                  // 3\nContext = function Context(loginToken, otherParams) {                                                             // 4\n  this._collectionData = {};                                                                                      // 5\n  this._subscriptions = {};                                                                                       // 6\n  this._loginToken = loginToken;                                                                                  // 7\n                                                                                                                  // 8\n  _.extend(this, otherParams);                                                                                    // 9\n                                                                                                                  // 10\n  // get the user                                                                                                 // 11\n  if(Meteor.users) {                                                                                              // 12\n    // check to make sure, we've the loginToken,                                                                  // 13\n    // otherwise a random user will fetched from the db                                                           // 14\n    if(loginToken) {                                                                                              // 15\n      var hashedToken = loginToken && Accounts._hashLoginToken( loginToken );                                     // 16\n      var query = {'services.resume.loginTokens.hashedToken': hashedToken };                                      // 17\n      var options = {fields: {_id: 1}};                                                                           // 18\n      var user = Meteor.users.findOne(query, options);                                                            // 19\n    }                                                                                                             // 20\n                                                                                                                  // 21\n    //support for Meteor.user                                                                                     // 22\n    Fibers.current._meteor_dynamics = {};                                                                         // 23\n    Fibers.current._meteor_dynamics[DDP._CurrentInvocation.slot] = this;                                          // 24\n                                                                                                                  // 25\n    if(user) {                                                                                                    // 26\n      this.userId = user._id;                                                                                     // 27\n    }                                                                                                             // 28\n  }                                                                                                               // 29\n};                                                                                                                // 30\n                                                                                                                  // 31\nContext.prototype.subscribe = function(subName /*, params */) {                                                   // 32\n  var self = this;                                                                                                // 33\n                                                                                                                  // 34\n  var publishHandler = Meteor.default_server.publish_handlers[subName];                                           // 35\n  if(publishHandler) {                                                                                            // 36\n    var params = Array.prototype.slice.call(arguments, 1);                                                        // 37\n    var subscription = {name: subName, params: params}                                                            // 38\n    var publishContext = new PublishContext(this, subscription);                                                  // 39\n                                                                                                                  // 40\n    return this.processPublication(publishHandler, publishContext, params);                                       // 41\n  } else {                                                                                                        // 42\n    console.warn('There is no such publish handler named:', subName);                                             // 43\n    return {};                                                                                                    // 44\n  }                                                                                                               // 45\n};                                                                                                                // 46\n                                                                                                                  // 47\nContext.prototype.processPublication = function(publishHandler, publishContext, params) {                         // 48\n  var self = this;                                                                                                // 49\n  var data = {};                                                                                                  // 50\n  var ensureCollection = function(collectionName) {                                                               // 51\n    self._ensureCollection(collectionName);                                                                       // 52\n    if(!data[collectionName]) {                                                                                   // 53\n      data[collectionName] = [];                                                                                  // 54\n    }                                                                                                             // 55\n  };                                                                                                              // 56\n                                                                                                                  // 57\n  var future = new Future();                                                                                      // 58\n  //detect when the context is ready to be sent to the client                                                     // 59\n  publishContext.onStop(function() {                                                                              // 60\n    if(!future.isResolved()) {                                                                                    // 61\n      future.return();                                                                                            // 62\n    }                                                                                                             // 63\n  });                                                                                                             // 64\n                                                                                                                  // 65\n  try {                                                                                                           // 66\n    var cursors = publishHandler.apply(publishContext, params);                                                   // 67\n  } catch(ex) {                                                                                                   // 68\n    console.warn('error caught on publication: ', publishContext._subscription, ': ', ex.message);                // 69\n    // since, this subscription caught on an error we can't proceed.                                              // 70\n    // but we can't also throws an error since other publications might have something useful                     // 71\n    // So, it's not fair to ignore running them due to error of this sub                                          // 72\n    // this might also be failed due to the use of some private API's of Meteor's Susbscription class             // 73\n    publishContext.ready();                                                                                       // 74\n  }                                                                                                               // 75\n                                                                                                                  // 76\n  if(cursors) {                                                                                                   // 77\n    //the publish function returned a cursor                                                                      // 78\n    if(cursors.constructor != Array) {                                                                            // 79\n      cursors = [cursors];                                                                                        // 80\n    }                                                                                                             // 81\n                                                                                                                  // 82\n    //add collection data                                                                                         // 83\n    cursors.forEach(function(cursor) {                                                                            // 84\n      publishContext._addCursor(cursor);                                                                          // 85\n    });                                                                                                           // 86\n                                                                                                                  // 87\n    //the subscription is ready                                                                                   // 88\n    publishContext.ready();                                                                                       // 89\n  } else if(cursors === null) {                                                                                   // 90\n    //some developers send null to indicate they are not using the publication                                    // 91\n    //this is not the way to go, but meteor's accounts-base also does this                                        // 92\n    //so we need some special handling on this                                                                    // 93\n    publishContext.ready();                                                                                       // 94\n  }                                                                                                               // 95\n                                                                                                                  // 96\n  if (!future.isResolved()) {                                                                                     // 97\n    //don't wait forever for handler to fire ready()                                                              // 98\n    Meteor.setTimeout(function() {                                                                                // 99\n      if (!future.isResolved()) {                                                                                 // 100\n        //publish handler failed to send ready signal in time                                                     // 101\n        console.warn('Publish handler for', publishContext._subscription, 'sent no ready signal');                // 102\n        future.return();                                                                                          // 103\n      }                                                                                                           // 104\n    }, 500);  //arbitrarially set timeout to 500ms, should probably be configurable                               // 105\n                                                                                                                  // 106\n    // wait for the subscription became ready.                                                                    // 107\n    future.wait();                                                                                                // 108\n  }                                                                                                               // 109\n                                                                                                                  // 110\n  // get the data                                                                                                 // 111\n  _.each(publishContext._collectionData, function(collData, collectionName) {                                     // 112\n    ensureCollection(collectionName);                                                                             // 113\n    data[collectionName].push(collData);                                                                          // 114\n                                                                                                                  // 115\n    // copy the collection data in publish context into the FR context                                            // 116\n    self._ensureCollection(collectionName);                                                                       // 117\n    self._collectionData[collectionName].push(collData);                                                          // 118\n  });                                                                                                             // 119\n                                                                                                                  // 120\n  return data;                                                                                                    // 121\n};                                                                                                                // 122\n                                                                                                                  // 123\nContext.prototype.completeSubscriptions = function(subscription) {                                                // 124\n  var subs = this._subscriptions[subscription.name];                                                              // 125\n  if(!subs) {                                                                                                     // 126\n    subs = this._subscriptions[subscription.name] = {};                                                           // 127\n  }                                                                                                               // 128\n                                                                                                                  // 129\n  subs[EJSON.stringify(subscription.params)] = true;                                                              // 130\n};                                                                                                                // 131\n                                                                                                                  // 132\nContext.prototype._ensureCollection = function(collectionName) {                                                  // 133\n  if(!this._collectionData[collectionName]) {                                                                     // 134\n    this._collectionData[collectionName] = [];                                                                    // 135\n  }                                                                                                               // 136\n};                                                                                                                // 137\n                                                                                                                  // 138\nContext.prototype.getData = function() {                                                                          // 139\n  return {                                                                                                        // 140\n    collectionData: this._collectionData,                                                                         // 141\n    subscriptions: this._subscriptions,                                                                           // 142\n    loginToken: this._loginToken                                                                                  // 143\n  };                                                                                                              // 144\n};                                                                                                                // 145\n                                                                                                                  // 146\nFastRender._Context = Context;                                                                                    // 147\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks_fast-render/lib/server/iron_router_support.js                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nif(!Package['iron:router']) return;                                                                               // 1\n                                                                                                                  // 2\nvar RouteController = Package['iron:router'].RouteController;                                                     // 3\nvar Router = Package['iron:router'].Router;                                                                       // 4\n                                                                                                                  // 5\nvar currentSubscriptions = [];                                                                                    // 6\nMeteor.subscribe = function(subscription) {                                                                       // 7\n  currentSubscriptions.push(arguments);                                                                           // 8\n};                                                                                                                // 9\n                                                                                                                  // 10\n//assuming, no runtime routes will be added                                                                       // 11\nMeteor.startup(function() {                                                                                       // 12\n  // this is trick to run the processRoutes at the                                                                // 13\n  // end of all Meteor.startup callbacks                                                                          // 14\n  Meteor.startup(processRoutes);                                                                                  // 15\n});                                                                                                               // 16\n                                                                                                                  // 17\nfunction processRoutes() {                                                                                        // 18\n  Router.routes.forEach(function(route) {                                                                         // 19\n    route.options = route.options || {};                                                                          // 20\n    if(route.options.fastRender) {                                                                                // 21\n      handleRoute(route);                                                                                         // 22\n    } else if(                                                                                                    // 23\n        getController(route) &&                                                                                   // 24\n        getController(route).prototype &&                                                                         // 25\n        getController(route).prototype.fastRender                                                                 // 26\n    ) {                                                                                                           // 27\n      handleRoute(route);                                                                                         // 28\n    }                                                                                                             // 29\n  });                                                                                                             // 30\n                                                                                                                  // 31\n  // getting global waitOns                                                                                       // 32\n  var globalWaitOns = [];                                                                                         // 33\n  if(Router._globalHooks && Router._globalHooks.waitOn && Router._globalHooks.waitOn.length > 0) {                // 34\n    Router._globalHooks.waitOn.forEach(function(waitOn) {                                                         // 35\n      globalWaitOns.push(waitOn.hook);                                                                            // 36\n    });                                                                                                           // 37\n  }                                                                                                               // 38\n                                                                                                                  // 39\n  FastRender.onAllRoutes(function(path) {                                                                         // 40\n    var self = this;                                                                                              // 41\n                                                                                                                  // 42\n    currentSubscriptions = [];                                                                                    // 43\n    globalWaitOns.forEach(function(waitOn) {                                                                      // 44\n      waitOn.call({path: path});                                                                                  // 45\n    });                                                                                                           // 46\n                                                                                                                  // 47\n    currentSubscriptions.forEach(function(args) {                                                                 // 48\n      self.subscribe.apply(self, args);                                                                           // 49\n    });                                                                                                           // 50\n  });                                                                                                             // 51\n};                                                                                                                // 52\n                                                                                                                  // 53\nfunction handleRoute(route) {                                                                                     // 54\n  var subscriptionFunctions = [];                                                                                 // 55\n                                                                                                                  // 56\n  // get potential subscription handlers from the route options                                                   // 57\n  ['waitOn', 'subscriptions'].forEach(function(funcName) {                                                        // 58\n    var handler = route.options[funcName];                                                                        // 59\n    if(typeof handler == 'function') {                                                                            // 60\n      subscriptionFunctions.push(handler);                                                                        // 61\n    } else if (handler instanceof Array) {                                                                        // 62\n      handler.forEach(function(func) {                                                                            // 63\n        if(typeof func == 'function') {                                                                           // 64\n          subscriptionFunctions.push(func);                                                                       // 65\n        }                                                                                                         // 66\n      });                                                                                                         // 67\n    }                                                                                                             // 68\n  });                                                                                                             // 69\n                                                                                                                  // 70\n  FastRender.route(getPath(route), onRoute);                                                                      // 71\n                                                                                                                  // 72\n  function onRoute(params, path) {                                                                                // 73\n    var self = this;                                                                                              // 74\n    var context = {                                                                                               // 75\n      params: params,                                                                                             // 76\n      path: path                                                                                                  // 77\n    };                                                                                                            // 78\n                                                                                                                  // 79\n    //reset subscriptions;                                                                                        // 80\n    currentSubscriptions = [];                                                                                    // 81\n    subscriptionFunctions.forEach(function(func) {                                                                // 82\n      func.call(context);                                                                                         // 83\n    });                                                                                                           // 84\n                                                                                                                  // 85\n    // if there is a controller, try to initiate it and invoke potential                                          // 86\n    // methods which could give us subscriptions                                                                  // 87\n    var controller = getController(route);                                                                        // 88\n    if(controller && controller.prototype) {                                                                      // 89\n      if(typeof controller.prototype.lookupOption == 'function') {                                                // 90\n        // for IR 1.0                                                                                             // 91\n        // it is possible to create a controller invoke methods on it                                             // 92\n        var controllerInstance = new controller();                                                                // 93\n        controllerInstance.params = params;                                                                       // 94\n        controllerInstance.path = path;                                                                           // 95\n                                                                                                                  // 96\n        ['waitOn', 'subscriptions'].forEach(function(funcName) {                                                  // 97\n          if(controllerInstance[funcName]) {                                                                      // 98\n            controllerInstance[funcName].call(controllerInstance);                                                // 99\n          }                                                                                                       // 100\n        });                                                                                                       // 101\n      } else {                                                                                                    // 102\n        // IR 0.9                                                                                                 // 103\n        // hard to create a controller instance                                                                   // 104\n        // so this is the option we can take                                                                      // 105\n        var waitOn = controller.prototype.waitOn;                                                                 // 106\n        if(waitOn) {                                                                                              // 107\n          waitOn.call(context);                                                                                   // 108\n        }                                                                                                         // 109\n      }                                                                                                           // 110\n    }                                                                                                             // 111\n                                                                                                                  // 112\n    currentSubscriptions.forEach(function(args) {                                                                 // 113\n      self.subscribe.apply(self, args);                                                                           // 114\n    });                                                                                                           // 115\n  }                                                                                                               // 116\n}                                                                                                                 // 117\n                                                                                                                  // 118\nfunction getPath(route) {                                                                                         // 119\n  if(route._path) {                                                                                               // 120\n    // for IR 1.0                                                                                                 // 121\n    return route._path;                                                                                           // 122\n  } else {                                                                                                        // 123\n    // for IR 0.9                                                                                                 // 124\n    var name = (route.name == \"/\")? \"\" : name;                                                                    // 125\n    return route.options.path || (\"/\" + name);                                                                    // 126\n  }                                                                                                               // 127\n}                                                                                                                 // 128\n                                                                                                                  // 129\nfunction getController(route) {                                                                                   // 130\n  if(route.findControllerConstructor) {                                                                           // 131\n    // for IR 1.0                                                                                                 // 132\n    return route.findControllerConstructor();                                                                     // 133\n  } else if(route.findController) {                                                                               // 134\n    // for IR 0.9                                                                                                 // 135\n    return route.findController();                                                                                // 136\n  } else {                                                                                                        // 137\n    // unsupported version of IR                                                                                  // 138\n    return null;                                                                                                  // 139\n  }                                                                                                               // 140\n}                                                                                                                 // 141\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['meteorhacks:fast-render'] = {\n  FastRender: FastRender\n};\n\n})();\n","servePath":"/packages/meteorhacks_fast-render.js","sourceMap":{"version":3,"sources":["/packages/meteorhacks_fast-render/lib/utils.js","/packages/meteorhacks_fast-render/lib/server/namespace.js","/packages/meteorhacks_fast-render/lib/server/utils.js","/packages/meteorhacks_fast-render/lib/server/routes.js","/packages/meteorhacks_fast-render/lib/server/publish_context.js","/packages/meteorhacks_fast-render/lib/server/context.js","/packages/meteorhacks_fast-render/lib/server/iron_router_support.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA,sH;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH;;;;;;;;;;;;;;;;;;ACzwH;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uwH;;;;;;;;;;;;;;;;;;AClwH","file":"/packages/meteorhacks_fast-render.js","sourcesContent":["AddedToChanged = function(localCopy, added) {\n  added.msg = \"changed\";\n  added.cleared = [];\n  added.fields = added.fields || {};\n\n  _.each(localCopy, function(value, key) {\n    if(key != '_id') {\n      if(typeof added.fields[key] == \"undefined\") {\n        added.cleared.push(key);\n      }\n    }\n  });\n};\n\nApplyDDP = function(existing, message) {\n  var newDoc = (!existing)? {}: _.clone(existing);\n  if(message.msg == 'added') {\n    _.each(message.fields, function(value, key) {\n      newDoc[key] = value;\n    });\n  } else if(message.msg == \"changed\") {\n    _.each(message.fields, function(value, key) {\n      newDoc[key] = value;\n    });\n    _.each(message.cleared, function(key) {\n      delete newDoc[key];\n    });\n  } else if(message.msg == \"removed\") {\n    newDoc = null;\n  }\n\n  return newDoc;\n};\n\n// source: https://gist.github.com/kurtmilam/1868955\n//  modified a bit to not to expose this as an _ api\nDeepExtend = function deepExtend (obj) {\n  var parentRE = /#{\\s*?_\\s*?}/,\n      slice = Array.prototype.slice,\n      hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  _.each(slice.call(arguments, 1), function(source) {\n    for (var prop in source) {\n      if (hasOwnProperty.call(source, prop)) {\n        if (_.isNull(obj[prop]) || _.isUndefined(obj[prop]) || _.isFunction(obj[prop]) || _.isNull(source[prop]) || _.isDate(source[prop])) {\n          obj[prop] = source[prop];\n        }\n        else if (_.isString(source[prop]) && parentRE.test(source[prop])) {\n          if (_.isString(obj[prop])) {\n            obj[prop] = source[prop].replace(parentRE, obj[prop]);\n          }\n        }\n        else if (_.isArray(obj[prop]) || _.isArray(source[prop])){\n          if (!_.isArray(obj[prop]) || !_.isArray(source[prop])){\n            throw 'Error: Trying to combine an array with a non-array (' + prop + ')';\n          } else {\n            obj[prop] = _.reject(DeepExtend(obj[prop], source[prop]), function (item) { return _.isNull(item);});\n          }\n        }\n        else if (_.isObject(obj[prop]) || _.isObject(source[prop])){\n          if (!_.isObject(obj[prop]) || !_.isObject(source[prop])){\n            throw 'Error: Trying to combine an object with a non-object (' + prop + ')';\n          } else {\n            obj[prop] = DeepExtend(obj[prop], source[prop]);\n          }\n        } else {\n          obj[prop] = source[prop];\n        }\n      }\n    }\n  });\n  return obj;\n};","FastRender = {\n  _routes: [],\n  _onAllRoutes: []\n};","// meteor algorithm to check if this is a meteor serving http request or not\nIsAppUrl = function (req) {\n  var url = req.url\n  if(url === '/favicon.ico' || url === '/robots.txt') {\n    return false;\n  }\n\n  // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n  if(url === '/app.manifest') {\n    return false;\n  }\n\n  // Avoid serving app HTML for declared routes such as /sockjs/.\n  if(RoutePolicy.classify(url)) {\n    return false;\n  }\n\n  // we only need to support HTML pages only\n  // this is a check to do it\n  return /html/.test(req.headers['accept']);\n};","var Fiber = Npm.require('fibers');\nFastRender._onAllRoutes = [];\nFastRender.frContext = new Meteor.EnvironmentVariable();\n\nvar fastRenderRoutes = Picker.filter(function(req, res) {\n  return IsAppUrl(req);\n});\nfastRenderRoutes.middleware(Npm.require('connect').cookieParser());\nfastRenderRoutes.middleware(function(req, res, next) {\n  FastRender.handleOnAllRoutes(req, res, next);\n});\n\n// handling specific routes\nFastRender.route = function route(path, callback) {\n  if(path.indexOf('/') !== 0){\n    throw new Error('Error: path (' + path + ') must begin with a leading slash \"/\"')\n  }\n  fastRenderRoutes.route(path, FastRender.handleRoute.bind(null, callback));\n};\n\nfunction setQueryDataCallback(res, next) {\n  return function(queryData) {\n    if(!queryData) return next();\n\n    var existingPayload = InjectData.getData(res, \"fast-render-data\");\n    if(!existingPayload) {\n      InjectData.pushData(res, \"fast-render-data\", queryData);\n    } else {\n      // it's possible to execute this callback twice\n      // the we need to merge exisitng data with the new one\n      _.extend(existingPayload.subscriptions, queryData.subscriptions);\n      _.each(queryData.collectionData, function(data, pubName) {\n        var existingData = existingPayload.collectionData[pubName]\n        if(existingData) {\n          data = existingData.concat(data);\n        }\n\n        existingPayload.collectionData[pubName] = data;\n        InjectData.pushData(res, 'fast-render-data', existingPayload);\n      });\n    }\n    next();\n  };\n}\n\nFastRender.handleRoute = function(processingCallback, params, req, res, next) {\n  var afterProcessed = setQueryDataCallback(res, next);\n  FastRender._processRoutes(params, req, processingCallback, afterProcessed);\n};\n\nFastRender.handleOnAllRoutes = function(req, res, next) {\n  var afterProcessed = setQueryDataCallback(res, next);\n  FastRender._processAllRoutes(req, afterProcessed);\n};\n\nFastRender.onAllRoutes = function onAllRoutes(callback) {\n  FastRender._onAllRoutes.push(callback);\n};\n\nFastRender._processRoutes =\n  function _processRoutes(params, req, routeCallback, callback) {\n  callback = callback || function() {};\n\n  var path = req.url;\n  var loginToken = req.cookies['meteor_login_token'];\n  var headers = req.headers;\n\n  var context = new Context(loginToken, { headers: headers });\n\n  try {\n    FastRender.frContext.withValue(context, function() {\n      routeCallback.call(context, params, path);\n    });\n\n    if(context.stop) {\n      return;\n    }\n\n    callback(context.getData());\n  } catch(err) {\n    handleError(err, path, callback);\n  }\n};\n\nFastRender._processAllRoutes =\n  function _processAllRoutes(req, callback) {\n  callback = callback || function() {};\n\n  var path = req.url;\n  var loginToken = req.cookies['meteor_login_token'];\n  var headers = req.headers;\n\n  new Fiber(function() {\n    var context = new Context(loginToken, { headers: headers });\n\n    try {\n      FastRender._onAllRoutes.forEach(function(callback) {\n        callback.call(context, req.url);\n      });\n\n      callback(context.getData());\n    } catch(err) {\n      handleError(err, path, callback);\n    }\n  }).run();\n};\n\nfunction handleError(err, path, callback) {\n  var message =\n    'error on fast-rendering path: ' +\n    path +\n    \" ; error: \" + err.stack;\n  console.error(message);\n  callback(null);\n}\n\n// adding support for null publications\nFastRender.onAllRoutes(function() {\n  var context = this;\n  var nullHandlers = Meteor.default_server.universal_publish_handlers;\n\n  if(nullHandlers) {\n    nullHandlers.forEach(function(publishHandler) {\n      // console.log(publishHandler.toString());\n      var publishContext = new PublishContext(context, null);\n      var params = [];\n      context.processPublication(publishHandler, publishContext, params);\n\n    });\n  }\n});\n","PublishContext = function PublishContext(context, subscription) {\n  this.userId = context.userId;\n  this.unblock = function() {};\n  this._subscription = subscription;\n  this._context = context;\n  this._collectionData = {};\n  this._onStop = [];\n  this._stopped = false;\n\n  // connection object\n  this.connection = {\n    _id: Meteor.uuid(),\n    close: function() {},\n    onClose: function() {},\n    // fake value, will be supported later on\n    clientAddress: \"127.0.0.1\",\n    httpHeaders: context.headers\n  };\n\n  // we won't be supporting all the other fields of the Meteor's\n  // Subscription class since they are private variables\n};\n\nPublishContext.prototype._addCursor = function(cursor) {\n  var self = this;\n  cursor.rewind();\n  var collectionName = \n    (cursor._cursorDescription)? cursor._cursorDescription.collectionName: null || //for meteor-collections\n    (cursor._collection)? cursor._collection._name: null; //for smart-collections\n\n  this._ensureCollection(collectionName);\n  var cursorData = cursor.fetch();\n  cursorData.forEach(function(doc) {\n    self.added(collectionName, doc._id, doc);\n  });\n};\n\nPublishContext.prototype._ensureCollection = function(collection) {\n  if (!this._collectionData[collection]) {\n    this._collectionData[collection] = [];\n  }\n};\n\nPublishContext.prototype.added = function(collection, id, fields) {\n  this._ensureCollection(collection);\n  var doc = _.clone(fields);\n  doc._id = id;\n  this._collectionData[collection].push(doc);\n};\n\nPublishContext.prototype.changed = function(collection, id, fields) {\n  var collectionData = this._collectionData;\n\n  collectionData[collection] = collectionData[collection].map(function(doc) {\n    if (doc._id === id) {\n      return _.extend(doc, fields);\n    }\n\n    return doc;\n  });\n};\n\nPublishContext.prototype.removed = function(collection, id) {\n  var collectionData = this._collectionData;\n\n  collectionData[collection] = collectionData[collection].filter(function(doc) {\n    return doc._id !== id;\n  });\n};\n\nPublishContext.prototype.onStop = function(cb) {\n  if (this._stopped) {\n    cb();\n  } else {\n    this._onStop.push(cb);\n  }\n};\n\nPublishContext.prototype.ready = function() {\n  this._stopped = true;\n\n  //make the subscription be marked as ready\n  if(this._subscription) {\n    //don't do this for null subscriptions\n    this._context.completeSubscriptions(this._subscription);\n  }\n\n  //make sure that any observe callbacks are cancelled\n  this._onStop.forEach(function(cb) {\n    cb();\n  });\n};\n\nPublishContext.prototype.error = function() {};\nPublishContext.prototype.stop = function() {};","var Fibers = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nContext = function Context(loginToken, otherParams) {\n  this._collectionData = {};\n  this._subscriptions = {};\n  this._loginToken = loginToken;\n  \n  _.extend(this, otherParams);\n\n  // get the user\n  if(Meteor.users) {    \n    // check to make sure, we've the loginToken, \n    // otherwise a random user will fetched from the db\n    if(loginToken) {\n      var hashedToken = loginToken && Accounts._hashLoginToken( loginToken );\n      var query = {'services.resume.loginTokens.hashedToken': hashedToken }; \n      var options = {fields: {_id: 1}};\n      var user = Meteor.users.findOne(query, options);\n    }\n\n    //support for Meteor.user\n    Fibers.current._meteor_dynamics = {};\n    Fibers.current._meteor_dynamics[DDP._CurrentInvocation.slot] = this;\n\n    if(user) {\n      this.userId = user._id;\n    }\n  }\n};\n\nContext.prototype.subscribe = function(subName /*, params */) {\n  var self = this;\n  \n  var publishHandler = Meteor.default_server.publish_handlers[subName];\n  if(publishHandler) {\n    var params = Array.prototype.slice.call(arguments, 1);\n    var subscription = {name: subName, params: params}\n    var publishContext = new PublishContext(this, subscription);\n\n    return this.processPublication(publishHandler, publishContext, params);\n  } else {\n    console.warn('There is no such publish handler named:', subName);\n    return {};\n  }\n};\n\nContext.prototype.processPublication = function(publishHandler, publishContext, params) {\n  var self = this;\n  var data = {};\n  var ensureCollection = function(collectionName) {\n    self._ensureCollection(collectionName);\n    if(!data[collectionName]) {\n      data[collectionName] = [];\n    }\n  };\n\n  var future = new Future();\n  //detect when the context is ready to be sent to the client\n  publishContext.onStop(function() {\n    if(!future.isResolved()) {\n      future.return();\n    }\n  });\n\n  try {\n    var cursors = publishHandler.apply(publishContext, params);\n  } catch(ex) {\n    console.warn('error caught on publication: ', publishContext._subscription, ': ', ex.message);\n    // since, this subscription caught on an error we can't proceed.\n    // but we can't also throws an error since other publications might have something useful\n    // So, it's not fair to ignore running them due to error of this sub\n    // this might also be failed due to the use of some private API's of Meteor's Susbscription class\n    publishContext.ready();\n  }\n\n  if(cursors) {\n    //the publish function returned a cursor\n    if(cursors.constructor != Array) {\n      cursors = [cursors];\n    }\n\n    //add collection data\n    cursors.forEach(function(cursor) {\n      publishContext._addCursor(cursor);\n    });\n\n    //the subscription is ready\n    publishContext.ready();\n  } else if(cursors === null) {\n    //some developers send null to indicate they are not using the publication\n    //this is not the way to go, but meteor's accounts-base also does this\n    //so we need some special handling on this\n    publishContext.ready();\n  }\n\n  if (!future.isResolved()) {\n    //don't wait forever for handler to fire ready()\n    Meteor.setTimeout(function() {\n      if (!future.isResolved()) {\n        //publish handler failed to send ready signal in time\n        console.warn('Publish handler for', publishContext._subscription, 'sent no ready signal');\n        future.return();\n      }\n    }, 500);  //arbitrarially set timeout to 500ms, should probably be configurable\n\n    // wait for the subscription became ready.\n    future.wait();\n  }\n\n  // get the data\n  _.each(publishContext._collectionData, function(collData, collectionName) {\n    ensureCollection(collectionName);\n    data[collectionName].push(collData);\n    \n    // copy the collection data in publish context into the FR context\n    self._ensureCollection(collectionName);\n    self._collectionData[collectionName].push(collData);\n  });\n\n  return data;\n};\n\nContext.prototype.completeSubscriptions = function(subscription) {\n  var subs = this._subscriptions[subscription.name];\n  if(!subs) {\n    subs = this._subscriptions[subscription.name] = {};\n  }\n\n  subs[EJSON.stringify(subscription.params)] = true;\n};\n\nContext.prototype._ensureCollection = function(collectionName) {\n  if(!this._collectionData[collectionName]) {\n    this._collectionData[collectionName] = [];\n  }\n};\n\nContext.prototype.getData = function() {\n  return {\n    collectionData: this._collectionData,\n    subscriptions: this._subscriptions,\n    loginToken: this._loginToken\n  };\n};\n\nFastRender._Context = Context;","if(!Package['iron:router']) return;\n\nvar RouteController = Package['iron:router'].RouteController;\nvar Router = Package['iron:router'].Router;\n\nvar currentSubscriptions = [];\nMeteor.subscribe = function(subscription) {\n  currentSubscriptions.push(arguments);\n};\n\n//assuming, no runtime routes will be added\nMeteor.startup(function() {\n  // this is trick to run the processRoutes at the \n  // end of all Meteor.startup callbacks\n  Meteor.startup(processRoutes);\n});\n\nfunction processRoutes() {\n  Router.routes.forEach(function(route) {\n    route.options = route.options || {};\n    if(route.options.fastRender) {\n      handleRoute(route);\n    } else if(\n        getController(route) && \n        getController(route).prototype && \n        getController(route).prototype.fastRender\n    ) {\n      handleRoute(route);\n    }\n  });\n\n  // getting global waitOns\n  var globalWaitOns = [];\n  if(Router._globalHooks && Router._globalHooks.waitOn && Router._globalHooks.waitOn.length > 0) {\n    Router._globalHooks.waitOn.forEach(function(waitOn) {\n      globalWaitOns.push(waitOn.hook);\n    });\n  }\n  \n  FastRender.onAllRoutes(function(path) {\n    var self = this;\n    \n    currentSubscriptions = [];\n    globalWaitOns.forEach(function(waitOn) {\n      waitOn.call({path: path});\n    });\n    \n    currentSubscriptions.forEach(function(args) {\n      self.subscribe.apply(self, args);\n    });\n  });\n};\n\nfunction handleRoute(route) {\n  var subscriptionFunctions = [];\n  \n  // get potential subscription handlers from the route options\n  ['waitOn', 'subscriptions'].forEach(function(funcName) {\n    var handler = route.options[funcName];\n    if(typeof handler == 'function') {\n      subscriptionFunctions.push(handler);\n    } else if (handler instanceof Array) {\n      handler.forEach(function(func) {\n        if(typeof func == 'function') {\n          subscriptionFunctions.push(func);\n        }\n      });\n    }\n  });\n\n  FastRender.route(getPath(route), onRoute);\n\n  function onRoute(params, path) {\n    var self = this;\n    var context = {\n      params: params,\n      path: path\n    };\n\n    //reset subscriptions;\n    currentSubscriptions = [];\n    subscriptionFunctions.forEach(function(func) {\n      func.call(context);\n    });\n\n    // if there is a controller, try to initiate it and invoke potential \n    // methods which could give us subscriptions\n    var controller = getController(route);\n    if(controller && controller.prototype) {\n      if(typeof controller.prototype.lookupOption == 'function') {\n        // for IR 1.0\n        // it is possible to create a controller invoke methods on it\n        var controllerInstance = new controller();\n        controllerInstance.params = params;\n        controllerInstance.path = path;\n\n        ['waitOn', 'subscriptions'].forEach(function(funcName) {\n          if(controllerInstance[funcName]) {\n            controllerInstance[funcName].call(controllerInstance);\n          }\n        });\n      } else {\n        // IR 0.9\n        // hard to create a controller instance\n        // so this is the option we can take\n        var waitOn = controller.prototype.waitOn;\n        if(waitOn) {\n          waitOn.call(context);\n        }\n      }\n    }\n\n    currentSubscriptions.forEach(function(args) {\n      self.subscribe.apply(self, args);\n    });\n  }\n}\n\nfunction getPath(route) {\n  if(route._path) {\n    // for IR 1.0\n    return route._path;\n  } else {\n    // for IR 0.9\n    var name = (route.name == \"/\")? \"\" : name;\n    return route.options.path || (\"/\" + name);\n  }\n}\n\nfunction getController(route) {\n  if(route.findControllerConstructor) {\n    // for IR 1.0\n    return route.findControllerConstructor();\n  } else if(route.findController) {\n    // for IR 0.9\n    return route.findController();\n  } else {\n    // unsupported version of IR\n    return null;\n  }\n}"]}}]