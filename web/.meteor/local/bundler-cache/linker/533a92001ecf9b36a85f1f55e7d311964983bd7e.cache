[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar SpacebarsCompiler = Package['spacebars-compiler'].SpacebarsCompiler;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\n\n/* Package-scope variables */\nvar Boilerplate;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/boilerplate-generator/boilerplate-generator.js                       //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\nvar fs = Npm.require('fs');                                                      // 1\nvar path = Npm.require('path');                                                  // 2\n                                                                                 // 3\n// Copied from webapp_server                                                     // 4\nvar readUtf8FileSync = function (filename) {                                     // 5\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');                        // 6\n};                                                                               // 7\n                                                                                 // 8\nBoilerplate = function (arch, manifest, options) {                               // 9\n  var self = this;                                                               // 10\n  options = options || {};                                                       // 11\n  self.template = _getTemplate(arch);                                            // 12\n  self.baseData = null;                                                          // 13\n  self.func = null;                                                              // 14\n                                                                                 // 15\n  self._generateBoilerplateFromManifestAndSource(                                // 16\n    manifest,                                                                    // 17\n    self.template,                                                               // 18\n    options                                                                      // 19\n  );                                                                             // 20\n};                                                                               // 21\n                                                                                 // 22\n// The 'extraData' argument can be used to extend 'self.baseData'. Its           // 23\n// purpose is to allow you to specify data that you might not know at            // 24\n// the time that you construct the Boilerplate object. (e.g. it is used          // 25\n// by 'webapp' to specify data that is only known at request-time).              // 26\nBoilerplate.prototype.toHTML = function (extraData) {                            // 27\n  var self = this;                                                               // 28\n                                                                                 // 29\n  if (! self.baseData || ! self.func)                                            // 30\n    throw new Error('Boilerplate did not instantiate correctly.');               // 31\n                                                                                 // 32\n  return  \"<!DOCTYPE html>\\n\" +                                                  // 33\n    Blaze.toHTML(Blaze.With(_.extend(self.baseData, extraData),                  // 34\n                            self.func));                                         // 35\n};                                                                               // 36\n                                                                                 // 37\n// XXX Exported to allow client-side only changes to rebuild the boilerplate     // 38\n// without requiring a full server restart.                                      // 39\n// Produces an HTML string with given manifest and boilerplateSource.            // 40\n// Optionally takes urlMapper in case urls from manifest need to be prefixed     // 41\n// or rewritten.                                                                 // 42\n// Optionally takes pathMapper for resolving relative file system paths.         // 43\n// Optionally allows to override fields of the data context.                     // 44\nBoilerplate.prototype._generateBoilerplateFromManifestAndSource =                // 45\n  function (manifest, boilerplateSource, options) {                              // 46\n    var self = this;                                                             // 47\n    // map to the identity by default                                            // 48\n    var urlMapper = options.urlMapper || _.identity;                             // 49\n    var pathMapper = options.pathMapper || _.identity;                           // 50\n                                                                                 // 51\n    var boilerplateBaseData = {                                                  // 52\n      css: [],                                                                   // 53\n      js: [],                                                                    // 54\n      head: '',                                                                  // 55\n      body: '',                                                                  // 56\n      meteorManifest: JSON.stringify(manifest)                                   // 57\n    };                                                                           // 58\n                                                                                 // 59\n    // allow the caller to extend the default base data                          // 60\n    _.extend(boilerplateBaseData, options.baseDataExtension);                    // 61\n                                                                                 // 62\n    _.each(manifest, function (item) {                                           // 63\n      var urlPath = urlMapper(item.url);                                         // 64\n      var itemObj = { url: urlPath };                                            // 65\n                                                                                 // 66\n      if (options.inline) {                                                      // 67\n        itemObj.scriptContent = readUtf8FileSync(                                // 68\n          pathMapper(item.path));                                                // 69\n        itemObj.inline = true;                                                   // 70\n      }                                                                          // 71\n                                                                                 // 72\n      if (item.type === 'css' && item.where === 'client') {                      // 73\n        boilerplateBaseData.css.push(itemObj);                                   // 74\n      }                                                                          // 75\n      if (item.type === 'js' && item.where === 'client') {                       // 76\n        boilerplateBaseData.js.push(itemObj);                                    // 77\n      }                                                                          // 78\n      if (item.type === 'head') {                                                // 79\n        boilerplateBaseData.head =                                               // 80\n          readUtf8FileSync(pathMapper(item.path));                               // 81\n      }                                                                          // 82\n      if (item.type === 'body') {                                                // 83\n        boilerplateBaseData.body =                                               // 84\n          readUtf8FileSync(pathMapper(item.path));                               // 85\n      }                                                                          // 86\n    });                                                                          // 87\n    var boilerplateRenderCode = SpacebarsCompiler.compile(                       // 88\n      boilerplateSource, { isBody: true });                                      // 89\n                                                                                 // 90\n    // Note that we are actually depending on eval's local environment capture   // 91\n    // so that UI and HTML are visible to the eval'd code.                       // 92\n    // XXX the template we are evaluating relies on the fact that UI is globally\n      // available.                                                              // 94\n    global.UI = UI;                                                              // 95\n    self.func = eval(boilerplateRenderCode);                                     // 96\n    self.baseData = boilerplateBaseData;                                         // 97\n};                                                                               // 98\n                                                                                 // 99\nvar _getTemplate = _.memoize(function (arch) {                                   // 100\n  var filename = 'boilerplate_' + arch + '.html';                                // 101\n  return Assets.getText(filename);                                               // 102\n});                                                                              // 103\n                                                                                 // 104\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['boilerplate-generator'] = {\n  Boilerplate: Boilerplate\n};\n\n})();\n","servePath":"/packages/boilerplate-generator.js","sourceMap":{"version":3,"sources":["/packages/boilerplate-generator/boilerplate-generator.js"],"names":[],"mappingsuF","file":"/packages/boilerplate-generator.js","sourcesContent":["var fs = Npm.require('fs');\nvar path = Npm.require('path');\n\n// Copied from webapp_server\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');\n};\n\nBoilerplate = function (arch, manifest, options) {\n  var self = this;\n  options = options || {};\n  self.template = _getTemplate(arch);\n  self.baseData = null;\n  self.func = null;\n\n  self._generateBoilerplateFromManifestAndSource(\n    manifest,\n    self.template,\n    options\n  );\n};\n\n// The 'extraData' argument can be used to extend 'self.baseData'. Its\n// purpose is to allow you to specify data that you might not know at\n// the time that you construct the Boilerplate object. (e.g. it is used\n// by 'webapp' to specify data that is only known at request-time).\nBoilerplate.prototype.toHTML = function (extraData) {\n  var self = this;\n\n  if (! self.baseData || ! self.func)\n    throw new Error('Boilerplate did not instantiate correctly.');\n\n  return  \"<!DOCTYPE html>\\n\" +\n    Blaze.toHTML(Blaze.With(_.extend(self.baseData, extraData),\n                            self.func));\n};\n\n// XXX Exported to allow client-side only changes to rebuild the boilerplate\n// without requiring a full server restart.\n// Produces an HTML string with given manifest and boilerplateSource.\n// Optionally takes urlMapper in case urls from manifest need to be prefixed\n// or rewritten.\n// Optionally takes pathMapper for resolving relative file system paths.\n// Optionally allows to override fields of the data context.\nBoilerplate.prototype._generateBoilerplateFromManifestAndSource =\n  function (manifest, boilerplateSource, options) {\n    var self = this;\n    // map to the identity by default\n    var urlMapper = options.urlMapper || _.identity;\n    var pathMapper = options.pathMapper || _.identity;\n\n    var boilerplateBaseData = {\n      css: [],\n      js: [],\n      head: '',\n      body: '',\n      meteorManifest: JSON.stringify(manifest)\n    };\n\n    // allow the caller to extend the default base data\n    _.extend(boilerplateBaseData, options.baseDataExtension);\n\n    _.each(manifest, function (item) {\n      var urlPath = urlMapper(item.url);\n      var itemObj = { url: urlPath };\n\n      if (options.inline) {\n        itemObj.scriptContent = readUtf8FileSync(\n          pathMapper(item.path));\n        itemObj.inline = true;\n      }\n\n      if (item.type === 'css' && item.where === 'client') {\n        boilerplateBaseData.css.push(itemObj);\n      }\n      if (item.type === 'js' && item.where === 'client') {\n        boilerplateBaseData.js.push(itemObj);\n      }\n      if (item.type === 'head') {\n        boilerplateBaseData.head =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n      if (item.type === 'body') {\n        boilerplateBaseData.body =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n    });\n    var boilerplateRenderCode = SpacebarsCompiler.compile(\n      boilerplateSource, { isBody: true });\n\n    // Note that we are actually depending on eval's local environment capture\n    // so that UI and HTML are visible to the eval'd code.\n    // XXX the template we are evaluating relies on the fact that UI is globally\n      // available.\n    global.UI = UI;\n    self.func = eval(boilerplateRenderCode);\n    self.baseData = boilerplateBaseData;\n};\n\nvar _getTemplate = _.memoize(function (arch) {\n  var filename = 'boilerplate_' + arch + '.html';\n  return Assets.getText(filename);\n});\n"]}}]