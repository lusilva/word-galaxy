[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Random = Package.random.Random;\nvar Hook = Package['callback-hook'].Hook;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar AccountsCommon, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS, AccountsClient, AccountsTest, Accounts;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/accounts_common.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Super-constructor for AccountsClient and AccountsServer.                                                 //\n * @locus Anywhere                                                                                                   //\n * @class AccountsCommon                                                                                             //\n * @instancename accountsClientOrServer                                                                              //\n * @param options {Object} an object with fields:                                                                    //\n * - connection {Object} Optional DDP connection to reuse.                                                           //\n * - ddpUrl {String} Optional URL for creating a new DDP connection.                                                 //\n */                                                                                                                  //\nAccountsCommon = (function () {                                                                                      // 10\n  function AccountsCommon(options) {                                                                                 // 11\n    babelHelpers.classCallCheck(this, AccountsCommon);                                                               //\n                                                                                                                     //\n    // Currently this is read directly by packages like accounts-password                                            //\n    // and accounts-ui-unstyled.                                                                                     //\n    this._options = {};                                                                                              // 14\n                                                                                                                     //\n    // Note that setting this.connection = null causes this.users to be a                                            //\n    // LocalCollection, which is not what we want.                                                                   //\n    this.connection = undefined;                                                                                     // 18\n    this._initConnection(options || {});                                                                             // 19\n                                                                                                                     //\n    // There is an allow call in accounts_server.js that restricts writes to                                         //\n    // this collection.                                                                                              //\n    this.users = new Mongo.Collection(\"users\", {                                                                     // 23\n      _preventAutopublish: true,                                                                                     // 24\n      connection: this.connection                                                                                    // 25\n    });                                                                                                              //\n                                                                                                                     //\n    // Callback exceptions are printed with Meteor._debug and ignored.                                               //\n    this._onLoginHook = new Hook({                                                                                   // 29\n      bindEnvironment: false,                                                                                        // 30\n      debugPrintExceptions: \"onLogin callback\"                                                                       // 31\n    });                                                                                                              //\n                                                                                                                     //\n    this._onLoginFailureHook = new Hook({                                                                            // 34\n      bindEnvironment: false,                                                                                        // 35\n      debugPrintExceptions: \"onLoginFailure callback\"                                                                // 36\n    });                                                                                                              //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                    //\n   * @locus Anywhere but publish functions                                                                           //\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsCommon.prototype.userId = (function () {                                                                   // 10\n    function userId() {                                                                                              // 44\n      throw new Error(\"userId method not implemented\");                                                              // 45\n    }                                                                                                                //\n                                                                                                                     //\n    return userId;                                                                                                   //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                //\n   * @locus Anywhere but publish functions                                                                           //\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsCommon.prototype.user = (function () {                                                                     // 10\n    function user() {                                                                                                // 52\n      var userId = this.userId();                                                                                    // 53\n      return userId ? this.users.findOne(userId) : null;                                                             // 54\n    }                                                                                                                //\n                                                                                                                     //\n    return user;                                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  // Set up config for the accounts system. Call this on both the client                                             //\n  // and the server.                                                                                                 //\n  //                                                                                                                 //\n  // Note that this method gets overridden on AccountsServer.prototype, but                                          //\n  // the overriding method calls the overridden method.                                                              //\n  //                                                                                                                 //\n  // XXX we should add some enforcement that this is called on both the                                              //\n  // client and the server. Otherwise, a user can                                                                    //\n  // 'forbidClientAccountCreation' only on the client and while it looks                                             //\n  // like their app is secure, the server will still accept createUser                                               //\n  // calls. https://github.com/meteor/meteor/issues/828                                                              //\n  //                                                                                                                 //\n  // @param options {Object} an object with fields:                                                                  //\n  // - sendVerificationEmail {Boolean}                                                                               //\n  //     Send email address verification emails to new users created from                                            //\n  //     client signups.                                                                                             //\n  // - forbidClientAccountCreation {Boolean}                                                                         //\n  //     Do not allow clients to create accounts directly.                                                           //\n  // - restrictCreationByEmailDomain {Function or String}                                                            //\n  //     Require created users to have an email matching the function or                                             //\n  //     having the string as domain.                                                                                //\n  // - loginExpirationInDays {Number}                                                                                //\n  //     Number of days since login until a user is logged out (login token                                          //\n  //     expires).                                                                                                   //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Set global accounts options.                                                                           //\n   * @locus Anywhere                                                                                                 //\n   * @param {Object} options                                                                                         //\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsCommon.prototype.config = (function () {                                                                   // 10\n    function config(options) {                                                                                       // 92\n      var self = this;                                                                                               // 93\n                                                                                                                     //\n      // We don't want users to accidentally only call Accounts.config on the                                        //\n      // client, where some of the options will have partial effects (eg removing                                    //\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation                                 //\n      // is set, or redirecting Google login to a specific-domain page) without                                      //\n      // having their full effects.                                                                                  //\n      if (Meteor.isServer) {                                                                                         // 100\n        __meteor_runtime_config__.accountsConfigCalled = true;                                                       // 101\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {                                                  //\n        // XXX would be nice to \"crash\" the client and replace the UI with an error                                  //\n        // message, but there's no trivial way to do this.                                                           //\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      }                                                                                                              //\n                                                                                                                     //\n      // We need to validate the oauthSecretKey option at the time                                                   //\n      // Accounts.config is called. We also deliberately don't store the                                             //\n      // oauthSecretKey in Accounts._options.                                                                        //\n      if (_.has(options, \"oauthSecretKey\")) {                                                                        // 112\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");       // 113\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);                                 // 117\n        options = _.omit(options, \"oauthSecretKey\");                                                                 // 118\n      }                                                                                                              //\n                                                                                                                     //\n      // validate option keys                                                                                        //\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n      _.each(_.keys(options), function (key) {                                                                       // 124\n        if (!_.contains(VALID_KEYS, key)) {                                                                          // 125\n          throw new Error(\"Accounts.config: Invalid key: \" + key);                                                   // 126\n        }                                                                                                            //\n      });                                                                                                            //\n                                                                                                                     //\n      // set values in Accounts._options                                                                             //\n      _.each(VALID_KEYS, function (key) {                                                                            // 131\n        if (key in options) {                                                                                        // 132\n          if (key in self._options) {                                                                                // 133\n            throw new Error(\"Can't set `\" + key + \"` more than once\");                                               // 134\n          }                                                                                                          //\n          self._options[key] = options[key];                                                                         // 136\n        }                                                                                                            //\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return config;                                                                                                   //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Register a callback to be called after a login attempt succeeds.                                       //\n   * @locus Anywhere                                                                                                 //\n   * @param {Function} func The callback to be called when login is successful.                                      //\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsCommon.prototype.onLogin = (function () {                                                                  // 10\n    function onLogin(func) {                                                                                         // 146\n      return this._onLoginHook.register(func);                                                                       // 147\n    }                                                                                                                //\n                                                                                                                     //\n    return onLogin;                                                                                                  //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Register a callback to be called after a login attempt fails.                                          //\n   * @locus Anywhere                                                                                                 //\n   * @param {Function} func The callback to be called after the login has failed.                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsCommon.prototype.onLoginFailure = (function () {                                                           // 10\n    function onLoginFailure(func) {                                                                                  // 155\n      return this._onLoginFailureHook.register(func);                                                                // 156\n    }                                                                                                                //\n                                                                                                                     //\n    return onLoginFailure;                                                                                           //\n  })();                                                                                                              //\n                                                                                                                     //\n  AccountsCommon.prototype._initConnection = (function () {                                                          // 10\n    function _initConnection(options) {                                                                              // 159\n      if (!Meteor.isClient) {                                                                                        // 160\n        return;                                                                                                      // 161\n      }                                                                                                              //\n                                                                                                                     //\n      // The connection used by the Accounts system. This is the connection                                          //\n      // that will get logged in by Meteor.login(), and this is the                                                  //\n      // connection whose login state will be reflected by Meteor.userId().                                          //\n      //                                                                                                             //\n      // It would be much preferable for this to be in accounts_client.js,                                           //\n      // but it has to be here because it's needed to create the                                                     //\n      // Meteor.users collection.                                                                                    //\n                                                                                                                     //\n      if (options.connection) {                                                                                      // 172\n        this.connection = options.connection;                                                                        // 173\n      } else if (options.ddpUrl) {                                                                                   //\n        this.connection = DDP.connect(options.ddpUrl);                                                               // 175\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client                                          //\n        // to a different authentication server. This is for a very                                                  //\n        // particular use case that comes up when implementing a oauth                                               //\n        // server. Unsupported and may go away at any point in time.                                                 //\n        //                                                                                                           //\n        // We will eventually provide a general way to use account-base                                              //\n        // against any DDP connection, not just one special one.                                                     //\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);                            // 185\n      } else {                                                                                                       //\n        this.connection = Meteor.connection;                                                                         // 188\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return _initConnection;                                                                                          //\n  })();                                                                                                              //\n                                                                                                                     //\n  AccountsCommon.prototype._getTokenLifetimeMs = (function () {                                                      // 10\n    function _getTokenLifetimeMs() {                                                                                 // 192\n      return (this._options.loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;           // 193\n    }                                                                                                                //\n                                                                                                                     //\n    return _getTokenLifetimeMs;                                                                                      //\n  })();                                                                                                              //\n                                                                                                                     //\n  AccountsCommon.prototype._tokenExpiration = (function () {                                                         // 10\n    function _tokenExpiration(when) {                                                                                // 197\n      // We pass when through the Date constructor for backwards compatibility;                                      //\n      // `when` used to be a number.                                                                                 //\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());                                        // 200\n    }                                                                                                                //\n                                                                                                                     //\n    return _tokenExpiration;                                                                                         //\n  })();                                                                                                              //\n                                                                                                                     //\n  AccountsCommon.prototype._tokenExpiresSoon = (function () {                                                        // 10\n    function _tokenExpiresSoon(when) {                                                                               // 203\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();                                                           // 204\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;                                                     // 205\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;                                        // 206\n      return new Date() > new Date(when) - minLifetimeMs;                                                            // 208\n    }                                                                                                                //\n                                                                                                                     //\n    return _tokenExpiresSoon;                                                                                        //\n  })();                                                                                                              //\n                                                                                                                     //\n  return AccountsCommon;                                                                                             //\n})();                                                                                                                //\n                                                                                                                     //\nvar Ap = AccountsCommon.prototype;                                                                                   // 212\n                                                                                                                     //\n// Note that Accounts is defined separately in accounts_client.js and                                                //\n// accounts_server.js.                                                                                               //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                      //\n * @locus Anywhere but publish functions                                                                             //\n */                                                                                                                  //\nMeteor.userId = function () {                                                                                        // 221\n  return Accounts.userId();                                                                                          // 222\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                  //\n * @locus Anywhere but publish functions                                                                             //\n */                                                                                                                  //\nMeteor.user = function () {                                                                                          // 229\n  return Accounts.user();                                                                                            // 230\n};                                                                                                                   //\n                                                                                                                     //\n// how long (in days) until a login token expires                                                                    //\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;                                                                              // 234\n// Clients don't try to auto-login with a token that is going to expire within                                       //\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.                                        //\n// Tries to avoid abrupt disconnects from expiring tokens.                                                           //\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour                                                                  // 238\n// how often (in milliseconds) we check for expired tokens                                                           //\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes                                                                // 240\n// how long we wait before logging out clients when Meteor.logoutOtherClients is                                     //\n// called                                                                                                            //\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;                                                                               // 243\n                                                                                                                     //\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility                              //\nMeteor.startup(function () {                                                                                         // 246\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                                  // 247\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;                                                // 249\n  Ap.ConfigError = ServiceConfiguration.ConfigError;                                                                 // 250\n});                                                                                                                  //\n                                                                                                                     //\n// Thrown when the user cancels the login process (eg, closes an oauth                                               //\n// popup, declines retina scan, etc)                                                                                 //\nvar lceName = 'Accounts.LoginCancelledError';                                                                        // 255\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {                                      // 256\n  this.message = description;                                                                                        // 259\n});                                                                                                                  //\nAp.LoginCancelledError.prototype.name = lceName;                                                                     // 262\n                                                                                                                     //\n// This is used to transmit specific subclass errors over the wire. We should                                        //\n// come up with a more generic way to do this (eg, with some sort of symbolic                                        //\n// error code rather than a number).                                                                                 //\nAp.LoginCancelledError.numericError = 0x8acdc2f;                                                                     // 267\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/accounts_rate_limit.js                                                                     //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar Ap = AccountsCommon.prototype;                                                                                   // 1\nvar defaultRateLimiterRuleId;                                                                                        // 2\n// Removes default rate limiting rule                                                                                //\nAp.removeDefaultRateLimit = function () {                                                                            // 4\n  var resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);                                                    // 5\n  defaultRateLimiterRuleId = null;                                                                                   // 6\n  return resp;                                                                                                       // 7\n};                                                                                                                   //\n                                                                                                                     //\n// Add a default rule of limiting logins, creating new users and password reset                                      //\n// to 5 times every 10 seconds per connection.                                                                       //\nAp.addDefaultRateLimit = function () {                                                                               // 12\n  if (!defaultRateLimiterRuleId) {                                                                                   // 13\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({                                                              // 14\n      userId: null,                                                                                                  // 15\n      clientAddress: null,                                                                                           // 16\n      type: 'method',                                                                                                // 17\n      name: function (name) {                                                                                        // 18\n        return _.contains(['login', 'createUser', 'resetPassword', 'forgotPassword'], name);                         // 19\n      },                                                                                                             //\n      connectionId: function (connectionId) {                                                                        // 22\n        return true;                                                                                                 // 23\n      }                                                                                                              //\n    }, 5, 10000);                                                                                                    //\n  }                                                                                                                  //\n};                                                                                                                   //\n                                                                                                                     //\nAp.addDefaultRateLimit();                                                                                            // 29\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/accounts_client.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Constructor for the `Accounts` object on the client.                                                     //\n * @locus Client                                                                                                     //\n * @class                                                                                                            //\n * @extends AccountsCommon                                                                                           //\n * @instancename accountsClient                                                                                      //\n * @param {Object} options an object with fields:                                                                    //\n * @param {Object} options.connection Optional DDP connection to reuse.                                              //\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.                                    //\n */                                                                                                                  //\nAccountsClient = (function (_AccountsCommon) {                                                                       // 11\n  babelHelpers.inherits(AccountsClient, _AccountsCommon);                                                            //\n                                                                                                                     //\n  function AccountsClient(options) {                                                                                 // 12\n    babelHelpers.classCallCheck(this, AccountsClient);                                                               //\n                                                                                                                     //\n    _AccountsCommon.call(this, options);                                                                             // 13\n                                                                                                                     //\n    this._loggingIn = false;                                                                                         // 15\n    this._loggingInDeps = new Tracker.Dependency();                                                                  // 16\n                                                                                                                     //\n    this._loginServicesHandle = this.connection.subscribe(\"meteor.loginServiceConfiguration\");                       // 18\n                                                                                                                     //\n    this._pageLoadLoginCallbacks = [];                                                                               // 21\n    this._pageLoadLoginAttemptInfo = null;                                                                           // 22\n                                                                                                                     //\n    // Defined in url_client.js.                                                                                     //\n    this._initUrlMatching();                                                                                         // 25\n                                                                                                                     //\n    // Defined in localstorage_token.js.                                                                             //\n    this._initLocalStorage();                                                                                        // 28\n  }                                                                                                                  //\n                                                                                                                     //\n  ///                                                                                                                //\n  /// CURRENT USER                                                                                                   //\n  ///                                                                                                                //\n                                                                                                                     //\n  // @override                                                                                                       //\n                                                                                                                     //\n  AccountsClient.prototype.userId = (function () {                                                                   // 11\n    function userId() {                                                                                              // 36\n      return this.connection.userId();                                                                               // 37\n    }                                                                                                                //\n                                                                                                                     //\n    return userId;                                                                                                   //\n  })();                                                                                                              //\n                                                                                                                     //\n  // This is mostly just called within this file, but Meteor.loginWithPassword                                       //\n  // also uses it to make loggingIn() be true during the beginPasswordExchange                                       //\n  // method call too.                                                                                                //\n                                                                                                                     //\n  AccountsClient.prototype._setLoggingIn = (function () {                                                            // 11\n    function _setLoggingIn(x) {                                                                                      // 43\n      if (this._loggingIn !== x) {                                                                                   // 44\n        this._loggingIn = x;                                                                                         // 45\n        this._loggingInDeps.changed();                                                                               // 46\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return _setLoggingIn;                                                                                            //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client                                                                                                   //\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsClient.prototype.loggingIn = (function () {                                                                // 11\n    function loggingIn() {                                                                                           // 54\n      this._loggingInDeps.depend();                                                                                  // 55\n      return this._loggingIn;                                                                                        // 56\n    }                                                                                                                //\n                                                                                                                     //\n    return loggingIn;                                                                                                //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Log the user out.                                                                                      //\n   * @locus Client                                                                                                   //\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsClient.prototype.logout = (function () {                                                                   // 11\n    function logout(callback) {                                                                                      // 64\n      var self = this;                                                                                               // 65\n      self.connection.apply('logout', [], {                                                                          // 66\n        wait: true                                                                                                   // 67\n      }, function (error, result) {                                                                                  //\n        if (error) {                                                                                                 // 69\n          callback && callback(error);                                                                               // 70\n        } else {                                                                                                     //\n          self.makeClientLoggedOut();                                                                                // 72\n          callback && callback();                                                                                    // 73\n        }                                                                                                            //\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return logout;                                                                                                   //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client                                                                                                   //\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */                                                                                                                //\n                                                                                                                     //\n  AccountsClient.prototype.logoutOtherClients = (function () {                                                       // 11\n    function logoutOtherClients(callback) {                                                                          // 83\n      var self = this;                                                                                               // 84\n                                                                                                                     //\n      // We need to make two method calls: one to replace our current token,                                         //\n      // and another to remove all tokens except the current one. We want to                                         //\n      // call these two methods one after the other, without any other                                               //\n      // methods running between them. For example, we don't want `logout`                                           //\n      // to be called in between our two method calls (otherwise the second                                          //\n      // method call would return an error). Another example: we don't want                                          //\n      // logout to be called before the callback for `getNewToken`;                                                  //\n      // otherwise we would momentarily log the user out and then write a                                            //\n      // new token to localStorage.                                                                                  //\n      //                                                                                                             //\n      // To accomplish this, we make both calls as wait methods, and queue                                           //\n      // them one after the other, without spinning off the event loop in                                            //\n      // between. Even though we queue `removeOtherTokens` before                                                    //\n      // `getNewToken`, we won't actually send the `removeOtherTokens` call                                          //\n      // until the `getNewToken` callback has finished running, because they                                         //\n      // are both wait methods.                                                                                      //\n      self.connection.apply('getNewToken', [], { wait: true }, function (err, result) {                              // 102\n        if (!err) {                                                                                                  // 107\n          self._storeLoginToken(self.userId(), result.token, result.tokenExpires);                                   // 108\n        }                                                                                                            //\n      });                                                                                                            //\n                                                                                                                     //\n      self.connection.apply('removeOtherTokens', [], { wait: true }, function (err) {                                // 117\n        callback && callback(err);                                                                                   // 122\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return logoutOtherClients;                                                                                       //\n  })();                                                                                                              //\n                                                                                                                     //\n  return AccountsClient;                                                                                             //\n})(AccountsCommon);                                                                                                  //\n                                                                                                                     //\nvar Ap = AccountsClient.prototype;                                                                                   // 128\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nMeteor.loggingIn = function () {                                                                                     // 134\n  return Accounts.loggingIn();                                                                                       // 135\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// LOGIN METHODS                                                                                                    //\n///                                                                                                                  //\n                                                                                                                     //\n// Call a login method on the server.                                                                                //\n//                                                                                                                   //\n// A login method is a method which on success calls `this.setUserId(id)` and                                        //\n// `Accounts._setLoginToken` on the server and returns an object with fields                                         //\n// 'id' (containing the user id), 'token' (containing a resume token), and                                           //\n// optionally `tokenExpires`.                                                                                        //\n//                                                                                                                   //\n// This function takes care of:                                                                                      //\n//   - Updating the Meteor.loggingIn() reactive data source                                                          //\n//   - Calling the method in 'wait' mode                                                                             //\n//   - On success, saving the resume token to localStorage                                                           //\n//   - On success, calling Accounts.connection.setUserId()                                                           //\n//   - Setting up an onReconnect handler which logs in with                                                          //\n//     the resume token                                                                                              //\n//                                                                                                                   //\n// Options:                                                                                                          //\n// - methodName: The method to call (default 'login')                                                                //\n// - methodArguments: The arguments for the method                                                                   //\n// - validateResult: If provided, will be called with the result of the                                              //\n//                 method. If it throws, the client will not be logged in (and                                       //\n//                 its error will be passed to the callback).                                                        //\n// - userCallback: Will be called with no arguments once the user is fully                                           //\n//                 logged in, or with the error on error.                                                            //\n//                                                                                                                   //\nAp.callLoginMethod = function (options) {                                                                            // 166\n  var self = this;                                                                                                   // 167\n                                                                                                                     //\n  options = _.extend({                                                                                               // 169\n    methodName: 'login',                                                                                             // 170\n    methodArguments: [{}],                                                                                           // 171\n    _suppressLoggingIn: false                                                                                        // 172\n  }, options);                                                                                                       //\n                                                                                                                     //\n  // Set defaults for callback arguments to no-op functions; make sure we                                            //\n  // override falsey values too.                                                                                     //\n  _.each(['validateResult', 'userCallback'], function (f) {                                                          // 177\n    if (!options[f]) options[f] = function () {};                                                                    // 178\n  });                                                                                                                //\n                                                                                                                     //\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.                                              //\n  var loginCallbacks = _.once(function (error) {                                                                     // 183\n    if (!error) {                                                                                                    // 184\n      self._onLoginHook.each(function (callback) {                                                                   // 185\n        callback();                                                                                                  // 186\n        return true;                                                                                                 // 187\n      });                                                                                                            //\n    } else {                                                                                                         //\n      self._onLoginFailureHook.each(function (callback) {                                                            // 190\n        callback();                                                                                                  // 191\n        return true;                                                                                                 // 192\n      });                                                                                                            //\n    }                                                                                                                //\n    options.userCallback.apply(this, arguments);                                                                     // 195\n  });                                                                                                                //\n                                                                                                                     //\n  var reconnected = false;                                                                                           // 198\n                                                                                                                     //\n  // We want to set up onReconnect as soon as we get a result token back from                                        //\n  // the server, without having to wait for subscriptions to rerun. This is                                          //\n  // because if we disconnect and reconnect between getting the result and                                           //\n  // getting the results of subscription rerun, we WILL NOT re-send this                                             //\n  // method (because we never re-send methods whose results we've received)                                          //\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"                                            //\n  // time. This will lead to makeClientLoggedIn(result.id) even though we                                            //\n  // haven't actually sent a login method!                                                                           //\n  //                                                                                                                 //\n  // But by making sure that we send this \"resume\" login in that case (and                                           //\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate                                         //\n  // client-side userId. (It's important that livedata_connection guarantees                                         //\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback                                          //\n  // will occur before the callback from the resume login call.)                                                     //\n  var onResultReceived = function (err, result) {                                                                    // 214\n    if (err || !result || !result.token) {                                                                           // 215\n      // Leave onReconnect alone if there was an error, so that if the user was                                      //\n      // already logged in they will still get logged in on reconnect.                                               //\n      // See issue #4970.                                                                                            //\n    } else {                                                                                                         //\n        self.connection.onReconnect = function () {                                                                  // 220\n          reconnected = true;                                                                                        // 221\n          // If our token was updated in storage, use the latest one.                                                //\n          var storedToken = self._storedLoginToken();                                                                // 223\n          if (storedToken) {                                                                                         // 224\n            result = {                                                                                               // 225\n              token: storedToken,                                                                                    // 226\n              tokenExpires: self._storedLoginTokenExpires()                                                          // 227\n            };                                                                                                       //\n          }                                                                                                          //\n          if (!result.tokenExpires) result.tokenExpires = self._tokenExpiration(new Date());                         // 230\n          if (self._tokenExpiresSoon(result.tokenExpires)) {                                                         // 232\n            self.makeClientLoggedOut();                                                                              // 233\n          } else {                                                                                                   //\n            self.callLoginMethod({                                                                                   // 235\n              methodArguments: [{ resume: result.token }],                                                           // 236\n              // Reconnect quiescence ensures that the user doesn't see an                                           //\n              // intermediate state before the login method finishes. So we don't                                    //\n              // need to show a logging-in animation.                                                                //\n              _suppressLoggingIn: true,                                                                              // 240\n              userCallback: function (error) {                                                                       // 241\n                var storedTokenNow = self._storedLoginToken();                                                       // 242\n                if (error) {                                                                                         // 243\n                  // If we had a login error AND the current stored token is the                                     //\n                  // one that we tried to log in with, then declare ourselves                                        //\n                  // logged out. If there's a token in storage but it's not the                                      //\n                  // token that we tried to log in with, we don't know anything                                      //\n                  // about whether that token is valid or not, so do nothing. The                                    //\n                  // periodic localStorage poll will decide if we are logged in or                                   //\n                  // out with this token, if it hasn't already. Of course, even                                      //\n                  // with this check, another tab could insert a new valid token                                     //\n                  // immediately before we clear localStorage here, which would                                      //\n                  // lead to both tabs being logged out, but by checking the token                                   //\n                  // in storage right now we hope to make that unlikely to happen.                                   //\n                  //                                                                                                 //\n                  // If there is no token in storage right now, we don't have to                                     //\n                  // do anything; whatever code removed the token from storage was                                   //\n                  // responsible for calling `makeClientLoggedOut()`, or the                                         //\n                  // periodic localStorage poll will call `makeClientLoggedOut`                                      //\n                  // eventually if another tab wiped the token from storage.                                         //\n                  if (storedTokenNow && storedTokenNow === result.token) {                                           // 261\n                    self.makeClientLoggedOut();                                                                      // 262\n                  }                                                                                                  //\n                }                                                                                                    //\n                // Possibly a weird callback to call, but better than nothing if                                     //\n                // there is a reconnect between \"login result received\" and \"data                                    //\n                // ready\".                                                                                           //\n                loginCallbacks(error);                                                                               // 268\n              } });                                                                                                  //\n          }                                                                                                          //\n        };                                                                                                           //\n      }                                                                                                              //\n  };                                                                                                                 //\n                                                                                                                     //\n  // This callback is called once the local cache of the current-user                                                //\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to                                        //\n  // date.                                                                                                           //\n  var loggedInAndDataReadyCallback = function (error, result) {                                                      // 278\n    // If the login method returns its result but the connection is lost                                             //\n    // before the data is in the local cache, it'll set an onReconnect (see                                          //\n    // above). The onReconnect will try to log in using the token, and *it*                                          //\n    // will call userCallback via its own version of this                                                            //\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.                                           //\n    if (reconnected) return;                                                                                         // 284\n                                                                                                                     //\n    // Note that we need to call this even if _suppressLoggingIn is true,                                            //\n    // because it could be matching a _setLoggingIn(true) from a                                                     //\n    // half-completed pre-reconnect login method.                                                                    //\n    self._setLoggingIn(false);                                                                                       // 290\n    if (error || !result) {                                                                                          // 291\n      error = error || new Error(\"No result from call to \" + options.methodName);                                    // 292\n      loginCallbacks(error);                                                                                         // 294\n      return;                                                                                                        // 295\n    }                                                                                                                //\n    try {                                                                                                            // 297\n      options.validateResult(result);                                                                                // 298\n    } catch (e) {                                                                                                    //\n      loginCallbacks(e);                                                                                             // 300\n      return;                                                                                                        // 301\n    }                                                                                                                //\n                                                                                                                     //\n    // Make the client logged in. (The user data should already be loaded!)                                          //\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);                                           // 305\n    loginCallbacks();                                                                                                // 306\n  };                                                                                                                 //\n                                                                                                                     //\n  if (!options._suppressLoggingIn) self._setLoggingIn(true);                                                         // 309\n  self.connection.apply(options.methodName, options.methodArguments, { wait: true, onResultReceived: onResultReceived }, loggedInAndDataReadyCallback);\n};                                                                                                                   //\n                                                                                                                     //\nAp.makeClientLoggedOut = function () {                                                                               // 318\n  this._unstoreLoginToken();                                                                                         // 319\n  this.connection.setUserId(null);                                                                                   // 320\n  this.connection.onReconnect = null;                                                                                // 321\n};                                                                                                                   //\n                                                                                                                     //\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {                                                     // 324\n  this._storeLoginToken(userId, token, tokenExpires);                                                                // 325\n  this.connection.setUserId(userId);                                                                                 // 326\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Log the user out.                                                                                        //\n * @locus Client                                                                                                     //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                                  //\nMeteor.logout = function (callback) {                                                                                // 334\n  return Accounts.logout(callback);                                                                                  // 335\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client                                                                                                     //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                                  //\nMeteor.logoutOtherClients = function (callback) {                                                                    // 343\n  return Accounts.logoutOtherClients(callback);                                                                      // 344\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// LOGIN SERVICES                                                                                                   //\n///                                                                                                                  //\n                                                                                                                     //\n// A reactive function returning whether the loginServiceConfiguration                                               //\n// subscription is ready. Used by accounts-ui to hide the login button                                               //\n// until we have all the configuration loaded                                                                        //\n//                                                                                                                   //\nAp.loginServicesConfigured = function () {                                                                           // 356\n  return this._loginServicesHandle.ready();                                                                          // 357\n};                                                                                                                   //\n                                                                                                                     //\n// Some login services such as the redirect login flow or the resume                                                 //\n// login handler can log the user in at page load time.  The                                                         //\n// Meteor.loginWithX functions have a callback argument, but the                                                     //\n// callback function instance won't be in memory any longer if the                                                   //\n// page was reloaded.  The `onPageLoadLogin` function allows a                                                       //\n// callback to be registered for the case where the login was                                                        //\n// initiated in a previous VM, and we now have the result of the login                                               //\n// attempt in a new VM.                                                                                              //\n                                                                                                                     //\n// Register a callback to be called if we have information about a                                                   //\n// login attempt at page load time.  Call the callback immediately if                                                //\n// we already have the page load login attempt info, otherwise stash                                                 //\n// the callback to be called if and when we do get the attempt info.                                                 //\n//                                                                                                                   //\nAp.onPageLoadLogin = function (f) {                                                                                  // 375\n  if (this._pageLoadLoginAttemptInfo) {                                                                              // 376\n    f(this._pageLoadLoginAttemptInfo);                                                                               // 377\n  } else {                                                                                                           //\n    this._pageLoadLoginCallbacks.push(f);                                                                            // 379\n  }                                                                                                                  //\n};                                                                                                                   //\n                                                                                                                     //\n// Receive the information about the login attempt at page load time.                                                //\n// Call registered callbacks, and also record the info in case                                                       //\n// someone's callback hasn't been registered yet.                                                                    //\n//                                                                                                                   //\nAp._pageLoadLogin = function (attemptInfo) {                                                                         // 388\n  if (this._pageLoadLoginAttemptInfo) {                                                                              // 389\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");                                     // 390\n    return;                                                                                                          // 391\n  }                                                                                                                  //\n                                                                                                                     //\n  _.each(this._pageLoadLoginCallbacks, function (callback) {                                                         // 394\n    callback(attemptInfo);                                                                                           // 395\n  });                                                                                                                //\n                                                                                                                     //\n  this._pageLoadLoginCallbacks = [];                                                                                 // 398\n  this._pageLoadLoginAttemptInfo = attemptInfo;                                                                      // 399\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// HANDLEBARS HELPERS                                                                                               //\n///                                                                                                                  //\n                                                                                                                     //\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}                                            //\n// global helpers.                                                                                                   //\nif (Package.blaze) {                                                                                                 // 409\n  /**                                                                                                                //\n   * @global                                                                                                         //\n   * @name  currentUser                                                                                              //\n   * @isHelper true                                                                                                  //\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */                                                                                                                //\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {                                           // 416\n    return Meteor.user();                                                                                            // 417\n  });                                                                                                                //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @global                                                                                                         //\n   * @name  loggingIn                                                                                                //\n   * @isHelper true                                                                                                  //\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).                                                         //\n   */                                                                                                                //\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {                                             // 426\n    return Meteor.loggingIn();                                                                                       // 427\n  });                                                                                                                //\n}                                                                                                                    //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/url_client.js                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar Ap = AccountsClient.prototype;                                                                                   // 1\n                                                                                                                     //\n// All of the special hash URLs we support for accounts interactions                                                 //\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];                                            // 4\n                                                                                                                     //\nvar savedHash = window.location.hash;                                                                                // 6\n                                                                                                                     //\nAp._initUrlMatching = function () {                                                                                  // 8\n  // By default, allow the autologin process to happen.                                                              //\n  this._autoLoginEnabled = true;                                                                                     // 10\n                                                                                                                     //\n  // We only support one callback per URL.                                                                           //\n  this._accountsCallbacks = {};                                                                                      // 13\n                                                                                                                     //\n  // Try to match the saved value of window.location.hash.                                                           //\n  this._attemptToMatchHash();                                                                                        // 16\n};                                                                                                                   //\n                                                                                                                     //\n// Separate out this functionality for testing                                                                       //\n                                                                                                                     //\nAp._attemptToMatchHash = function () {                                                                               // 21\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);                                                        // 22\n};                                                                                                                   //\n                                                                                                                     //\n// Note that both arguments are optional and are currently only passed by                                            //\n// accounts_url_tests.js.                                                                                            //\nfunction attemptToMatchHash(accounts, hash, success) {                                                               // 27\n  _.each(accountsPaths, function (urlPart) {                                                                         // 28\n    var token;                                                                                                       // 29\n                                                                                                                     //\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");                                                   // 31\n    var match = hash.match(tokenRegex);                                                                              // 32\n                                                                                                                     //\n    if (match) {                                                                                                     // 34\n      token = match[1];                                                                                              // 35\n                                                                                                                     //\n      // XXX COMPAT WITH 0.9.3                                                                                       //\n      if (urlPart === \"reset-password\") {                                                                            // 38\n        accounts._resetPasswordToken = token;                                                                        // 39\n      } else if (urlPart === \"verify-email\") {                                                                       //\n        accounts._verifyEmailToken = token;                                                                          // 41\n      } else if (urlPart === \"enroll-account\") {                                                                     //\n        accounts._enrollAccountToken = token;                                                                        // 43\n      }                                                                                                              //\n    } else {                                                                                                         //\n      return;                                                                                                        // 46\n    }                                                                                                                //\n                                                                                                                     //\n    // If no handlers match the hash, then maybe it's meant to be consumed                                           //\n    // by some entirely different code, so we only clear it the first time                                           //\n    // a handler successfully matches. Note that later handlers reuse the                                            //\n    // savedHash, so clearing window.location.hash here will not interfere                                           //\n    // with their needs.                                                                                             //\n    window.location.hash = \"\";                                                                                       // 54\n                                                                                                                     //\n    // Do some stuff with the token we matched                                                                       //\n    success.call(accounts, token, urlPart);                                                                          // 57\n  });                                                                                                                //\n}                                                                                                                    //\n                                                                                                                     //\nfunction defaultSuccessHandler(token, urlPart) {                                                                     // 61\n  var self = this;                                                                                                   // 62\n                                                                                                                     //\n  // put login in a suspended state to wait for the interaction to finish                                            //\n  self._autoLoginEnabled = false;                                                                                    // 65\n                                                                                                                     //\n  // wait for other packages to register callbacks                                                                   //\n  Meteor.startup(function () {                                                                                       // 68\n    // if a callback has been registered for this kind of token, call it                                             //\n    if (self._accountsCallbacks[urlPart]) {                                                                          // 70\n      self._accountsCallbacks[urlPart](token, function () {                                                          // 71\n        self._enableAutoLogin();                                                                                     // 72\n      });                                                                                                            //\n    }                                                                                                                //\n  });                                                                                                                //\n}                                                                                                                    //\n                                                                                                                     //\n// Export for testing                                                                                                //\nAccountsTest = {                                                                                                     // 79\n  attemptToMatchHash: function (hash, success) {                                                                     // 80\n    return attemptToMatchHash(Accounts, hash, success);                                                              // 81\n  }                                                                                                                  //\n};                                                                                                                   //\n                                                                                                                     //\n// XXX these should be moved to accounts-password eventually. Right now                                              //\n// this is prevented by the need to set autoLoginEnabled=false, but in                                               //\n// some bright future we won't need to do that anymore.                                                              //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Register a function to call when a reset password link is clicked                                        //\n * in an email sent by                                                                                               //\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).                                            //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onResetPasswordLink                                                                                         //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: A password reset token that can be passed to                                                          //\n * [`Accounts.resetPassword`](#accounts_resetpassword).                                                              //\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal                             //\n * login process is suspended until this function is called, so that the                                             //\n * password for user A can be reset even if user B was logged in.                                                    //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onResetPasswordLink = function (callback) {                                                                       // 106\n  if (this._accountsCallbacks[\"reset-password\"]) {                                                                   // 107\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  //\n                                                                                                                     //\n  this._accountsCallbacks[\"reset-password\"] = callback;                                                              // 112\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Register a function to call when an email verification link is                                           //\n * clicked in an email sent by                                                                                       //\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).                                              //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onEmailVerificationLink                                                                                     //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: An email verification token that can be passed to                                                     //\n * [`Accounts.verifyEmail`](#accounts_verifyemail).                                                                  //\n * 2. `done`: A function to call when the email verification UI flow is complete.                                    //\n * The normal login process is suspended until this function is called, so                                           //\n * that the user can be notified that they are verifying their email before                                          //\n * being logged in.                                                                                                  //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onEmailVerificationLink = function (callback) {                                                                   // 133\n  if (this._accountsCallbacks[\"verify-email\"]) {                                                                     // 134\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  //\n                                                                                                                     //\n  this._accountsCallbacks[\"verify-email\"] = callback;                                                                // 139\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Register a function to call when an account enrollment link is                                           //\n * clicked in an email sent by                                                                                       //\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).                                                  //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onEnrollmentLink                                                                                            //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: A password reset token that can be passed to                                                          //\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly                                             //\n * enrolled account a password.                                                                                      //\n * 2. `done`: A function to call when the enrollment UI flow is complete.                                            //\n * The normal login process is suspended until this function is called, so that                                      //\n * user A can be enrolled even if user B was logged in.                                                              //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onEnrollmentLink = function (callback) {                                                                          // 160\n  if (this._accountsCallbacks[\"enroll-account\"]) {                                                                   // 161\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  //\n                                                                                                                     //\n  this._accountsCallbacks[\"enroll-account\"] = callback;                                                              // 166\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/localstorage_token.js                                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar Ap = AccountsClient.prototype;                                                                                   // 1\n                                                                                                                     //\n// This file deals with storing a login token and user id in the                                                     //\n// browser's localStorage facility. It polls local storage every few                                                 //\n// seconds to synchronize login state between multiple tabs in the same                                              //\n// browser.                                                                                                          //\n                                                                                                                     //\n// Login with a Meteor access token. This is the only public function                                                //\n// here.                                                                                                             //\nMeteor.loginWithToken = function (token, callback) {                                                                 // 10\n  return Accounts.loginWithToken(token, callback);                                                                   // 11\n};                                                                                                                   //\n                                                                                                                     //\nAp.loginWithToken = function (token, callback) {                                                                     // 14\n  this.callLoginMethod({                                                                                             // 15\n    methodArguments: [{                                                                                              // 16\n      resume: token                                                                                                  // 17\n    }],                                                                                                              //\n    userCallback: callback                                                                                           // 19\n  });                                                                                                                //\n};                                                                                                                   //\n                                                                                                                     //\n// Semi-internal API. Call this function to re-enable auto login after                                               //\n// if it was disabled at startup.                                                                                    //\nAp._enableAutoLogin = function () {                                                                                  // 25\n  this._autoLoginEnabled = true;                                                                                     // 26\n  this._pollStoredLoginToken();                                                                                      // 27\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// STORING                                                                                                          //\n///                                                                                                                  //\n                                                                                                                     //\n// Call this from the top level of the test file for any test that does                                              //\n// logging in and out, to protect multiple tabs running the same tests                                               //\n// simultaneously from interfering with each others' localStorage.                                                   //\nAp._isolateLoginTokenForTest = function () {                                                                         // 38\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();                                                         // 39\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();                                                                 // 40\n};                                                                                                                   //\n                                                                                                                     //\nAp._storeLoginToken = function (userId, token, tokenExpires) {                                                       // 43\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);                                                            // 44\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);                                                         // 45\n  if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());                                               // 46\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);                                          // 48\n                                                                                                                     //\n  // to ensure that the localstorage poller doesn't end up trying to                                                 //\n  // connect a second time                                                                                           //\n  this._lastLoginTokenWhenPolled = token;                                                                            // 52\n};                                                                                                                   //\n                                                                                                                     //\nAp._unstoreLoginToken = function () {                                                                                // 55\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);                                                                 // 56\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);                                                             // 57\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                     // 58\n                                                                                                                     //\n  // to ensure that the localstorage poller doesn't end up trying to                                                 //\n  // connect a second time                                                                                           //\n  this._lastLoginTokenWhenPolled = null;                                                                             // 62\n};                                                                                                                   //\n                                                                                                                     //\n// This is private, but it is exported for now because it is used by a                                               //\n// test in accounts-password.                                                                                        //\n//                                                                                                                   //\nAp._storedLoginToken = function () {                                                                                 // 68\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);                                                         // 69\n};                                                                                                                   //\n                                                                                                                     //\nAp._storedLoginTokenExpires = function () {                                                                          // 72\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                 // 73\n};                                                                                                                   //\n                                                                                                                     //\nAp._storedUserId = function () {                                                                                     // 76\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);                                                             // 77\n};                                                                                                                   //\n                                                                                                                     //\nAp._unstoreLoginTokenIfExpiresSoon = function () {                                                                   // 80\n  var tokenExpires = this._storedLoginTokenExpires();                                                                // 81\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {                                              // 82\n    this._unstoreLoginToken();                                                                                       // 83\n  }                                                                                                                  //\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// AUTO-LOGIN                                                                                                       //\n///                                                                                                                  //\n                                                                                                                     //\nAp._initLocalStorage = function () {                                                                                 // 91\n  var self = this;                                                                                                   // 92\n                                                                                                                     //\n  // Key names to use in localStorage                                                                                //\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";                                                                        // 95\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";                                                         // 96\n  self.USER_ID_KEY = \"Meteor.userId\";                                                                                // 97\n                                                                                                                     //\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                            // 99\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {                                                  // 100\n    // We want to keep using the same keys for existing apps that do not                                             //\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have                                           //\n    // to log in again after an app updates to a version of Meteor that                                              //\n    // contains this code, but it's generally preferable to namespace the                                            //\n    // keys so that connections from distinct apps to distinct DDP URLs                                              //\n    // will be distinct in Meteor._localStorage.                                                                     //\n    var namespace = \":\" + this.connection._stream.rawUrl;                                                            // 107\n    if (rootUrlPathPrefix) {                                                                                         // 108\n      namespace += \":\" + rootUrlPathPrefix;                                                                          // 109\n    }                                                                                                                //\n    self.LOGIN_TOKEN_KEY += namespace;                                                                               // 111\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;                                                                       // 112\n    self.USER_ID_KEY += namespace;                                                                                   // 113\n  }                                                                                                                  //\n                                                                                                                     //\n  if (self._autoLoginEnabled) {                                                                                      // 116\n    // Immediately try to log in via local storage, so that any DDP                                                  //\n    // messages are sent after we have established our user account                                                  //\n    self._unstoreLoginTokenIfExpiresSoon();                                                                          // 119\n    var token = self._storedLoginToken();                                                                            // 120\n    if (token) {                                                                                                     // 121\n      // On startup, optimistically present us as logged in while the                                                //\n      // request is in flight. This reduces page flicker on startup.                                                 //\n      var userId = self._storedUserId();                                                                             // 124\n      userId && self.connection.setUserId(userId);                                                                   // 125\n      self.loginWithToken(token, function (err) {                                                                    // 126\n        if (err) {                                                                                                   // 127\n          Meteor._debug(\"Error logging in with token: \" + err);                                                      // 128\n          self.makeClientLoggedOut();                                                                                // 129\n        }                                                                                                            //\n                                                                                                                     //\n        self._pageLoadLogin({                                                                                        // 132\n          type: \"resume\",                                                                                            // 133\n          allowed: !err,                                                                                             // 134\n          error: err,                                                                                                // 135\n          methodName: \"login\",                                                                                       // 136\n          // XXX This is duplicate code with loginWithToken, but                                                     //\n          // loginWithToken can also be called at other times besides                                                //\n          // page load.                                                                                              //\n          methodArguments: [{ resume: token }]                                                                       // 140\n        });                                                                                                          //\n      });                                                                                                            //\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  // Poll local storage every 3 seconds to login if someone logged in in                                             //\n  // another tab                                                                                                     //\n  self._lastLoginTokenWhenPolled = token;                                                                            // 148\n                                                                                                                     //\n  if (self._pollIntervalTimer) {                                                                                     // 150\n    // Unlikely that _initLocalStorage will be called more than once for                                             //\n    // the same AccountsClient instance, but just in case...                                                         //\n    clearInterval(self._pollIntervalTimer);                                                                          // 153\n  }                                                                                                                  //\n                                                                                                                     //\n  self._pollIntervalTimer = setInterval(function () {                                                                // 156\n    self._pollStoredLoginToken();                                                                                    // 157\n  }, 3000);                                                                                                          //\n};                                                                                                                   //\n                                                                                                                     //\nAp._pollStoredLoginToken = function () {                                                                             // 161\n  var self = this;                                                                                                   // 162\n                                                                                                                     //\n  if (!self._autoLoginEnabled) {                                                                                     // 164\n    return;                                                                                                          // 165\n  }                                                                                                                  //\n                                                                                                                     //\n  var currentLoginToken = self._storedLoginToken();                                                                  // 168\n                                                                                                                     //\n  // != instead of !== just to make sure undefined and null are treated the same                                     //\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {                                                         // 171\n    if (currentLoginToken) {                                                                                         // 172\n      self.loginWithToken(currentLoginToken, function (err) {                                                        // 173\n        if (err) {                                                                                                   // 174\n          self.makeClientLoggedOut();                                                                                // 175\n        }                                                                                                            //\n      });                                                                                                            //\n    } else {                                                                                                         //\n      self.logout();                                                                                                 // 179\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  self._lastLoginTokenWhenPolled = currentLoginToken;                                                                // 183\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/globals_client.js                                                                          //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * @namespace Accounts                                                                                               //\n * @summary The namespace for all client-side accounts-related methods.                                              //\n */                                                                                                                  //\nAccounts = new AccountsClient();                                                                                     // 5\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary A [Mongo.Collection](#collections) containing user documents.                                            //\n * @locus Anywhere                                                                                                   //\n * @type {Mongo.Collection}                                                                                          //\n */                                                                                                                  //\nMeteor.users = Accounts.users;                                                                                       // 12\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-base'] = {\n  Accounts: Accounts,\n  AccountsClient: AccountsClient,\n  AccountsTest: AccountsTest\n};\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["/accounts_common.js","/accounts_rate_limit.js","/accounts_client.js","/url_client.js","/localstorage_token.js","/globals_client.js"],"names":[],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nAccountsCommon = class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","var Ap = AccountsCommon.prototype;\nvar defaultRateLimiterRuleId;\n// Removes default rate limiting rule\nAp.removeDefaultRateLimit = function () {\n  const resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);\n  defaultRateLimiterRuleId = null;\n  return resp;\n};\n\n// Add a default rule of limiting logins, creating new users and password reset\n// to 5 times every 10 seconds per connection.\nAp.addDefaultRateLimit = function () {\n  if (!defaultRateLimiterRuleId) {\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n      userId: null,\n      clientAddress: null,\n      type: 'method',\n      name: function (name) {\n        return _.contains(['login', 'createUser', 'resetPassword',\n          'forgotPassword'], name);\n      },\n      connectionId: function (connectionId) {\n        return true;\n      }\n    }, 5, 10000);\n  }\n};\n\nAp.addDefaultRateLimit();\n","/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nAccountsClient = class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = false;\n    this._loggingInDeps = new Tracker.Dependency;\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    // Defined in url_client.js.\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    if (this._loggingIn !== x) {\n      this._loggingIn = x;\n      this._loggingInDeps.changed();\n    }\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    this._loggingInDeps.depend();\n    return this._loggingIn;\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    var self = this;\n    self.connection.apply('logout', [], {\n      wait: true\n    }, function (error, result) {\n      if (error) {\n        callback && callback(error);\n      } else {\n        self.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    var self = this;\n\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    self.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      function (err, result) {\n        if (! err) {\n          self._storeLoginToken(\n            self.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    self.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      function (err) {\n        callback && callback(err);\n      }\n    );\n  }\n};\n\nvar Ap = AccountsClient.prototype;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\nAp.callLoginMethod = function (options) {\n  var self = this;\n\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options);\n\n  // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f])\n      options[f] = function () {};\n  });\n\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n  var loginCallbacks = _.once(function (error) {\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    }\n    options.userCallback.apply(this, arguments);\n  });\n\n  var reconnected = false;\n\n  // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {\n      // Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      self.connection.onReconnect = function () {\n        reconnected = true;\n        // If our token was updated in storage, use the latest one.\n        var storedToken = self._storedLoginToken();\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n        if (! result.tokenExpires)\n          result.tokenExpires = self._tokenExpiration(new Date());\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{resume: result.token}],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error) {\n              var storedTokenNow = self._storedLoginToken();\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              }\n              // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n              loginCallbacks(error);\n            }});\n        }\n      };\n    }\n  };\n\n  // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected)\n      return;\n\n    // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n    self._setLoggingIn(false);\n    if (error || !result) {\n      error = error || new Error(\n        \"No result from call to \" + options.methodName);\n      loginCallbacks(error);\n      return;\n    }\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks(e);\n      return;\n    }\n\n    // Make the client logged in. (The user data should already be loaded!)\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks();\n  };\n\n  if (!options._suppressLoggingIn)\n    self._setLoggingIn(true);\n  self.connection.apply(\n    options.methodName,\n    options.methodArguments,\n    {wait: true, onResultReceived: onResultReceived},\n    loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  this._unstoreLoginToken();\n  this.connection.setUserId(null);\n  this.connection.onReconnect = null;\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n  this.connection.setUserId(userId);\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n\n///\n/// LOGIN SERVICES\n///\n\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n};\n\n\n// Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n};\n\n\n// Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n};\n\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n}\n","var Ap = AccountsClient.prototype;\n\n// All of the special hash URLs we support for accounts interactions\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\n\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true;\n\n  // We only support one callback per URL.\n  this._accountsCallbacks = {};\n\n  // Try to match the saved value of window.location.hash.\n  this._attemptToMatchHash();\n};\n\n// Separate out this functionality for testing\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this;\n\n  // put login in a suspended state to wait for the interaction to finish\n  self._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n}\n\n// Export for testing\nAccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */\nAp.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an email verification link is\n * clicked in an email sent by\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEmailVerificationLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: An email verification token that can be passed to\n * [`Accounts.verifyEmail`](#accounts_verifyemail).\n * 2. `done`: A function to call when the email verification UI flow is complete.\n * The normal login process is suspended until this function is called, so\n * that the user can be notified that they are verifying their email before\n * being logged in.\n * @locus Client\n */\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an account enrollment link is\n * clicked in an email sent by\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEnrollmentLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n * enrolled account a password.\n * 2. `done`: A function to call when the enrollment UI flow is complete.\n * The normal login process is suspended until this function is called, so that\n * user A can be enrolled even if user B was logged in.\n * @locus Client\n */\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};\n","var Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n","/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n */\nMeteor.users = Accounts.users;\n"]}}]