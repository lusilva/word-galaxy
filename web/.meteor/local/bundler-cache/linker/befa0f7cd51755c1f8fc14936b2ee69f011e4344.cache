[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar NpmModuleMongodb = Package['npm-mongo'].NpmModuleMongodb;\nvar NpmModuleMongodbVersion = Package['npm-mongo'].NpmModuleMongodbVersion;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar MaxHeap = Package['binary-heap'].MaxHeap;\nvar MinHeap = Package['binary-heap'].MinHeap;\nvar MinMaxHeap = Package['binary-heap'].MinMaxHeap;\nvar Hook = Package['callback-hook'].Hook;\n\n/* Package-scope variables */\nvar MongoInternals, MongoTest, MongoConnection, CursorDescription, Cursor, listenAll, forEachTrigger, OPLOG_COLLECTION, idForOp, OplogHandle, ObserveMultiplexer, ObserveHandle, DocFetcher, PollingObserveDriver, OplogObserveDriver, LocalCollectionDriver, Mongo;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/mongo_driver.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**                                                                                                                   // 1\n * Provide a synchronous Collection API using fibers, backed by                                                       // 2\n * MongoDB.  This is only for use on the server, and mostly identical                                                 // 3\n * to the client API.                                                                                                 // 4\n *                                                                                                                    // 5\n * NOTE: the public API methods must be run within a fiber. If you call                                               // 6\n * these outside of a fiber they will explode!                                                                        // 7\n */                                                                                                                   // 8\n                                                                                                                      // 9\nvar path = Npm.require('path');                                                                                       // 10\nvar MongoDB = NpmModuleMongodb;                                                                                       // 11\nvar Fiber = Npm.require('fibers');                                                                                    // 12\nvar Future = Npm.require(path.join('fibers', 'future'));                                                              // 13\n                                                                                                                      // 14\nMongoInternals = {};                                                                                                  // 15\nMongoTest = {};                                                                                                       // 16\n                                                                                                                      // 17\nMongoInternals.NpmModules = {                                                                                         // 18\n  mongodb: {                                                                                                          // 19\n    version: NpmModuleMongodbVersion,                                                                                 // 20\n    module: MongoDB                                                                                                   // 21\n  }                                                                                                                   // 22\n};                                                                                                                    // 23\n                                                                                                                      // 24\n// Older version of what is now available via                                                                         // 25\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but                                            // 26\n// people do use it.                                                                                                  // 27\n// XXX COMPAT WITH 1.0.3.2                                                                                            // 28\nMongoInternals.NpmModule = MongoDB;                                                                                   // 29\n                                                                                                                      // 30\n// This is used to add or remove EJSON from the beginning of everything nested                                        // 31\n// inside an EJSON custom type. It should only be called on pure JSON!                                                // 32\nvar replaceNames = function (filter, thing) {                                                                         // 33\n  if (typeof thing === \"object\") {                                                                                    // 34\n    if (_.isArray(thing)) {                                                                                           // 35\n      return _.map(thing, _.bind(replaceNames, null, filter));                                                        // 36\n    }                                                                                                                 // 37\n    var ret = {};                                                                                                     // 38\n    _.each(thing, function (value, key) {                                                                             // 39\n      ret[filter(key)] = replaceNames(filter, value);                                                                 // 40\n    });                                                                                                               // 41\n    return ret;                                                                                                       // 42\n  }                                                                                                                   // 43\n  return thing;                                                                                                       // 44\n};                                                                                                                    // 45\n                                                                                                                      // 46\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just                                          // 47\n// doing a structural clone).                                                                                         // 48\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?                                           // 49\nMongoDB.Timestamp.prototype.clone = function () {                                                                     // 50\n  // Timestamps should be immutable.                                                                                  // 51\n  return this;                                                                                                        // 52\n};                                                                                                                    // 53\n                                                                                                                      // 54\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };                                                      // 55\nvar unmakeMongoLegal = function (name) { return name.substr(5); };                                                    // 56\n                                                                                                                      // 57\nvar replaceMongoAtomWithMeteor = function (document) {                                                                // 58\n  if (document instanceof MongoDB.Binary) {                                                                           // 59\n    var buffer = document.value(true);                                                                                // 60\n    return new Uint8Array(buffer);                                                                                    // 61\n  }                                                                                                                   // 62\n  if (document instanceof MongoDB.ObjectID) {                                                                         // 63\n    return new Mongo.ObjectID(document.toHexString());                                                                // 64\n  }                                                                                                                   // 65\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]                                                               // 66\n      && _.size(document) === 2) {                                                                                    // 67\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));                                             // 68\n  }                                                                                                                   // 69\n  if (document instanceof MongoDB.Timestamp) {                                                                        // 70\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                      // 71\n    // this is a weird internal thing used in the oplog!) is the same as the                                          // 72\n    // Mongo representation. We need to do this explicitly or else we would do a                                      // 73\n    // structural clone and lose the prototype.                                                                       // 74\n    return document;                                                                                                  // 75\n  }                                                                                                                   // 76\n  return undefined;                                                                                                   // 77\n};                                                                                                                    // 78\n                                                                                                                      // 79\nvar replaceMeteorAtomWithMongo = function (document) {                                                                // 80\n  if (EJSON.isBinary(document)) {                                                                                     // 81\n    // This does more copies than we'd like, but is necessary because                                                 // 82\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually                                       // 83\n    // serialize it correctly).                                                                                       // 84\n    return new MongoDB.Binary(new Buffer(document));                                                                  // 85\n  }                                                                                                                   // 86\n  if (document instanceof Mongo.ObjectID) {                                                                           // 87\n    return new MongoDB.ObjectID(document.toHexString());                                                              // 88\n  }                                                                                                                   // 89\n  if (document instanceof MongoDB.Timestamp) {                                                                        // 90\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                      // 91\n    // this is a weird internal thing used in the oplog!) is the same as the                                          // 92\n    // Mongo representation. We need to do this explicitly or else we would do a                                      // 93\n    // structural clone and lose the prototype.                                                                       // 94\n    return document;                                                                                                  // 95\n  }                                                                                                                   // 96\n  if (EJSON._isCustomType(document)) {                                                                                // 97\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));                                                 // 98\n  }                                                                                                                   // 99\n  // It is not ordinarily possible to stick dollar-sign keys into mongo                                               // 100\n  // so we don't bother checking for things that need escaping at this time.                                          // 101\n  return undefined;                                                                                                   // 102\n};                                                                                                                    // 103\n                                                                                                                      // 104\nvar replaceTypes = function (document, atomTransformer) {                                                             // 105\n  if (typeof document !== 'object' || document === null)                                                              // 106\n    return document;                                                                                                  // 107\n                                                                                                                      // 108\n  var replacedTopLevelAtom = atomTransformer(document);                                                               // 109\n  if (replacedTopLevelAtom !== undefined)                                                                             // 110\n    return replacedTopLevelAtom;                                                                                      // 111\n                                                                                                                      // 112\n  var ret = document;                                                                                                 // 113\n  _.each(document, function (val, key) {                                                                              // 114\n    var valReplaced = replaceTypes(val, atomTransformer);                                                             // 115\n    if (val !== valReplaced) {                                                                                        // 116\n      // Lazy clone. Shallow copy.                                                                                    // 117\n      if (ret === document)                                                                                           // 118\n        ret = _.clone(document);                                                                                      // 119\n      ret[key] = valReplaced;                                                                                         // 120\n    }                                                                                                                 // 121\n  });                                                                                                                 // 122\n  return ret;                                                                                                         // 123\n};                                                                                                                    // 124\n                                                                                                                      // 125\n                                                                                                                      // 126\nMongoConnection = function (url, options) {                                                                           // 127\n  var self = this;                                                                                                    // 128\n  options = options || {};                                                                                            // 129\n  self._observeMultiplexers = {};                                                                                     // 130\n  self._onFailoverHook = new Hook;                                                                                    // 131\n                                                                                                                      // 132\n  var mongoOptions = {db: {safe: true}, server: {}, replSet: {}};                                                     // 133\n                                                                                                                      // 134\n  // Set autoReconnect to true, unless passed on the URL. Why someone                                                 // 135\n  // would want to set autoReconnect to false, I'm not really sure, but                                               // 136\n  // keeping this for backwards compatibility for now.                                                                // 137\n  if (!(/[\\?&]auto_?[rR]econnect=/.test(url))) {                                                                      // 138\n    mongoOptions.server.auto_reconnect = true;                                                                        // 139\n  }                                                                                                                   // 140\n                                                                                                                      // 141\n  // Disable the native parser by default, unless specifically enabled                                                // 142\n  // in the mongo URL.                                                                                                // 143\n  // - The native driver can cause errors which normally would be                                                     // 144\n  //   thrown, caught, and handled into segfaults that take down the                                                  // 145\n  //   whole app.                                                                                                     // 146\n  // - Binary modules don't yet work when you bundle and move the bundle                                              // 147\n  //   to a different platform (aka deploy)                                                                           // 148\n  // We should revisit this after binary npm module support lands.                                                    // 149\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {                                                                       // 150\n    mongoOptions.db.native_parser = false;                                                                            // 151\n  }                                                                                                                   // 152\n                                                                                                                      // 153\n  // XXX maybe we should have a better way of allowing users to configure the                                         // 154\n  // underlying Mongo driver                                                                                          // 155\n  if (_.has(options, 'poolSize')) {                                                                                   // 156\n    // If we just set this for \"server\", replSet will override it. If we just                                         // 157\n    // set it for replSet, it will be ignored if we're not using a replSet.                                           // 158\n    mongoOptions.server.poolSize = options.poolSize;                                                                  // 159\n    mongoOptions.replSet.poolSize = options.poolSize;                                                                 // 160\n  }                                                                                                                   // 161\n                                                                                                                      // 162\n  self.db = null;                                                                                                     // 163\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when                                        // 164\n  // it changes.  The Node driver's joined callback seems to fire way too                                             // 165\n  // often, which is why we need to track it ourselves.                                                               // 166\n  self._primary = null;                                                                                               // 167\n  self._oplogHandle = null;                                                                                           // 168\n  self._docFetcher = null;                                                                                            // 169\n                                                                                                                      // 170\n                                                                                                                      // 171\n  var connectFuture = new Future;                                                                                     // 172\n  MongoDB.connect(                                                                                                    // 173\n    url,                                                                                                              // 174\n    mongoOptions,                                                                                                     // 175\n    Meteor.bindEnvironment(                                                                                           // 176\n      function (err, db) {                                                                                            // 177\n        if (err) {                                                                                                    // 178\n          throw err;                                                                                                  // 179\n        }                                                                                                             // 180\n                                                                                                                      // 181\n        // First, figure out what the current primary is, if any.                                                     // 182\n        if (db.serverConfig._state.master)                                                                            // 183\n          self._primary = db.serverConfig._state.master.name;                                                         // 184\n        db.serverConfig.on(                                                                                           // 185\n          'joined', Meteor.bindEnvironment(function (kind, doc) {                                                     // 186\n            if (kind === 'primary') {                                                                                 // 187\n              if (doc.primary !== self._primary) {                                                                    // 188\n                self._primary = doc.primary;                                                                          // 189\n                self._onFailoverHook.each(function (callback) {                                                       // 190\n                  callback();                                                                                         // 191\n                  return true;                                                                                        // 192\n                });                                                                                                   // 193\n              }                                                                                                       // 194\n            } else if (doc.me === self._primary) {                                                                    // 195\n              // The thing we thought was primary is now something other than                                         // 196\n              // primary.  Forget that we thought it was primary.  (This means                                        // 197\n              // that if a server stops being primary and then starts being                                           // 198\n              // primary again without another server becoming primary in the                                         // 199\n              // middle, we'll correctly count it as a failover.)                                                     // 200\n              self._primary = null;                                                                                   // 201\n            }                                                                                                         // 202\n          }));                                                                                                        // 203\n                                                                                                                      // 204\n        // Allow the constructor to return.                                                                           // 205\n        connectFuture['return'](db);                                                                                  // 206\n      },                                                                                                              // 207\n      connectFuture.resolver()  // onException                                                                        // 208\n    )                                                                                                                 // 209\n  );                                                                                                                  // 210\n                                                                                                                      // 211\n  // Wait for the connection to be successful; throws on failure.                                                     // 212\n  self.db = connectFuture.wait();                                                                                     // 213\n                                                                                                                      // 214\n  if (options.oplogUrl && ! Package['disable-oplog']) {                                                               // 215\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);                                      // 216\n    self._docFetcher = new DocFetcher(self);                                                                          // 217\n  }                                                                                                                   // 218\n};                                                                                                                    // 219\n                                                                                                                      // 220\nMongoConnection.prototype.close = function() {                                                                        // 221\n  var self = this;                                                                                                    // 222\n                                                                                                                      // 223\n  if (! self.db)                                                                                                      // 224\n    throw Error(\"close called before Connection created?\");                                                           // 225\n                                                                                                                      // 226\n  // XXX probably untested                                                                                            // 227\n  var oplogHandle = self._oplogHandle;                                                                                // 228\n  self._oplogHandle = null;                                                                                           // 229\n  if (oplogHandle)                                                                                                    // 230\n    oplogHandle.stop();                                                                                               // 231\n                                                                                                                      // 232\n  // Use Future.wrap so that errors get thrown. This happens to                                                       // 233\n  // work even outside a fiber since the 'close' method is not                                                        // 234\n  // actually asynchronous.                                                                                           // 235\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();                                                           // 236\n};                                                                                                                    // 237\n                                                                                                                      // 238\n// Returns the Mongo Collection object; may yield.                                                                    // 239\nMongoConnection.prototype.rawCollection = function (collectionName) {                                                 // 240\n  var self = this;                                                                                                    // 241\n                                                                                                                      // 242\n  if (! self.db)                                                                                                      // 243\n    throw Error(\"rawCollection called before Connection created?\");                                                   // 244\n                                                                                                                      // 245\n  var future = new Future;                                                                                            // 246\n  self.db.collection(collectionName, future.resolver());                                                              // 247\n  return future.wait();                                                                                               // 248\n};                                                                                                                    // 249\n                                                                                                                      // 250\nMongoConnection.prototype._createCappedCollection = function (                                                        // 251\n    collectionName, byteSize, maxDocuments) {                                                                         // 252\n  var self = this;                                                                                                    // 253\n                                                                                                                      // 254\n  if (! self.db)                                                                                                      // 255\n    throw Error(\"_createCappedCollection called before Connection created?\");                                         // 256\n                                                                                                                      // 257\n  var future = new Future();                                                                                          // 258\n  self.db.createCollection(                                                                                           // 259\n    collectionName,                                                                                                   // 260\n    { capped: true, size: byteSize, max: maxDocuments },                                                              // 261\n    future.resolver());                                                                                               // 262\n  future.wait();                                                                                                      // 263\n};                                                                                                                    // 264\n                                                                                                                      // 265\n// This should be called synchronously with a write, to create a                                                      // 266\n// transaction on the current write fence, if any. After we can read                                                  // 267\n// the write, and after observers have been notified (or at least,                                                    // 268\n// after the observer notifiers have added themselves to the write                                                    // 269\n// fence), you should call 'committed()' on the object returned.                                                      // 270\nMongoConnection.prototype._maybeBeginWrite = function () {                                                            // 271\n  var self = this;                                                                                                    // 272\n  var fence = DDPServer._CurrentWriteFence.get();                                                                     // 273\n  if (fence)                                                                                                          // 274\n    return fence.beginWrite();                                                                                        // 275\n  else                                                                                                                // 276\n    return {committed: function () {}};                                                                               // 277\n};                                                                                                                    // 278\n                                                                                                                      // 279\n// Internal interface: adds a callback which is called when the Mongo primary                                         // 280\n// changes. Returns a stop handle.                                                                                    // 281\nMongoConnection.prototype._onFailover = function (callback) {                                                         // 282\n  return this._onFailoverHook.register(callback);                                                                     // 283\n};                                                                                                                    // 284\n                                                                                                                      // 285\n                                                                                                                      // 286\n//////////// Public API //////////                                                                                    // 287\n                                                                                                                      // 288\n// The write methods block until the database has confirmed the write (it may                                         // 289\n// not be replicated or stable on disk, but one server has confirmed it) if no                                        // 290\n// callback is provided. If a callback is provided, then they call the callback                                       // 291\n// when the write is confirmed. They return nothing on success, and raise an                                          // 292\n// exception on failure.                                                                                              // 293\n//                                                                                                                    // 294\n// After making a write (with insert, update, remove), observers are                                                  // 295\n// notified asynchronously. If you want to receive a callback once all                                                // 296\n// of the observer notifications have landed for your write, do the                                                   // 297\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new                                             // 298\n// _WriteFence, and then set a callback on the write fence.)                                                          // 299\n//                                                                                                                    // 300\n// Since our execution environment is single-threaded, this is                                                        // 301\n// well-defined -- a write \"has been made\" if it's returned, and an                                                   // 302\n// observer \"has been notified\" if its callback has returned.                                                         // 303\n                                                                                                                      // 304\nvar writeCallback = function (write, refresh, callback) {                                                             // 305\n  return function (err, result) {                                                                                     // 306\n    if (! err) {                                                                                                      // 307\n      // XXX We don't have to run this on error, right?                                                               // 308\n      try {                                                                                                           // 309\n        refresh();                                                                                                    // 310\n      } catch (refreshErr) {                                                                                          // 311\n        if (callback) {                                                                                               // 312\n          callback(refreshErr);                                                                                       // 313\n          return;                                                                                                     // 314\n        } else {                                                                                                      // 315\n          throw refreshErr;                                                                                           // 316\n        }                                                                                                             // 317\n      }                                                                                                               // 318\n    }                                                                                                                 // 319\n    write.committed();                                                                                                // 320\n    if (callback)                                                                                                     // 321\n      callback(err, result);                                                                                          // 322\n    else if (err)                                                                                                     // 323\n      throw err;                                                                                                      // 324\n  };                                                                                                                  // 325\n};                                                                                                                    // 326\n                                                                                                                      // 327\nvar bindEnvironmentForWrite = function (callback) {                                                                   // 328\n  return Meteor.bindEnvironment(callback, \"Mongo write\");                                                             // 329\n};                                                                                                                    // 330\n                                                                                                                      // 331\nMongoConnection.prototype._insert = function (collection_name, document,                                              // 332\n                                              callback) {                                                             // 333\n  var self = this;                                                                                                    // 334\n                                                                                                                      // 335\n  var sendError = function (e) {                                                                                      // 336\n    if (callback)                                                                                                     // 337\n      return callback(e);                                                                                             // 338\n    throw e;                                                                                                          // 339\n  };                                                                                                                  // 340\n                                                                                                                      // 341\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                      // 342\n    var e = new Error(\"Failure test\");                                                                                // 343\n    e.expected = true;                                                                                                // 344\n    sendError(e);                                                                                                     // 345\n    return;                                                                                                           // 346\n  }                                                                                                                   // 347\n                                                                                                                      // 348\n  if (!(LocalCollection._isPlainObject(document) &&                                                                   // 349\n        !EJSON._isCustomType(document))) {                                                                            // 350\n    sendError(new Error(                                                                                              // 351\n      \"Only plain objects may be inserted into MongoDB\"));                                                            // 352\n    return;                                                                                                           // 353\n  }                                                                                                                   // 354\n                                                                                                                      // 355\n  var write = self._maybeBeginWrite();                                                                                // 356\n  var refresh = function () {                                                                                         // 357\n    Meteor.refresh({collection: collection_name, id: document._id });                                                 // 358\n  };                                                                                                                  // 359\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                        // 360\n  try {                                                                                                               // 361\n    var collection = self.rawCollection(collection_name);                                                             // 362\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),                                             // 363\n                      {safe: true}, callback);                                                                        // 364\n  } catch (e) {                                                                                                       // 365\n    write.committed();                                                                                                // 366\n    throw e;                                                                                                          // 367\n  }                                                                                                                   // 368\n};                                                                                                                    // 369\n                                                                                                                      // 370\n// Cause queries that may be affected by the selector to poll in this write                                           // 371\n// fence.                                                                                                             // 372\nMongoConnection.prototype._refresh = function (collectionName, selector) {                                            // 373\n  var self = this;                                                                                                    // 374\n  var refreshKey = {collection: collectionName};                                                                      // 375\n  // If we know which documents we're removing, don't poll queries that are                                           // 376\n  // specific to other documents. (Note that multiple notifications here should                                       // 377\n  // not cause multiple polls, since all our listener is doing is enqueueing a                                        // 378\n  // poll.)                                                                                                           // 379\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                                  // 380\n  if (specificIds) {                                                                                                  // 381\n    _.each(specificIds, function (id) {                                                                               // 382\n      Meteor.refresh(_.extend({id: id}, refreshKey));                                                                 // 383\n    });                                                                                                               // 384\n  } else {                                                                                                            // 385\n    Meteor.refresh(refreshKey);                                                                                       // 386\n  }                                                                                                                   // 387\n};                                                                                                                    // 388\n                                                                                                                      // 389\nMongoConnection.prototype._remove = function (collection_name, selector,                                              // 390\n                                              callback) {                                                             // 391\n  var self = this;                                                                                                    // 392\n                                                                                                                      // 393\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                      // 394\n    var e = new Error(\"Failure test\");                                                                                // 395\n    e.expected = true;                                                                                                // 396\n    if (callback)                                                                                                     // 397\n      return callback(e);                                                                                             // 398\n    else                                                                                                              // 399\n      throw e;                                                                                                        // 400\n  }                                                                                                                   // 401\n                                                                                                                      // 402\n  var write = self._maybeBeginWrite();                                                                                // 403\n  var refresh = function () {                                                                                         // 404\n    self._refresh(collection_name, selector);                                                                         // 405\n  };                                                                                                                  // 406\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                        // 407\n                                                                                                                      // 408\n  try {                                                                                                               // 409\n    var collection = self.rawCollection(collection_name);                                                             // 410\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),                                             // 411\n                      {safe: true}, callback);                                                                        // 412\n  } catch (e) {                                                                                                       // 413\n    write.committed();                                                                                                // 414\n    throw e;                                                                                                          // 415\n  }                                                                                                                   // 416\n};                                                                                                                    // 417\n                                                                                                                      // 418\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {                                           // 419\n  var self = this;                                                                                                    // 420\n                                                                                                                      // 421\n  var write = self._maybeBeginWrite();                                                                                // 422\n  var refresh = function () {                                                                                         // 423\n    Meteor.refresh({collection: collectionName, id: null,                                                             // 424\n                    dropCollection: true});                                                                           // 425\n  };                                                                                                                  // 426\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                    // 427\n                                                                                                                      // 428\n  try {                                                                                                               // 429\n    var collection = self.rawCollection(collectionName);                                                              // 430\n    collection.drop(cb);                                                                                              // 431\n  } catch (e) {                                                                                                       // 432\n    write.committed();                                                                                                // 433\n    throw e;                                                                                                          // 434\n  }                                                                                                                   // 435\n};                                                                                                                    // 436\n                                                                                                                      // 437\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`                                           // 438\n// because it lets the test's fence wait for it to be complete.                                                       // 439\nMongoConnection.prototype._dropDatabase = function (cb) {                                                             // 440\n  var self = this;                                                                                                    // 441\n                                                                                                                      // 442\n  var write = self._maybeBeginWrite();                                                                                // 443\n  var refresh = function () {                                                                                         // 444\n    Meteor.refresh({ dropDatabase: true });                                                                           // 445\n  };                                                                                                                  // 446\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                    // 447\n                                                                                                                      // 448\n  try {                                                                                                               // 449\n    self.db.dropDatabase(cb);                                                                                         // 450\n  } catch (e) {                                                                                                       // 451\n    write.committed();                                                                                                // 452\n    throw e;                                                                                                          // 453\n  }                                                                                                                   // 454\n};                                                                                                                    // 455\n                                                                                                                      // 456\nMongoConnection.prototype._update = function (collection_name, selector, mod,                                         // 457\n                                              options, callback) {                                                    // 458\n  var self = this;                                                                                                    // 459\n                                                                                                                      // 460\n  if (! callback && options instanceof Function) {                                                                    // 461\n    callback = options;                                                                                               // 462\n    options = null;                                                                                                   // 463\n  }                                                                                                                   // 464\n                                                                                                                      // 465\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                      // 466\n    var e = new Error(\"Failure test\");                                                                                // 467\n    e.expected = true;                                                                                                // 468\n    if (callback)                                                                                                     // 469\n      return callback(e);                                                                                             // 470\n    else                                                                                                              // 471\n      throw e;                                                                                                        // 472\n  }                                                                                                                   // 473\n                                                                                                                      // 474\n  // explicit safety check. null and undefined can crash the mongo                                                    // 475\n  // driver. Although the node driver and minimongo do 'support'                                                      // 476\n  // non-object modifier in that they don't crash, they are not                                                       // 477\n  // meaningful operations and do not do anything. Defensively throw an                                               // 478\n  // error here.                                                                                                      // 479\n  if (!mod || typeof mod !== 'object')                                                                                // 480\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");                                                 // 481\n                                                                                                                      // 482\n  if (!(LocalCollection._isPlainObject(mod) &&                                                                        // 483\n        !EJSON._isCustomType(mod))) {                                                                                 // 484\n    throw new Error(                                                                                                  // 485\n      \"Only plain objects may be used as replacement\" +                                                               // 486\n        \" documents in MongoDB\");                                                                                     // 487\n    return;                                                                                                           // 488\n  }                                                                                                                   // 489\n                                                                                                                      // 490\n  if (!options) options = {};                                                                                         // 491\n                                                                                                                      // 492\n  var write = self._maybeBeginWrite();                                                                                // 493\n  var refresh = function () {                                                                                         // 494\n    self._refresh(collection_name, selector);                                                                         // 495\n  };                                                                                                                  // 496\n  callback = writeCallback(write, refresh, callback);                                                                 // 497\n  try {                                                                                                               // 498\n    var collection = self.rawCollection(collection_name);                                                             // 499\n    var mongoOpts = {safe: true};                                                                                     // 500\n    // explictly enumerate options that minimongo supports                                                            // 501\n    if (options.upsert) mongoOpts.upsert = true;                                                                      // 502\n    if (options.multi) mongoOpts.multi = true;                                                                        // 503\n    // Lets you get a more more full result from MongoDB. Use with caution:                                           // 504\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or                                         // 505\n    // with simulated upsert.                                                                                         // 506\n    if (options.fullResult) mongoOpts.fullResult = true;                                                              // 507\n                                                                                                                      // 508\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);                                           // 509\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);                                                     // 510\n                                                                                                                      // 511\n    var isModify = isModificationMod(mongoMod);                                                                       // 512\n    var knownId = selector._id || mod._id;                                                                            // 513\n                                                                                                                      // 514\n    if (options._forbidReplace && ! isModify) {                                                                       // 515\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");                                             // 516\n      if (callback) {                                                                                                 // 517\n        return callback(e);                                                                                           // 518\n      } else {                                                                                                        // 519\n        throw e;                                                                                                      // 520\n      }                                                                                                               // 521\n    }                                                                                                                 // 522\n                                                                                                                      // 523\n    if (options.upsert && (! knownId) && options.insertedId) {                                                        // 524\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)                                          // 525\n      //     we should be able to just use $setOnInsert instead of this                                               // 526\n      //     simulated upsert thing. (We can't use $setOnInsert with                                                  // 527\n      //     replacements because there's nowhere to write it, and $setOnInsert                                       // 528\n      //     can't set _id on Mongo 2.4.)                                                                             // 529\n      //                                                                                                              // 530\n      //     Also, in the future we could do a real upsert for the mongo id                                           // 531\n      //     generation case, if the the node mongo driver gives us back the id                                       // 532\n      //     of the upserted doc (which our current version does not).                                                // 533\n      //                                                                                                              // 534\n      //     For more context, see                                                                                    // 535\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706                                       // 536\n      simulateUpsertWithInsertedId(                                                                                   // 537\n        collection, mongoSelector, mongoMod,                                                                          // 538\n        isModify, options,                                                                                            // 539\n        // This callback does not need to be bindEnvironment'ed because                                               // 540\n        // simulateUpsertWithInsertedId() wraps it and then passes it through                                         // 541\n        // bindEnvironmentForWrite.                                                                                   // 542\n        function (err, result) {                                                                                      // 543\n          // If we got here via a upsert() call, then options._returnObject will                                      // 544\n          // be set and we should return the whole object. Otherwise, we should                                       // 545\n          // just return the number of affected docs to match the mongo API.                                          // 546\n          if (result && ! options._returnObject)                                                                      // 547\n            callback(err, result.numberAffected);                                                                     // 548\n          else                                                                                                        // 549\n            callback(err, result);                                                                                    // 550\n        }                                                                                                             // 551\n      );                                                                                                              // 552\n    } else {                                                                                                          // 553\n      collection.update(                                                                                              // 554\n        mongoSelector, mongoMod, mongoOpts,                                                                           // 555\n        bindEnvironmentForWrite(function (err, result, extra) {                                                       // 556\n          if (! err) {                                                                                                // 557\n            if (result && options._returnObject) {                                                                    // 558\n              result = { numberAffected: result };                                                                    // 559\n              // If this was an upsert() call, and we ended up                                                        // 560\n              // inserting a new doc and we know its id, then                                                         // 561\n              // return that id as well.                                                                              // 562\n              if (options.upsert && knownId &&                                                                        // 563\n                  ! extra.updatedExisting)                                                                            // 564\n                result.insertedId = knownId;                                                                          // 565\n            }                                                                                                         // 566\n          }                                                                                                           // 567\n          callback(err, result);                                                                                      // 568\n        }));                                                                                                          // 569\n    }                                                                                                                 // 570\n  } catch (e) {                                                                                                       // 571\n    write.committed();                                                                                                // 572\n    throw e;                                                                                                          // 573\n  }                                                                                                                   // 574\n};                                                                                                                    // 575\n                                                                                                                      // 576\nvar isModificationMod = function (mod) {                                                                              // 577\n  var isReplace = false;                                                                                              // 578\n  var isModify = false;                                                                                               // 579\n  for (var k in mod) {                                                                                                // 580\n    if (k.substr(0, 1) === '$') {                                                                                     // 581\n      isModify = true;                                                                                                // 582\n    } else {                                                                                                          // 583\n      isReplace = true;                                                                                               // 584\n    }                                                                                                                 // 585\n  }                                                                                                                   // 586\n  if (isModify && isReplace) {                                                                                        // 587\n    throw new Error(                                                                                                  // 588\n      \"Update parameter cannot have both modifier and non-modifier fields.\");                                         // 589\n  }                                                                                                                   // 590\n  return isModify;                                                                                                    // 591\n};                                                                                                                    // 592\n                                                                                                                      // 593\nvar NUM_OPTIMISTIC_TRIES = 3;                                                                                         // 594\n                                                                                                                      // 595\n// exposed for testing                                                                                                // 596\nMongoConnection._isCannotChangeIdError = function (err) {                                                             // 597\n  // First check for what this error looked like in Mongo 2.4.  Either of these                                       // 598\n  // checks should work, but just to be safe...                                                                       // 599\n  if (err.code === 13596)                                                                                             // 600\n    return true;                                                                                                      // 601\n  if (err.err.indexOf(\"cannot change _id of a document\") === 0)                                                       // 602\n    return true;                                                                                                      // 603\n                                                                                                                      // 604\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code                                       // 605\n  // here, because the error code we observed it producing (16837) appears to be                                      // 606\n  // a far more generic error code based on examining the source.                                                     // 607\n  if (err.err.indexOf(\"The _id field cannot be changed\") === 0)                                                       // 608\n    return true;                                                                                                      // 609\n                                                                                                                      // 610\n  return false;                                                                                                       // 611\n};                                                                                                                    // 612\n                                                                                                                      // 613\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,                                               // 614\n                                             isModify, options, callback) {                                           // 615\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,                                          // 616\n  // then without affecting the database, we know we should probably do an                                            // 617\n  // insert.  We then do a *conditional* insert that will fail in the case                                            // 618\n  // of a race condition.  This conditional insert is actually an                                                     // 619\n  // upsert-replace with an _id, which will never successfully update an                                              // 620\n  // existing document.  If this upsert fails with an error saying it                                                 // 621\n  // couldn't change an existing _id, then we know an intervening write has                                           // 622\n  // caused the query to match something.  We go back to step one and repeat.                                         // 623\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's                                               // 624\n  // unlikely our writes will continue to be interfered with under normal                                             // 625\n  // circumstances (though sufficiently heavy contention with writers                                                 // 626\n  // disagreeing on the existence of an object will cause writes to fail                                              // 627\n  // in theory).                                                                                                      // 628\n                                                                                                                      // 629\n  var newDoc;                                                                                                         // 630\n  // Run this code up front so that it fails fast if someone uses                                                     // 631\n  // a Mongo update operator we don't support.                                                                        // 632\n  if (isModify) {                                                                                                     // 633\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on                                                   // 634\n    // selector and mod.  We assume it doesn't matter, as far as                                                      // 635\n    // the behavior of modifiers is concerned, whether `_modify`                                                      // 636\n    // is run on EJSON or on mongo-converted EJSON.                                                                   // 637\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);                                               // 638\n                                                                                                                      // 639\n    newDoc = selectorDoc;                                                                                             // 640\n                                                                                                                      // 641\n    // Convert dotted keys into objects. (Resolves issue #4522).                                                      // 642\n    _.each(newDoc, function (value, key) {                                                                            // 643\n      var trail = key.split(\".\");                                                                                     // 644\n                                                                                                                      // 645\n      if (trail.length > 1) {                                                                                         // 646\n        //Key is dotted. Convert it into an object.                                                                   // 647\n        delete newDoc[key];                                                                                           // 648\n                                                                                                                      // 649\n        var obj = newDoc,                                                                                             // 650\n            leaf = trail.pop();                                                                                       // 651\n                                                                                                                      // 652\n        // XXX It is not quite certain what should be done if there are clashing                                      // 653\n        // keys on the trail of the dotted key. For now we will just override it                                      // 654\n        // It wouldn't be a very sane query in the first place, but should look                                       // 655\n        // up what mongo does in this case.                                                                           // 656\n                                                                                                                      // 657\n        while ((key = trail.shift())) {                                                                               // 658\n          if (typeof obj[key] !== \"object\") {                                                                         // 659\n            obj[key] = {};                                                                                            // 660\n          }                                                                                                           // 661\n                                                                                                                      // 662\n          obj = obj[key];                                                                                             // 663\n        }                                                                                                             // 664\n                                                                                                                      // 665\n        obj[leaf] = value;                                                                                            // 666\n      }                                                                                                               // 667\n    });                                                                                                               // 668\n                                                                                                                      // 669\n    LocalCollection._modify(newDoc, mod, {isInsert: true});                                                           // 670\n  } else {                                                                                                            // 671\n    newDoc = mod;                                                                                                     // 672\n  }                                                                                                                   // 673\n                                                                                                                      // 674\n  var insertedId = options.insertedId; // must exist                                                                  // 675\n  var mongoOptsForUpdate = {                                                                                          // 676\n    safe: true,                                                                                                       // 677\n    multi: options.multi                                                                                              // 678\n  };                                                                                                                  // 679\n  var mongoOptsForInsert = {                                                                                          // 680\n    safe: true,                                                                                                       // 681\n    upsert: true                                                                                                      // 682\n  };                                                                                                                  // 683\n                                                                                                                      // 684\n  var tries = NUM_OPTIMISTIC_TRIES;                                                                                   // 685\n                                                                                                                      // 686\n  var doUpdate = function () {                                                                                        // 687\n    tries--;                                                                                                          // 688\n    if (! tries) {                                                                                                    // 689\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));                                 // 690\n    } else {                                                                                                          // 691\n      collection.update(selector, mod, mongoOptsForUpdate,                                                            // 692\n                        bindEnvironmentForWrite(function (err, result) {                                              // 693\n                          if (err)                                                                                    // 694\n                            callback(err);                                                                            // 695\n                          else if (result)                                                                            // 696\n                            callback(null, {                                                                          // 697\n                              numberAffected: result                                                                  // 698\n                            });                                                                                       // 699\n                          else                                                                                        // 700\n                            doConditionalInsert();                                                                    // 701\n                        }));                                                                                          // 702\n    }                                                                                                                 // 703\n  };                                                                                                                  // 704\n                                                                                                                      // 705\n  var doConditionalInsert = function () {                                                                             // 706\n    var replacementWithId = _.extend(                                                                                 // 707\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),                                                    // 708\n      newDoc);                                                                                                        // 709\n    collection.update(selector, replacementWithId, mongoOptsForInsert,                                                // 710\n                      bindEnvironmentForWrite(function (err, result) {                                                // 711\n                        if (err) {                                                                                    // 712\n                          // figure out if this is a                                                                  // 713\n                          // \"cannot change _id of document\" error, and                                               // 714\n                          // if so, try doUpdate() again, up to 3 times.                                              // 715\n                          if (MongoConnection._isCannotChangeIdError(err)) {                                          // 716\n                            doUpdate();                                                                               // 717\n                          } else {                                                                                    // 718\n                            callback(err);                                                                            // 719\n                          }                                                                                           // 720\n                        } else {                                                                                      // 721\n                          callback(null, {                                                                            // 722\n                            numberAffected: result,                                                                   // 723\n                            insertedId: insertedId                                                                    // 724\n                          });                                                                                         // 725\n                        }                                                                                             // 726\n                      }));                                                                                            // 727\n  };                                                                                                                  // 728\n                                                                                                                      // 729\n  doUpdate();                                                                                                         // 730\n};                                                                                                                    // 731\n                                                                                                                      // 732\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {                          // 733\n  MongoConnection.prototype[method] = function (/* arguments */) {                                                    // 734\n    var self = this;                                                                                                  // 735\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);                                               // 736\n  };                                                                                                                  // 737\n});                                                                                                                   // 738\n                                                                                                                      // 739\n// XXX MongoConnection.upsert() does not return the id of the inserted document                                       // 740\n// unless you set it explicitly in the selector or modifier (as a replacement                                         // 741\n// doc).                                                                                                              // 742\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,                                           // 743\n                                             options, callback) {                                                     // 744\n  var self = this;                                                                                                    // 745\n  if (typeof options === \"function\" && ! callback) {                                                                  // 746\n    callback = options;                                                                                               // 747\n    options = {};                                                                                                     // 748\n  }                                                                                                                   // 749\n                                                                                                                      // 750\n  return self.update(collectionName, selector, mod,                                                                   // 751\n                     _.extend({}, options, {                                                                          // 752\n                       upsert: true,                                                                                  // 753\n                       _returnObject: true                                                                            // 754\n                     }), callback);                                                                                   // 755\n};                                                                                                                    // 756\n                                                                                                                      // 757\nMongoConnection.prototype.find = function (collectionName, selector, options) {                                       // 758\n  var self = this;                                                                                                    // 759\n                                                                                                                      // 760\n  if (arguments.length === 1)                                                                                         // 761\n    selector = {};                                                                                                    // 762\n                                                                                                                      // 763\n  return new Cursor(                                                                                                  // 764\n    self, new CursorDescription(collectionName, selector, options));                                                  // 765\n};                                                                                                                    // 766\n                                                                                                                      // 767\nMongoConnection.prototype.findOne = function (collection_name, selector,                                              // 768\n                                              options) {                                                              // 769\n  var self = this;                                                                                                    // 770\n  if (arguments.length === 1)                                                                                         // 771\n    selector = {};                                                                                                    // 772\n                                                                                                                      // 773\n  options = options || {};                                                                                            // 774\n  options.limit = 1;                                                                                                  // 775\n  return self.find(collection_name, selector, options).fetch()[0];                                                    // 776\n};                                                                                                                    // 777\n                                                                                                                      // 778\n// We'll actually design an index API later. For now, we just pass through to                                         // 779\n// Mongo's, but make it synchronous.                                                                                  // 780\nMongoConnection.prototype._ensureIndex = function (collectionName, index,                                             // 781\n                                                   options) {                                                         // 782\n  var self = this;                                                                                                    // 783\n                                                                                                                      // 784\n  // We expect this function to be called at startup, not from within a method,                                       // 785\n  // so we don't interact with the write fence.                                                                       // 786\n  var collection = self.rawCollection(collectionName);                                                                // 787\n  var future = new Future;                                                                                            // 788\n  var indexName = collection.ensureIndex(index, options, future.resolver());                                          // 789\n  future.wait();                                                                                                      // 790\n};                                                                                                                    // 791\nMongoConnection.prototype._dropIndex = function (collectionName, index) {                                             // 792\n  var self = this;                                                                                                    // 793\n                                                                                                                      // 794\n  // This function is only used by test code, not within a method, so we don't                                        // 795\n  // interact with the write fence.                                                                                   // 796\n  var collection = self.rawCollection(collectionName);                                                                // 797\n  var future = new Future;                                                                                            // 798\n  var indexName = collection.dropIndex(index, future.resolver());                                                     // 799\n  future.wait();                                                                                                      // 800\n};                                                                                                                    // 801\n                                                                                                                      // 802\n// CURSORS                                                                                                            // 803\n                                                                                                                      // 804\n// There are several classes which relate to cursors:                                                                 // 805\n//                                                                                                                    // 806\n// CursorDescription represents the arguments used to construct a cursor:                                             // 807\n// collectionName, selector, and (find) options.  Because it is used as a key                                         // 808\n// for cursor de-dup, everything in it should either be JSON-stringifiable or                                         // 809\n// not affect observeChanges output (eg, options.transform functions are not                                          // 810\n// stringifiable but do not affect observeChanges).                                                                   // 811\n//                                                                                                                    // 812\n// SynchronousCursor is a wrapper around a MongoDB cursor                                                             // 813\n// which includes fully-synchronous versions of forEach, etc.                                                         // 814\n//                                                                                                                    // 815\n// Cursor is the cursor object returned from find(), which implements the                                             // 816\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a                                        // 817\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method                                        // 818\n// like fetch or forEach on it).                                                                                      // 819\n//                                                                                                                    // 820\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a                                       // 821\n// reference to an ObserveMultiplexer.                                                                                // 822\n//                                                                                                                    // 823\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a                                      // 824\n// single observe driver.                                                                                             // 825\n//                                                                                                                    // 826\n// There are two \"observe drivers\" which drive ObserveMultiplexers:                                                   // 827\n//   - PollingObserveDriver caches the results of a query and reruns it when                                          // 828\n//     necessary.                                                                                                     // 829\n//   - OplogObserveDriver follows the Mongo operation log to directly observe                                         // 830\n//     database changes.                                                                                              // 831\n// Both implementations follow the same simple interface: when you create them,                                       // 832\n// they start sending observeChanges callbacks (and a ready() invocation) to                                          // 833\n// their ObserveMultiplexer, and you stop them by calling their stop() method.                                        // 834\n                                                                                                                      // 835\nCursorDescription = function (collectionName, selector, options) {                                                    // 836\n  var self = this;                                                                                                    // 837\n  self.collectionName = collectionName;                                                                               // 838\n  self.selector = Mongo.Collection._rewriteSelector(selector);                                                        // 839\n  self.options = options || {};                                                                                       // 840\n};                                                                                                                    // 841\n                                                                                                                      // 842\nCursor = function (mongo, cursorDescription) {                                                                        // 843\n  var self = this;                                                                                                    // 844\n                                                                                                                      // 845\n  self._mongo = mongo;                                                                                                // 846\n  self._cursorDescription = cursorDescription;                                                                        // 847\n  self._synchronousCursor = null;                                                                                     // 848\n};                                                                                                                    // 849\n                                                                                                                      // 850\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {                                                      // 851\n  Cursor.prototype[method] = function () {                                                                            // 852\n    var self = this;                                                                                                  // 853\n                                                                                                                      // 854\n    // You can only observe a tailable cursor.                                                                        // 855\n    if (self._cursorDescription.options.tailable)                                                                     // 856\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");                                             // 857\n                                                                                                                      // 858\n    if (!self._synchronousCursor) {                                                                                   // 859\n      self._synchronousCursor = self._mongo._createSynchronousCursor(                                                 // 860\n        self._cursorDescription, {                                                                                    // 861\n          // Make sure that the \"self\" argument to forEach/map callbacks is the                                       // 862\n          // Cursor, not the SynchronousCursor.                                                                       // 863\n          selfForIteration: self,                                                                                     // 864\n          useTransform: true                                                                                          // 865\n        });                                                                                                           // 866\n    }                                                                                                                 // 867\n                                                                                                                      // 868\n    return self._synchronousCursor[method].apply(                                                                     // 869\n      self._synchronousCursor, arguments);                                                                            // 870\n  };                                                                                                                  // 871\n});                                                                                                                   // 872\n                                                                                                                      // 873\n// Since we don't actually have a \"nextObject\" interface, there's really no                                           // 874\n// reason to have a \"rewind\" interface.  All it did was make multiple calls                                           // 875\n// to fetch/map/forEach return nothing the second time.                                                               // 876\n// XXX COMPAT WITH 0.8.1                                                                                              // 877\nCursor.prototype.rewind = function () {                                                                               // 878\n};                                                                                                                    // 879\n                                                                                                                      // 880\nCursor.prototype.getTransform = function () {                                                                         // 881\n  return this._cursorDescription.options.transform;                                                                   // 882\n};                                                                                                                    // 883\n                                                                                                                      // 884\n// When you call Meteor.publish() with a function that returns a Cursor, we need                                      // 885\n// to transmute it into the equivalent subscription.  This is the function that                                       // 886\n// does that.                                                                                                         // 887\n                                                                                                                      // 888\nCursor.prototype._publishCursor = function (sub) {                                                                    // 889\n  var self = this;                                                                                                    // 890\n  var collection = self._cursorDescription.collectionName;                                                            // 891\n  return Mongo.Collection._publishCursor(self, sub, collection);                                                      // 892\n};                                                                                                                    // 893\n                                                                                                                      // 894\n// Used to guarantee that publish functions return at most one cursor per                                             // 895\n// collection. Private, because we might later have cursors that include                                              // 896\n// documents from multiple collections somehow.                                                                       // 897\nCursor.prototype._getCollectionName = function () {                                                                   // 898\n  var self = this;                                                                                                    // 899\n  return self._cursorDescription.collectionName;                                                                      // 900\n}                                                                                                                     // 901\n                                                                                                                      // 902\nCursor.prototype.observe = function (callbacks) {                                                                     // 903\n  var self = this;                                                                                                    // 904\n  return LocalCollection._observeFromObserveChanges(self, callbacks);                                                 // 905\n};                                                                                                                    // 906\n                                                                                                                      // 907\nCursor.prototype.observeChanges = function (callbacks) {                                                              // 908\n  var self = this;                                                                                                    // 909\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);                                        // 910\n  return self._mongo._observeChanges(                                                                                 // 911\n    self._cursorDescription, ordered, callbacks);                                                                     // 912\n};                                                                                                                    // 913\n                                                                                                                      // 914\nMongoConnection.prototype._createSynchronousCursor = function(                                                        // 915\n    cursorDescription, options) {                                                                                     // 916\n  var self = this;                                                                                                    // 917\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                // 918\n                                                                                                                      // 919\n  var collection = self.rawCollection(cursorDescription.collectionName);                                              // 920\n  var cursorOptions = cursorDescription.options;                                                                      // 921\n  var mongoOptions = {                                                                                                // 922\n    sort: cursorOptions.sort,                                                                                         // 923\n    limit: cursorOptions.limit,                                                                                       // 924\n    skip: cursorOptions.skip                                                                                          // 925\n  };                                                                                                                  // 926\n                                                                                                                      // 927\n  // Do we want a tailable cursor (which only works on capped collections)?                                           // 928\n  if (cursorOptions.tailable) {                                                                                       // 929\n    // We want a tailable cursor...                                                                                   // 930\n    mongoOptions.tailable = true;                                                                                     // 931\n    // ... and for the server to wait a bit if any getMore has no data (rather                                        // 932\n    // than making us put the relevant sleeps in the client)...                                                       // 933\n    mongoOptions.awaitdata = true;                                                                                    // 934\n    // ... and to keep querying the server indefinitely rather than just 5 times                                      // 935\n    // if there's no more data.                                                                                       // 936\n    mongoOptions.numberOfRetries = -1;                                                                                // 937\n    // And if this is on the oplog collection and the cursor specifies a 'ts',                                        // 938\n    // then set the undocumented oplog replay flag, which does a special scan to                                      // 939\n    // find the first document (instead of creating an index on ts). This is a                                        // 940\n    // very hard-coded Mongo flag which only works on the oplog collection and                                        // 941\n    // only works with the ts field.                                                                                  // 942\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&                                                      // 943\n        cursorDescription.selector.ts) {                                                                              // 944\n      mongoOptions.oplogReplay = true;                                                                                // 945\n    }                                                                                                                 // 946\n  }                                                                                                                   // 947\n                                                                                                                      // 948\n  var dbCursor = collection.find(                                                                                     // 949\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),                                             // 950\n    cursorOptions.fields, mongoOptions);                                                                              // 951\n                                                                                                                      // 952\n  return new SynchronousCursor(dbCursor, cursorDescription, options);                                                 // 953\n};                                                                                                                    // 954\n                                                                                                                      // 955\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {                                             // 956\n  var self = this;                                                                                                    // 957\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                // 958\n                                                                                                                      // 959\n  self._dbCursor = dbCursor;                                                                                          // 960\n  self._cursorDescription = cursorDescription;                                                                        // 961\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped                                            // 962\n  // inside a user-visible Cursor, we want to provide the outer cursor!                                               // 963\n  self._selfForIteration = options.selfForIteration || self;                                                          // 964\n  if (options.useTransform && cursorDescription.options.transform) {                                                  // 965\n    self._transform = LocalCollection.wrapTransform(                                                                  // 966\n      cursorDescription.options.transform);                                                                           // 967\n  } else {                                                                                                            // 968\n    self._transform = null;                                                                                           // 969\n  }                                                                                                                   // 970\n                                                                                                                      // 971\n  // Need to specify that the callback is the first argument to nextObject,                                           // 972\n  // since otherwise when we try to call it with no args the driver will                                              // 973\n  // interpret \"undefined\" first arg as an options hash and crash.                                                    // 974\n  self._synchronousNextObject = Future.wrap(                                                                          // 975\n    dbCursor.nextObject.bind(dbCursor), 0);                                                                           // 976\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));                                                // 977\n  self._visitedIds = new LocalCollection._IdMap;                                                                      // 978\n};                                                                                                                    // 979\n                                                                                                                      // 980\n_.extend(SynchronousCursor.prototype, {                                                                               // 981\n  _nextObject: function () {                                                                                          // 982\n    var self = this;                                                                                                  // 983\n                                                                                                                      // 984\n    while (true) {                                                                                                    // 985\n      var doc = self._synchronousNextObject().wait();                                                                 // 986\n                                                                                                                      // 987\n      if (!doc) return null;                                                                                          // 988\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);                                                            // 989\n                                                                                                                      // 990\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {                                           // 991\n        // Did Mongo give us duplicate documents in the same cursor? If so,                                           // 992\n        // ignore this one. (Do this before the transform, since transform might                                      // 993\n        // return some unrelated value.) We don't do this for tailable cursors,                                       // 994\n        // because we want to maintain O(1) memory usage. And if there isn't _id                                      // 995\n        // for some reason (maybe it's the oplog), then we don't do this either.                                      // 996\n        // (Be careful to do this for falsey but existing _id, though.)                                               // 997\n        if (self._visitedIds.has(doc._id)) continue;                                                                  // 998\n        self._visitedIds.set(doc._id, true);                                                                          // 999\n      }                                                                                                               // 1000\n                                                                                                                      // 1001\n      if (self._transform)                                                                                            // 1002\n        doc = self._transform(doc);                                                                                   // 1003\n                                                                                                                      // 1004\n      return doc;                                                                                                     // 1005\n    }                                                                                                                 // 1006\n  },                                                                                                                  // 1007\n                                                                                                                      // 1008\n  forEach: function (callback, thisArg) {                                                                             // 1009\n    var self = this;                                                                                                  // 1010\n                                                                                                                      // 1011\n    // Get back to the beginning.                                                                                     // 1012\n    self._rewind();                                                                                                   // 1013\n                                                                                                                      // 1014\n    // We implement the loop ourself instead of using self._dbCursor.each,                                            // 1015\n    // because \"each\" will call its callback outside of a fiber which makes it                                        // 1016\n    // much more complex to make this function synchronous.                                                           // 1017\n    var index = 0;                                                                                                    // 1018\n    while (true) {                                                                                                    // 1019\n      var doc = self._nextObject();                                                                                   // 1020\n      if (!doc) return;                                                                                               // 1021\n      callback.call(thisArg, doc, index++, self._selfForIteration);                                                   // 1022\n    }                                                                                                                 // 1023\n  },                                                                                                                  // 1024\n                                                                                                                      // 1025\n  // XXX Allow overlapping callback executions if callback yields.                                                    // 1026\n  map: function (callback, thisArg) {                                                                                 // 1027\n    var self = this;                                                                                                  // 1028\n    var res = [];                                                                                                     // 1029\n    self.forEach(function (doc, index) {                                                                              // 1030\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));                                           // 1031\n    });                                                                                                               // 1032\n    return res;                                                                                                       // 1033\n  },                                                                                                                  // 1034\n                                                                                                                      // 1035\n  _rewind: function () {                                                                                              // 1036\n    var self = this;                                                                                                  // 1037\n                                                                                                                      // 1038\n    // known to be synchronous                                                                                        // 1039\n    self._dbCursor.rewind();                                                                                          // 1040\n                                                                                                                      // 1041\n    self._visitedIds = new LocalCollection._IdMap;                                                                    // 1042\n  },                                                                                                                  // 1043\n                                                                                                                      // 1044\n  // Mostly usable for tailable cursors.                                                                              // 1045\n  close: function () {                                                                                                // 1046\n    var self = this;                                                                                                  // 1047\n                                                                                                                      // 1048\n    self._dbCursor.close();                                                                                           // 1049\n  },                                                                                                                  // 1050\n                                                                                                                      // 1051\n  fetch: function () {                                                                                                // 1052\n    var self = this;                                                                                                  // 1053\n    return self.map(_.identity);                                                                                      // 1054\n  },                                                                                                                  // 1055\n                                                                                                                      // 1056\n  count: function () {                                                                                                // 1057\n    var self = this;                                                                                                  // 1058\n    return self._synchronousCount().wait();                                                                           // 1059\n  },                                                                                                                  // 1060\n                                                                                                                      // 1061\n  // This method is NOT wrapped in Cursor.                                                                            // 1062\n  getRawObjects: function (ordered) {                                                                                 // 1063\n    var self = this;                                                                                                  // 1064\n    if (ordered) {                                                                                                    // 1065\n      return self.fetch();                                                                                            // 1066\n    } else {                                                                                                          // 1067\n      var results = new LocalCollection._IdMap;                                                                       // 1068\n      self.forEach(function (doc) {                                                                                   // 1069\n        results.set(doc._id, doc);                                                                                    // 1070\n      });                                                                                                             // 1071\n      return results;                                                                                                 // 1072\n    }                                                                                                                 // 1073\n  }                                                                                                                   // 1074\n});                                                                                                                   // 1075\n                                                                                                                      // 1076\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {                                          // 1077\n  var self = this;                                                                                                    // 1078\n  if (!cursorDescription.options.tailable)                                                                            // 1079\n    throw new Error(\"Can only tail a tailable cursor\");                                                               // 1080\n                                                                                                                      // 1081\n  var cursor = self._createSynchronousCursor(cursorDescription);                                                      // 1082\n                                                                                                                      // 1083\n  var stopped = false;                                                                                                // 1084\n  var lastTS = undefined;                                                                                             // 1085\n  var loop = function () {                                                                                            // 1086\n    while (true) {                                                                                                    // 1087\n      if (stopped)                                                                                                    // 1088\n        return;                                                                                                       // 1089\n      try {                                                                                                           // 1090\n        var doc = cursor._nextObject();                                                                               // 1091\n      } catch (err) {                                                                                                 // 1092\n        // There's no good way to figure out if this was actually an error                                            // 1093\n        // from Mongo. Ah well. But either way, we need to retry the cursor                                           // 1094\n        // (unless the failure was because the observe got stopped).                                                  // 1095\n        doc = null;                                                                                                   // 1096\n      }                                                                                                               // 1097\n      // Since cursor._nextObject can yield, we need to check again to see if                                         // 1098\n      // we've been stopped before calling the callback.                                                              // 1099\n      if (stopped)                                                                                                    // 1100\n        return;                                                                                                       // 1101\n      if (doc) {                                                                                                      // 1102\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the                                         // 1103\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for                                        // 1104\n        // the oplog, and there's a special flag that lets you do binary search                                       // 1105\n        // on it instead of needing to use an index.)                                                                 // 1106\n        lastTS = doc.ts;                                                                                              // 1107\n        docCallback(doc);                                                                                             // 1108\n      } else {                                                                                                        // 1109\n        var newSelector = _.clone(cursorDescription.selector);                                                        // 1110\n        if (lastTS) {                                                                                                 // 1111\n          newSelector.ts = {$gt: lastTS};                                                                             // 1112\n        }                                                                                                             // 1113\n        cursor = self._createSynchronousCursor(new CursorDescription(                                                 // 1114\n          cursorDescription.collectionName,                                                                           // 1115\n          newSelector,                                                                                                // 1116\n          cursorDescription.options));                                                                                // 1117\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this                                         // 1118\n        // setTimeout, we peg the CPU at 100% and never notice the actual                                             // 1119\n        // failover.                                                                                                  // 1120\n        Meteor.setTimeout(loop, 100);                                                                                 // 1121\n        break;                                                                                                        // 1122\n      }                                                                                                               // 1123\n    }                                                                                                                 // 1124\n  };                                                                                                                  // 1125\n                                                                                                                      // 1126\n  Meteor.defer(loop);                                                                                                 // 1127\n                                                                                                                      // 1128\n  return {                                                                                                            // 1129\n    stop: function () {                                                                                               // 1130\n      stopped = true;                                                                                                 // 1131\n      cursor.close();                                                                                                 // 1132\n    }                                                                                                                 // 1133\n  };                                                                                                                  // 1134\n};                                                                                                                    // 1135\n                                                                                                                      // 1136\nMongoConnection.prototype._observeChanges = function (                                                                // 1137\n    cursorDescription, ordered, callbacks) {                                                                          // 1138\n  var self = this;                                                                                                    // 1139\n                                                                                                                      // 1140\n  if (cursorDescription.options.tailable) {                                                                           // 1141\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);                                       // 1142\n  }                                                                                                                   // 1143\n                                                                                                                      // 1144\n  // You may not filter out _id when observing changes, because the id is a core                                      // 1145\n  // part of the observeChanges API.                                                                                  // 1146\n  if (cursorDescription.options.fields &&                                                                             // 1147\n      (cursorDescription.options.fields._id === 0 ||                                                                  // 1148\n       cursorDescription.options.fields._id === false)) {                                                             // 1149\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");                                              // 1150\n  }                                                                                                                   // 1151\n                                                                                                                      // 1152\n  var observeKey = JSON.stringify(                                                                                    // 1153\n    _.extend({ordered: ordered}, cursorDescription));                                                                 // 1154\n                                                                                                                      // 1155\n  var multiplexer, observeDriver;                                                                                     // 1156\n  var firstHandle = false;                                                                                            // 1157\n                                                                                                                      // 1158\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is                                      // 1159\n  // guaranteed to not yield (and it doesn't call anything that can observe a                                         // 1160\n  // new query), so no other calls to this function can interleave with it.                                           // 1161\n  Meteor._noYieldsAllowed(function () {                                                                               // 1162\n    if (_.has(self._observeMultiplexers, observeKey)) {                                                               // 1163\n      multiplexer = self._observeMultiplexers[observeKey];                                                            // 1164\n    } else {                                                                                                          // 1165\n      firstHandle = true;                                                                                             // 1166\n      // Create a new ObserveMultiplexer.                                                                             // 1167\n      multiplexer = new ObserveMultiplexer({                                                                          // 1168\n        ordered: ordered,                                                                                             // 1169\n        onStop: function () {                                                                                         // 1170\n          delete self._observeMultiplexers[observeKey];                                                               // 1171\n          observeDriver.stop();                                                                                       // 1172\n        }                                                                                                             // 1173\n      });                                                                                                             // 1174\n      self._observeMultiplexers[observeKey] = multiplexer;                                                            // 1175\n    }                                                                                                                 // 1176\n  });                                                                                                                 // 1177\n                                                                                                                      // 1178\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);                                                      // 1179\n                                                                                                                      // 1180\n  if (firstHandle) {                                                                                                  // 1181\n    var matcher, sorter;                                                                                              // 1182\n    var canUseOplog = _.all([                                                                                         // 1183\n      function () {                                                                                                   // 1184\n        // At a bare minimum, using the oplog requires us to have an oplog, to                                        // 1185\n        // want unordered callbacks, and to not want a callback on the polls                                          // 1186\n        // that won't happen.                                                                                         // 1187\n        return self._oplogHandle && !ordered &&                                                                       // 1188\n          !callbacks._testOnlyPollCallback;                                                                           // 1189\n      }, function () {                                                                                                // 1190\n        // We need to be able to compile the selector. Fall back to polling for                                       // 1191\n        // some newfangled $selector that minimongo doesn't support yet.                                              // 1192\n        try {                                                                                                         // 1193\n          matcher = new Minimongo.Matcher(cursorDescription.selector);                                                // 1194\n          return true;                                                                                                // 1195\n        } catch (e) {                                                                                                 // 1196\n          // XXX make all compilation errors MinimongoError or something                                              // 1197\n          //     so that this doesn't ignore unrelated exceptions                                                     // 1198\n          return false;                                                                                               // 1199\n        }                                                                                                             // 1200\n      }, function () {                                                                                                // 1201\n        // ... and the selector itself needs to support oplog.                                                        // 1202\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);                                        // 1203\n      }, function () {                                                                                                // 1204\n        // And we need to be able to compile the sort, if any.  eg, can't be                                          // 1205\n        // {$natural: 1}.                                                                                             // 1206\n        if (!cursorDescription.options.sort)                                                                          // 1207\n          return true;                                                                                                // 1208\n        try {                                                                                                         // 1209\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,                                               // 1210\n                                        { matcher: matcher });                                                        // 1211\n          return true;                                                                                                // 1212\n        } catch (e) {                                                                                                 // 1213\n          // XXX make all compilation errors MinimongoError or something                                              // 1214\n          //     so that this doesn't ignore unrelated exceptions                                                     // 1215\n          return false;                                                                                               // 1216\n        }                                                                                                             // 1217\n      }], function (f) { return f(); });  // invoke each function                                                     // 1218\n                                                                                                                      // 1219\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;                                        // 1220\n    observeDriver = new driverClass({                                                                                 // 1221\n      cursorDescription: cursorDescription,                                                                           // 1222\n      mongoHandle: self,                                                                                              // 1223\n      multiplexer: multiplexer,                                                                                       // 1224\n      ordered: ordered,                                                                                               // 1225\n      matcher: matcher,  // ignored by polling                                                                        // 1226\n      sorter: sorter,  // ignored by polling                                                                          // 1227\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback                                                          // 1228\n    });                                                                                                               // 1229\n                                                                                                                      // 1230\n    // This field is only set for use in tests.                                                                       // 1231\n    multiplexer._observeDriver = observeDriver;                                                                       // 1232\n  }                                                                                                                   // 1233\n                                                                                                                      // 1234\n  // Blocks until the initial adds have been sent.                                                                    // 1235\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);                                                             // 1236\n                                                                                                                      // 1237\n  return observeHandle;                                                                                               // 1238\n};                                                                                                                    // 1239\n                                                                                                                      // 1240\n// Listen for the invalidation messages that will trigger us to poll the                                              // 1241\n// database for changes. If this selector specifies specific IDs, specify them                                        // 1242\n// here, so that updates to different specific IDs don't cause us to poll.                                            // 1243\n// listenCallback is the same kind of (notification, complete) callback passed                                        // 1244\n// to InvalidationCrossbar.listen.                                                                                    // 1245\n                                                                                                                      // 1246\nlistenAll = function (cursorDescription, listenCallback) {                                                            // 1247\n  var listeners = [];                                                                                                 // 1248\n  forEachTrigger(cursorDescription, function (trigger) {                                                              // 1249\n    listeners.push(DDPServer._InvalidationCrossbar.listen(                                                            // 1250\n      trigger, listenCallback));                                                                                      // 1251\n  });                                                                                                                 // 1252\n                                                                                                                      // 1253\n  return {                                                                                                            // 1254\n    stop: function () {                                                                                               // 1255\n      _.each(listeners, function (listener) {                                                                         // 1256\n        listener.stop();                                                                                              // 1257\n      });                                                                                                             // 1258\n    }                                                                                                                 // 1259\n  };                                                                                                                  // 1260\n};                                                                                                                    // 1261\n                                                                                                                      // 1262\nforEachTrigger = function (cursorDescription, triggerCallback) {                                                      // 1263\n  var key = {collection: cursorDescription.collectionName};                                                           // 1264\n  var specificIds = LocalCollection._idsMatchedBySelector(                                                            // 1265\n    cursorDescription.selector);                                                                                      // 1266\n  if (specificIds) {                                                                                                  // 1267\n    _.each(specificIds, function (id) {                                                                               // 1268\n      triggerCallback(_.extend({id: id}, key));                                                                       // 1269\n    });                                                                                                               // 1270\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));                                                 // 1271\n  } else {                                                                                                            // 1272\n    triggerCallback(key);                                                                                             // 1273\n  }                                                                                                                   // 1274\n  // Everyone cares about the database being dropped.                                                                 // 1275\n  triggerCallback({ dropDatabase: true });                                                                            // 1276\n};                                                                                                                    // 1277\n                                                                                                                      // 1278\n// observeChanges for tailable cursors on capped collections.                                                         // 1279\n//                                                                                                                    // 1280\n// Some differences from normal cursors:                                                                              // 1281\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you                                        // 1282\n//     do update a document that has already been produced, this will not notice                                      // 1283\n//     it.                                                                                                            // 1284\n//   - If you disconnect and reconnect from Mongo, it will essentially restart                                        // 1285\n//     the query, which will lead to duplicate results. This is pretty bad,                                           // 1286\n//     but if you include a field called 'ts' which is inserted as                                                    // 1287\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the                                           // 1288\n//     current Mongo-style timestamp), we'll be able to find the place to                                             // 1289\n//     restart properly. (This field is specifically understood by Mongo with an                                      // 1290\n//     optimization which allows it to find the right place to start without                                          // 1291\n//     an index on ts. It's how the oplog works.)                                                                     // 1292\n//   - No callbacks are triggered synchronously with the call (there's no                                             // 1293\n//     differentiation between \"initial data\" and \"later changes\"; everything                                         // 1294\n//     that matches the query gets sent asynchronously).                                                              // 1295\n//   - De-duplication is not implemented.                                                                             // 1296\n//   - Does not yet interact with the write fence. Probably, this should work by                                      // 1297\n//     ignoring removes (which don't work on capped collections) and updates                                          // 1298\n//     (which don't affect tailable cursors), and just keeping track of the ID                                        // 1299\n//     of the inserted object, and closing the write fence once you get to that                                       // 1300\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match                                      // 1301\n//     the query, though.  On the other hand, the write fence can close                                               // 1302\n//     immediately if it does not match the query. So if we trust minimongo                                           // 1303\n//     enough to accurately evaluate the query against the write fence, we                                            // 1304\n//     should be able to do this...  Of course, minimongo doesn't even support                                        // 1305\n//     Mongo Timestamps yet.                                                                                          // 1306\nMongoConnection.prototype._observeChangesTailable = function (                                                        // 1307\n    cursorDescription, ordered, callbacks) {                                                                          // 1308\n  var self = this;                                                                                                    // 1309\n                                                                                                                      // 1310\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an                                          // 1311\n  // error if you didn't provide them.                                                                                // 1312\n  if ((ordered && !callbacks.addedBefore) ||                                                                          // 1313\n      (!ordered && !callbacks.added)) {                                                                               // 1314\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")                                         // 1315\n                    + \" tailable cursor without a \"                                                                   // 1316\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");                                             // 1317\n  }                                                                                                                   // 1318\n                                                                                                                      // 1319\n  return self.tail(cursorDescription, function (doc) {                                                                // 1320\n    var id = doc._id;                                                                                                 // 1321\n    delete doc._id;                                                                                                   // 1322\n    // The ts is an implementation detail. Hide it.                                                                   // 1323\n    delete doc.ts;                                                                                                    // 1324\n    if (ordered) {                                                                                                    // 1325\n      callbacks.addedBefore(id, doc, null);                                                                           // 1326\n    } else {                                                                                                          // 1327\n      callbacks.added(id, doc);                                                                                       // 1328\n    }                                                                                                                 // 1329\n  });                                                                                                                 // 1330\n};                                                                                                                    // 1331\n                                                                                                                      // 1332\n// XXX We probably need to find a better way to expose this. Right now                                                // 1333\n// it's only used by tests, but in fact you need it in normal                                                         // 1334\n// operation to interact with capped collections.                                                                     // 1335\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;                                                                    // 1336\n                                                                                                                      // 1337\nMongoInternals.Connection = MongoConnection;                                                                          // 1338\n                                                                                                                      // 1339\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/oplog_tailing.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Future = Npm.require('fibers/future');                                                                            // 1\n                                                                                                                      // 2\nOPLOG_COLLECTION = 'oplog.rs';                                                                                        // 3\n                                                                                                                      // 4\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;                                                 // 5\n                                                                                                                      // 6\nvar showTS = function (ts) {                                                                                          // 7\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";                                              // 8\n};                                                                                                                    // 9\n                                                                                                                      // 10\nidForOp = function (op) {                                                                                             // 11\n  if (op.op === 'd')                                                                                                  // 12\n    return op.o._id;                                                                                                  // 13\n  else if (op.op === 'i')                                                                                             // 14\n    return op.o._id;                                                                                                  // 15\n  else if (op.op === 'u')                                                                                             // 16\n    return op.o2._id;                                                                                                 // 17\n  else if (op.op === 'c')                                                                                             // 18\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +                                                   // 19\n                EJSON.stringify(op));                                                                                 // 20\n  else                                                                                                                // 21\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));                                                                // 22\n};                                                                                                                    // 23\n                                                                                                                      // 24\nOplogHandle = function (oplogUrl, dbName) {                                                                           // 25\n  var self = this;                                                                                                    // 26\n  self._oplogUrl = oplogUrl;                                                                                          // 27\n  self._dbName = dbName;                                                                                              // 28\n                                                                                                                      // 29\n  self._oplogLastEntryConnection = null;                                                                              // 30\n  self._oplogTailConnection = null;                                                                                   // 31\n  self._stopped = false;                                                                                              // 32\n  self._tailHandle = null;                                                                                            // 33\n  self._readyFuture = new Future();                                                                                   // 34\n  self._crossbar = new DDPServer._Crossbar({                                                                          // 35\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"                                                         // 36\n  });                                                                                                                 // 37\n  self._baseOplogSelector = {                                                                                         // 38\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),                                                 // 39\n    $or: [                                                                                                            // 40\n      { op: {$in: ['i', 'u', 'd']} },                                                                                 // 41\n      // drop collection                                                                                              // 42\n      { op: 'c', 'o.drop': { $exists: true } },                                                                       // 43\n      { op: 'c', 'o.dropDatabase': 1 },                                                                               // 44\n    ]                                                                                                                 // 45\n  };                                                                                                                  // 46\n                                                                                                                      // 47\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a                                           // 48\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a                                          // 49\n  // combination of time and an incrementing counter; see                                                             // 50\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).                                                // 51\n  //                                                                                                                  // 52\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}                                           // 53\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the                                                  // 54\n  // MongoTimestamp of the last oplog entry we've processed.                                                          // 55\n  //                                                                                                                  // 56\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog                                           // 57\n  // entry in the db.  If we've already processed it (ie, it is not greater than                                      // 58\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,                                             // 59\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final                                         // 60\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp                                         // 61\n  // then waits on that future, which is resolved once _lastProcessedTS is                                            // 62\n  // incremented to be past its timestamp by the worker fiber.                                                        // 63\n  //                                                                                                                  // 64\n  // XXX use a priority queue or something else that's faster than an array                                           // 65\n  self._catchingUpFutures = [];                                                                                       // 66\n  self._lastProcessedTS = null;                                                                                       // 67\n                                                                                                                      // 68\n  self._onSkippedEntriesHook = new Hook({                                                                             // 69\n    debugPrintExceptions: \"onSkippedEntries callback\"                                                                 // 70\n  });                                                                                                                 // 71\n                                                                                                                      // 72\n  self._entryQueue = new Meteor._DoubleEndedQueue();                                                                  // 73\n  self._workerActive = false;                                                                                         // 74\n                                                                                                                      // 75\n  self._startTailing();                                                                                               // 76\n};                                                                                                                    // 77\n                                                                                                                      // 78\n_.extend(OplogHandle.prototype, {                                                                                     // 79\n  stop: function () {                                                                                                 // 80\n    var self = this;                                                                                                  // 81\n    if (self._stopped)                                                                                                // 82\n      return;                                                                                                         // 83\n    self._stopped = true;                                                                                             // 84\n    if (self._tailHandle)                                                                                             // 85\n      self._tailHandle.stop();                                                                                        // 86\n    // XXX should close connections too                                                                               // 87\n  },                                                                                                                  // 88\n  onOplogEntry: function (trigger, callback) {                                                                        // 89\n    var self = this;                                                                                                  // 90\n    if (self._stopped)                                                                                                // 91\n      throw new Error(\"Called onOplogEntry on stopped handle!\");                                                      // 92\n                                                                                                                      // 93\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.                                          // 94\n    self._readyFuture.wait();                                                                                         // 95\n                                                                                                                      // 96\n    var originalCallback = callback;                                                                                  // 97\n    callback = Meteor.bindEnvironment(function (notification) {                                                       // 98\n      // XXX can we avoid this clone by making oplog.js careful?                                                      // 99\n      originalCallback(EJSON.clone(notification));                                                                    // 100\n    }, function (err) {                                                                                               // 101\n      Meteor._debug(\"Error in oplog callback\", err.stack);                                                            // 102\n    });                                                                                                               // 103\n    var listenHandle = self._crossbar.listen(trigger, callback);                                                      // 104\n    return {                                                                                                          // 105\n      stop: function () {                                                                                             // 106\n        listenHandle.stop();                                                                                          // 107\n      }                                                                                                               // 108\n    };                                                                                                                // 109\n  },                                                                                                                  // 110\n  // Register a callback to be invoked any time we skip oplog entries (eg,                                            // 111\n  // because we are too far behind).                                                                                  // 112\n  onSkippedEntries: function (callback) {                                                                             // 113\n    var self = this;                                                                                                  // 114\n    if (self._stopped)                                                                                                // 115\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");                                                  // 116\n    return self._onSkippedEntriesHook.register(callback);                                                             // 117\n  },                                                                                                                  // 118\n  // Calls `callback` once the oplog has been processed up to a point that is                                         // 119\n  // roughly \"now\": specifically, once we've processed all ops that are                                               // 120\n  // currently visible.                                                                                               // 121\n  // XXX become convinced that this is actually safe even if oplogConnection                                          // 122\n  // is some kind of pool                                                                                             // 123\n  waitUntilCaughtUp: function () {                                                                                    // 124\n    var self = this;                                                                                                  // 125\n    if (self._stopped)                                                                                                // 126\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");                                                 // 127\n                                                                                                                      // 128\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to                                      // 129\n    // be ready.                                                                                                      // 130\n    self._readyFuture.wait();                                                                                         // 131\n                                                                                                                      // 132\n    while (!self._stopped) {                                                                                          // 133\n      // We need to make the selector at least as restrictive as the actual                                           // 134\n      // tailing selector (ie, we need to specify the DB name) or else we might                                       // 135\n      // find a TS that won't show up in the actual tail stream.                                                      // 136\n      try {                                                                                                           // 137\n        var lastEntry = self._oplogLastEntryConnection.findOne(                                                       // 138\n          OPLOG_COLLECTION, self._baseOplogSelector,                                                                  // 139\n          {fields: {ts: 1}, sort: {$natural: -1}});                                                                   // 140\n        break;                                                                                                        // 141\n      } catch (e) {                                                                                                   // 142\n        // During failover (eg) if we get an exception we should log and retry                                        // 143\n        // instead of crashing.                                                                                       // 144\n        Meteor._debug(\"Got exception while reading last entry: \" + e);                                                // 145\n        Meteor._sleepForMs(100);                                                                                      // 146\n      }                                                                                                               // 147\n    }                                                                                                                 // 148\n                                                                                                                      // 149\n    if (self._stopped)                                                                                                // 150\n      return;                                                                                                         // 151\n                                                                                                                      // 152\n    if (!lastEntry) {                                                                                                 // 153\n      // Really, nothing in the oplog? Well, we've processed everything.                                              // 154\n      return;                                                                                                         // 155\n    }                                                                                                                 // 156\n                                                                                                                      // 157\n    var ts = lastEntry.ts;                                                                                            // 158\n    if (!ts)                                                                                                          // 159\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));                                           // 160\n                                                                                                                      // 161\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {                                         // 162\n      // We've already caught up to here.                                                                             // 163\n      return;                                                                                                         // 164\n    }                                                                                                                 // 165\n                                                                                                                      // 166\n                                                                                                                      // 167\n    // Insert the future into our list. Almost always, this will be at the end,                                       // 168\n    // but it's conceivable that if we fail over from one primary to another,                                         // 169\n    // the oplog entries we see will go backwards.                                                                    // 170\n    var insertAfter = self._catchingUpFutures.length;                                                                 // 171\n    while (insertAfter - 1 > 0                                                                                        // 172\n           && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {                                          // 173\n      insertAfter--;                                                                                                  // 174\n    }                                                                                                                 // 175\n    var f = new Future;                                                                                               // 176\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});                                              // 177\n    f.wait();                                                                                                         // 178\n  },                                                                                                                  // 179\n  _startTailing: function () {                                                                                        // 180\n    var self = this;                                                                                                  // 181\n    // First, make sure that we're talking to the local database.                                                     // 182\n    var mongodbUri = Npm.require('mongodb-uri');                                                                      // 183\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {                                                      // 184\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +                                        // 185\n                  \"a Mongo replica set\");                                                                             // 186\n    }                                                                                                                 // 187\n                                                                                                                      // 188\n    // We make two separate connections to Mongo. The Node Mongo driver                                               // 189\n    // implements a naive round-robin connection pool: each \"connection\" is a                                         // 190\n    // pool of several (5 by default) TCP connections, and each request is                                            // 191\n    // rotated through the pools. Tailable cursor queries block on the server                                         // 192\n    // until there is some data to return (or until a few seconds have                                                // 193\n    // passed). So if the connection pool used for tailing cursors is the same                                        // 194\n    // pool used for other queries, the other queries will be delayed by seconds                                      // 195\n    // 1/5 of the time.                                                                                               // 196\n    //                                                                                                                // 197\n    // The tail connection will only ever be running a single tail command, so                                        // 198\n    // it only needs to make one underlying TCP connection.                                                           // 199\n    self._oplogTailConnection = new MongoConnection(                                                                  // 200\n      self._oplogUrl, {poolSize: 1});                                                                                 // 201\n    // XXX better docs, but: it's to get monotonic results                                                            // 202\n    // XXX is it safe to say \"if there's an in flight query, just use its                                             // 203\n    //     results\"? I don't think so but should consider that                                                        // 204\n    self._oplogLastEntryConnection = new MongoConnection(                                                             // 205\n      self._oplogUrl, {poolSize: 1});                                                                                 // 206\n                                                                                                                      // 207\n    // Now, make sure that there actually is a repl set here. If not, oplog                                           // 208\n    // tailing won't ever find anything!                                                                              // 209\n    var f = new Future;                                                                                               // 210\n    self._oplogLastEntryConnection.db.admin().command(                                                                // 211\n      { ismaster: 1 }, f.resolver());                                                                                 // 212\n    var isMasterDoc = f.wait();                                                                                       // 213\n    if (!(isMasterDoc && isMasterDoc.documents && isMasterDoc.documents[0] &&                                         // 214\n          isMasterDoc.documents[0].setName)) {                                                                        // 215\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +                                        // 216\n                  \"a Mongo replica set\");                                                                             // 217\n    }                                                                                                                 // 218\n                                                                                                                      // 219\n    // Find the last oplog entry.                                                                                     // 220\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(                                                      // 221\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});                                                 // 222\n                                                                                                                      // 223\n    var oplogSelector = _.clone(self._baseOplogSelector);                                                             // 224\n    if (lastOplogEntry) {                                                                                             // 225\n      // Start after the last entry that currently exists.                                                            // 226\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};                                                                    // 227\n      // If there are any calls to callWhenProcessedLatest before any other                                           // 228\n      // oplog entries show up, allow callWhenProcessedLatest to call its                                             // 229\n      // callback immediately.                                                                                        // 230\n      self._lastProcessedTS = lastOplogEntry.ts;                                                                      // 231\n    }                                                                                                                 // 232\n                                                                                                                      // 233\n    var cursorDescription = new CursorDescription(                                                                    // 234\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});                                                             // 235\n                                                                                                                      // 236\n    self._tailHandle = self._oplogTailConnection.tail(                                                                // 237\n      cursorDescription, function (doc) {                                                                             // 238\n        self._entryQueue.push(doc);                                                                                   // 239\n        self._maybeStartWorker();                                                                                     // 240\n      }                                                                                                               // 241\n    );                                                                                                                // 242\n    self._readyFuture.return();                                                                                       // 243\n  },                                                                                                                  // 244\n                                                                                                                      // 245\n  _maybeStartWorker: function () {                                                                                    // 246\n    var self = this;                                                                                                  // 247\n    if (self._workerActive)                                                                                           // 248\n      return;                                                                                                         // 249\n    self._workerActive = true;                                                                                        // 250\n    Meteor.defer(function () {                                                                                        // 251\n      try {                                                                                                           // 252\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {                                                     // 253\n          // Are we too far behind? Just tell our observers that they need to                                         // 254\n          // repoll, and drop our queue.                                                                              // 255\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {                                                             // 256\n            var lastEntry = self._entryQueue.pop();                                                                   // 257\n            self._entryQueue.clear();                                                                                 // 258\n                                                                                                                      // 259\n            self._onSkippedEntriesHook.each(function (callback) {                                                     // 260\n              callback();                                                                                             // 261\n              return true;                                                                                            // 262\n            });                                                                                                       // 263\n                                                                                                                      // 264\n            // Free any waitUntilCaughtUp() calls that were waiting for us to                                         // 265\n            // pass something that we just skipped.                                                                   // 266\n            self._setLastProcessedTS(lastEntry.ts);                                                                   // 267\n            continue;                                                                                                 // 268\n          }                                                                                                           // 269\n                                                                                                                      // 270\n          var doc = self._entryQueue.shift();                                                                         // 271\n                                                                                                                      // 272\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&                                                  // 273\n                doc.ns.substr(0, self._dbName.length + 1) ===                                                         // 274\n                (self._dbName + '.'))) {                                                                              // 275\n            throw new Error(\"Unexpected ns\");                                                                         // 276\n          }                                                                                                           // 277\n                                                                                                                      // 278\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),                                          // 279\n                         dropCollection: false,                                                                       // 280\n                         dropDatabase: false,                                                                         // 281\n                         op: doc};                                                                                    // 282\n                                                                                                                      // 283\n          // Is it a special command and the collection name is hidden somewhere                                      // 284\n          // in operator?                                                                                             // 285\n          if (trigger.collection === \"$cmd\") {                                                                        // 286\n            if (doc.o.dropDatabase) {                                                                                 // 287\n              delete trigger.collection;                                                                              // 288\n              trigger.dropDatabase = true;                                                                            // 289\n            } else if (_.has(doc.o, 'drop')) {                                                                        // 290\n              trigger.collection = doc.o.drop;                                                                        // 291\n              trigger.dropCollection = true;                                                                          // 292\n              trigger.id = null;                                                                                      // 293\n            } else {                                                                                                  // 294\n              throw Error(\"Unknown command \" + JSON.stringify(doc));                                                  // 295\n            }                                                                                                         // 296\n          } else {                                                                                                    // 297\n            // All other ops have an id.                                                                              // 298\n            trigger.id = idForOp(doc);                                                                                // 299\n          }                                                                                                           // 300\n                                                                                                                      // 301\n          self._crossbar.fire(trigger);                                                                               // 302\n                                                                                                                      // 303\n          // Now that we've processed this operation, process pending                                                 // 304\n          // sequencers.                                                                                              // 305\n          if (!doc.ts)                                                                                                // 306\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));                                           // 307\n          self._setLastProcessedTS(doc.ts);                                                                           // 308\n        }                                                                                                             // 309\n      } finally {                                                                                                     // 310\n        self._workerActive = false;                                                                                   // 311\n      }                                                                                                               // 312\n    });                                                                                                               // 313\n  },                                                                                                                  // 314\n  _setLastProcessedTS: function (ts) {                                                                                // 315\n    var self = this;                                                                                                  // 316\n    self._lastProcessedTS = ts;                                                                                       // 317\n    while (!_.isEmpty(self._catchingUpFutures)                                                                        // 318\n           && self._catchingUpFutures[0].ts.lessThanOrEqual(                                                          // 319\n             self._lastProcessedTS)) {                                                                                // 320\n      var sequencer = self._catchingUpFutures.shift();                                                                // 321\n      sequencer.future.return();                                                                                      // 322\n    }                                                                                                                 // 323\n  }                                                                                                                   // 324\n});                                                                                                                   // 325\n                                                                                                                      // 326\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/observe_multiplex.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Future = Npm.require('fibers/future');                                                                            // 1\n                                                                                                                      // 2\nObserveMultiplexer = function (options) {                                                                             // 3\n  var self = this;                                                                                                    // 4\n                                                                                                                      // 5\n  if (!options || !_.has(options, 'ordered'))                                                                         // 6\n    throw Error(\"must specified ordered\");                                                                            // 7\n                                                                                                                      // 8\n  Package.facts && Package.facts.Facts.incrementServerFact(                                                           // 9\n    \"mongo-livedata\", \"observe-multiplexers\", 1);                                                                     // 10\n                                                                                                                      // 11\n  self._ordered = options.ordered;                                                                                    // 12\n  self._onStop = options.onStop || function () {};                                                                    // 13\n  self._queue = new Meteor._SynchronousQueue();                                                                       // 14\n  self._handles = {};                                                                                                 // 15\n  self._readyFuture = new Future;                                                                                     // 16\n  self._cache = new LocalCollection._CachingChangeObserver({                                                          // 17\n    ordered: options.ordered});                                                                                       // 18\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet                                                // 19\n  // running. removeHandle uses this to know if it's time to call the onStop                                          // 20\n  // callback.                                                                                                        // 21\n  self._addHandleTasksScheduledButNotPerformed = 0;                                                                   // 22\n                                                                                                                      // 23\n  _.each(self.callbackNames(), function (callbackName) {                                                              // 24\n    self[callbackName] = function (/* ... */) {                                                                       // 25\n      self._applyCallback(callbackName, _.toArray(arguments));                                                        // 26\n    };                                                                                                                // 27\n  });                                                                                                                 // 28\n};                                                                                                                    // 29\n                                                                                                                      // 30\n_.extend(ObserveMultiplexer.prototype, {                                                                              // 31\n  addHandleAndSendInitialAdds: function (handle) {                                                                    // 32\n    var self = this;                                                                                                  // 33\n                                                                                                                      // 34\n    // Check this before calling runTask (even though runTask does the same                                           // 35\n    // check) so that we don't leak an ObserveMultiplexer on error by                                                 // 36\n    // incrementing _addHandleTasksScheduledButNotPerformed and never                                                 // 37\n    // decrementing it.                                                                                               // 38\n    if (!self._queue.safeToRunTask())                                                                                 // 39\n      throw new Error(                                                                                                // 40\n        \"Can't call observeChanges from an observe callback on the same query\");                                      // 41\n    ++self._addHandleTasksScheduledButNotPerformed;                                                                   // 42\n                                                                                                                      // 43\n    Package.facts && Package.facts.Facts.incrementServerFact(                                                         // 44\n      \"mongo-livedata\", \"observe-handles\", 1);                                                                        // 45\n                                                                                                                      // 46\n    self._queue.runTask(function () {                                                                                 // 47\n      self._handles[handle._id] = handle;                                                                             // 48\n      // Send out whatever adds we have so far (whether or not we the                                                 // 49\n      // multiplexer is ready).                                                                                       // 50\n      self._sendAdds(handle);                                                                                         // 51\n      --self._addHandleTasksScheduledButNotPerformed;                                                                 // 52\n    });                                                                                                               // 53\n    // *outside* the task, since otherwise we'd deadlock                                                              // 54\n    self._readyFuture.wait();                                                                                         // 55\n  },                                                                                                                  // 56\n                                                                                                                      // 57\n  // Remove an observe handle. If it was the last observe handle, call the                                            // 58\n  // onStop callback; you cannot add any more observe handles after this.                                             // 59\n  //                                                                                                                  // 60\n  // This is not synchronized with polls and handle additions: this means that                                        // 61\n  // you can safely call it from within an observe callback, but it also means                                        // 62\n  // that we have to be careful when we iterate over _handles.                                                        // 63\n  removeHandle: function (id) {                                                                                       // 64\n    var self = this;                                                                                                  // 65\n                                                                                                                      // 66\n    // This should not be possible: you can only call removeHandle by having                                          // 67\n    // access to the ObserveHandle, which isn't returned to user code until the                                       // 68\n    // multiplex is ready.                                                                                            // 69\n    if (!self._ready())                                                                                               // 70\n      throw new Error(\"Can't remove handles until the multiplex is ready\");                                           // 71\n                                                                                                                      // 72\n    delete self._handles[id];                                                                                         // 73\n                                                                                                                      // 74\n    Package.facts && Package.facts.Facts.incrementServerFact(                                                         // 75\n      \"mongo-livedata\", \"observe-handles\", -1);                                                                       // 76\n                                                                                                                      // 77\n    if (_.isEmpty(self._handles) &&                                                                                   // 78\n        self._addHandleTasksScheduledButNotPerformed === 0) {                                                         // 79\n      self._stop();                                                                                                   // 80\n    }                                                                                                                 // 81\n  },                                                                                                                  // 82\n  _stop: function (options) {                                                                                         // 83\n    var self = this;                                                                                                  // 84\n    options = options || {};                                                                                          // 85\n                                                                                                                      // 86\n    // It shouldn't be possible for us to stop when all our handles still                                             // 87\n    // haven't been returned from observeChanges!                                                                     // 88\n    if (! self._ready() && ! options.fromQueryError)                                                                  // 89\n      throw Error(\"surprising _stop: not ready\");                                                                     // 90\n                                                                                                                      // 91\n    // Call stop callback (which kills the underlying process which sends us                                          // 92\n    // callbacks and removes us from the connection's dictionary).                                                    // 93\n    self._onStop();                                                                                                   // 94\n    Package.facts && Package.facts.Facts.incrementServerFact(                                                         // 95\n      \"mongo-livedata\", \"observe-multiplexers\", -1);                                                                  // 96\n                                                                                                                      // 97\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop                                        // 98\n    // callback should make our connection forget about us).                                                          // 99\n    self._handles = null;                                                                                             // 100\n  },                                                                                                                  // 101\n                                                                                                                      // 102\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding                                       // 103\n  // adds have been processed. Does not block.                                                                        // 104\n  ready: function () {                                                                                                // 105\n    var self = this;                                                                                                  // 106\n    self._queue.queueTask(function () {                                                                               // 107\n      if (self._ready())                                                                                              // 108\n        throw Error(\"can't make ObserveMultiplex ready twice!\");                                                      // 109\n      self._readyFuture.return();                                                                                     // 110\n    });                                                                                                               // 111\n  },                                                                                                                  // 112\n                                                                                                                      // 113\n  // If trying to execute the query results in an error, call this. This is                                           // 114\n  // intended for permanent errors, not transient network errors that could be                                        // 115\n  // fixed. It should only be called before ready(), because if you called ready                                      // 116\n  // that meant that you managed to run the query once. It will stop this                                             // 117\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus                                           // 118\n  // observeChanges calls) to throw the error.                                                                        // 119\n  queryError: function (err) {                                                                                        // 120\n    var self = this;                                                                                                  // 121\n    self._queue.runTask(function () {                                                                                 // 122\n      if (self._ready())                                                                                              // 123\n        throw Error(\"can't claim query has an error after it worked!\");                                               // 124\n      self._stop({fromQueryError: true});                                                                             // 125\n      self._readyFuture.throw(err);                                                                                   // 126\n    });                                                                                                               // 127\n  },                                                                                                                  // 128\n                                                                                                                      // 129\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"                                        // 130\n  // and observe callbacks which came before this call have been propagated to                                        // 131\n  // all handles. \"ready\" must have already been called on this multiplexer.                                          // 132\n  onFlush: function (cb) {                                                                                            // 133\n    var self = this;                                                                                                  // 134\n    self._queue.queueTask(function () {                                                                               // 135\n      if (!self._ready())                                                                                             // 136\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");                                         // 137\n      cb();                                                                                                           // 138\n    });                                                                                                               // 139\n  },                                                                                                                  // 140\n  callbackNames: function () {                                                                                        // 141\n    var self = this;                                                                                                  // 142\n    if (self._ordered)                                                                                                // 143\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];                                                    // 144\n    else                                                                                                              // 145\n      return [\"added\", \"changed\", \"removed\"];                                                                         // 146\n  },                                                                                                                  // 147\n  _ready: function () {                                                                                               // 148\n    return this._readyFuture.isResolved();                                                                            // 149\n  },                                                                                                                  // 150\n  _applyCallback: function (callbackName, args) {                                                                     // 151\n    var self = this;                                                                                                  // 152\n    self._queue.queueTask(function () {                                                                               // 153\n      // If we stopped in the meantime, do nothing.                                                                   // 154\n      if (!self._handles)                                                                                             // 155\n        return;                                                                                                       // 156\n                                                                                                                      // 157\n      // First, apply the change to the cache.                                                                        // 158\n      // XXX We could make applyChange callbacks promise not to hang on to any                                        // 159\n      // state from their arguments (assuming that their supplied callbacks                                           // 160\n      // don't) and skip this clone. Currently 'changed' hangs on to state                                            // 161\n      // though.                                                                                                      // 162\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));                                           // 163\n                                                                                                                      // 164\n      // If we haven't finished the initial adds, then we should only be getting                                      // 165\n      // adds.                                                                                                        // 166\n      if (!self._ready() &&                                                                                           // 167\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {                                             // 168\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");                                              // 169\n      }                                                                                                               // 170\n                                                                                                                      // 171\n      // Now multiplex the callbacks out to all observe handles. It's OK if                                           // 172\n      // these calls yield; since we're inside a task, no other use of our queue                                      // 173\n      // can continue until these are done. (But we do have to be careful to not                                      // 174\n      // use a handle that got removed, because removeHandle does not use the                                         // 175\n      // queue; thus, we iterate over an array of keys that we control.)                                              // 176\n      _.each(_.keys(self._handles), function (handleId) {                                                             // 177\n        var handle = self._handles && self._handles[handleId];                                                        // 178\n        if (!handle)                                                                                                  // 179\n          return;                                                                                                     // 180\n        var callback = handle['_' + callbackName];                                                                    // 181\n        // clone arguments so that callbacks can mutate their arguments                                               // 182\n        callback && callback.apply(null, EJSON.clone(args));                                                          // 183\n      });                                                                                                             // 184\n    });                                                                                                               // 185\n  },                                                                                                                  // 186\n                                                                                                                      // 187\n  // Sends initial adds to a handle. It should only be called from within a task                                      // 188\n  // (the task that is processing the addHandleAndSendInitialAdds call). It                                           // 189\n  // synchronously invokes the handle's added or addedBefore; there's no need to                                      // 190\n  // flush the queue afterwards to ensure that the callbacks get out.                                                 // 191\n  _sendAdds: function (handle) {                                                                                      // 192\n    var self = this;                                                                                                  // 193\n    if (self._queue.safeToRunTask())                                                                                  // 194\n      throw Error(\"_sendAdds may only be called from within a task!\");                                                // 195\n    var add = self._ordered ? handle._addedBefore : handle._added;                                                    // 196\n    if (!add)                                                                                                         // 197\n      return;                                                                                                         // 198\n    // note: docs may be an _IdMap or an OrderedDict                                                                  // 199\n    self._cache.docs.forEach(function (doc, id) {                                                                     // 200\n      if (!_.has(self._handles, handle._id))                                                                          // 201\n        throw Error(\"handle got removed before sending initial adds!\");                                               // 202\n      var fields = EJSON.clone(doc);                                                                                  // 203\n      delete fields._id;                                                                                              // 204\n      if (self._ordered)                                                                                              // 205\n        add(id, fields, null); // we're going in order, so add at end                                                 // 206\n      else                                                                                                            // 207\n        add(id, fields);                                                                                              // 208\n    });                                                                                                               // 209\n  }                                                                                                                   // 210\n});                                                                                                                   // 211\n                                                                                                                      // 212\n                                                                                                                      // 213\nvar nextObserveHandleId = 1;                                                                                          // 214\nObserveHandle = function (multiplexer, callbacks) {                                                                   // 215\n  var self = this;                                                                                                    // 216\n  // The end user is only supposed to call stop().  The other fields are                                              // 217\n  // accessible to the multiplexer, though.                                                                           // 218\n  self._multiplexer = multiplexer;                                                                                    // 219\n  _.each(multiplexer.callbackNames(), function (name) {                                                               // 220\n    if (callbacks[name]) {                                                                                            // 221\n      self['_' + name] = callbacks[name];                                                                             // 222\n    } else if (name === \"addedBefore\" && callbacks.added) {                                                           // 223\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an                                           // 224\n      // ordered observe where for some reason you don't get ordering data on                                         // 225\n      // the adds.  I dunno, we wrote tests for it, there must have been a                                            // 226\n      // reason.                                                                                                      // 227\n      self._addedBefore = function (id, fields, before) {                                                             // 228\n        callbacks.added(id, fields);                                                                                  // 229\n      };                                                                                                              // 230\n    }                                                                                                                 // 231\n  });                                                                                                                 // 232\n  self._stopped = false;                                                                                              // 233\n  self._id = nextObserveHandleId++;                                                                                   // 234\n};                                                                                                                    // 235\nObserveHandle.prototype.stop = function () {                                                                          // 236\n  var self = this;                                                                                                    // 237\n  if (self._stopped)                                                                                                  // 238\n    return;                                                                                                           // 239\n  self._stopped = true;                                                                                               // 240\n  self._multiplexer.removeHandle(self._id);                                                                           // 241\n};                                                                                                                    // 242\n                                                                                                                      // 243\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/doc_fetcher.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');                                                                                    // 1\nvar Future = Npm.require('fibers/future');                                                                            // 2\n                                                                                                                      // 3\nDocFetcher = function (mongoConnection) {                                                                             // 4\n  var self = this;                                                                                                    // 5\n  self._mongoConnection = mongoConnection;                                                                            // 6\n  // Map from cache key -> [callback]                                                                                 // 7\n  self._callbacksForCacheKey = {};                                                                                    // 8\n};                                                                                                                    // 9\n                                                                                                                      // 10\n_.extend(DocFetcher.prototype, {                                                                                      // 11\n  // Fetches document \"id\" from collectionName, returning it or null if not                                           // 12\n  // found.                                                                                                           // 13\n  //                                                                                                                  // 14\n  // If you make multiple calls to fetch() with the same cacheKey (a string),                                         // 15\n  // DocFetcher may assume that they all return the same document. (It does                                           // 16\n  // not check to see if collectionName/id match.)                                                                    // 17\n  //                                                                                                                  // 18\n  // You may assume that callback is never called synchronously (and in fact                                          // 19\n  // OplogObserveDriver does so).                                                                                     // 20\n  fetch: function (collectionName, id, cacheKey, callback) {                                                          // 21\n    var self = this;                                                                                                  // 22\n                                                                                                                      // 23\n    check(collectionName, String);                                                                                    // 24\n    // id is some sort of scalar                                                                                      // 25\n    check(cacheKey, String);                                                                                          // 26\n                                                                                                                      // 27\n    // If there's already an in-progress fetch for this cache key, yield until                                        // 28\n    // it's done and return whatever it returns.                                                                      // 29\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {                                                                // 30\n      self._callbacksForCacheKey[cacheKey].push(callback);                                                            // 31\n      return;                                                                                                         // 32\n    }                                                                                                                 // 33\n                                                                                                                      // 34\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];                                                // 35\n                                                                                                                      // 36\n    Fiber(function () {                                                                                               // 37\n      try {                                                                                                           // 38\n        var doc = self._mongoConnection.findOne(                                                                      // 39\n          collectionName, {_id: id}) || null;                                                                         // 40\n        // Return doc to all relevant callbacks. Note that this array can                                             // 41\n        // continue to grow during callback excecution.                                                               // 42\n        while (!_.isEmpty(callbacks)) {                                                                               // 43\n          // Clone the document so that the various calls to fetch don't return                                       // 44\n          // objects that are intertwingled with each other. Clone before                                             // 45\n          // popping the future, so that if clone throws, the error gets passed                                       // 46\n          // to the next callback.                                                                                    // 47\n          var clonedDoc = EJSON.clone(doc);                                                                           // 48\n          callbacks.pop()(null, clonedDoc);                                                                           // 49\n        }                                                                                                             // 50\n      } catch (e) {                                                                                                   // 51\n        while (!_.isEmpty(callbacks)) {                                                                               // 52\n          callbacks.pop()(e);                                                                                         // 53\n        }                                                                                                             // 54\n      } finally {                                                                                                     // 55\n        // XXX consider keeping the doc around for a period of time before                                            // 56\n        // removing from the cache                                                                                    // 57\n        delete self._callbacksForCacheKey[cacheKey];                                                                  // 58\n      }                                                                                                               // 59\n    }).run();                                                                                                         // 60\n  }                                                                                                                   // 61\n});                                                                                                                   // 62\n                                                                                                                      // 63\nMongoTest.DocFetcher = DocFetcher;                                                                                    // 64\n                                                                                                                      // 65\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/polling_observe_driver.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nPollingObserveDriver = function (options) {                                                                           // 1\n  var self = this;                                                                                                    // 2\n                                                                                                                      // 3\n  self._cursorDescription = options.cursorDescription;                                                                // 4\n  self._mongoHandle = options.mongoHandle;                                                                            // 5\n  self._ordered = options.ordered;                                                                                    // 6\n  self._multiplexer = options.multiplexer;                                                                            // 7\n  self._stopCallbacks = [];                                                                                           // 8\n  self._stopped = false;                                                                                              // 9\n                                                                                                                      // 10\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(                                               // 11\n    self._cursorDescription);                                                                                         // 12\n                                                                                                                      // 13\n  // previous results snapshot.  on each poll cycle, diffs against                                                    // 14\n  // results drives the callbacks.                                                                                    // 15\n  self._results = null;                                                                                               // 16\n                                                                                                                      // 17\n  // The number of _pollMongo calls that have been added to self._taskQueue but                                       // 18\n  // have not started running. Used to make sure we never schedule more than one                                      // 19\n  // _pollMongo (other than possibly the one that is currently running). It's                                         // 20\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,                                       // 21\n  // it's either 0 (for \"no polls scheduled other than maybe one currently                                            // 22\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can                                       // 23\n  // also be 2 if incremented by _suspendPolling.                                                                     // 24\n  self._pollsScheduledButNotStarted = 0;                                                                              // 25\n  self._pendingWrites = []; // people to notify when polling completes                                                // 26\n                                                                                                                      // 27\n  // Make sure to create a separately throttled function for each                                                     // 28\n  // PollingObserveDriver object.                                                                                     // 29\n  self._ensurePollIsScheduled = _.throttle(                                                                           // 30\n    self._unthrottledEnsurePollIsScheduled, 50 /* ms */);                                                             // 31\n                                                                                                                      // 32\n  // XXX figure out if we still need a queue                                                                          // 33\n  self._taskQueue = new Meteor._SynchronousQueue();                                                                   // 34\n                                                                                                                      // 35\n  var listenersHandle = listenAll(                                                                                    // 36\n    self._cursorDescription, function (notification) {                                                                // 37\n      // When someone does a transaction that might affect us, schedule a poll                                        // 38\n      // of the database. If that transaction happens inside of a write fence,                                        // 39\n      // block the fence until we've polled and notified observers.                                                   // 40\n      var fence = DDPServer._CurrentWriteFence.get();                                                                 // 41\n      if (fence)                                                                                                      // 42\n        self._pendingWrites.push(fence.beginWrite());                                                                 // 43\n      // Ensure a poll is scheduled... but if we already know that one is,                                            // 44\n      // don't hit the throttled _ensurePollIsScheduled function (which might                                         // 45\n      // lead to us calling it unnecessarily in 50ms).                                                                // 46\n      if (self._pollsScheduledButNotStarted === 0)                                                                    // 47\n        self._ensurePollIsScheduled();                                                                                // 48\n    }                                                                                                                 // 49\n  );                                                                                                                  // 50\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });                                                  // 51\n                                                                                                                      // 52\n  // every once and a while, poll even if we don't think we're dirty, for                                             // 53\n  // eventual consistency with database writes from outside the Meteor                                                // 54\n  // universe.                                                                                                        // 55\n  //                                                                                                                  // 56\n  // For testing, there's an undocumented callback argument to observeChanges                                         // 57\n  // which disables time-based polling and gets called at the beginning of each                                       // 58\n  // poll.                                                                                                            // 59\n  if (options._testOnlyPollCallback) {                                                                                // 60\n    self._testOnlyPollCallback = options._testOnlyPollCallback;                                                       // 61\n  } else {                                                                                                            // 62\n    var intervalHandle = Meteor.setInterval(                                                                          // 63\n      _.bind(self._ensurePollIsScheduled, self), 10 * 1000);                                                          // 64\n    self._stopCallbacks.push(function () {                                                                            // 65\n      Meteor.clearInterval(intervalHandle);                                                                           // 66\n    });                                                                                                               // 67\n  }                                                                                                                   // 68\n                                                                                                                      // 69\n  // Make sure we actually poll soon!                                                                                 // 70\n  self._unthrottledEnsurePollIsScheduled();                                                                           // 71\n                                                                                                                      // 72\n  Package.facts && Package.facts.Facts.incrementServerFact(                                                           // 73\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);                                                                  // 74\n};                                                                                                                    // 75\n                                                                                                                      // 76\n_.extend(PollingObserveDriver.prototype, {                                                                            // 77\n  // This is always called through _.throttle (except once at startup).                                               // 78\n  _unthrottledEnsurePollIsScheduled: function () {                                                                    // 79\n    var self = this;                                                                                                  // 80\n    if (self._pollsScheduledButNotStarted > 0)                                                                        // 81\n      return;                                                                                                         // 82\n    ++self._pollsScheduledButNotStarted;                                                                              // 83\n    self._taskQueue.queueTask(function () {                                                                           // 84\n      self._pollMongo();                                                                                              // 85\n    });                                                                                                               // 86\n  },                                                                                                                  // 87\n                                                                                                                      // 88\n  // test-only interface for controlling polling.                                                                     // 89\n  //                                                                                                                  // 90\n  // _suspendPolling blocks until any currently running and scheduled polls are                                       // 91\n  // done, and prevents any further polls from being scheduled. (new                                                  // 92\n  // ObserveHandles can be added and receive their initial added callbacks,                                           // 93\n  // though.)                                                                                                         // 94\n  //                                                                                                                  // 95\n  // _resumePolling immediately polls, and allows further polls to occur.                                             // 96\n  _suspendPolling: function() {                                                                                       // 97\n    var self = this;                                                                                                  // 98\n    // Pretend that there's another poll scheduled (which will prevent                                                // 99\n    // _ensurePollIsScheduled from queueing any more polls).                                                          // 100\n    ++self._pollsScheduledButNotStarted;                                                                              // 101\n    // Now block until all currently running or scheduled polls are done.                                             // 102\n    self._taskQueue.runTask(function() {});                                                                           // 103\n                                                                                                                      // 104\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to                                        // 105\n    // have) scheduled.                                                                                               // 106\n    if (self._pollsScheduledButNotStarted !== 1)                                                                      // 107\n      throw new Error(\"_pollsScheduledButNotStarted is \" +                                                            // 108\n                      self._pollsScheduledButNotStarted);                                                             // 109\n  },                                                                                                                  // 110\n  _resumePolling: function() {                                                                                        // 111\n    var self = this;                                                                                                  // 112\n    // We should be in the same state as in the end of _suspendPolling.                                               // 113\n    if (self._pollsScheduledButNotStarted !== 1)                                                                      // 114\n      throw new Error(\"_pollsScheduledButNotStarted is \" +                                                            // 115\n                      self._pollsScheduledButNotStarted);                                                             // 116\n    // Run a poll synchronously (which will counteract the                                                            // 117\n    // ++_pollsScheduledButNotStarted from _suspendPolling).                                                          // 118\n    self._taskQueue.runTask(function () {                                                                             // 119\n      self._pollMongo();                                                                                              // 120\n    });                                                                                                               // 121\n  },                                                                                                                  // 122\n                                                                                                                      // 123\n  _pollMongo: function () {                                                                                           // 124\n    var self = this;                                                                                                  // 125\n    --self._pollsScheduledButNotStarted;                                                                              // 126\n                                                                                                                      // 127\n    if (self._stopped)                                                                                                // 128\n      return;                                                                                                         // 129\n                                                                                                                      // 130\n    var first = false;                                                                                                // 131\n    var oldResults = self._results;                                                                                   // 132\n    if (!oldResults) {                                                                                                // 133\n      first = true;                                                                                                   // 134\n      // XXX maybe use OrderedDict instead?                                                                           // 135\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;                                                   // 136\n    }                                                                                                                 // 137\n                                                                                                                      // 138\n    self._testOnlyPollCallback && self._testOnlyPollCallback();                                                       // 139\n                                                                                                                      // 140\n    // Save the list of pending writes which this round will commit.                                                  // 141\n    var writesForCycle = self._pendingWrites;                                                                         // 142\n    self._pendingWrites = [];                                                                                         // 143\n                                                                                                                      // 144\n    // Get the new query results. (This yields.)                                                                      // 145\n    try {                                                                                                             // 146\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);                                          // 147\n    } catch (e) {                                                                                                     // 148\n      if (first && typeof(e.code) === 'number') {                                                                     // 149\n        // This is an error document sent to us by mongod, not a connection                                           // 150\n        // error generated by the client. And we've never seen this query work                                        // 151\n        // successfully. Probably it's a bad selector or something, so we should                                      // 152\n        // NOT retry. Instead, we should halt the observe (which ends up calling                                      // 153\n        // `stop` on us).                                                                                             // 154\n        self._multiplexer.queryError(                                                                                 // 155\n          new Error(                                                                                                  // 156\n            \"Exception while polling query \" +                                                                        // 157\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));                                           // 158\n        return;                                                                                                       // 159\n      }                                                                                                               // 160\n                                                                                                                      // 161\n      // getRawObjects can throw if we're having trouble talking to the                                               // 162\n      // database.  That's fine --- we will repoll later anyway. But we should                                        // 163\n      // make sure not to lose track of this cycle's writes.                                                          // 164\n      // (It also can throw if there's just something invalid about this query;                                       // 165\n      // unfortunately the ObserveDriver API doesn't provide a good way to                                            // 166\n      // \"cancel\" the observe from the inside in this case.                                                           // 167\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);                                                // 168\n      Meteor._debug(\"Exception while polling query \" +                                                                // 169\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);                                        // 170\n      return;                                                                                                         // 171\n    }                                                                                                                 // 172\n                                                                                                                      // 173\n    // Run diffs.                                                                                                     // 174\n    if (!self._stopped) {                                                                                             // 175\n      LocalCollection._diffQueryChanges(                                                                              // 176\n        self._ordered, oldResults, newResults, self._multiplexer);                                                    // 177\n    }                                                                                                                 // 178\n                                                                                                                      // 179\n    // Signals the multiplexer to allow all observeChanges calls that share this                                      // 180\n    // multiplexer to return. (This happens asynchronously, via the                                                   // 181\n    // multiplexer's queue.)                                                                                          // 182\n    if (first)                                                                                                        // 183\n      self._multiplexer.ready();                                                                                      // 184\n                                                                                                                      // 185\n    // Replace self._results atomically.  (This assignment is what makes `first`                                      // 186\n    // stay through on the next cycle, so we've waited until after we've                                              // 187\n    // committed to ready-ing the multiplexer.)                                                                       // 188\n    self._results = newResults;                                                                                       // 189\n                                                                                                                      // 190\n    // Once the ObserveMultiplexer has processed everything we've done in this                                        // 191\n    // round, mark all the writes which existed before this call as                                                   // 192\n    // commmitted. (If new writes have shown up in the meantime, there'll                                             // 193\n    // already be another _pollMongo task scheduled.)                                                                 // 194\n    self._multiplexer.onFlush(function () {                                                                           // 195\n      _.each(writesForCycle, function (w) {                                                                           // 196\n        w.committed();                                                                                                // 197\n      });                                                                                                             // 198\n    });                                                                                                               // 199\n  },                                                                                                                  // 200\n                                                                                                                      // 201\n  stop: function () {                                                                                                 // 202\n    var self = this;                                                                                                  // 203\n    self._stopped = true;                                                                                             // 204\n    _.each(self._stopCallbacks, function (c) { c(); });                                                               // 205\n    // Release any write fences that are waiting on us.                                                               // 206\n    _.each(self._pendingWrites, function (w) {                                                                        // 207\n      w.committed();                                                                                                  // 208\n    });                                                                                                               // 209\n    Package.facts && Package.facts.Facts.incrementServerFact(                                                         // 210\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);                                                               // 211\n  }                                                                                                                   // 212\n});                                                                                                                   // 213\n                                                                                                                      // 214\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/oplog_observe_driver.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');                                                                                    // 1\nvar Future = Npm.require('fibers/future');                                                                            // 2\n                                                                                                                      // 3\nvar PHASE = {                                                                                                         // 4\n  QUERYING: \"QUERYING\",                                                                                               // 5\n  FETCHING: \"FETCHING\",                                                                                               // 6\n  STEADY: \"STEADY\"                                                                                                    // 7\n};                                                                                                                    // 8\n                                                                                                                      // 9\n// Exception thrown by _needToPollQuery which unrolls the stack up to the                                             // 10\n// enclosing call to finishIfNeedToPollQuery.                                                                         // 11\nvar SwitchedToQuery = function () {};                                                                                 // 12\nvar finishIfNeedToPollQuery = function (f) {                                                                          // 13\n  return function () {                                                                                                // 14\n    try {                                                                                                             // 15\n      f.apply(this, arguments);                                                                                       // 16\n    } catch (e) {                                                                                                     // 17\n      if (!(e instanceof SwitchedToQuery))                                                                            // 18\n        throw e;                                                                                                      // 19\n    }                                                                                                                 // 20\n  };                                                                                                                  // 21\n};                                                                                                                    // 22\n                                                                                                                      // 23\nvar currentId = 0;                                                                                                    // 24\n                                                                                                                      // 25\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows                                         // 26\n// the Mongo operation log instead of just re-polling the query. It obeys the                                         // 27\n// same simple interface: constructing it starts sending observeChanges                                               // 28\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop                                       // 29\n// it by calling the stop() method.                                                                                   // 30\nOplogObserveDriver = function (options) {                                                                             // 31\n  var self = this;                                                                                                    // 32\n  self._usesOplog = true;  // tests look at this                                                                      // 33\n                                                                                                                      // 34\n  self._id = currentId;                                                                                               // 35\n  currentId++;                                                                                                        // 36\n                                                                                                                      // 37\n  self._cursorDescription = options.cursorDescription;                                                                // 38\n  self._mongoHandle = options.mongoHandle;                                                                            // 39\n  self._multiplexer = options.multiplexer;                                                                            // 40\n                                                                                                                      // 41\n  if (options.ordered) {                                                                                              // 42\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");                                         // 43\n  }                                                                                                                   // 44\n                                                                                                                      // 45\n  var sorter = options.sorter;                                                                                        // 46\n  // We don't support $near and other geo-queries so it's OK to initialize the                                        // 47\n  // comparator only once in the constructor.                                                                         // 48\n  var comparator = sorter && sorter.getComparator();                                                                  // 49\n                                                                                                                      // 50\n  if (options.cursorDescription.options.limit) {                                                                      // 51\n    // There are several properties ordered driver implements:                                                        // 52\n    // - _limit is a positive number                                                                                  // 53\n    // - _comparator is a function-comparator by which the query is ordered                                           // 54\n    // - _unpublishedBuffer is non-null Min/Max Heap,                                                                 // 55\n    //                      the empty buffer in STEADY phase implies that the                                         // 56\n    //                      everything that matches the queries selector fits                                         // 57\n    //                      into published set.                                                                       // 58\n    // - _published - Min Heap (also implements IdMap methods)                                                        // 59\n                                                                                                                      // 60\n    var heapOptions = { IdMap: LocalCollection._IdMap };                                                              // 61\n    self._limit = self._cursorDescription.options.limit;                                                              // 62\n    self._comparator = comparator;                                                                                    // 63\n    self._sorter = sorter;                                                                                            // 64\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);                                                // 65\n    // We need something that can find Max value in addition to IdMap interface                                       // 66\n    self._published = new MaxHeap(comparator, heapOptions);                                                           // 67\n  } else {                                                                                                            // 68\n    self._limit = 0;                                                                                                  // 69\n    self._comparator = null;                                                                                          // 70\n    self._sorter = null;                                                                                              // 71\n    self._unpublishedBuffer = null;                                                                                   // 72\n    self._published = new LocalCollection._IdMap;                                                                     // 73\n  }                                                                                                                   // 74\n                                                                                                                      // 75\n  // Indicates if it is safe to insert a new document at the end of the buffer                                        // 76\n  // for this query. i.e. it is known that there are no documents matching the                                        // 77\n  // selector those are not in published or buffer.                                                                   // 78\n  self._safeAppendToBuffer = false;                                                                                   // 79\n                                                                                                                      // 80\n  self._stopped = false;                                                                                              // 81\n  self._stopHandles = [];                                                                                             // 82\n                                                                                                                      // 83\n  Package.facts && Package.facts.Facts.incrementServerFact(                                                           // 84\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);                                                                    // 85\n                                                                                                                      // 86\n  self._registerPhaseChange(PHASE.QUERYING);                                                                          // 87\n                                                                                                                      // 88\n  var selector = self._cursorDescription.selector;                                                                    // 89\n  self._matcher = options.matcher;                                                                                    // 90\n  var projection = self._cursorDescription.options.fields || {};                                                      // 91\n  self._projectionFn = LocalCollection._compileProjection(projection);                                                // 92\n  // Projection function, result of combining important fields for selector and                                       // 93\n  // existing fields projection                                                                                       // 94\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);                                           // 95\n  if (sorter)                                                                                                         // 96\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);                                    // 97\n  self._sharedProjectionFn = LocalCollection._compileProjection(                                                      // 98\n    self._sharedProjection);                                                                                          // 99\n                                                                                                                      // 100\n  self._needToFetch = new LocalCollection._IdMap;                                                                     // 101\n  self._currentlyFetching = null;                                                                                     // 102\n  self._fetchGeneration = 0;                                                                                          // 103\n                                                                                                                      // 104\n  self._requeryWhenDoneThisQuery = false;                                                                             // 105\n  self._writesToCommitWhenWeReachSteady = [];                                                                         // 106\n                                                                                                                      // 107\n  // If the oplog handle tells us that it skipped some entries (because it got                                        // 108\n  // behind, say), re-poll.                                                                                           // 109\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(                                             // 110\n    finishIfNeedToPollQuery(function () {                                                                             // 111\n      self._needToPollQuery();                                                                                        // 112\n    })                                                                                                                // 113\n  ));                                                                                                                 // 114\n                                                                                                                      // 115\n  forEachTrigger(self._cursorDescription, function (trigger) {                                                        // 116\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(                                               // 117\n      trigger, function (notification) {                                                                              // 118\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {                                                 // 119\n          var op = notification.op;                                                                                   // 120\n          if (notification.dropCollection || notification.dropDatabase) {                                             // 121\n            // Note: this call is not allowed to block on anything (especially                                        // 122\n            // on waiting for oplog entries to catch up) because that will block                                      // 123\n            // onOplogEntry!                                                                                          // 124\n            self._needToPollQuery();                                                                                  // 125\n          } else {                                                                                                    // 126\n            // All other operators should be handled depending on phase                                               // 127\n            if (self._phase === PHASE.QUERYING)                                                                       // 128\n              self._handleOplogEntryQuerying(op);                                                                     // 129\n            else                                                                                                      // 130\n              self._handleOplogEntrySteadyOrFetching(op);                                                             // 131\n          }                                                                                                           // 132\n        }));                                                                                                          // 133\n      }                                                                                                               // 134\n    ));                                                                                                               // 135\n  });                                                                                                                 // 136\n                                                                                                                      // 137\n  // XXX ordering w.r.t. everything else?                                                                             // 138\n  self._stopHandles.push(listenAll(                                                                                   // 139\n    self._cursorDescription, function (notification) {                                                                // 140\n      // If we're not in a pre-fire write fence, we don't have to do anything.                                        // 141\n      var fence = DDPServer._CurrentWriteFence.get();                                                                 // 142\n      if (!fence || fence.fired)                                                                                      // 143\n        return;                                                                                                       // 144\n                                                                                                                      // 145\n      if (fence._oplogObserveDrivers) {                                                                               // 146\n        fence._oplogObserveDrivers[self._id] = self;                                                                  // 147\n        return;                                                                                                       // 148\n      }                                                                                                               // 149\n                                                                                                                      // 150\n      fence._oplogObserveDrivers = {};                                                                                // 151\n      fence._oplogObserveDrivers[self._id] = self;                                                                    // 152\n                                                                                                                      // 153\n      fence.onBeforeFire(function () {                                                                                // 154\n        var drivers = fence._oplogObserveDrivers;                                                                     // 155\n        delete fence._oplogObserveDrivers;                                                                            // 156\n                                                                                                                      // 157\n        // This fence cannot fire until we've caught up to \"this point\" in the                                        // 158\n        // oplog, and all observers made it back to the steady state.                                                 // 159\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();                                                           // 160\n                                                                                                                      // 161\n        _.each(drivers, function (driver) {                                                                           // 162\n          if (driver._stopped)                                                                                        // 163\n            return;                                                                                                   // 164\n                                                                                                                      // 165\n          var write = fence.beginWrite();                                                                             // 166\n          if (driver._phase === PHASE.STEADY) {                                                                       // 167\n            // Make sure that all of the callbacks have made it through the                                           // 168\n            // multiplexer and been delivered to ObserveHandles before committing                                     // 169\n            // writes.                                                                                                // 170\n            driver._multiplexer.onFlush(function () {                                                                 // 171\n              write.committed();                                                                                      // 172\n            });                                                                                                       // 173\n          } else {                                                                                                    // 174\n            driver._writesToCommitWhenWeReachSteady.push(write);                                                      // 175\n          }                                                                                                           // 176\n        });                                                                                                           // 177\n      });                                                                                                             // 178\n    }                                                                                                                 // 179\n  ));                                                                                                                 // 180\n                                                                                                                      // 181\n  // When Mongo fails over, we need to repoll the query, in case we processed an                                      // 182\n  // oplog entry that got rolled back.                                                                                // 183\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(                                       // 184\n    function () {                                                                                                     // 185\n      self._needToPollQuery();                                                                                        // 186\n    })));                                                                                                             // 187\n                                                                                                                      // 188\n  // Give _observeChanges a chance to add the new ObserveHandle to our                                                // 189\n  // multiplexer, so that the added calls get streamed.                                                               // 190\n  Meteor.defer(finishIfNeedToPollQuery(function () {                                                                  // 191\n    self._runInitialQuery();                                                                                          // 192\n  }));                                                                                                                // 193\n};                                                                                                                    // 194\n                                                                                                                      // 195\n_.extend(OplogObserveDriver.prototype, {                                                                              // 196\n  _addPublished: function (id, doc) {                                                                                 // 197\n    var self = this;                                                                                                  // 198\n    Meteor._noYieldsAllowed(function () {                                                                             // 199\n      var fields = _.clone(doc);                                                                                      // 200\n      delete fields._id;                                                                                              // 201\n      self._published.set(id, self._sharedProjectionFn(doc));                                                         // 202\n      self._multiplexer.added(id, self._projectionFn(fields));                                                        // 203\n                                                                                                                      // 204\n      // After adding this document, the published set might be overflowed                                            // 205\n      // (exceeding capacity specified by limit). If so, push the maximum                                             // 206\n      // element to the buffer, we might want to save it in memory to reduce the                                      // 207\n      // amount of Mongo lookups in the future.                                                                       // 208\n      if (self._limit && self._published.size() > self._limit) {                                                      // 209\n        // XXX in theory the size of published is no more than limit+1                                                // 210\n        if (self._published.size() !== self._limit + 1) {                                                             // 211\n          throw new Error(\"After adding to published, \" +                                                             // 212\n                          (self._published.size() - self._limit) +                                                    // 213\n                          \" documents are overflowing the set\");                                                      // 214\n        }                                                                                                             // 215\n                                                                                                                      // 216\n        var overflowingDocId = self._published.maxElementId();                                                        // 217\n        var overflowingDoc = self._published.get(overflowingDocId);                                                   // 218\n                                                                                                                      // 219\n        if (EJSON.equals(overflowingDocId, id)) {                                                                     // 220\n          throw new Error(\"The document just added is overflowing the published set\");                                // 221\n        }                                                                                                             // 222\n                                                                                                                      // 223\n        self._published.remove(overflowingDocId);                                                                     // 224\n        self._multiplexer.removed(overflowingDocId);                                                                  // 225\n        self._addBuffered(overflowingDocId, overflowingDoc);                                                          // 226\n      }                                                                                                               // 227\n    });                                                                                                               // 228\n  },                                                                                                                  // 229\n  _removePublished: function (id) {                                                                                   // 230\n    var self = this;                                                                                                  // 231\n    Meteor._noYieldsAllowed(function () {                                                                             // 232\n      self._published.remove(id);                                                                                     // 233\n      self._multiplexer.removed(id);                                                                                  // 234\n      if (! self._limit || self._published.size() === self._limit)                                                    // 235\n        return;                                                                                                       // 236\n                                                                                                                      // 237\n      if (self._published.size() > self._limit)                                                                       // 238\n        throw Error(\"self._published got too big\");                                                                   // 239\n                                                                                                                      // 240\n      // OK, we are publishing less than the limit. Maybe we should look in the                                       // 241\n      // buffer to find the next element past what we were publishing before.                                         // 242\n                                                                                                                      // 243\n      if (!self._unpublishedBuffer.empty()) {                                                                         // 244\n        // There's something in the buffer; move the first thing in it to                                             // 245\n        // _published.                                                                                                // 246\n        var newDocId = self._unpublishedBuffer.minElementId();                                                        // 247\n        var newDoc = self._unpublishedBuffer.get(newDocId);                                                           // 248\n        self._removeBuffered(newDocId);                                                                               // 249\n        self._addPublished(newDocId, newDoc);                                                                         // 250\n        return;                                                                                                       // 251\n      }                                                                                                               // 252\n                                                                                                                      // 253\n      // There's nothing in the buffer.  This could mean one of a few things.                                         // 254\n                                                                                                                      // 255\n      // (a) We could be in the middle of re-running the query (specifically, we                                      // 256\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is                                         // 257\n      // empty because we clear it at the beginning of _publishNewResults. In                                         // 258\n      // this case, our caller already knows the entire answer to the query and                                       // 259\n      // we don't need to do anything fancy here.  Just return.                                                       // 260\n      if (self._phase === PHASE.QUERYING)                                                                             // 261\n        return;                                                                                                       // 262\n                                                                                                                      // 263\n      // (b) We're pretty confident that the union of _published and                                                  // 264\n      // _unpublishedBuffer contain all documents that match selector. Because                                        // 265\n      // _unpublishedBuffer is empty, that means we're confident that _published                                      // 266\n      // contains all documents that match selector. So we have nothing to do.                                        // 267\n      if (self._safeAppendToBuffer)                                                                                   // 268\n        return;                                                                                                       // 269\n                                                                                                                      // 270\n      // (c) Maybe there are other documents out there that should be in our                                          // 271\n      // buffer. But in that case, when we emptied _unpublishedBuffer in                                              // 272\n      // _removeBuffered, we should have called _needToPollQuery, which will                                          // 273\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer                                        // 274\n      // (or both), and it will put us in QUERYING for that whole time. So in                                         // 275\n      // fact, we shouldn't be able to get here.                                                                      // 276\n                                                                                                                      // 277\n      throw new Error(\"Buffer inexplicably empty\");                                                                   // 278\n    });                                                                                                               // 279\n  },                                                                                                                  // 280\n  _changePublished: function (id, oldDoc, newDoc) {                                                                   // 281\n    var self = this;                                                                                                  // 282\n    Meteor._noYieldsAllowed(function () {                                                                             // 283\n      self._published.set(id, self._sharedProjectionFn(newDoc));                                                      // 284\n      var projectedNew = self._projectionFn(newDoc);                                                                  // 285\n      var projectedOld = self._projectionFn(oldDoc);                                                                  // 286\n      var changed = DiffSequence.makeChangedFields(                                                                   // 287\n        projectedNew, projectedOld);                                                                                  // 288\n      if (!_.isEmpty(changed))                                                                                        // 289\n        self._multiplexer.changed(id, changed);                                                                       // 290\n    });                                                                                                               // 291\n  },                                                                                                                  // 292\n  _addBuffered: function (id, doc) {                                                                                  // 293\n    var self = this;                                                                                                  // 294\n    Meteor._noYieldsAllowed(function () {                                                                             // 295\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));                                                 // 296\n                                                                                                                      // 297\n      // If something is overflowing the buffer, we just remove it from cache                                         // 298\n      if (self._unpublishedBuffer.size() > self._limit) {                                                             // 299\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();                                                   // 300\n                                                                                                                      // 301\n        self._unpublishedBuffer.remove(maxBufferedId);                                                                // 302\n                                                                                                                      // 303\n        // Since something matching is removed from cache (both published set and                                     // 304\n        // buffer), set flag to false                                                                                 // 305\n        self._safeAppendToBuffer = false;                                                                             // 306\n      }                                                                                                               // 307\n    });                                                                                                               // 308\n  },                                                                                                                  // 309\n  // Is called either to remove the doc completely from matching set or to move                                       // 310\n  // it to the published set later.                                                                                   // 311\n  _removeBuffered: function (id) {                                                                                    // 312\n    var self = this;                                                                                                  // 313\n    Meteor._noYieldsAllowed(function () {                                                                             // 314\n      self._unpublishedBuffer.remove(id);                                                                             // 315\n      // To keep the contract \"buffer is never empty in STEADY phase unless the                                       // 316\n      // everything matching fits into published\" true, we poll everything as                                         // 317\n      // soon as we see the buffer becoming empty.                                                                    // 318\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)                                             // 319\n        self._needToPollQuery();                                                                                      // 320\n    });                                                                                                               // 321\n  },                                                                                                                  // 322\n  // Called when a document has joined the \"Matching\" results set.                                                    // 323\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                       // 324\n  // and the effect of limit enforced.                                                                                // 325\n  _addMatching: function (doc) {                                                                                      // 326\n    var self = this;                                                                                                  // 327\n    Meteor._noYieldsAllowed(function () {                                                                             // 328\n      var id = doc._id;                                                                                               // 329\n      if (self._published.has(id))                                                                                    // 330\n        throw Error(\"tried to add something already published \" + id);                                                // 331\n      if (self._limit && self._unpublishedBuffer.has(id))                                                             // 332\n        throw Error(\"tried to add something already existed in buffer \" + id);                                        // 333\n                                                                                                                      // 334\n      var limit = self._limit;                                                                                        // 335\n      var comparator = self._comparator;                                                                              // 336\n      var maxPublished = (limit && self._published.size() > 0) ?                                                      // 337\n        self._published.get(self._published.maxElementId()) : null;                                                   // 338\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)                                                 // 339\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())                                         // 340\n        : null;                                                                                                       // 341\n      // The query is unlimited or didn't publish enough documents yet or the                                         // 342\n      // new document would fit into published set pushing the maximum element                                        // 343\n      // out, then we need to publish the doc.                                                                        // 344\n      var toPublish = ! limit || self._published.size() < limit ||                                                    // 345\n        comparator(doc, maxPublished) < 0;                                                                            // 346\n                                                                                                                      // 347\n      // Otherwise we might need to buffer it (only in case of limited query).                                        // 348\n      // Buffering is allowed if the buffer is not filled up yet and all                                              // 349\n      // matching docs are either in the published set or in the buffer.                                              // 350\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&                                               // 351\n        self._unpublishedBuffer.size() < limit;                                                                       // 352\n                                                                                                                      // 353\n      // Or if it is small enough to be safely inserted to the middle or the                                          // 354\n      // beginning of the buffer.                                                                                     // 355\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&                                                          // 356\n        comparator(doc, maxBuffered) <= 0;                                                                            // 357\n                                                                                                                      // 358\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;                                                        // 359\n                                                                                                                      // 360\n      if (toPublish) {                                                                                                // 361\n        self._addPublished(id, doc);                                                                                  // 362\n      } else if (toBuffer) {                                                                                          // 363\n        self._addBuffered(id, doc);                                                                                   // 364\n      } else {                                                                                                        // 365\n        // dropping it and not saving to the cache                                                                    // 366\n        self._safeAppendToBuffer = false;                                                                             // 367\n      }                                                                                                               // 368\n    });                                                                                                               // 369\n  },                                                                                                                  // 370\n  // Called when a document leaves the \"Matching\" results set.                                                        // 371\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                       // 372\n  // and the effect of limit enforced.                                                                                // 373\n  _removeMatching: function (id) {                                                                                    // 374\n    var self = this;                                                                                                  // 375\n    Meteor._noYieldsAllowed(function () {                                                                             // 376\n      if (! self._published.has(id) && ! self._limit)                                                                 // 377\n        throw Error(\"tried to remove something matching but not cached \" + id);                                       // 378\n                                                                                                                      // 379\n      if (self._published.has(id)) {                                                                                  // 380\n        self._removePublished(id);                                                                                    // 381\n      } else if (self._unpublishedBuffer.has(id)) {                                                                   // 382\n        self._removeBuffered(id);                                                                                     // 383\n      }                                                                                                               // 384\n    });                                                                                                               // 385\n  },                                                                                                                  // 386\n  _handleDoc: function (id, newDoc) {                                                                                 // 387\n    var self = this;                                                                                                  // 388\n    Meteor._noYieldsAllowed(function () {                                                                             // 389\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;                                        // 390\n                                                                                                                      // 391\n      var publishedBefore = self._published.has(id);                                                                  // 392\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                            // 393\n      var cachedBefore = publishedBefore || bufferedBefore;                                                           // 394\n                                                                                                                      // 395\n      if (matchesNow && !cachedBefore) {                                                                              // 396\n        self._addMatching(newDoc);                                                                                    // 397\n      } else if (cachedBefore && !matchesNow) {                                                                       // 398\n        self._removeMatching(id);                                                                                     // 399\n      } else if (cachedBefore && matchesNow) {                                                                        // 400\n        var oldDoc = self._published.get(id);                                                                         // 401\n        var comparator = self._comparator;                                                                            // 402\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&                                            // 403\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());                                        // 404\n                                                                                                                      // 405\n        if (publishedBefore) {                                                                                        // 406\n          // Unlimited case where the document stays in published once it                                             // 407\n          // matches or the case when we don't have enough matching docs to                                           // 408\n          // publish or the changed but matching doc will stay in published                                           // 409\n          // anyways.                                                                                                 // 410\n          //                                                                                                          // 411\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the                                         // 412\n          // fact that buffer can't be empty if there are matching documents not                                      // 413\n          // published. Notably, we don't want to schedule repoll and continue                                        // 414\n          // relying on this property.                                                                                // 415\n          var staysInPublished = ! self._limit ||                                                                     // 416\n            self._unpublishedBuffer.size() === 0 ||                                                                   // 417\n            comparator(newDoc, minBuffered) <= 0;                                                                     // 418\n                                                                                                                      // 419\n          if (staysInPublished) {                                                                                     // 420\n            self._changePublished(id, oldDoc, newDoc);                                                                // 421\n          } else {                                                                                                    // 422\n            // after the change doc doesn't stay in the published, remove it                                          // 423\n            self._removePublished(id);                                                                                // 424\n            // but it can move into buffered now, check it                                                            // 425\n            var maxBuffered = self._unpublishedBuffer.get(                                                            // 426\n              self._unpublishedBuffer.maxElementId());                                                                // 427\n                                                                                                                      // 428\n            var toBuffer = self._safeAppendToBuffer ||                                                                // 429\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);                                              // 430\n                                                                                                                      // 431\n            if (toBuffer) {                                                                                           // 432\n              self._addBuffered(id, newDoc);                                                                          // 433\n            } else {                                                                                                  // 434\n              // Throw away from both published set and buffer                                                        // 435\n              self._safeAppendToBuffer = false;                                                                       // 436\n            }                                                                                                         // 437\n          }                                                                                                           // 438\n        } else if (bufferedBefore) {                                                                                  // 439\n          oldDoc = self._unpublishedBuffer.get(id);                                                                   // 440\n          // remove the old version manually instead of using _removeBuffered so                                      // 441\n          // we don't trigger the querying immediately.  if we end this block                                         // 442\n          // with the buffer empty, we will need to trigger the query poll                                            // 443\n          // manually too.                                                                                            // 444\n          self._unpublishedBuffer.remove(id);                                                                         // 445\n                                                                                                                      // 446\n          var maxPublished = self._published.get(                                                                     // 447\n            self._published.maxElementId());                                                                          // 448\n          var maxBuffered = self._unpublishedBuffer.size() &&                                                         // 449\n                self._unpublishedBuffer.get(                                                                          // 450\n                  self._unpublishedBuffer.maxElementId());                                                            // 451\n                                                                                                                      // 452\n          // the buffered doc was updated, it could move to published                                                 // 453\n          var toPublish = comparator(newDoc, maxPublished) < 0;                                                       // 454\n                                                                                                                      // 455\n          // or stays in buffer even after the change                                                                 // 456\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||                                            // 457\n                (!toPublish && maxBuffered &&                                                                         // 458\n                 comparator(newDoc, maxBuffered) <= 0);                                                               // 459\n                                                                                                                      // 460\n          if (toPublish) {                                                                                            // 461\n            self._addPublished(id, newDoc);                                                                           // 462\n          } else if (staysInBuffer) {                                                                                 // 463\n            // stays in buffer but changes                                                                            // 464\n            self._unpublishedBuffer.set(id, newDoc);                                                                  // 465\n          } else {                                                                                                    // 466\n            // Throw away from both published set and buffer                                                          // 467\n            self._safeAppendToBuffer = false;                                                                         // 468\n            // Normally this check would have been done in _removeBuffered but                                        // 469\n            // we didn't use it, so we need to do it ourself now.                                                     // 470\n            if (! self._unpublishedBuffer.size()) {                                                                   // 471\n              self._needToPollQuery();                                                                                // 472\n            }                                                                                                         // 473\n          }                                                                                                           // 474\n        } else {                                                                                                      // 475\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");               // 476\n        }                                                                                                             // 477\n      }                                                                                                               // 478\n    });                                                                                                               // 479\n  },                                                                                                                  // 480\n  _fetchModifiedDocuments: function () {                                                                              // 481\n    var self = this;                                                                                                  // 482\n    Meteor._noYieldsAllowed(function () {                                                                             // 483\n      self._registerPhaseChange(PHASE.FETCHING);                                                                      // 484\n      // Defer, because nothing called from the oplog entry handler may yield,                                        // 485\n      // but fetch() yields.                                                                                          // 486\n      Meteor.defer(finishIfNeedToPollQuery(function () {                                                              // 487\n        while (!self._stopped && !self._needToFetch.empty()) {                                                        // 488\n          if (self._phase === PHASE.QUERYING) {                                                                       // 489\n            // While fetching, we decided to go into QUERYING mode, and then we                                       // 490\n            // saw another oplog entry, so _needToFetch is not empty. But we                                          // 491\n            // shouldn't fetch these documents until AFTER the query is done.                                         // 492\n            break;                                                                                                    // 493\n          }                                                                                                           // 494\n                                                                                                                      // 495\n          // Being in steady phase here would be surprising.                                                          // 496\n          if (self._phase !== PHASE.FETCHING)                                                                         // 497\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);                                       // 498\n                                                                                                                      // 499\n          self._currentlyFetching = self._needToFetch;                                                                // 500\n          var thisGeneration = ++self._fetchGeneration;                                                               // 501\n          self._needToFetch = new LocalCollection._IdMap;                                                             // 502\n          var waiting = 0;                                                                                            // 503\n          var fut = new Future;                                                                                       // 504\n          // This loop is safe, because _currentlyFetching will not be updated                                        // 505\n          // during this loop (in fact, it is never mutated).                                                         // 506\n          self._currentlyFetching.forEach(function (cacheKey, id) {                                                   // 507\n            waiting++;                                                                                                // 508\n            self._mongoHandle._docFetcher.fetch(                                                                      // 509\n              self._cursorDescription.collectionName, id, cacheKey,                                                   // 510\n              finishIfNeedToPollQuery(function (err, doc) {                                                           // 511\n                try {                                                                                                 // 512\n                  if (err) {                                                                                          // 513\n                    Meteor._debug(\"Got exception while fetching documents: \" +                                        // 514\n                                  err);                                                                               // 515\n                    // If we get an error from the fetcher (eg, trouble                                               // 516\n                    // connecting to Mongo), let's just abandon the fetch phase                                       // 517\n                    // altogether and fall back to polling. It's not like we're                                       // 518\n                    // getting live updates anyway.                                                                   // 519\n                    if (self._phase !== PHASE.QUERYING) {                                                             // 520\n                      self._needToPollQuery();                                                                        // 521\n                    }                                                                                                 // 522\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING                                         // 523\n                             && self._fetchGeneration === thisGeneration) {                                           // 524\n                    // We re-check the generation in case we've had an explicit                                       // 525\n                    // _pollQuery call (eg, in another fiber) which should                                            // 526\n                    // effectively cancel this round of fetches.  (_pollQuery                                         // 527\n                    // increments the generation.)                                                                    // 528\n                    self._handleDoc(id, doc);                                                                         // 529\n                  }                                                                                                   // 530\n                } finally {                                                                                           // 531\n                  waiting--;                                                                                          // 532\n                  // Because fetch() never calls its callback synchronously,                                          // 533\n                  // this is safe (ie, we won't call fut.return() before the                                          // 534\n                  // forEach is done).                                                                                // 535\n                  if (waiting === 0)                                                                                  // 536\n                    fut.return();                                                                                     // 537\n                }                                                                                                     // 538\n              }));                                                                                                    // 539\n          });                                                                                                         // 540\n          fut.wait();                                                                                                 // 541\n          // Exit now if we've had a _pollQuery call (here or in another fiber).                                      // 542\n          if (self._phase === PHASE.QUERYING)                                                                         // 543\n            return;                                                                                                   // 544\n          self._currentlyFetching = null;                                                                             // 545\n        }                                                                                                             // 546\n        // We're done fetching, so we can be steady, unless we've had a                                               // 547\n        // _pollQuery call (here or in another fiber).                                                                // 548\n        if (self._phase !== PHASE.QUERYING)                                                                           // 549\n          self._beSteady();                                                                                           // 550\n      }));                                                                                                            // 551\n    });                                                                                                               // 552\n  },                                                                                                                  // 553\n  _beSteady: function () {                                                                                            // 554\n    var self = this;                                                                                                  // 555\n    Meteor._noYieldsAllowed(function () {                                                                             // 556\n      self._registerPhaseChange(PHASE.STEADY);                                                                        // 557\n      var writes = self._writesToCommitWhenWeReachSteady;                                                             // 558\n      self._writesToCommitWhenWeReachSteady = [];                                                                     // 559\n      self._multiplexer.onFlush(function () {                                                                         // 560\n        _.each(writes, function (w) {                                                                                 // 561\n          w.committed();                                                                                              // 562\n        });                                                                                                           // 563\n      });                                                                                                             // 564\n    });                                                                                                               // 565\n  },                                                                                                                  // 566\n  _handleOplogEntryQuerying: function (op) {                                                                          // 567\n    var self = this;                                                                                                  // 568\n    Meteor._noYieldsAllowed(function () {                                                                             // 569\n      self._needToFetch.set(idForOp(op), op.ts.toString());                                                           // 570\n    });                                                                                                               // 571\n  },                                                                                                                  // 572\n  _handleOplogEntrySteadyOrFetching: function (op) {                                                                  // 573\n    var self = this;                                                                                                  // 574\n    Meteor._noYieldsAllowed(function () {                                                                             // 575\n      var id = idForOp(op);                                                                                           // 576\n      // If we're already fetching this one, or about to, we can't optimize;                                          // 577\n      // make sure that we fetch it again if necessary.                                                               // 578\n      if (self._phase === PHASE.FETCHING &&                                                                           // 579\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||                                            // 580\n           self._needToFetch.has(id))) {                                                                              // 581\n        self._needToFetch.set(id, op.ts.toString());                                                                  // 582\n        return;                                                                                                       // 583\n      }                                                                                                               // 584\n                                                                                                                      // 585\n      if (op.op === 'd') {                                                                                            // 586\n        if (self._published.has(id) ||                                                                                // 587\n            (self._limit && self._unpublishedBuffer.has(id)))                                                         // 588\n          self._removeMatching(id);                                                                                   // 589\n      } else if (op.op === 'i') {                                                                                     // 590\n        if (self._published.has(id))                                                                                  // 591\n          throw new Error(\"insert found for already-existing ID in published\");                                       // 592\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))                                               // 593\n          throw new Error(\"insert found for already-existing ID in buffer\");                                          // 594\n                                                                                                                      // 595\n        // XXX what if selector yields?  for now it can't but later it could                                          // 596\n        // have $where                                                                                                // 597\n        if (self._matcher.documentMatches(op.o).result)                                                               // 598\n          self._addMatching(op.o);                                                                                    // 599\n      } else if (op.op === 'u') {                                                                                     // 600\n        // Is this a modifier ($set/$unset, which may require us to poll the                                          // 601\n        // database to figure out if the whole document matches the selector) or                                      // 602\n        // a replacement (in which case we can just directly re-evaluate the                                          // 603\n        // selector)?                                                                                                 // 604\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');                                               // 605\n        // If this modifier modifies something inside an EJSON custom type (ie,                                       // 606\n        // anything with EJSON$), then we can't try to use                                                            // 607\n        // LocalCollection._modify, since that just mutates the EJSON encoding,                                       // 608\n        // not the actual object.                                                                                     // 609\n        var canDirectlyModifyDoc =                                                                                    // 610\n          !isReplace && modifierCanBeDirectlyApplied(op.o);                                                           // 611\n                                                                                                                      // 612\n        var publishedBefore = self._published.has(id);                                                                // 613\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                          // 614\n                                                                                                                      // 615\n        if (isReplace) {                                                                                              // 616\n          self._handleDoc(id, _.extend({_id: id}, op.o));                                                             // 617\n        } else if ((publishedBefore || bufferedBefore) &&                                                             // 618\n                   canDirectlyModifyDoc) {                                                                            // 619\n          // Oh great, we actually know what the document is, so we can apply                                         // 620\n          // this directly.                                                                                           // 621\n          var newDoc = self._published.has(id)                                                                        // 622\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);                                              // 623\n          newDoc = EJSON.clone(newDoc);                                                                               // 624\n                                                                                                                      // 625\n          newDoc._id = id;                                                                                            // 626\n          try {                                                                                                       // 627\n            LocalCollection._modify(newDoc, op.o);                                                                    // 628\n          } catch (e) {                                                                                               // 629\n            if (e.name !== \"MinimongoError\")                                                                          // 630\n              throw e;                                                                                                // 631\n            // We didn't understand the modifier.  Re-fetch.                                                          // 632\n            self._needToFetch.set(id, op.ts.toString());                                                              // 633\n            if (self._phase === PHASE.STEADY) {                                                                       // 634\n              self._fetchModifiedDocuments();                                                                         // 635\n            }                                                                                                         // 636\n            return;                                                                                                   // 637\n          }                                                                                                           // 638\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));                                                      // 639\n        } else if (!canDirectlyModifyDoc ||                                                                           // 640\n                   self._matcher.canBecomeTrueByModifier(op.o) ||                                                     // 641\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {                                         // 642\n          self._needToFetch.set(id, op.ts.toString());                                                                // 643\n          if (self._phase === PHASE.STEADY)                                                                           // 644\n            self._fetchModifiedDocuments();                                                                           // 645\n        }                                                                                                             // 646\n      } else {                                                                                                        // 647\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);                                                               // 648\n      }                                                                                                               // 649\n    });                                                                                                               // 650\n  },                                                                                                                  // 651\n  // Yields!                                                                                                          // 652\n  _runInitialQuery: function () {                                                                                     // 653\n    var self = this;                                                                                                  // 654\n    if (self._stopped)                                                                                                // 655\n      throw new Error(\"oplog stopped surprisingly early\");                                                            // 656\n                                                                                                                      // 657\n    self._runQuery({initial: true});  // yields                                                                       // 658\n                                                                                                                      // 659\n    if (self._stopped)                                                                                                // 660\n      return;  // can happen on queryError                                                                            // 661\n                                                                                                                      // 662\n    // Allow observeChanges calls to return. (After this, it's possible for                                           // 663\n    // stop() to be called.)                                                                                          // 664\n    self._multiplexer.ready();                                                                                        // 665\n                                                                                                                      // 666\n    self._doneQuerying();  // yields                                                                                  // 667\n  },                                                                                                                  // 668\n                                                                                                                      // 669\n  // In various circumstances, we may just want to stop processing the oplog and                                      // 670\n  // re-run the initial query, just as if we were a PollingObserveDriver.                                             // 671\n  //                                                                                                                  // 672\n  // This function may not block, because it is called from an oplog entry                                            // 673\n  // handler.                                                                                                         // 674\n  //                                                                                                                  // 675\n  // XXX We should call this when we detect that we've been in FETCHING for \"too                                      // 676\n  // long\".                                                                                                           // 677\n  //                                                                                                                  // 678\n  // XXX We should call this when we detect Mongo failover (since that might                                          // 679\n  // mean that some of the oplog entries we have processed have been rolled                                           // 680\n  // back). The Node Mongo driver is in the middle of a bunch of huge                                                 // 681\n  // refactorings, including the way that it notifies you when primary                                                // 682\n  // changes. Will put off implementing this until driver 1.4 is out.                                                 // 683\n  _pollQuery: function () {                                                                                           // 684\n    var self = this;                                                                                                  // 685\n    Meteor._noYieldsAllowed(function () {                                                                             // 686\n      if (self._stopped)                                                                                              // 687\n        return;                                                                                                       // 688\n                                                                                                                      // 689\n      // Yay, we get to forget about all the things we thought we had to fetch.                                       // 690\n      self._needToFetch = new LocalCollection._IdMap;                                                                 // 691\n      self._currentlyFetching = null;                                                                                 // 692\n      ++self._fetchGeneration;  // ignore any in-flight fetches                                                       // 693\n      self._registerPhaseChange(PHASE.QUERYING);                                                                      // 694\n                                                                                                                      // 695\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery                                         // 696\n      // here because SwitchedToQuery is not thrown in QUERYING mode.                                                 // 697\n      Meteor.defer(function () {                                                                                      // 698\n        self._runQuery();                                                                                             // 699\n        self._doneQuerying();                                                                                         // 700\n      });                                                                                                             // 701\n    });                                                                                                               // 702\n  },                                                                                                                  // 703\n                                                                                                                      // 704\n  // Yields!                                                                                                          // 705\n  _runQuery: function (options) {                                                                                     // 706\n    var self = this;                                                                                                  // 707\n    options = options || {};                                                                                          // 708\n    var newResults, newBuffer;                                                                                        // 709\n                                                                                                                      // 710\n    // This while loop is just to retry failures.                                                                     // 711\n    while (true) {                                                                                                    // 712\n      // If we've been stopped, we don't have to run anything any more.                                               // 713\n      if (self._stopped)                                                                                              // 714\n        return;                                                                                                       // 715\n                                                                                                                      // 716\n      newResults = new LocalCollection._IdMap;                                                                        // 717\n      newBuffer = new LocalCollection._IdMap;                                                                         // 718\n                                                                                                                      // 719\n      // Query 2x documents as the half excluded from the original query will go                                      // 720\n      // into unpublished buffer to reduce additional Mongo lookups in cases                                          // 721\n      // when documents are removed from the published set and need a                                                 // 722\n      // replacement.                                                                                                 // 723\n      // XXX needs more thought on non-zero skip                                                                      // 724\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for                                        // 725\n      // buffer if such is needed.                                                                                    // 726\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });                                                  // 727\n      try {                                                                                                           // 728\n        cursor.forEach(function (doc, i) {  // yields                                                                 // 729\n          if (!self._limit || i < self._limit)                                                                        // 730\n            newResults.set(doc._id, doc);                                                                             // 731\n          else                                                                                                        // 732\n            newBuffer.set(doc._id, doc);                                                                              // 733\n        });                                                                                                           // 734\n        break;                                                                                                        // 735\n      } catch (e) {                                                                                                   // 736\n        if (options.initial && typeof(e.code) === 'number') {                                                         // 737\n          // This is an error document sent to us by mongod, not a connection                                         // 738\n          // error generated by the client. And we've never seen this query work                                      // 739\n          // successfully. Probably it's a bad selector or something, so we                                           // 740\n          // should NOT retry. Instead, we should halt the observe (which ends                                        // 741\n          // up calling `stop` on us).                                                                                // 742\n          self._multiplexer.queryError(e);                                                                            // 743\n          return;                                                                                                     // 744\n        }                                                                                                             // 745\n                                                                                                                      // 746\n        // During failover (eg) if we get an exception we should log and retry                                        // 747\n        // instead of crashing.                                                                                       // 748\n        Meteor._debug(\"Got exception while polling query: \" + e);                                                     // 749\n        Meteor._sleepForMs(100);                                                                                      // 750\n      }                                                                                                               // 751\n    }                                                                                                                 // 752\n                                                                                                                      // 753\n    if (self._stopped)                                                                                                // 754\n      return;                                                                                                         // 755\n                                                                                                                      // 756\n    self._publishNewResults(newResults, newBuffer);                                                                   // 757\n  },                                                                                                                  // 758\n                                                                                                                      // 759\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)                                      // 760\n  // ensures that we will query again later.                                                                          // 761\n  //                                                                                                                  // 762\n  // This function may not block, because it is called from an oplog entry                                            // 763\n  // handler. However, if we were not already in the QUERYING phase, it throws                                        // 764\n  // an exception that is caught by the closest surrounding                                                           // 765\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running                                        // 766\n  // close that was designed for another phase inside PHASE.QUERYING.                                                 // 767\n  //                                                                                                                  // 768\n  // (It's also necessary whenever logic in this file yields to check that other                                      // 769\n  // phases haven't put us into QUERYING mode, though; eg,                                                            // 770\n  // _fetchModifiedDocuments does this.)                                                                              // 771\n  _needToPollQuery: function () {                                                                                     // 772\n    var self = this;                                                                                                  // 773\n    Meteor._noYieldsAllowed(function () {                                                                             // 774\n      if (self._stopped)                                                                                              // 775\n        return;                                                                                                       // 776\n                                                                                                                      // 777\n      // If we're not already in the middle of a query, we can query now                                              // 778\n      // (possibly pausing FETCHING).                                                                                 // 779\n      if (self._phase !== PHASE.QUERYING) {                                                                           // 780\n        self._pollQuery();                                                                                            // 781\n        throw new SwitchedToQuery;                                                                                    // 782\n      }                                                                                                               // 783\n                                                                                                                      // 784\n      // We're currently in QUERYING. Set a flag to ensure that we run another                                        // 785\n      // query when we're done.                                                                                       // 786\n      self._requeryWhenDoneThisQuery = true;                                                                          // 787\n    });                                                                                                               // 788\n  },                                                                                                                  // 789\n                                                                                                                      // 790\n  // Yields!                                                                                                          // 791\n  _doneQuerying: function () {                                                                                        // 792\n    var self = this;                                                                                                  // 793\n                                                                                                                      // 794\n    if (self._stopped)                                                                                                // 795\n      return;                                                                                                         // 796\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields                                                    // 797\n    if (self._stopped)                                                                                                // 798\n      return;                                                                                                         // 799\n    if (self._phase !== PHASE.QUERYING)                                                                               // 800\n      throw Error(\"Phase unexpectedly \" + self._phase);                                                               // 801\n                                                                                                                      // 802\n    Meteor._noYieldsAllowed(function () {                                                                             // 803\n      if (self._requeryWhenDoneThisQuery) {                                                                           // 804\n        self._requeryWhenDoneThisQuery = false;                                                                       // 805\n        self._pollQuery();                                                                                            // 806\n      } else if (self._needToFetch.empty()) {                                                                         // 807\n        self._beSteady();                                                                                             // 808\n      } else {                                                                                                        // 809\n        self._fetchModifiedDocuments();                                                                               // 810\n      }                                                                                                               // 811\n    });                                                                                                               // 812\n  },                                                                                                                  // 813\n                                                                                                                      // 814\n  _cursorForQuery: function (optionsOverwrite) {                                                                      // 815\n    var self = this;                                                                                                  // 816\n    return Meteor._noYieldsAllowed(function () {                                                                      // 817\n      // The query we run is almost the same as the cursor we are observing,                                          // 818\n      // with a few changes. We need to read all the fields that are relevant to                                      // 819\n      // the selector, not just the fields we are going to publish (that's the                                        // 820\n      // \"shared\" projection). And we don't want to apply any transform in the                                        // 821\n      // cursor, because observeChanges shouldn't use the transform.                                                  // 822\n      var options = _.clone(self._cursorDescription.options);                                                         // 823\n                                                                                                                      // 824\n      // Allow the caller to modify the options. Useful to specify different                                          // 825\n      // skip and limit values.                                                                                       // 826\n      _.extend(options, optionsOverwrite);                                                                            // 827\n                                                                                                                      // 828\n      options.fields = self._sharedProjection;                                                                        // 829\n      delete options.transform;                                                                                       // 830\n      // We are NOT deep cloning fields or selector here, which should be OK.                                         // 831\n      var description = new CursorDescription(                                                                        // 832\n        self._cursorDescription.collectionName,                                                                       // 833\n        self._cursorDescription.selector,                                                                             // 834\n        options);                                                                                                     // 835\n      return new Cursor(self._mongoHandle, description);                                                              // 836\n    });                                                                                                               // 837\n  },                                                                                                                  // 838\n                                                                                                                      // 839\n                                                                                                                      // 840\n  // Replace self._published with newResults (both are IdMaps), invoking observe                                      // 841\n  // callbacks on the multiplexer.                                                                                    // 842\n  // Replace self._unpublishedBuffer with newBuffer.                                                                  // 843\n  //                                                                                                                  // 844\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We                                       // 845\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict                                        // 846\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.                                          // 847\n  _publishNewResults: function (newResults, newBuffer) {                                                              // 848\n    var self = this;                                                                                                  // 849\n    Meteor._noYieldsAllowed(function () {                                                                             // 850\n                                                                                                                      // 851\n      // If the query is limited and there is a buffer, shut down so it doesn't                                       // 852\n      // stay in a way.                                                                                               // 853\n      if (self._limit) {                                                                                              // 854\n        self._unpublishedBuffer.clear();                                                                              // 855\n      }                                                                                                               // 856\n                                                                                                                      // 857\n      // First remove anything that's gone. Be careful not to modify                                                  // 858\n      // self._published while iterating over it.                                                                     // 859\n      var idsToRemove = [];                                                                                           // 860\n      self._published.forEach(function (doc, id) {                                                                    // 861\n        if (!newResults.has(id))                                                                                      // 862\n          idsToRemove.push(id);                                                                                       // 863\n      });                                                                                                             // 864\n      _.each(idsToRemove, function (id) {                                                                             // 865\n        self._removePublished(id);                                                                                    // 866\n      });                                                                                                             // 867\n                                                                                                                      // 868\n      // Now do adds and changes.                                                                                     // 869\n      // If self has a buffer and limit, the new fetched result will be                                               // 870\n      // limited correctly as the query has sort specifier.                                                           // 871\n      newResults.forEach(function (doc, id) {                                                                         // 872\n        self._handleDoc(id, doc);                                                                                     // 873\n      });                                                                                                             // 874\n                                                                                                                      // 875\n      // Sanity-check that everything we tried to put into _published ended up                                        // 876\n      // there.                                                                                                       // 877\n      // XXX if this is slow, remove it later                                                                         // 878\n      if (self._published.size() !== newResults.size()) {                                                             // 879\n        throw Error(                                                                                                  // 880\n          \"The Mongo server and the Meteor query disagree on how \" +                                                  // 881\n            \"many documents match your query. Maybe it is hitting a Mongo \" +                                         // 882\n            \"edge case? The query is: \" +                                                                             // 883\n            EJSON.stringify(self._cursorDescription.selector));                                                       // 884\n      }                                                                                                               // 885\n      self._published.forEach(function (doc, id) {                                                                    // 886\n        if (!newResults.has(id))                                                                                      // 887\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);                                         // 888\n      });                                                                                                             // 889\n                                                                                                                      // 890\n      // Finally, replace the buffer                                                                                  // 891\n      newBuffer.forEach(function (doc, id) {                                                                          // 892\n        self._addBuffered(id, doc);                                                                                   // 893\n      });                                                                                                             // 894\n                                                                                                                      // 895\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;                                                      // 896\n    });                                                                                                               // 897\n  },                                                                                                                  // 898\n                                                                                                                      // 899\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so                                      // 900\n  // it shouldn't actually be possible to call it until the multiplexer is                                            // 901\n  // ready.                                                                                                           // 902\n  //                                                                                                                  // 903\n  // It's important to check self._stopped after every call in this file that                                         // 904\n  // can yield!                                                                                                       // 905\n  stop: function () {                                                                                                 // 906\n    var self = this;                                                                                                  // 907\n    if (self._stopped)                                                                                                // 908\n      return;                                                                                                         // 909\n    self._stopped = true;                                                                                             // 910\n    _.each(self._stopHandles, function (handle) {                                                                     // 911\n      handle.stop();                                                                                                  // 912\n    });                                                                                                               // 913\n                                                                                                                      // 914\n    // Note: we *don't* use multiplexer.onFlush here because this stop                                                // 915\n    // callback is actually invoked by the multiplexer itself when it has                                             // 916\n    // determined that there are no handles left. So nothing is actually going                                        // 917\n    // to get flushed (and it's probably not valid to call methods on the                                             // 918\n    // dying multiplexer).                                                                                            // 919\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {                                                      // 920\n      w.committed();  // maybe yields?                                                                                // 921\n    });                                                                                                               // 922\n    self._writesToCommitWhenWeReachSteady = null;                                                                     // 923\n                                                                                                                      // 924\n    // Proactively drop references to potentially big things.                                                         // 925\n    self._published = null;                                                                                           // 926\n    self._unpublishedBuffer = null;                                                                                   // 927\n    self._needToFetch = null;                                                                                         // 928\n    self._currentlyFetching = null;                                                                                   // 929\n    self._oplogEntryHandle = null;                                                                                    // 930\n    self._listenersHandle = null;                                                                                     // 931\n                                                                                                                      // 932\n    Package.facts && Package.facts.Facts.incrementServerFact(                                                         // 933\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);                                                                 // 934\n  },                                                                                                                  // 935\n                                                                                                                      // 936\n  _registerPhaseChange: function (phase) {                                                                            // 937\n    var self = this;                                                                                                  // 938\n    Meteor._noYieldsAllowed(function () {                                                                             // 939\n      var now = new Date;                                                                                             // 940\n                                                                                                                      // 941\n      if (self._phase) {                                                                                              // 942\n        var timeDiff = now - self._phaseStartTime;                                                                    // 943\n        Package.facts && Package.facts.Facts.incrementServerFact(                                                     // 944\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);                                     // 945\n      }                                                                                                               // 946\n                                                                                                                      // 947\n      self._phase = phase;                                                                                            // 948\n      self._phaseStartTime = now;                                                                                     // 949\n    });                                                                                                               // 950\n  }                                                                                                                   // 951\n});                                                                                                                   // 952\n                                                                                                                      // 953\n// Does our oplog tailing code support this cursor? For now, we are being very                                        // 954\n// conservative and allowing only simple queries with simple options.                                                 // 955\n// (This is a \"static method\".)                                                                                       // 956\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {                                          // 957\n  // First, check the options.                                                                                        // 958\n  var options = cursorDescription.options;                                                                            // 959\n                                                                                                                      // 960\n  // Did the user say no explicitly?                                                                                  // 961\n  if (options._disableOplog)                                                                                          // 962\n    return false;                                                                                                     // 963\n                                                                                                                      // 964\n  // skip is not supported: to support it we would need to keep track of all                                          // 965\n  // \"skipped\" documents or at least their ids.                                                                       // 966\n  // limit w/o a sort specifier is not supported: current implementation needs a                                      // 967\n  // deterministic way to order documents.                                                                            // 968\n  if (options.skip || (options.limit && !options.sort)) return false;                                                 // 969\n                                                                                                                      // 970\n  // If a fields projection option is given check if it is supported by                                               // 971\n  // minimongo (some operators are not supported).                                                                    // 972\n  if (options.fields) {                                                                                               // 973\n    try {                                                                                                             // 974\n      LocalCollection._checkSupportedProjection(options.fields);                                                      // 975\n    } catch (e) {                                                                                                     // 976\n      if (e.name === \"MinimongoError\")                                                                                // 977\n        return false;                                                                                                 // 978\n      else                                                                                                            // 979\n        throw e;                                                                                                      // 980\n    }                                                                                                                 // 981\n  }                                                                                                                   // 982\n                                                                                                                      // 983\n  // We don't allow the following selectors:                                                                          // 984\n  //   - $where (not confident that we provide the same JS environment                                                // 985\n  //             as Mongo, and can yield!)                                                                            // 986\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility                                         // 987\n  //            of returning an ID multiple times, though even polling maybe                                          // 988\n  //            have a bug there)                                                                                     // 989\n  //           XXX: once we support it, we would need to think more on how we                                         // 990\n  //           initialize the comparators when we create the driver.                                                  // 991\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();                                                               // 992\n};                                                                                                                    // 993\n                                                                                                                      // 994\nvar modifierCanBeDirectlyApplied = function (modifier) {                                                              // 995\n  return _.all(modifier, function (fields, operation) {                                                               // 996\n    return _.all(fields, function (value, field) {                                                                    // 997\n      return !/EJSON\\$/.test(field);                                                                                  // 998\n    });                                                                                                               // 999\n  });                                                                                                                 // 1000\n};                                                                                                                    // 1001\n                                                                                                                      // 1002\nMongoInternals.OplogObserveDriver = OplogObserveDriver;                                                               // 1003\n                                                                                                                      // 1004\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/local_collection_driver.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nLocalCollectionDriver = function () {                                                                                 // 1\n  var self = this;                                                                                                    // 2\n  self.noConnCollections = {};                                                                                        // 3\n};                                                                                                                    // 4\n                                                                                                                      // 5\nvar ensureCollection = function (name, collections) {                                                                 // 6\n  if (!(name in collections))                                                                                         // 7\n    collections[name] = new LocalCollection(name);                                                                    // 8\n  return collections[name];                                                                                           // 9\n};                                                                                                                    // 10\n                                                                                                                      // 11\n_.extend(LocalCollectionDriver.prototype, {                                                                           // 12\n  open: function (name, conn) {                                                                                       // 13\n    var self = this;                                                                                                  // 14\n    if (!name)                                                                                                        // 15\n      return new LocalCollection;                                                                                     // 16\n    if (! conn) {                                                                                                     // 17\n      return ensureCollection(name, self.noConnCollections);                                                          // 18\n    }                                                                                                                 // 19\n    if (! conn._mongo_livedata_collections)                                                                           // 20\n      conn._mongo_livedata_collections = {};                                                                          // 21\n    // XXX is there a way to keep track of a connection's collections without                                         // 22\n    // dangling it off the connection object?                                                                         // 23\n    return ensureCollection(name, conn._mongo_livedata_collections);                                                  // 24\n  }                                                                                                                   // 25\n});                                                                                                                   // 26\n                                                                                                                      // 27\n// singleton                                                                                                          // 28\nLocalCollectionDriver = new LocalCollectionDriver;                                                                    // 29\n                                                                                                                      // 30\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/remote_collection_driver.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nMongoInternals.RemoteCollectionDriver = function (                                                                    // 1\n  mongo_url, options) {                                                                                               // 2\n  var self = this;                                                                                                    // 3\n  self.mongo = new MongoConnection(mongo_url, options);                                                               // 4\n};                                                                                                                    // 5\n                                                                                                                      // 6\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {                                                           // 7\n  open: function (name) {                                                                                             // 8\n    var self = this;                                                                                                  // 9\n    var ret = {};                                                                                                     // 10\n    _.each(                                                                                                           // 11\n      ['find', 'findOne', 'insert', 'update', 'upsert',                                                               // 12\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',                                             // 13\n       'dropCollection', 'rawCollection'],                                                                            // 14\n      function (m) {                                                                                                  // 15\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);                                                             // 16\n      });                                                                                                             // 17\n    return ret;                                                                                                       // 18\n  }                                                                                                                   // 19\n});                                                                                                                   // 20\n                                                                                                                      // 21\n                                                                                                                      // 22\n// Create the singleton RemoteCollectionDriver only on demand, so we                                                  // 23\n// only require Mongo configuration if it's actually used (eg, not if                                                 // 24\n// you're only trying to receive data from a remote DDP server.)                                                      // 25\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {                                                   // 26\n  var connectionOptions = {};                                                                                         // 27\n                                                                                                                      // 28\n  var mongoUrl = process.env.MONGO_URL;                                                                               // 29\n                                                                                                                      // 30\n  if (process.env.MONGO_OPLOG_URL) {                                                                                  // 31\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;                                                         // 32\n  }                                                                                                                   // 33\n                                                                                                                      // 34\n  if (! mongoUrl)                                                                                                     // 35\n    throw new Error(\"MONGO_URL must be set in environment\");                                                          // 36\n                                                                                                                      // 37\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);                                      // 38\n});                                                                                                                   // 39\n                                                                                                                      // 40\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/collection.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// options.connection, if given, is a LivedataClient or LivedataServer                                                // 1\n// XXX presently there is no way to destroy/clean up a Collection                                                     // 2\n                                                                                                                      // 3\n/**                                                                                                                   // 4\n * @summary Namespace for MongoDB-related items                                                                       // 5\n * @namespace                                                                                                         // 6\n */                                                                                                                   // 7\nMongo = {};                                                                                                           // 8\n                                                                                                                      // 9\n/**                                                                                                                   // 10\n * @summary Constructor for a Collection                                                                              // 11\n * @locus Anywhere                                                                                                    // 12\n * @instancename collection                                                                                           // 13\n * @class                                                                                                             // 14\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]                                                                                          // 16\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n                                                                                                                      // 19\n - **`'STRING'`**: random strings                                                                                     // 20\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                                 // 21\n                                                                                                                      // 22\nThe default id generation technique is `'STRING'`.                                                                    // 23\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n */                                                                                                                   // 25\nMongo.Collection = function (name, options) {                                                                         // 26\n  var self = this;                                                                                                    // 27\n  if (! (self instanceof Mongo.Collection))                                                                           // 28\n    throw new Error('use \"new\" to construct a Mongo.Collection');                                                     // 29\n                                                                                                                      // 30\n  if (!name && (name !== null)) {                                                                                     // 31\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +                                         // 32\n                  \"saved or synchronized over the network. (Pass null for \" +                                         // 33\n                  \"the collection name to turn off this warning.)\");                                                  // 34\n    name = null;                                                                                                      // 35\n  }                                                                                                                   // 36\n                                                                                                                      // 37\n  if (name !== null && typeof name !== \"string\") {                                                                    // 38\n    throw new Error(                                                                                                  // 39\n      \"First argument to new Mongo.Collection must be a string or null\");                                             // 40\n  }                                                                                                                   // 41\n                                                                                                                      // 42\n  if (options && options.methods) {                                                                                   // 43\n    // Backwards compatibility hack with original signature (which passed                                             // 44\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"                                // 45\n    // method.)                                                                                                       // 46\n    // XXX remove before 1.0                                                                                          // 47\n    options = {connection: options};                                                                                  // 48\n  }                                                                                                                   // 49\n  // Backwards compatibility: \"connection\" used to be called \"manager\".                                               // 50\n  if (options && options.manager && !options.connection) {                                                            // 51\n    options.connection = options.manager;                                                                             // 52\n  }                                                                                                                   // 53\n  options = _.extend({                                                                                                // 54\n    connection: undefined,                                                                                            // 55\n    idGeneration: 'STRING',                                                                                           // 56\n    transform: null,                                                                                                  // 57\n    _driver: undefined,                                                                                               // 58\n    _preventAutopublish: false                                                                                        // 59\n  }, options);                                                                                                        // 60\n                                                                                                                      // 61\n  switch (options.idGeneration) {                                                                                     // 62\n  case 'MONGO':                                                                                                       // 63\n    self._makeNewID = function () {                                                                                   // 64\n      var src = name                                                                                                  // 65\n            ? DDP.randomStream('/collection/' + name)                                                                 // 66\n            : Random.insecure;                                                                                        // 67\n      return new Mongo.ObjectID(src.hexString(24));                                                                   // 68\n    };                                                                                                                // 69\n    break;                                                                                                            // 70\n  case 'STRING':                                                                                                      // 71\n  default:                                                                                                            // 72\n    self._makeNewID = function () {                                                                                   // 73\n      var src = name                                                                                                  // 74\n            ? DDP.randomStream('/collection/' + name)                                                                 // 75\n            : Random.insecure;                                                                                        // 76\n      return src.id();                                                                                                // 77\n    };                                                                                                                // 78\n    break;                                                                                                            // 79\n  }                                                                                                                   // 80\n                                                                                                                      // 81\n  self._transform = LocalCollection.wrapTransform(options.transform);                                                 // 82\n                                                                                                                      // 83\n  if (! name || options.connection === null)                                                                          // 84\n    // note: nameless collections never have a connection                                                             // 85\n    self._connection = null;                                                                                          // 86\n  else if (options.connection)                                                                                        // 87\n    self._connection = options.connection;                                                                            // 88\n  else if (Meteor.isClient)                                                                                           // 89\n    self._connection = Meteor.connection;                                                                             // 90\n  else                                                                                                                // 91\n    self._connection = Meteor.server;                                                                                 // 92\n                                                                                                                      // 93\n  if (!options._driver) {                                                                                             // 94\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                         // 95\n    // null. We should fully support the case of \"want to use a Mongo-backed                                          // 96\n    // collection from Node code without webapp\", but we don't yet.                                                   // 97\n    // #MeteorServerNull                                                                                              // 98\n    if (name && self._connection === Meteor.server &&                                                                 // 99\n        typeof MongoInternals !== \"undefined\" &&                                                                      // 100\n        MongoInternals.defaultRemoteCollectionDriver) {                                                               // 101\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                               // 102\n    } else {                                                                                                          // 103\n      options._driver = LocalCollectionDriver;                                                                        // 104\n    }                                                                                                                 // 105\n  }                                                                                                                   // 106\n                                                                                                                      // 107\n  self._collection = options._driver.open(name, self._connection);                                                    // 108\n  self._name = name;                                                                                                  // 109\n  self._driver = options._driver;                                                                                     // 110\n                                                                                                                      // 111\n  if (self._connection && self._connection.registerStore) {                                                           // 112\n    // OK, we're going to be a slave, replicating some remote                                                         // 113\n    // database, except possibly with some temporary divergence while                                                 // 114\n    // we have unacknowledged RPC's.                                                                                  // 115\n    var ok = self._connection.registerStore(name, {                                                                   // 116\n      // Called at the beginning of a batch of updates. batchSize is the number                                       // 117\n      // of update calls to expect.                                                                                   // 118\n      //                                                                                                              // 119\n      // XXX This interface is pretty janky. reset probably ought to go back to                                       // 120\n      // being its own function, and callers shouldn't have to calculate                                              // 121\n      // batchSize. The optimization of not calling pause/remove should be                                            // 122\n      // delayed until later: the first call to update() should buffer its                                            // 123\n      // message, and then we can either directly apply it at endUpdate time if                                       // 124\n      // it was the only update, or do pauseObservers/apply/apply at the next                                         // 125\n      // update() if there's another one.                                                                             // 126\n      beginUpdate: function (batchSize, reset) {                                                                      // 127\n        // pause observers so users don't see flicker when updating several                                           // 128\n        // objects at once (including the post-reconnect reset-and-reapply                                            // 129\n        // stage), and so that a re-sorting of a query can take advantage of the                                      // 130\n        // full _diffQuery moved calculation instead of applying change one at a                                      // 131\n        // time.                                                                                                      // 132\n        if (batchSize > 1 || reset)                                                                                   // 133\n          self._collection.pauseObservers();                                                                          // 134\n                                                                                                                      // 135\n        if (reset)                                                                                                    // 136\n          self._collection.remove({});                                                                                // 137\n      },                                                                                                              // 138\n                                                                                                                      // 139\n      // Apply an update.                                                                                             // 140\n      // XXX better specify this interface (not in terms of a wire message)?                                          // 141\n      update: function (msg) {                                                                                        // 142\n        var mongoId = MongoID.idParse(msg.id);                                                                        // 143\n        var doc = self._collection.findOne(mongoId);                                                                  // 144\n                                                                                                                      // 145\n        // Is this a \"replace the whole doc\" message coming from the quiescence                                       // 146\n        // of method writes to an object? (Note that 'undefined' is a valid                                           // 147\n        // value meaning \"remove it\".)                                                                                // 148\n        if (msg.msg === 'replace') {                                                                                  // 149\n          var replace = msg.replace;                                                                                  // 150\n          if (!replace) {                                                                                             // 151\n            if (doc)                                                                                                  // 152\n              self._collection.remove(mongoId);                                                                       // 153\n          } else if (!doc) {                                                                                          // 154\n            self._collection.insert(replace);                                                                         // 155\n          } else {                                                                                                    // 156\n            // XXX check that replace has no $ ops                                                                    // 157\n            self._collection.update(mongoId, replace);                                                                // 158\n          }                                                                                                           // 159\n          return;                                                                                                     // 160\n        } else if (msg.msg === 'added') {                                                                             // 161\n          if (doc) {                                                                                                  // 162\n            throw new Error(\"Expected not to find a document already present for an add\");                            // 163\n          }                                                                                                           // 164\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));                                              // 165\n        } else if (msg.msg === 'removed') {                                                                           // 166\n          if (!doc)                                                                                                   // 167\n            throw new Error(\"Expected to find a document already present for removed\");                               // 168\n          self._collection.remove(mongoId);                                                                           // 169\n        } else if (msg.msg === 'changed') {                                                                           // 170\n          if (!doc)                                                                                                   // 171\n            throw new Error(\"Expected to find a document to change\");                                                 // 172\n          if (!_.isEmpty(msg.fields)) {                                                                               // 173\n            var modifier = {};                                                                                        // 174\n            _.each(msg.fields, function (value, key) {                                                                // 175\n              if (value === undefined) {                                                                              // 176\n                if (!modifier.$unset)                                                                                 // 177\n                  modifier.$unset = {};                                                                               // 178\n                modifier.$unset[key] = 1;                                                                             // 179\n              } else {                                                                                                // 180\n                if (!modifier.$set)                                                                                   // 181\n                  modifier.$set = {};                                                                                 // 182\n                modifier.$set[key] = value;                                                                           // 183\n              }                                                                                                       // 184\n            });                                                                                                       // 185\n            self._collection.update(mongoId, modifier);                                                               // 186\n          }                                                                                                           // 187\n        } else {                                                                                                      // 188\n          throw new Error(\"I don't know how to deal with this message\");                                              // 189\n        }                                                                                                             // 190\n                                                                                                                      // 191\n      },                                                                                                              // 192\n                                                                                                                      // 193\n      // Called at the end of a batch of updates.                                                                     // 194\n      endUpdate: function () {                                                                                        // 195\n        self._collection.resumeObservers();                                                                           // 196\n      },                                                                                                              // 197\n                                                                                                                      // 198\n      // Called around method stub invocations to capture the original versions                                       // 199\n      // of modified documents.                                                                                       // 200\n      saveOriginals: function () {                                                                                    // 201\n        self._collection.saveOriginals();                                                                             // 202\n      },                                                                                                              // 203\n      retrieveOriginals: function () {                                                                                // 204\n        return self._collection.retrieveOriginals();                                                                  // 205\n      },                                                                                                              // 206\n                                                                                                                      // 207\n      // Used to preserve current versions of documents across a store reset.                                         // 208\n      getDoc: function(id) {                                                                                          // 209\n        return self.findOne(id);                                                                                      // 210\n      },                                                                                                              // 211\n    });                                                                                                               // 212\n                                                                                                                      // 213\n    if (!ok)                                                                                                          // 214\n      throw new Error(\"There is already a collection named '\" + name + \"'\");                                          // 215\n  }                                                                                                                   // 216\n                                                                                                                      // 217\n  self._defineMutationMethods();                                                                                      // 218\n                                                                                                                      // 219\n  // autopublish                                                                                                      // 220\n  if (Package.autopublish && !options._preventAutopublish && self._connection                                         // 221\n      && self._connection.publish) {                                                                                  // 222\n    self._connection.publish(null, function () {                                                                      // 223\n      return self.find();                                                                                             // 224\n    }, {is_auto: true});                                                                                              // 225\n  }                                                                                                                   // 226\n};                                                                                                                    // 227\n                                                                                                                      // 228\n///                                                                                                                   // 229\n/// Main collection API                                                                                               // 230\n///                                                                                                                   // 231\n                                                                                                                      // 232\n                                                                                                                      // 233\n_.extend(Mongo.Collection.prototype, {                                                                                // 234\n                                                                                                                      // 235\n  _getFindSelector: function (args) {                                                                                 // 236\n    if (args.length == 0)                                                                                             // 237\n      return {};                                                                                                      // 238\n    else                                                                                                              // 239\n      return args[0];                                                                                                 // 240\n  },                                                                                                                  // 241\n                                                                                                                      // 242\n  _getFindOptions: function (args) {                                                                                  // 243\n    var self = this;                                                                                                  // 244\n    if (args.length < 2) {                                                                                            // 245\n      return { transform: self._transform };                                                                          // 246\n    } else {                                                                                                          // 247\n      check(args[1], Match.Optional(Match.ObjectIncluding({                                                           // 248\n        fields: Match.Optional(Match.OneOf(Object, undefined)),                                                       // 249\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),                                                  // 250\n        limit: Match.Optional(Match.OneOf(Number, undefined)),                                                        // 251\n        skip: Match.Optional(Match.OneOf(Number, undefined))                                                          // 252\n     })));                                                                                                            // 253\n                                                                                                                      // 254\n      return _.extend({                                                                                               // 255\n        transform: self._transform                                                                                    // 256\n      }, args[1]);                                                                                                    // 257\n    }                                                                                                                 // 258\n  },                                                                                                                  // 259\n                                                                                                                      // 260\n  /**                                                                                                                 // 261\n   * @summary Find the documents in a collection that match the selector.                                             // 262\n   * @locus Anywhere                                                                                                  // 263\n   * @method find                                                                                                     // 264\n   * @memberOf Mongo.Collection                                                                                       // 265\n   * @instance                                                                                                        // 266\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       // 267\n   * @param {Object} [options]                                                                                        // 268\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     // 269\n   * @param {Number} options.skip Number of results to skip at the beginning                                          // 270\n   * @param {Number} options.limit Maximum number of results to return                                                // 271\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           // 272\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity               // 273\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Mongo.Cursor}                                                                                          // 275\n   */                                                                                                                 // 276\n  find: function (/* selector, options */) {                                                                          // 277\n    // Collection.find() (return all docs) behaves differently                                                        // 278\n    // from Collection.find(undefined) (return 0 docs).  so be                                                        // 279\n    // careful about the length of arguments.                                                                         // 280\n    var self = this;                                                                                                  // 281\n    var argArray = _.toArray(arguments);                                                                              // 282\n    return self._collection.find(self._getFindSelector(argArray),                                                     // 283\n                                 self._getFindOptions(argArray));                                                     // 284\n  },                                                                                                                  // 285\n                                                                                                                      // 286\n  /**                                                                                                                 // 287\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.                // 288\n   * @locus Anywhere                                                                                                  // 289\n   * @method findOne                                                                                                  // 290\n   * @memberOf Mongo.Collection                                                                                       // 291\n   * @instance                                                                                                        // 292\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       // 293\n   * @param {Object} [options]                                                                                        // 294\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     // 295\n   * @param {Number} options.skip Number of results to skip at the beginning                                          // 296\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           // 297\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                   // 298\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}                                                                                                // 300\n   */                                                                                                                 // 301\n  findOne: function (/* selector, options */) {                                                                       // 302\n    var self = this;                                                                                                  // 303\n    var argArray = _.toArray(arguments);                                                                              // 304\n    return self._collection.findOne(self._getFindSelector(argArray),                                                  // 305\n                                    self._getFindOptions(argArray));                                                  // 306\n  }                                                                                                                   // 307\n                                                                                                                      // 308\n});                                                                                                                   // 309\n                                                                                                                      // 310\nMongo.Collection._publishCursor = function (cursor, sub, collection) {                                                // 311\n  var observeHandle = cursor.observeChanges({                                                                         // 312\n    added: function (id, fields) {                                                                                    // 313\n      sub.added(collection, id, fields);                                                                              // 314\n    },                                                                                                                // 315\n    changed: function (id, fields) {                                                                                  // 316\n      sub.changed(collection, id, fields);                                                                            // 317\n    },                                                                                                                // 318\n    removed: function (id) {                                                                                          // 319\n      sub.removed(collection, id);                                                                                    // 320\n    }                                                                                                                 // 321\n  });                                                                                                                 // 322\n                                                                                                                      // 323\n  // We don't call sub.ready() here: it gets called in livedata_server, after                                         // 324\n  // possibly calling _publishCursor on multiple returned cursors.                                                    // 325\n                                                                                                                      // 326\n  // register stop callback (expects lambda w/ no args).                                                              // 327\n  sub.onStop(function () {observeHandle.stop();});                                                                    // 328\n};                                                                                                                    // 329\n                                                                                                                      // 330\n// protect against dangerous selectors.  falsey and {_id: falsey} are both                                            // 331\n// likely programmer error, and not what you want, particularly for destructive                                       // 332\n// operations.  JS regexps don't serialize over DDP but can be trivially                                              // 333\n// replaced by $regex.                                                                                                // 334\nMongo.Collection._rewriteSelector = function (selector) {                                                             // 335\n  // shorthand -- scalars match _id                                                                                   // 336\n  if (LocalCollection._selectorIsId(selector))                                                                        // 337\n    selector = {_id: selector};                                                                                       // 338\n                                                                                                                      // 339\n  if (_.isArray(selector)) {                                                                                          // 340\n    // This is consistent with the Mongo console itself; if we don't do this                                          // 341\n    // check passing an empty array ends up selecting all items                                                       // 342\n    throw new Error(\"Mongo selector can't be an array.\");                                                             // 343\n  }                                                                                                                   // 344\n                                                                                                                      // 345\n  if (!selector || (('_id' in selector) && !selector._id))                                                            // 346\n    // can't match anything                                                                                           // 347\n    return {_id: Random.id()};                                                                                        // 348\n                                                                                                                      // 349\n  var ret = {};                                                                                                       // 350\n  _.each(selector, function (value, key) {                                                                            // 351\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                // 352\n    if (value instanceof RegExp) {                                                                                    // 353\n      ret[key] = convertRegexpToMongoSelector(value);                                                                 // 354\n    } else if (value && value.$regex instanceof RegExp) {                                                             // 355\n      ret[key] = convertRegexpToMongoSelector(value.$regex);                                                          // 356\n      // if value is {$regex: /foo/, $options: ...} then $options                                                     // 357\n      // override the ones set on $regex.                                                                             // 358\n      if (value.$options !== undefined)                                                                               // 359\n        ret[key].$options = value.$options;                                                                           // 360\n    }                                                                                                                 // 361\n    else if (_.contains(['$or','$and','$nor'], key)) {                                                                // 362\n      // Translate lower levels of $and/$or/$nor                                                                      // 363\n      ret[key] = _.map(value, function (v) {                                                                          // 364\n        return Mongo.Collection._rewriteSelector(v);                                                                  // 365\n      });                                                                                                             // 366\n    } else {                                                                                                          // 367\n      ret[key] = value;                                                                                               // 368\n    }                                                                                                                 // 369\n  });                                                                                                                 // 370\n  return ret;                                                                                                         // 371\n};                                                                                                                    // 372\n                                                                                                                      // 373\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                                 // 374\n// selector                                                                                                           // 375\nvar convertRegexpToMongoSelector = function (regexp) {                                                                // 376\n  check(regexp, RegExp); // safety belt                                                                               // 377\n                                                                                                                      // 378\n  var selector = {$regex: regexp.source};                                                                             // 379\n  var regexOptions = '';                                                                                              // 380\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                                                // 381\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                  // 382\n  if (regexp.ignoreCase)                                                                                              // 383\n    regexOptions += 'i';                                                                                              // 384\n  if (regexp.multiline)                                                                                               // 385\n    regexOptions += 'm';                                                                                              // 386\n  if (regexOptions)                                                                                                   // 387\n    selector.$options = regexOptions;                                                                                 // 388\n                                                                                                                      // 389\n  return selector;                                                                                                    // 390\n};                                                                                                                    // 391\n                                                                                                                      // 392\nvar throwIfSelectorIsNotId = function (selector, methodName) {                                                        // 393\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                      // 394\n    throw new Meteor.Error(                                                                                           // 395\n      403, \"Not permitted. Untrusted code may only \" + methodName +                                                   // 396\n        \" documents by ID.\");                                                                                         // 397\n  }                                                                                                                   // 398\n};                                                                                                                    // 399\n                                                                                                                      // 400\n// 'insert' immediately returns the inserted document's new _id.                                                      // 401\n// The others return values immediately if you are in a stub, an in-memory                                            // 402\n// unmanaged collection, or a mongo-backed collection and you don't pass a                                            // 403\n// callback. 'update' and 'remove' return the number of affected                                                      // 404\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                        // 405\n// insert happened, 'insertedId'.                                                                                     // 406\n//                                                                                                                    // 407\n// Otherwise, the semantics are exactly like other methods: they take                                                 // 408\n// a callback as an optional last argument; if no callback is                                                         // 409\n// provided, they block until the operation is complete, and throw an                                                 // 410\n// exception if it fails; if a callback is provided, then they don't                                                  // 411\n// necessarily block, and they call the callback when they finish with error and                                      // 412\n// result arguments.  (The insert method provides the document ID as its result;                                      // 413\n// update and remove provide the number of affected docs as the result; upsert                                        // 414\n// provides an object with numberAffected and maybe insertedId.)                                                      // 415\n//                                                                                                                    // 416\n// On the client, blocking is impossible, so if a callback                                                            // 417\n// isn't provided, they just return immediately and any error                                                         // 418\n// information is lost.                                                                                               // 419\n//                                                                                                                    // 420\n// There's one more tweak. On the client, if you don't provide a                                                      // 421\n// callback, then if there is an error, a message will be logged with                                                 // 422\n// Meteor._debug.                                                                                                     // 423\n//                                                                                                                    // 424\n// The intent (though this is actually determined by the underlying                                                   // 425\n// drivers) is that the operations should be done synchronously, not                                                  // 426\n// generating their result until the database has acknowledged                                                        // 427\n// them. In the future maybe we should provide a flag to turn this                                                    // 428\n// off.                                                                                                               // 429\n                                                                                                                      // 430\n/**                                                                                                                   // 431\n * @summary Insert a document in the collection.  Returns its unique _id.                                             // 432\n * @locus Anywhere                                                                                                    // 433\n * @method  insert                                                                                                    // 434\n * @memberOf Mongo.Collection                                                                                         // 435\n * @instance                                                                                                          // 436\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */                                                                                                                   // 439\n                                                                                                                      // 440\n/**                                                                                                                   // 441\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.                 // 442\n * @locus Anywhere                                                                                                    // 443\n * @method update                                                                                                     // 444\n * @memberOf Mongo.Collection                                                                                         // 445\n * @instance                                                                                                          // 446\n * @param {MongoSelector} selector Specifies which documents to modify                                                // 447\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              // 448\n * @param {Object} [options]                                                                                          // 449\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                      // 451\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   // 453\n                                                                                                                      // 454\n/**                                                                                                                   // 455\n * @summary Remove documents from the collection                                                                      // 456\n * @locus Anywhere                                                                                                    // 457\n * @method remove                                                                                                     // 458\n * @memberOf Mongo.Collection                                                                                         // 459\n * @instance                                                                                                          // 460\n * @param {MongoSelector} selector Specifies which documents to remove                                                // 461\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.                   // 462\n */                                                                                                                   // 463\n                                                                                                                      // 464\n_.each([\"insert\", \"update\", \"remove\"], function (name) {                                                              // 465\n  Mongo.Collection.prototype[name] = function (/* arguments */) {                                                     // 466\n    var self = this;                                                                                                  // 467\n    var args = _.toArray(arguments);                                                                                  // 468\n    var callback;                                                                                                     // 469\n    var insertId;                                                                                                     // 470\n    var ret;                                                                                                          // 471\n                                                                                                                      // 472\n    // Pull off any callback (or perhaps a 'callback' variable that was passed                                        // 473\n    // in undefined, like how 'upsert' does it).                                                                      // 474\n    if (args.length &&                                                                                                // 475\n        (args[args.length - 1] === undefined ||                                                                       // 476\n         args[args.length - 1] instanceof Function)) {                                                                // 477\n      callback = args.pop();                                                                                          // 478\n    }                                                                                                                 // 479\n                                                                                                                      // 480\n    if (name === \"insert\") {                                                                                          // 481\n      if (!args.length)                                                                                               // 482\n        throw new Error(\"insert requires an argument\");                                                               // 483\n      // shallow-copy the document and generate an ID                                                                 // 484\n      args[0] = _.extend({}, args[0]);                                                                                // 485\n      if ('_id' in args[0]) {                                                                                         // 486\n        insertId = args[0]._id;                                                                                       // 487\n        if (!insertId || !(typeof insertId === 'string'                                                               // 488\n              || insertId instanceof Mongo.ObjectID))                                                                 // 489\n          throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");                // 490\n      } else {                                                                                                        // 491\n        var generateId = true;                                                                                        // 492\n        // Don't generate the id if we're the client and the 'outermost' call                                         // 493\n        // This optimization saves us passing both the randomSeed and the id                                          // 494\n        // Passing both is redundant.                                                                                 // 495\n        if (self._connection && self._connection !== Meteor.server) {                                                 // 496\n          var enclosing = DDP._CurrentInvocation.get();                                                               // 497\n          if (!enclosing) {                                                                                           // 498\n            generateId = false;                                                                                       // 499\n          }                                                                                                           // 500\n        }                                                                                                             // 501\n        if (generateId) {                                                                                             // 502\n          insertId = args[0]._id = self._makeNewID();                                                                 // 503\n        }                                                                                                             // 504\n      }                                                                                                               // 505\n    } else {                                                                                                          // 506\n      args[0] = Mongo.Collection._rewriteSelector(args[0]);                                                           // 507\n                                                                                                                      // 508\n      if (name === \"update\") {                                                                                        // 509\n        // Mutate args but copy the original options object. We need to add                                           // 510\n        // insertedId to options, but don't want to mutate the caller's options                                       // 511\n        // object. We need to mutate `args` because we pass `args` into the                                           // 512\n        // driver below.                                                                                              // 513\n        var options = args[2] = _.clone(args[2]) || {};                                                               // 514\n        if (options && typeof options !== \"function\" && options.upsert) {                                             // 515\n          // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                         // 516\n          if (options.insertedId) {                                                                                   // 517\n            if (!(typeof options.insertedId === 'string'                                                              // 518\n                  || options.insertedId instanceof Mongo.ObjectID))                                                   // 519\n              throw new Error(\"insertedId must be string or ObjectID\");                                               // 520\n          } else if (! args[0]._id) {                                                                                 // 521\n            options.insertedId = self._makeNewID();                                                                   // 522\n          }                                                                                                           // 523\n        }                                                                                                             // 524\n      }                                                                                                               // 525\n    }                                                                                                                 // 526\n                                                                                                                      // 527\n    // On inserts, always return the id that we generated; on all other                                               // 528\n    // operations, just return the result from the collection.                                                        // 529\n    var chooseReturnValueFromCollectionResult = function (result) {                                                   // 530\n      if (name === \"insert\") {                                                                                        // 531\n        if (!insertId && result) {                                                                                    // 532\n          insertId = result;                                                                                          // 533\n        }                                                                                                             // 534\n        return insertId;                                                                                              // 535\n      } else {                                                                                                        // 536\n        return result;                                                                                                // 537\n      }                                                                                                               // 538\n    };                                                                                                                // 539\n                                                                                                                      // 540\n    var wrappedCallback;                                                                                              // 541\n    if (callback) {                                                                                                   // 542\n      wrappedCallback = function (error, result) {                                                                    // 543\n        callback(error, ! error && chooseReturnValueFromCollectionResult(result));                                    // 544\n      };                                                                                                              // 545\n    }                                                                                                                 // 546\n                                                                                                                      // 547\n    // XXX see #MeteorServerNull                                                                                      // 548\n    if (self._connection && self._connection !== Meteor.server) {                                                     // 549\n      // just remote to another endpoint, propagate return value or                                                   // 550\n      // exception.                                                                                                   // 551\n                                                                                                                      // 552\n      var enclosing = DDP._CurrentInvocation.get();                                                                   // 553\n      var alreadyInSimulation = enclosing && enclosing.isSimulation;                                                  // 554\n                                                                                                                      // 555\n      if (Meteor.isClient && !wrappedCallback && ! alreadyInSimulation) {                                             // 556\n        // Client can't block, so it can't report errors by exception,                                                // 557\n        // only by callback. If they forget the callback, give them a                                                 // 558\n        // default one that logs the error, so they aren't totally                                                    // 559\n        // baffled if their writes don't work because their database is                                               // 560\n        // down.                                                                                                      // 561\n        // Don't give a default callback in simulation, because inside stubs we                                       // 562\n        // want to return the results from the local collection immediately and                                       // 563\n        // not force a callback.                                                                                      // 564\n        wrappedCallback = function (err) {                                                                            // 565\n          if (err)                                                                                                    // 566\n            Meteor._debug(name + \" failed: \" + (err.reason || err.stack));                                            // 567\n        };                                                                                                            // 568\n      }                                                                                                               // 569\n                                                                                                                      // 570\n      if (!alreadyInSimulation && name !== \"insert\") {                                                                // 571\n        // If we're about to actually send an RPC, we should throw an error if                                        // 572\n        // this is a non-ID selector, because the mutation methods only allow                                         // 573\n        // single-ID selectors. (If we don't throw here, we'll see flicker.)                                          // 574\n        throwIfSelectorIsNotId(args[0], name);                                                                        // 575\n      }                                                                                                               // 576\n                                                                                                                      // 577\n      ret = chooseReturnValueFromCollectionResult(                                                                    // 578\n        self._connection.apply(self._prefix + name, args, {returnStubValue: true}, wrappedCallback)                   // 579\n      );                                                                                                              // 580\n                                                                                                                      // 581\n    } else {                                                                                                          // 582\n      // it's my collection.  descend into the collection object                                                      // 583\n      // and propagate any exception.                                                                                 // 584\n      args.push(wrappedCallback);                                                                                     // 585\n      try {                                                                                                           // 586\n        // If the user provided a callback and the collection implements this                                         // 587\n        // operation asynchronously, then queryRet will be undefined, and the                                         // 588\n        // result will be returned through the callback instead.                                                      // 589\n        var queryRet = self._collection[name].apply(self._collection, args);                                          // 590\n        ret = chooseReturnValueFromCollectionResult(queryRet);                                                        // 591\n      } catch (e) {                                                                                                   // 592\n        if (callback) {                                                                                               // 593\n          callback(e);                                                                                                // 594\n          return null;                                                                                                // 595\n        }                                                                                                             // 596\n        throw e;                                                                                                      // 597\n      }                                                                                                               // 598\n    }                                                                                                                 // 599\n                                                                                                                      // 600\n    // both sync and async, unless we threw an exception, return ret                                                  // 601\n    // (new document ID for insert, num affected for update/remove, object with                                       // 602\n    // numberAffected and maybe insertedId for upsert).                                                               // 603\n    return ret;                                                                                                       // 604\n  };                                                                                                                  // 605\n});                                                                                                                   // 606\n                                                                                                                      // 607\n/**                                                                                                                   // 608\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere                                                                                                    // 610\n * @param {MongoSelector} selector Specifies which documents to modify                                                // 611\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              // 612\n * @param {Object} [options]                                                                                          // 613\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   // 616\nMongo.Collection.prototype.upsert = function (selector, modifier,                                                     // 617\n                                               options, callback) {                                                   // 618\n  var self = this;                                                                                                    // 619\n  if (! callback && typeof options === \"function\") {                                                                  // 620\n    callback = options;                                                                                               // 621\n    options = {};                                                                                                     // 622\n  }                                                                                                                   // 623\n  return self.update(selector, modifier,                                                                              // 624\n              _.extend({}, options, { _returnObject: true, upsert: true }),                                           // 625\n              callback);                                                                                              // 626\n};                                                                                                                    // 627\n                                                                                                                      // 628\n// We'll actually design an index API later. For now, we just pass through to                                         // 629\n// Mongo's, but make it synchronous.                                                                                  // 630\nMongo.Collection.prototype._ensureIndex = function (index, options) {                                                 // 631\n  var self = this;                                                                                                    // 632\n  if (!self._collection._ensureIndex)                                                                                 // 633\n    throw new Error(\"Can only call _ensureIndex on server collections\");                                              // 634\n  self._collection._ensureIndex(index, options);                                                                      // 635\n};                                                                                                                    // 636\nMongo.Collection.prototype._dropIndex = function (index) {                                                            // 637\n  var self = this;                                                                                                    // 638\n  if (!self._collection._dropIndex)                                                                                   // 639\n    throw new Error(\"Can only call _dropIndex on server collections\");                                                // 640\n  self._collection._dropIndex(index);                                                                                 // 641\n};                                                                                                                    // 642\nMongo.Collection.prototype._dropCollection = function () {                                                            // 643\n  var self = this;                                                                                                    // 644\n  if (!self._collection.dropCollection)                                                                               // 645\n    throw new Error(\"Can only call _dropCollection on server collections\");                                           // 646\n  self._collection.dropCollection();                                                                                  // 647\n};                                                                                                                    // 648\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                              // 649\n  var self = this;                                                                                                    // 650\n  if (!self._collection._createCappedCollection)                                                                      // 651\n    throw new Error(\"Can only call _createCappedCollection on server collections\");                                   // 652\n  self._collection._createCappedCollection(byteSize, maxDocuments);                                                   // 653\n};                                                                                                                    // 654\n                                                                                                                      // 655\n/**                                                                                                                   // 656\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      // 658\n */                                                                                                                   // 659\nMongo.Collection.prototype.rawCollection = function () {                                                              // 660\n  var self = this;                                                                                                    // 661\n  if (! self._collection.rawCollection) {                                                                             // 662\n    throw new Error(\"Can only call rawCollection on server collections\");                                             // 663\n  }                                                                                                                   // 664\n  return self._collection.rawCollection();                                                                            // 665\n};                                                                                                                    // 666\n                                                                                                                      // 667\n/**                                                                                                                   // 668\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      // 670\n */                                                                                                                   // 671\nMongo.Collection.prototype.rawDatabase = function () {                                                                // 672\n  var self = this;                                                                                                    // 673\n  if (! (self._driver.mongo && self._driver.mongo.db)) {                                                              // 674\n    throw new Error(\"Can only call rawDatabase on server collections\");                                               // 675\n  }                                                                                                                   // 676\n  return self._driver.mongo.db;                                                                                       // 677\n};                                                                                                                    // 678\n                                                                                                                      // 679\n                                                                                                                      // 680\n/**                                                                                                                   // 681\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere                                                                                                    // 683\n * @class                                                                                                             // 684\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create             // 685\n */                                                                                                                   // 686\nMongo.ObjectID = MongoID.ObjectID;                                                                                    // 687\n                                                                                                                      // 688\n/**                                                                                                                   // 689\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.            // 690\n * @class                                                                                                             // 691\n * @instanceName cursor                                                                                               // 692\n */                                                                                                                   // 693\nMongo.Cursor = LocalCollection.Cursor;                                                                                // 694\n                                                                                                                      // 695\n/**                                                                                                                   // 696\n * @deprecated in 0.9.1                                                                                               // 697\n */                                                                                                                   // 698\nMongo.Collection.Cursor = Mongo.Cursor;                                                                               // 699\n                                                                                                                      // 700\n/**                                                                                                                   // 701\n * @deprecated in 0.9.1                                                                                               // 702\n */                                                                                                                   // 703\nMongo.Collection.ObjectID = Mongo.ObjectID;                                                                           // 704\n                                                                                                                      // 705\n///                                                                                                                   // 706\n/// Remote methods and access control.                                                                                // 707\n///                                                                                                                   // 708\n                                                                                                                      // 709\n// Restrict default mutators on collection. allow() and deny() take the                                               // 710\n// same options:                                                                                                      // 711\n//                                                                                                                    // 712\n// options.insert {Function(userId, doc)}                                                                             // 713\n//   return true to allow/deny adding this document                                                                   // 714\n//                                                                                                                    // 715\n// options.update {Function(userId, docs, fields, modifier)}                                                          // 716\n//   return true to allow/deny updating these documents.                                                              // 717\n//   `fields` is passed as an array of fields that are to be modified                                                 // 718\n//                                                                                                                    // 719\n// options.remove {Function(userId, docs)}                                                                            // 720\n//   return true to allow/deny removing these documents                                                               // 721\n//                                                                                                                    // 722\n// options.fetch {Array}                                                                                              // 723\n//   Fields to fetch for these validators. If any call to allow or deny                                               // 724\n//   does not have this option then all fields are loaded.                                                            // 725\n//                                                                                                                    // 726\n// allow and deny can be called multiple times. The validators are                                                    // 727\n// evaluated as follows:                                                                                              // 728\n// - If neither deny() nor allow() has been called on the collection,                                                 // 729\n//   then the request is allowed if and only if the \"insecure\" smart                                                  // 730\n//   package is in use.                                                                                               // 731\n// - Otherwise, if any deny() function returns true, the request is denied.                                           // 732\n// - Otherwise, if any allow() function returns true, the request is allowed.                                         // 733\n// - Otherwise, the request is denied.                                                                                // 734\n//                                                                                                                    // 735\n// Meteor may call your deny() and allow() functions in any order, and may not                                        // 736\n// call all of them if it is able to make a decision without calling them all                                         // 737\n// (so don't include side effects).                                                                                   // 738\n                                                                                                                      // 739\n(function () {                                                                                                        // 740\n  var addValidator = function(allowOrDeny, options) {                                                                 // 741\n    // validate keys                                                                                                  // 742\n    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];                                            // 743\n    _.each(_.keys(options), function (key) {                                                                          // 744\n      if (!_.contains(VALID_KEYS, key))                                                                               // 745\n        throw new Error(allowOrDeny + \": Invalid key: \" + key);                                                       // 746\n    });                                                                                                               // 747\n                                                                                                                      // 748\n    var self = this;                                                                                                  // 749\n    self._restricted = true;                                                                                          // 750\n                                                                                                                      // 751\n    _.each(['insert', 'update', 'remove'], function (name) {                                                          // 752\n      if (options.hasOwnProperty(name)) {                                                                             // 753\n        if (!(options[name] instanceof Function)) {                                                                   // 754\n          throw new Error(allowOrDeny + \": Value for `\" + name + \"` must be a function\");                             // 755\n        }                                                                                                             // 756\n                                                                                                                      // 757\n        // If the transform is specified at all (including as 'null') in this                                         // 758\n        // call, then take that; otherwise, take the transform from the                                               // 759\n        // collection.                                                                                                // 760\n        if (options.transform === undefined) {                                                                        // 761\n          options[name].transform = self._transform;  // already wrapped                                              // 762\n        } else {                                                                                                      // 763\n          options[name].transform = LocalCollection.wrapTransform(                                                    // 764\n            options.transform);                                                                                       // 765\n        }                                                                                                             // 766\n                                                                                                                      // 767\n        self._validators[name][allowOrDeny].push(options[name]);                                                      // 768\n      }                                                                                                               // 769\n    });                                                                                                               // 770\n                                                                                                                      // 771\n    // Only update the fetch fields if we're passed things that affect                                                // 772\n    // fetching. This way allow({}) and allow({insert: f}) don't result in                                            // 773\n    // setting fetchAllFields                                                                                         // 774\n    if (options.update || options.remove || options.fetch) {                                                          // 775\n      if (options.fetch && !(options.fetch instanceof Array)) {                                                       // 776\n        throw new Error(allowOrDeny + \": Value for `fetch` must be an array\");                                        // 777\n      }                                                                                                               // 778\n      self._updateFetch(options.fetch);                                                                               // 779\n    }                                                                                                                 // 780\n  };                                                                                                                  // 781\n                                                                                                                      // 782\n  /**                                                                                                                 // 783\n   * @summary Allow users to write directly to this collection from client code, subject to limitations you define.   // 784\n   * @locus Server                                                                                                    // 785\n   * @param {Object} options                                                                                          // 786\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */                                                                                                                 // 790\n  Mongo.Collection.prototype.allow = function(options) {                                                              // 791\n    addValidator.call(this, 'allow', options);                                                                        // 792\n  };                                                                                                                  // 793\n                                                                                                                      // 794\n  /**                                                                                                                 // 795\n   * @summary Override `allow` rules.                                                                                 // 796\n   * @locus Server                                                                                                    // 797\n   * @param {Object} options                                                                                          // 798\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */                                                                                                                 // 802\n  Mongo.Collection.prototype.deny = function(options) {                                                               // 803\n    addValidator.call(this, 'deny', options);                                                                         // 804\n  };                                                                                                                  // 805\n})();                                                                                                                 // 806\n                                                                                                                      // 807\n                                                                                                                      // 808\nMongo.Collection.prototype._defineMutationMethods = function() {                                                      // 809\n  var self = this;                                                                                                    // 810\n                                                                                                                      // 811\n  // set to true once we call any allow or deny methods. If true, use                                                 // 812\n  // allow/deny semantics. If false, use insecure mode semantics.                                                     // 813\n  self._restricted = false;                                                                                           // 814\n                                                                                                                      // 815\n  // Insecure mode (default to allowing writes). Defaults to 'undefined' which                                        // 816\n  // means insecure iff the insecure package is loaded. This property can be                                          // 817\n  // overriden by tests or packages wishing to change insecure mode behavior of                                       // 818\n  // their collections.                                                                                               // 819\n  self._insecure = undefined;                                                                                         // 820\n                                                                                                                      // 821\n  self._validators = {                                                                                                // 822\n    insert: {allow: [], deny: []},                                                                                    // 823\n    update: {allow: [], deny: []},                                                                                    // 824\n    remove: {allow: [], deny: []},                                                                                    // 825\n    upsert: {allow: [], deny: []}, // dummy arrays; can't set these!                                                  // 826\n    fetch: [],                                                                                                        // 827\n    fetchAllFields: false                                                                                             // 828\n  };                                                                                                                  // 829\n                                                                                                                      // 830\n  if (!self._name)                                                                                                    // 831\n    return; // anonymous collection                                                                                   // 832\n                                                                                                                      // 833\n  // XXX Think about method namespacing. Maybe methods should be                                                      // 834\n  // \"Meteor:Mongo:insert/NAME\"?                                                                                      // 835\n  self._prefix = '/' + self._name + '/';                                                                              // 836\n                                                                                                                      // 837\n  // mutation methods                                                                                                 // 838\n  if (self._connection) {                                                                                             // 839\n    var m = {};                                                                                                       // 840\n                                                                                                                      // 841\n    _.each(['insert', 'update', 'remove'], function (method) {                                                        // 842\n      m[self._prefix + method] = function (/* ... */) {                                                               // 843\n        // All the methods do their own validation, instead of using check().                                         // 844\n        check(arguments, [Match.Any]);                                                                                // 845\n        var args = _.toArray(arguments);                                                                              // 846\n        try {                                                                                                         // 847\n          // For an insert, if the client didn't specify an _id, generate one                                         // 848\n          // now; because this uses DDP.randomStream, it will be consistent with                                      // 849\n          // what the client generated. We generate it now rather than later so                                       // 850\n          // that if (eg) an allow/deny rule does an insert to the same                                               // 851\n          // collection (not that it really should), the generated _id will                                           // 852\n          // still be the first use of the stream and will be consistent.                                             // 853\n          //                                                                                                          // 854\n          // However, we don't actually stick the _id onto the document yet,                                          // 855\n          // because we want allow/deny rules to be able to differentiate                                             // 856\n          // between arbitrary client-specified _id fields and merely                                                 // 857\n          // client-controlled-via-randomSeed fields.                                                                 // 858\n          var generatedId = null;                                                                                     // 859\n          if (method === \"insert\" && !_.has(args[0], '_id')) {                                                        // 860\n            generatedId = self._makeNewID();                                                                          // 861\n          }                                                                                                           // 862\n                                                                                                                      // 863\n          if (this.isSimulation) {                                                                                    // 864\n            // In a client simulation, you can do any mutation (even with a                                           // 865\n            // complex selector).                                                                                     // 866\n            if (generatedId !== null)                                                                                 // 867\n              args[0]._id = generatedId;                                                                              // 868\n            return self._collection[method].apply(                                                                    // 869\n              self._collection, args);                                                                                // 870\n          }                                                                                                           // 871\n                                                                                                                      // 872\n          // This is the server receiving a method call from the client.                                              // 873\n                                                                                                                      // 874\n          // We don't allow arbitrary selectors in mutations from the client: only                                    // 875\n          // single-ID selectors.                                                                                     // 876\n          if (method !== 'insert')                                                                                    // 877\n            throwIfSelectorIsNotId(args[0], method);                                                                  // 878\n                                                                                                                      // 879\n          if (self._restricted) {                                                                                     // 880\n            // short circuit if there is no way it will pass.                                                         // 881\n            if (self._validators[method].allow.length === 0) {                                                        // 882\n              throw new Meteor.Error(                                                                                 // 883\n                403, \"Access denied. No allow validators set on restricted \" +                                        // 884\n                  \"collection for method '\" + method + \"'.\");                                                         // 885\n            }                                                                                                         // 886\n                                                                                                                      // 887\n            var validatedMethodName =                                                                                 // 888\n                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);                                    // 889\n            args.unshift(this.userId);                                                                                // 890\n            method === 'insert' && args.push(generatedId);                                                            // 891\n            return self[validatedMethodName].apply(self, args);                                                       // 892\n          } else if (self._isInsecure()) {                                                                            // 893\n            if (generatedId !== null)                                                                                 // 894\n              args[0]._id = generatedId;                                                                              // 895\n            // In insecure mode, allow any mutation (with a simple selector).                                         // 896\n            // XXX This is kind of bogus.  Instead of blindly passing whatever                                        // 897\n            //     we get from the network to this function, we should actually                                       // 898\n            //     know the correct arguments for the function and pass just                                          // 899\n            //     them.  For example, if you have an extraneous extra null                                           // 900\n            //     argument and this is Mongo on the server, the .wrapAsync'd                                         // 901\n            //     functions like update will get confused and pass the                                               // 902\n            //     \"fut.resolver()\" in the wrong slot, where _update will never                                       // 903\n            //     invoke it. Bam, broken DDP connection.  Probably should just                                       // 904\n            //     take this whole method and write it three times, invoking                                          // 905\n            //     helpers for the common code.                                                                       // 906\n            return self._collection[method].apply(self._collection, args);                                            // 907\n          } else {                                                                                                    // 908\n            // In secure mode, if we haven't called allow or deny, then nothing                                       // 909\n            // is permitted.                                                                                          // 910\n            throw new Meteor.Error(403, \"Access denied\");                                                             // 911\n          }                                                                                                           // 912\n        } catch (e) {                                                                                                 // 913\n          if (e.name === 'MongoError' || e.name === 'MinimongoError') {                                               // 914\n            throw new Meteor.Error(409, e.toString());                                                                // 915\n          } else {                                                                                                    // 916\n            throw e;                                                                                                  // 917\n          }                                                                                                           // 918\n        }                                                                                                             // 919\n      };                                                                                                              // 920\n    });                                                                                                               // 921\n    // Minimongo on the server gets no stubs; instead, by default                                                     // 922\n    // it wait()s until its result is ready, yielding.                                                                // 923\n    // This matches the behavior of macromongo on the server better.                                                  // 924\n    // XXX see #MeteorServerNull                                                                                      // 925\n    if (Meteor.isClient || self._connection === Meteor.server)                                                        // 926\n      self._connection.methods(m);                                                                                    // 927\n  }                                                                                                                   // 928\n};                                                                                                                    // 929\n                                                                                                                      // 930\n                                                                                                                      // 931\nMongo.Collection.prototype._updateFetch = function (fields) {                                                         // 932\n  var self = this;                                                                                                    // 933\n                                                                                                                      // 934\n  if (!self._validators.fetchAllFields) {                                                                             // 935\n    if (fields) {                                                                                                     // 936\n      self._validators.fetch = _.union(self._validators.fetch, fields);                                               // 937\n    } else {                                                                                                          // 938\n      self._validators.fetchAllFields = true;                                                                         // 939\n      // clear fetch just to make sure we don't accidentally read it                                                  // 940\n      self._validators.fetch = null;                                                                                  // 941\n    }                                                                                                                 // 942\n  }                                                                                                                   // 943\n};                                                                                                                    // 944\n                                                                                                                      // 945\nMongo.Collection.prototype._isInsecure = function () {                                                                // 946\n  var self = this;                                                                                                    // 947\n  if (self._insecure === undefined)                                                                                   // 948\n    return !!Package.insecure;                                                                                        // 949\n  return self._insecure;                                                                                              // 950\n};                                                                                                                    // 951\n                                                                                                                      // 952\nvar docToValidate = function (validator, doc, generatedId) {                                                          // 953\n  var ret = doc;                                                                                                      // 954\n  if (validator.transform) {                                                                                          // 955\n    ret = EJSON.clone(doc);                                                                                           // 956\n    // If you set a server-side transform on your collection, then you don't get                                      // 957\n    // to tell the difference between \"client specified the ID\" and \"server                                           // 958\n    // generated the ID\", because transforms expect to get _id.  If you want to                                       // 959\n    // do that check, you can do it with a specific                                                                   // 960\n    // `C.allow({insert: f, transform: null})` validator.                                                             // 961\n    if (generatedId !== null) {                                                                                       // 962\n      ret._id = generatedId;                                                                                          // 963\n    }                                                                                                                 // 964\n    ret = validator.transform(ret);                                                                                   // 965\n  }                                                                                                                   // 966\n  return ret;                                                                                                         // 967\n};                                                                                                                    // 968\n                                                                                                                      // 969\nMongo.Collection.prototype._validatedInsert = function (userId, doc,                                                  // 970\n                                                         generatedId) {                                               // 971\n  var self = this;                                                                                                    // 972\n                                                                                                                      // 973\n  // call user validators.                                                                                            // 974\n  // Any deny returns true means denied.                                                                              // 975\n  if (_.any(self._validators.insert.deny, function(validator) {                                                       // 976\n    return validator(userId, docToValidate(validator, doc, generatedId));                                             // 977\n  })) {                                                                                                               // 978\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 979\n  }                                                                                                                   // 980\n  // Any allow returns true means proceed. Throw error if they all fail.                                              // 981\n  if (_.all(self._validators.insert.allow, function(validator) {                                                      // 982\n    return !validator(userId, docToValidate(validator, doc, generatedId));                                            // 983\n  })) {                                                                                                               // 984\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 985\n  }                                                                                                                   // 986\n                                                                                                                      // 987\n  // If we generated an ID above, insert it now: after the validation, but                                            // 988\n  // before actually inserting.                                                                                       // 989\n  if (generatedId !== null)                                                                                           // 990\n    doc._id = generatedId;                                                                                            // 991\n                                                                                                                      // 992\n  self._collection.insert.call(self._collection, doc);                                                                // 993\n};                                                                                                                    // 994\n                                                                                                                      // 995\nvar transformDoc = function (validator, doc) {                                                                        // 996\n  if (validator.transform)                                                                                            // 997\n    return validator.transform(doc);                                                                                  // 998\n  return doc;                                                                                                         // 999\n};                                                                                                                    // 1000\n                                                                                                                      // 1001\n// Simulate a mongo `update` operation while validating that the access                                               // 1002\n// control rules set by calls to `allow/deny` are satisfied. If all                                                   // 1003\n// pass, rewrite the mongo operation to use $in to set the list of                                                    // 1004\n// document ids to change ##ValidatedChange                                                                           // 1005\nMongo.Collection.prototype._validatedUpdate = function(                                                               // 1006\n    userId, selector, mutator, options) {                                                                             // 1007\n  var self = this;                                                                                                    // 1008\n                                                                                                                      // 1009\n  check(mutator, Object);                                                                                             // 1010\n                                                                                                                      // 1011\n  options = _.clone(options) || {};                                                                                   // 1012\n                                                                                                                      // 1013\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))                                                        // 1014\n    throw new Error(\"validated update should be of a single ID\");                                                     // 1015\n                                                                                                                      // 1016\n  // We don't support upserts because they don't fit nicely into allow/deny                                           // 1017\n  // rules.                                                                                                           // 1018\n  if (options.upsert)                                                                                                 // 1019\n    throw new Meteor.Error(403, \"Access denied. Upserts not \" +                                                       // 1020\n                           \"allowed in a restricted collection.\");                                                    // 1021\n                                                                                                                      // 1022\n  var noReplaceError = \"Access denied. In a restricted collection you can only\" +                                     // 1023\n        \" update documents, not replace them. Use a Mongo update operator, such \" +                                   // 1024\n        \"as '$set'.\";                                                                                                 // 1025\n                                                                                                                      // 1026\n  // compute modified fields                                                                                          // 1027\n  var fields = [];                                                                                                    // 1028\n  if (_.isEmpty(mutator)) {                                                                                           // 1029\n    throw new Meteor.Error(403, noReplaceError);                                                                      // 1030\n  }                                                                                                                   // 1031\n  _.each(mutator, function (params, op) {                                                                             // 1032\n    if (op.charAt(0) !== '$') {                                                                                       // 1033\n      throw new Meteor.Error(403, noReplaceError);                                                                    // 1034\n    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {                                                               // 1035\n      throw new Meteor.Error(                                                                                         // 1036\n        403, \"Access denied. Operator \" + op + \" not allowed in a restricted collection.\");                           // 1037\n    } else {                                                                                                          // 1038\n      _.each(_.keys(params), function (field) {                                                                       // 1039\n        // treat dotted fields as if they are replacing their                                                         // 1040\n        // top-level part                                                                                             // 1041\n        if (field.indexOf('.') !== -1)                                                                                // 1042\n          field = field.substring(0, field.indexOf('.'));                                                             // 1043\n                                                                                                                      // 1044\n        // record the field we are trying to change                                                                   // 1045\n        if (!_.contains(fields, field))                                                                               // 1046\n          fields.push(field);                                                                                         // 1047\n      });                                                                                                             // 1048\n    }                                                                                                                 // 1049\n  });                                                                                                                 // 1050\n                                                                                                                      // 1051\n  var findOptions = {transform: null};                                                                                // 1052\n  if (!self._validators.fetchAllFields) {                                                                             // 1053\n    findOptions.fields = {};                                                                                          // 1054\n    _.each(self._validators.fetch, function(fieldName) {                                                              // 1055\n      findOptions.fields[fieldName] = 1;                                                                              // 1056\n    });                                                                                                               // 1057\n  }                                                                                                                   // 1058\n                                                                                                                      // 1059\n  var doc = self._collection.findOne(selector, findOptions);                                                          // 1060\n  if (!doc)  // none satisfied!                                                                                       // 1061\n    return 0;                                                                                                         // 1062\n                                                                                                                      // 1063\n  // call user validators.                                                                                            // 1064\n  // Any deny returns true means denied.                                                                              // 1065\n  if (_.any(self._validators.update.deny, function(validator) {                                                       // 1066\n    var factoriedDoc = transformDoc(validator, doc);                                                                  // 1067\n    return validator(userId,                                                                                          // 1068\n                     factoriedDoc,                                                                                    // 1069\n                     fields,                                                                                          // 1070\n                     mutator);                                                                                        // 1071\n  })) {                                                                                                               // 1072\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1073\n  }                                                                                                                   // 1074\n  // Any allow returns true means proceed. Throw error if they all fail.                                              // 1075\n  if (_.all(self._validators.update.allow, function(validator) {                                                      // 1076\n    var factoriedDoc = transformDoc(validator, doc);                                                                  // 1077\n    return !validator(userId,                                                                                         // 1078\n                      factoriedDoc,                                                                                   // 1079\n                      fields,                                                                                         // 1080\n                      mutator);                                                                                       // 1081\n  })) {                                                                                                               // 1082\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1083\n  }                                                                                                                   // 1084\n                                                                                                                      // 1085\n  options._forbidReplace = true;                                                                                      // 1086\n                                                                                                                      // 1087\n  // Back when we supported arbitrary client-provided selectors, we actually                                          // 1088\n  // rewrote the selector to include an _id clause before passing to Mongo to                                         // 1089\n  // avoid races, but since selector is guaranteed to already just be an ID, we                                       // 1090\n  // don't have to any more.                                                                                          // 1091\n                                                                                                                      // 1092\n  return self._collection.update.call(                                                                                // 1093\n    self._collection, selector, mutator, options);                                                                    // 1094\n};                                                                                                                    // 1095\n                                                                                                                      // 1096\n// Only allow these operations in validated updates. Specifically                                                     // 1097\n// whitelist operations, rather than blacklist, so new complex                                                        // 1098\n// operations that are added aren't automatically allowed. A complex                                                  // 1099\n// operation is one that does more than just modify its target                                                        // 1100\n// field. For now this contains all update operations except '$rename'.                                               // 1101\n// http://docs.mongodb.org/manual/reference/operators/#update                                                         // 1102\nvar ALLOWED_UPDATE_OPERATIONS = {                                                                                     // 1103\n  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,                                                 // 1104\n  $pushAll:1, $push:1, $bit:1                                                                                         // 1105\n};                                                                                                                    // 1106\n                                                                                                                      // 1107\n// Simulate a mongo `remove` operation while validating access control                                                // 1108\n// rules. See #ValidatedChange                                                                                        // 1109\nMongo.Collection.prototype._validatedRemove = function(userId, selector) {                                            // 1110\n  var self = this;                                                                                                    // 1111\n                                                                                                                      // 1112\n  var findOptions = {transform: null};                                                                                // 1113\n  if (!self._validators.fetchAllFields) {                                                                             // 1114\n    findOptions.fields = {};                                                                                          // 1115\n    _.each(self._validators.fetch, function(fieldName) {                                                              // 1116\n      findOptions.fields[fieldName] = 1;                                                                              // 1117\n    });                                                                                                               // 1118\n  }                                                                                                                   // 1119\n                                                                                                                      // 1120\n  var doc = self._collection.findOne(selector, findOptions);                                                          // 1121\n  if (!doc)                                                                                                           // 1122\n    return 0;                                                                                                         // 1123\n                                                                                                                      // 1124\n  // call user validators.                                                                                            // 1125\n  // Any deny returns true means denied.                                                                              // 1126\n  if (_.any(self._validators.remove.deny, function(validator) {                                                       // 1127\n    return validator(userId, transformDoc(validator, doc));                                                           // 1128\n  })) {                                                                                                               // 1129\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1130\n  }                                                                                                                   // 1131\n  // Any allow returns true means proceed. Throw error if they all fail.                                              // 1132\n  if (_.all(self._validators.remove.allow, function(validator) {                                                      // 1133\n    return !validator(userId, transformDoc(validator, doc));                                                          // 1134\n  })) {                                                                                                               // 1135\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1136\n  }                                                                                                                   // 1137\n                                                                                                                      // 1138\n  // Back when we supported arbitrary client-provided selectors, we actually                                          // 1139\n  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to                                      // 1140\n  // Mongo to avoid races, but since selector is guaranteed to already just be                                        // 1141\n  // an ID, we don't have to any more.                                                                                // 1142\n                                                                                                                      // 1143\n  return self._collection.remove.call(self._collection, selector);                                                    // 1144\n};                                                                                                                    // 1145\n                                                                                                                      // 1146\n/**                                                                                                                   // 1147\n * @deprecated in 0.9.1                                                                                               // 1148\n */                                                                                                                   // 1149\nMeteor.Collection = Mongo.Collection;                                                                                 // 1150\n                                                                                                                      // 1151\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.mongo = {\n  MongoInternals: MongoInternals,\n  MongoTest: MongoTest,\n  Mongo: Mongo\n};\n\n})();\n","servePath":"/packages/mongo.js","sourceMap":{"version":3,"sources":["/packages/mongo/mongo_driver.js","/packages/mongo/oplog_tailing.js","/packages/mongo/observe_multiplex.js","/packages/mongo/doc_fetcher.js","/packages/mongo/polling_observe_driver.js","/packages/mongo/oplog_observe_driver.js","/packages/mongo/local_collection_driver.js","/packages/mongo/remote_collection_driver.js","/packages/mongo/collection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;AC1zrlPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AChrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;AC3+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACvfile":"/packages/mongo.js","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]\n      && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = {db: {safe: true}, server: {}, replSet: {}};\n\n  // Set autoReconnect to true, unless passed on the URL. Why someone\n  // would want to set autoReconnect to false, I'm not really sure, but\n  // keeping this for backwards compatibility for now.\n  if (!(/[\\?&]auto_?[rR]econnect=/.test(url))) {\n    mongoOptions.server.auto_reconnect = true;\n  }\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // XXX maybe we should have a better way of allowing users to configure the\n  // underlying Mongo driver\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, db) {\n        if (err) {\n          throw err;\n        }\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig._state.master)\n          self._primary = db.serverConfig._state.master.name;\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return'](db);\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence)\n    return fence.beginWrite();\n  else\n    return {committed: function () {}};\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback)\n      callback(err, result);\n    else if (err)\n      throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && ! isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && (! knownId) && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod,\n        isModify, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (err, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject)\n            callback(err, result.numberAffected);\n          else\n            callback(err, result);\n        }\n      );\n    } else {\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result, extra) {\n          if (! err) {\n            if (result && options._returnObject) {\n              result = { numberAffected: result };\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && knownId &&\n                  ! extra.updatedExisting)\n                result.insertedId = knownId;\n            }\n          }\n          callback(err, result);\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function (mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in mod) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\n      \"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596)\n    return true;\n  if (err.err.indexOf(\"cannot change _id of a document\") === 0)\n    return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.err.indexOf(\"The _id field cannot be changed\") === 0)\n    return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while ((key = trail.shift())) {\n          if (typeof obj[key] !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err)\n                            callback(err);\n                          else if (result)\n                            callback(null, {\n                              numberAffected: result\n                            });\n                          else\n                            doConditionalInsert();\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    var replacementWithId = _.extend(\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n      newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result,\n                            insertedId: insertedId\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n}\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function () {\n    var self = this;\n    return self._synchronousCount().wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function () {\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,\n                                        { matcher: matcher });\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n","var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd')\n    return op.o._id;\n  else if (op.op === 'i')\n    return op.o._id;\n  else if (op.op === 'u')\n    return op.o2._id;\n  else if (op.op === 'c')\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +\n                EJSON.stringify(op));\n  else\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [\n      { op: {$in: ['i', 'u', 'd']} },\n      // drop collection\n      { op: 'c', 'o.drop': { $exists: true } },\n      { op: 'c', 'o.dropDatabase': 1 },\n    ]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    if (self._tailHandle)\n      self._tailHandle.stop();\n    // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err.stack);\n    });\n    var listenHandle = self._crossbar.listen(trigger, callback);\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n    self._readyFuture.wait();\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        var lastEntry = self._oplogLastEntryConnection.findOne(\n          OPLOG_COLLECTION, self._baseOplogSelector,\n          {fields: {ts: 1}, sort: {$natural: -1}});\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts)\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    }\n\n\n    // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n    var insertAfter = self._catchingUpFutures.length;\n    while (insertAfter - 1 > 0\n           && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n    var f = new Future;\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this;\n    // First, make sure that we're talking to the local database.\n    var mongodbUri = Npm.require('mongodb-uri');\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n    self._oplogTailConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n    // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n    self._oplogLastEntryConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n\n    // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    var f = new Future;\n    self._oplogLastEntryConnection.db.admin().command(\n      { ismaster: 1 }, f.resolver());\n    var isMasterDoc = f.wait();\n    if (!(isMasterDoc && isMasterDoc.documents && isMasterDoc.documents[0] &&\n          isMasterDoc.documents[0].setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // Find the last oplog entry.\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};\n      // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});\n\n    self._tailHandle = self._oplogTailConnection.tail(\n      cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      }\n    );\n    self._readyFuture.return();\n  },\n\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive)\n      return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            });\n\n            // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n            self._setLastProcessedTS(lastEntry.ts);\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&\n                doc.ns.substr(0, self._dbName.length + 1) ===\n                (self._dbName + '.'))) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),\n                         dropCollection: false,\n                         dropDatabase: false,\n                         op: doc};\n\n          // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger);\n\n          // Now that we've processed this operation, process pending\n          // sequencers.\n          if (!doc.ts)\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n    while (!_.isEmpty(self._catchingUpFutures)\n           && self._catchingUpFutures[0].ts.lessThanOrEqual(\n             self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n      sequencer.future.return();\n    }\n  }\n});\n","var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered'))\n    throw Error(\"must specified ordered\");\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future;\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered});\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function (/* ... */) {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n    if (!self._queue.safeToRunTask())\n      throw new Error(\n        \"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle;\n      // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n      self._sendAdds(handle);\n      --self._addHandleTasksScheduledButNotPerformed;\n    });\n    // *outside* the task, since otherwise we'd deadlock\n    self._readyFuture.wait();\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this;\n\n    // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n    if (!self._ready())\n      throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n    delete self._handles[id];\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {};\n\n    // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n    if (! self._ready() && ! options.fromQueryError)\n      throw Error(\"surprising _stop: not ready\");\n\n    // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n    self._onStop();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-multiplexers\", -1);\n\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n    self._handles = null;\n  },\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (self._ready())\n        throw Error(\"can't make ObserveMultiplex ready twice!\");\n      self._readyFuture.return();\n    });\n  },\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n    self._queue.runTask(function () {\n      if (self._ready())\n        throw Error(\"can't claim query has an error after it worked!\");\n      self._stop({fromQueryError: true});\n      self._readyFuture.throw(err);\n    });\n  },\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (!self._ready())\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered)\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];\n    else\n      return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles)\n        return;\n\n      // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n      // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n      if (!self._ready() &&\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      }\n\n      // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle)\n          return;\n        var callback = handle['_' + callbackName];\n        // clone arguments so that callbacks can mutate their arguments\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask())\n      throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add)\n      return;\n    // note: docs may be an _IdMap or an OrderedDict\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id))\n        throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered)\n        add(id, fields, null); // we're going in order, so add at end\n      else\n        add(id, fields);\n    });\n  }\n});\n\n\nvar nextObserveHandleId = 1;\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped)\n    return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nDocFetcher = function (mongoConnection) {\n  var self = this;\n  self._mongoConnection = mongoConnection;\n  // Map from cache key -> [callback]\n  self._callbacksForCacheKey = {};\n};\n\n_.extend(DocFetcher.prototype, {\n  // Fetches document \"id\" from collectionName, returning it or null if not\n  // found.\n  //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),\n  // DocFetcher may assume that they all return the same document. (It does\n  // not check to see if collectionName/id match.)\n  //\n  // You may assume that callback is never called synchronously (and in fact\n  // OplogObserveDriver does so).\n  fetch: function (collectionName, id, cacheKey, callback) {\n    var self = this;\n\n    check(collectionName, String);\n    // id is some sort of scalar\n    check(cacheKey, String);\n\n    // If there's already an in-progress fetch for this cache key, yield until\n    // it's done and return whatever it returns.\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {\n      self._callbacksForCacheKey[cacheKey].push(callback);\n      return;\n    }\n\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];\n\n    Fiber(function () {\n      try {\n        var doc = self._mongoConnection.findOne(\n          collectionName, {_id: id}) || null;\n        // Return doc to all relevant callbacks. Note that this array can\n        // continue to grow during callback excecution.\n        while (!_.isEmpty(callbacks)) {\n          // Clone the document so that the various calls to fetch don't return\n          // objects that are intertwingled with each other. Clone before\n          // popping the future, so that if clone throws, the error gets passed\n          // to the next callback.\n          var clonedDoc = EJSON.clone(doc);\n          callbacks.pop()(null, clonedDoc);\n        }\n      } catch (e) {\n        while (!_.isEmpty(callbacks)) {\n          callbacks.pop()(e);\n        }\n      } finally {\n        // XXX consider keeping the doc around for a period of time before\n        // removing from the cache\n        delete self._callbacksForCacheKey[cacheKey];\n      }\n    }).run();\n  }\n});\n\nMongoTest.DocFetcher = DocFetcher;\n","PollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled, 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in 50ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), 10 * 1000);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  var self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(\n    finishIfNeedToPollQuery(function () {\n      self._needToPollQuery();\n    })\n  ));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(\n      trigger, function (notification) {\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n          var op = notification.op;\n          if (notification.dropCollection || notification.dropDatabase) {\n            // Note: this call is not allowed to block on anything (especially\n            // on waiting for oplog entries to catch up) because that will block\n            // onOplogEntry!\n            self._needToPollQuery();\n          } else {\n            // All other operators should be handled depending on phase\n            if (self._phase === PHASE.QUERYING)\n              self._handleOplogEntryQuerying(op);\n            else\n              self._handleOplogEntrySteadyOrFetching(op);\n          }\n        }));\n      }\n    ));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(\n    self._cursorDescription, function (notification) {\n      // If we're not in a pre-fire write fence, we don't have to do anything.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (!fence || fence.fired)\n        return;\n\n      if (fence._oplogObserveDrivers) {\n        fence._oplogObserveDrivers[self._id] = self;\n        return;\n      }\n\n      fence._oplogObserveDrivers = {};\n      fence._oplogObserveDrivers[self._id] = self;\n\n      fence.onBeforeFire(function () {\n        var drivers = fence._oplogObserveDrivers;\n        delete fence._oplogObserveDrivers;\n\n        // This fence cannot fire until we've caught up to \"this point\" in the\n        // oplog, and all observers made it back to the steady state.\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n        _.each(drivers, function (driver) {\n          if (driver._stopped)\n            return;\n\n          var write = fence.beginWrite();\n          if (driver._phase === PHASE.STEADY) {\n            // Make sure that all of the callbacks have made it through the\n            // multiplexer and been delivered to ObserveHandles before committing\n            // writes.\n            driver._multiplexer.onFlush(function () {\n              write.committed();\n            });\n          } else {\n            driver._writesToCommitWhenWeReachSteady.push(write);\n          }\n        });\n      });\n    }\n  ));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n    function () {\n      self._needToPollQuery();\n    })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!_.isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            var maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          var maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING)\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap;\n          var waiting = 0;\n          var fut = new Future;\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(\n              self._cursorDescription.collectionName, id, cacheKey,\n              finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" +\n                                  err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING\n                             && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0)\n                    fut.return();\n                }\n              }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING)\n            return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING)\n          self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying();  // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit)\n            newResults.set(doc._id, doc);\n          else\n            newBuffer.set(doc._id, doc);\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields\n    if (self._stopped)\n      return;\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\n          \"The Mongo server and the Meteor query disagree on how \" +\n            \"many documents match your query. Maybe it is hitting a Mongo \" +\n            \"edge case? The query is: \" +\n            EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed();  // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  if (options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\")\n        return false;\n      else\n        throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;\n","LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n    });\n\n    if (!ok)\n      throw new Error(\"There is already a collection named '\" + name + \"'\");\n  }\n\n  self._defineMutationMethods();\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nvar convertRegexpToMongoSelector = function (regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\nvar throwIfSelectorIsNotId = function (selector, methodName) {\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    throw new Meteor.Error(\n      403, \"Not permitted. Untrusted code may only \" + methodName +\n        \" documents by ID.\");\n  }\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\n\n_.each([\"insert\", \"update\", \"remove\"], function (name) {\n  Mongo.Collection.prototype[name] = function (/* arguments */) {\n    var self = this;\n    var args = _.toArray(arguments);\n    var callback;\n    var insertId;\n    var ret;\n\n    // Pull off any callback (or perhaps a 'callback' variable that was passed\n    // in undefined, like how 'upsert' does it).\n    if (args.length &&\n        (args[args.length - 1] === undefined ||\n         args[args.length - 1] instanceof Function)) {\n      callback = args.pop();\n    }\n\n    if (name === \"insert\") {\n      if (!args.length)\n        throw new Error(\"insert requires an argument\");\n      // shallow-copy the document and generate an ID\n      args[0] = _.extend({}, args[0]);\n      if ('_id' in args[0]) {\n        insertId = args[0]._id;\n        if (!insertId || !(typeof insertId === 'string'\n              || insertId instanceof Mongo.ObjectID))\n          throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n      } else {\n        var generateId = true;\n        // Don't generate the id if we're the client and the 'outermost' call\n        // This optimization saves us passing both the randomSeed and the id\n        // Passing both is redundant.\n        if (self._connection && self._connection !== Meteor.server) {\n          var enclosing = DDP._CurrentInvocation.get();\n          if (!enclosing) {\n            generateId = false;\n          }\n        }\n        if (generateId) {\n          insertId = args[0]._id = self._makeNewID();\n        }\n      }\n    } else {\n      args[0] = Mongo.Collection._rewriteSelector(args[0]);\n\n      if (name === \"update\") {\n        // Mutate args but copy the original options object. We need to add\n        // insertedId to options, but don't want to mutate the caller's options\n        // object. We need to mutate `args` because we pass `args` into the\n        // driver below.\n        var options = args[2] = _.clone(args[2]) || {};\n        if (options && typeof options !== \"function\" && options.upsert) {\n          // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n          if (options.insertedId) {\n            if (!(typeof options.insertedId === 'string'\n                  || options.insertedId instanceof Mongo.ObjectID))\n              throw new Error(\"insertedId must be string or ObjectID\");\n          } else if (! args[0]._id) {\n            options.insertedId = self._makeNewID();\n          }\n        }\n      }\n    }\n\n    // On inserts, always return the id that we generated; on all other\n    // operations, just return the result from the collection.\n    var chooseReturnValueFromCollectionResult = function (result) {\n      if (name === \"insert\") {\n        if (!insertId && result) {\n          insertId = result;\n        }\n        return insertId;\n      } else {\n        return result;\n      }\n    };\n\n    var wrappedCallback;\n    if (callback) {\n      wrappedCallback = function (error, result) {\n        callback(error, ! error && chooseReturnValueFromCollectionResult(result));\n      };\n    }\n\n    // XXX see #MeteorServerNull\n    if (self._connection && self._connection !== Meteor.server) {\n      // just remote to another endpoint, propagate return value or\n      // exception.\n\n      var enclosing = DDP._CurrentInvocation.get();\n      var alreadyInSimulation = enclosing && enclosing.isSimulation;\n\n      if (Meteor.isClient && !wrappedCallback && ! alreadyInSimulation) {\n        // Client can't block, so it can't report errors by exception,\n        // only by callback. If they forget the callback, give them a\n        // default one that logs the error, so they aren't totally\n        // baffled if their writes don't work because their database is\n        // down.\n        // Don't give a default callback in simulation, because inside stubs we\n        // want to return the results from the local collection immediately and\n        // not force a callback.\n        wrappedCallback = function (err) {\n          if (err)\n            Meteor._debug(name + \" failed: \" + (err.reason || err.stack));\n        };\n      }\n\n      if (!alreadyInSimulation && name !== \"insert\") {\n        // If we're about to actually send an RPC, we should throw an error if\n        // this is a non-ID selector, because the mutation methods only allow\n        // single-ID selectors. (If we don't throw here, we'll see flicker.)\n        throwIfSelectorIsNotId(args[0], name);\n      }\n\n      ret = chooseReturnValueFromCollectionResult(\n        self._connection.apply(self._prefix + name, args, {returnStubValue: true}, wrappedCallback)\n      );\n\n    } else {\n      // it's my collection.  descend into the collection object\n      // and propagate any exception.\n      args.push(wrappedCallback);\n      try {\n        // If the user provided a callback and the collection implements this\n        // operation asynchronously, then queryRet will be undefined, and the\n        // result will be returned through the callback instead.\n        var queryRet = self._collection[name].apply(self._collection, args);\n        ret = chooseReturnValueFromCollectionResult(queryRet);\n      } catch (e) {\n        if (callback) {\n          callback(e);\n          return null;\n        }\n        throw e;\n      }\n    }\n\n    // both sync and async, unless we threw an exception, return ret\n    // (new document ID for insert, num affected for update/remove, object with\n    // numberAffected and maybe insertedId for upsert).\n    return ret;\n  };\n});\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function (selector, modifier,\n                                               options, callback) {\n  var self = this;\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  return self.update(selector, modifier,\n              _.extend({}, options, { _returnObject: true, upsert: true }),\n              callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n///\n/// Remote methods and access control.\n///\n\n// Restrict default mutators on collection. allow() and deny() take the\n// same options:\n//\n// options.insert {Function(userId, doc)}\n//   return true to allow/deny adding this document\n//\n// options.update {Function(userId, docs, fields, modifier)}\n//   return true to allow/deny updating these documents.\n//   `fields` is passed as an array of fields that are to be modified\n//\n// options.remove {Function(userId, docs)}\n//   return true to allow/deny removing these documents\n//\n// options.fetch {Array}\n//   Fields to fetch for these validators. If any call to allow or deny\n//   does not have this option then all fields are loaded.\n//\n// allow and deny can be called multiple times. The validators are\n// evaluated as follows:\n// - If neither deny() nor allow() has been called on the collection,\n//   then the request is allowed if and only if the \"insecure\" smart\n//   package is in use.\n// - Otherwise, if any deny() function returns true, the request is denied.\n// - Otherwise, if any allow() function returns true, the request is allowed.\n// - Otherwise, the request is denied.\n//\n// Meteor may call your deny() and allow() functions in any order, and may not\n// call all of them if it is able to make a decision without calling them all\n// (so don't include side effects).\n\n(function () {\n  var addValidator = function(allowOrDeny, options) {\n    // validate keys\n    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key))\n        throw new Error(allowOrDeny + \": Invalid key: \" + key);\n    });\n\n    var self = this;\n    self._restricted = true;\n\n    _.each(['insert', 'update', 'remove'], function (name) {\n      if (options.hasOwnProperty(name)) {\n        if (!(options[name] instanceof Function)) {\n          throw new Error(allowOrDeny + \": Value for `\" + name + \"` must be a function\");\n        }\n\n        // If the transform is specified at all (including as 'null') in this\n        // call, then take that; otherwise, take the transform from the\n        // collection.\n        if (options.transform === undefined) {\n          options[name].transform = self._transform;  // already wrapped\n        } else {\n          options[name].transform = LocalCollection.wrapTransform(\n            options.transform);\n        }\n\n        self._validators[name][allowOrDeny].push(options[name]);\n      }\n    });\n\n    // Only update the fetch fields if we're passed things that affect\n    // fetching. This way allow({}) and allow({insert: f}) don't result in\n    // setting fetchAllFields\n    if (options.update || options.remove || options.fetch) {\n      if (options.fetch && !(options.fetch instanceof Array)) {\n        throw new Error(allowOrDeny + \": Value for `fetch` must be an array\");\n      }\n      self._updateFetch(options.fetch);\n    }\n  };\n\n  /**\n   * @summary Allow users to write directly to this collection from client code, subject to limitations you define.\n   * @locus Server\n   * @param {Object} options\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */\n  Mongo.Collection.prototype.allow = function(options) {\n    addValidator.call(this, 'allow', options);\n  };\n\n  /**\n   * @summary Override `allow` rules.\n   * @locus Server\n   * @param {Object} options\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */\n  Mongo.Collection.prototype.deny = function(options) {\n    addValidator.call(this, 'deny', options);\n  };\n})();\n\n\nMongo.Collection.prototype._defineMutationMethods = function() {\n  var self = this;\n\n  // set to true once we call any allow or deny methods. If true, use\n  // allow/deny semantics. If false, use insecure mode semantics.\n  self._restricted = false;\n\n  // Insecure mode (default to allowing writes). Defaults to 'undefined' which\n  // means insecure iff the insecure package is loaded. This property can be\n  // overriden by tests or packages wishing to change insecure mode behavior of\n  // their collections.\n  self._insecure = undefined;\n\n  self._validators = {\n    insert: {allow: [], deny: []},\n    update: {allow: [], deny: []},\n    remove: {allow: [], deny: []},\n    upsert: {allow: [], deny: []}, // dummy arrays; can't set these!\n    fetch: [],\n    fetchAllFields: false\n  };\n\n  if (!self._name)\n    return; // anonymous collection\n\n  // XXX Think about method namespacing. Maybe methods should be\n  // \"Meteor:Mongo:insert/NAME\"?\n  self._prefix = '/' + self._name + '/';\n\n  // mutation methods\n  if (self._connection) {\n    var m = {};\n\n    _.each(['insert', 'update', 'remove'], function (method) {\n      m[self._prefix + method] = function (/* ... */) {\n        // All the methods do their own validation, instead of using check().\n        check(arguments, [Match.Any]);\n        var args = _.toArray(arguments);\n        try {\n          // For an insert, if the client didn't specify an _id, generate one\n          // now; because this uses DDP.randomStream, it will be consistent with\n          // what the client generated. We generate it now rather than later so\n          // that if (eg) an allow/deny rule does an insert to the same\n          // collection (not that it really should), the generated _id will\n          // still be the first use of the stream and will be consistent.\n          //\n          // However, we don't actually stick the _id onto the document yet,\n          // because we want allow/deny rules to be able to differentiate\n          // between arbitrary client-specified _id fields and merely\n          // client-controlled-via-randomSeed fields.\n          var generatedId = null;\n          if (method === \"insert\" && !_.has(args[0], '_id')) {\n            generatedId = self._makeNewID();\n          }\n\n          if (this.isSimulation) {\n            // In a client simulation, you can do any mutation (even with a\n            // complex selector).\n            if (generatedId !== null)\n              args[0]._id = generatedId;\n            return self._collection[method].apply(\n              self._collection, args);\n          }\n\n          // This is the server receiving a method call from the client.\n\n          // We don't allow arbitrary selectors in mutations from the client: only\n          // single-ID selectors.\n          if (method !== 'insert')\n            throwIfSelectorIsNotId(args[0], method);\n\n          if (self._restricted) {\n            // short circuit if there is no way it will pass.\n            if (self._validators[method].allow.length === 0) {\n              throw new Meteor.Error(\n                403, \"Access denied. No allow validators set on restricted \" +\n                  \"collection for method '\" + method + \"'.\");\n            }\n\n            var validatedMethodName =\n                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);\n            args.unshift(this.userId);\n            method === 'insert' && args.push(generatedId);\n            return self[validatedMethodName].apply(self, args);\n          } else if (self._isInsecure()) {\n            if (generatedId !== null)\n              args[0]._id = generatedId;\n            // In insecure mode, allow any mutation (with a simple selector).\n            // XXX This is kind of bogus.  Instead of blindly passing whatever\n            //     we get from the network to this function, we should actually\n            //     know the correct arguments for the function and pass just\n            //     them.  For example, if you have an extraneous extra null\n            //     argument and this is Mongo on the server, the .wrapAsync'd\n            //     functions like update will get confused and pass the\n            //     \"fut.resolver()\" in the wrong slot, where _update will never\n            //     invoke it. Bam, broken DDP connection.  Probably should just\n            //     take this whole method and write it three times, invoking\n            //     helpers for the common code.\n            return self._collection[method].apply(self._collection, args);\n          } else {\n            // In secure mode, if we haven't called allow or deny, then nothing\n            // is permitted.\n            throw new Meteor.Error(403, \"Access denied\");\n          }\n        } catch (e) {\n          if (e.name === 'MongoError' || e.name === 'MinimongoError') {\n            throw new Meteor.Error(409, e.toString());\n          } else {\n            throw e;\n          }\n        }\n      };\n    });\n    // Minimongo on the server gets no stubs; instead, by default\n    // it wait()s until its result is ready, yielding.\n    // This matches the behavior of macromongo on the server better.\n    // XXX see #MeteorServerNull\n    if (Meteor.isClient || self._connection === Meteor.server)\n      self._connection.methods(m);\n  }\n};\n\n\nMongo.Collection.prototype._updateFetch = function (fields) {\n  var self = this;\n\n  if (!self._validators.fetchAllFields) {\n    if (fields) {\n      self._validators.fetch = _.union(self._validators.fetch, fields);\n    } else {\n      self._validators.fetchAllFields = true;\n      // clear fetch just to make sure we don't accidentally read it\n      self._validators.fetch = null;\n    }\n  }\n};\n\nMongo.Collection.prototype._isInsecure = function () {\n  var self = this;\n  if (self._insecure === undefined)\n    return !!Package.insecure;\n  return self._insecure;\n};\n\nvar docToValidate = function (validator, doc, generatedId) {\n  var ret = doc;\n  if (validator.transform) {\n    ret = EJSON.clone(doc);\n    // If you set a server-side transform on your collection, then you don't get\n    // to tell the difference between \"client specified the ID\" and \"server\n    // generated the ID\", because transforms expect to get _id.  If you want to\n    // do that check, you can do it with a specific\n    // `C.allow({insert: f, transform: null})` validator.\n    if (generatedId !== null) {\n      ret._id = generatedId;\n    }\n    ret = validator.transform(ret);\n  }\n  return ret;\n};\n\nMongo.Collection.prototype._validatedInsert = function (userId, doc,\n                                                         generatedId) {\n  var self = this;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.insert.deny, function(validator) {\n    return validator(userId, docToValidate(validator, doc, generatedId));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.insert.allow, function(validator) {\n    return !validator(userId, docToValidate(validator, doc, generatedId));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  // If we generated an ID above, insert it now: after the validation, but\n  // before actually inserting.\n  if (generatedId !== null)\n    doc._id = generatedId;\n\n  self._collection.insert.call(self._collection, doc);\n};\n\nvar transformDoc = function (validator, doc) {\n  if (validator.transform)\n    return validator.transform(doc);\n  return doc;\n};\n\n// Simulate a mongo `update` operation while validating that the access\n// control rules set by calls to `allow/deny` are satisfied. If all\n// pass, rewrite the mongo operation to use $in to set the list of\n// document ids to change ##ValidatedChange\nMongo.Collection.prototype._validatedUpdate = function(\n    userId, selector, mutator, options) {\n  var self = this;\n\n  check(mutator, Object);\n\n  options = _.clone(options) || {};\n\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))\n    throw new Error(\"validated update should be of a single ID\");\n\n  // We don't support upserts because they don't fit nicely into allow/deny\n  // rules.\n  if (options.upsert)\n    throw new Meteor.Error(403, \"Access denied. Upserts not \" +\n                           \"allowed in a restricted collection.\");\n\n  var noReplaceError = \"Access denied. In a restricted collection you can only\" +\n        \" update documents, not replace them. Use a Mongo update operator, such \" +\n        \"as '$set'.\";\n\n  // compute modified fields\n  var fields = [];\n  if (_.isEmpty(mutator)) {\n    throw new Meteor.Error(403, noReplaceError);\n  }\n  _.each(mutator, function (params, op) {\n    if (op.charAt(0) !== '$') {\n      throw new Meteor.Error(403, noReplaceError);\n    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {\n      throw new Meteor.Error(\n        403, \"Access denied. Operator \" + op + \" not allowed in a restricted collection.\");\n    } else {\n      _.each(_.keys(params), function (field) {\n        // treat dotted fields as if they are replacing their\n        // top-level part\n        if (field.indexOf('.') !== -1)\n          field = field.substring(0, field.indexOf('.'));\n\n        // record the field we are trying to change\n        if (!_.contains(fields, field))\n          fields.push(field);\n      });\n    }\n  });\n\n  var findOptions = {transform: null};\n  if (!self._validators.fetchAllFields) {\n    findOptions.fields = {};\n    _.each(self._validators.fetch, function(fieldName) {\n      findOptions.fields[fieldName] = 1;\n    });\n  }\n\n  var doc = self._collection.findOne(selector, findOptions);\n  if (!doc)  // none satisfied!\n    return 0;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.update.deny, function(validator) {\n    var factoriedDoc = transformDoc(validator, doc);\n    return validator(userId,\n                     factoriedDoc,\n                     fields,\n                     mutator);\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.update.allow, function(validator) {\n    var factoriedDoc = transformDoc(validator, doc);\n    return !validator(userId,\n                      factoriedDoc,\n                      fields,\n                      mutator);\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  options._forbidReplace = true;\n\n  // Back when we supported arbitrary client-provided selectors, we actually\n  // rewrote the selector to include an _id clause before passing to Mongo to\n  // avoid races, but since selector is guaranteed to already just be an ID, we\n  // don't have to any more.\n\n  return self._collection.update.call(\n    self._collection, selector, mutator, options);\n};\n\n// Only allow these operations in validated updates. Specifically\n// whitelist operations, rather than blacklist, so new complex\n// operations that are added aren't automatically allowed. A complex\n// operation is one that does more than just modify its target\n// field. For now this contains all update operations except '$rename'.\n// http://docs.mongodb.org/manual/reference/operators/#update\nvar ALLOWED_UPDATE_OPERATIONS = {\n  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,\n  $pushAll:1, $push:1, $bit:1\n};\n\n// Simulate a mongo `remove` operation while validating access control\n// rules. See #ValidatedChange\nMongo.Collection.prototype._validatedRemove = function(userId, selector) {\n  var self = this;\n\n  var findOptions = {transform: null};\n  if (!self._validators.fetchAllFields) {\n    findOptions.fields = {};\n    _.each(self._validators.fetch, function(fieldName) {\n      findOptions.fields[fieldName] = 1;\n    });\n  }\n\n  var doc = self._collection.findOne(selector, findOptions);\n  if (!doc)\n    return 0;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.remove.deny, function(validator) {\n    return validator(userId, transformDoc(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.remove.allow, function(validator) {\n    return !validator(userId, transformDoc(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  // Back when we supported arbitrary client-provided selectors, we actually\n  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to\n  // Mongo to avoid races, but since selector is guaranteed to already just be\n  // an ID, we don't have to any more.\n\n  return self._collection.remove.call(self._collection, selector);\n};\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n"]}}]