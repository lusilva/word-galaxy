[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\n\n/* Package-scope variables */\nvar ReactMeteorData;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/react-meteor-data/meteor-data-mixin.jsx                                     //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nReactMeteorData = {                                                                     // 1\n  componentWillMount: function () {                                                     // 2\n    this.data = {};                                                                     // 3\n    this._meteorDataManager = new MeteorDataManager(this);                              // 4\n    var newData = this._meteorDataManager.calculateData();                              // 5\n    this._meteorDataManager.updateData(newData);                                        // 6\n  },                                                                                    //\n  componentWillUpdate: function (nextProps, nextState) {                                // 8\n    var saveProps = this.props;                                                         // 9\n    var saveState = this.state;                                                         // 10\n    var newData = undefined;                                                            // 11\n    try {                                                                               // 12\n      // Temporarily assign this.state and this.props,                                  //\n      // so that they are seen by getMeteorData!                                        //\n      // This is a simulation of how the proposed Observe API                           //\n      // for React will work, which calls observe() after                               //\n      // componentWillUpdate and after props and state are                              //\n      // updated, but before render() is called.                                        //\n      // See https://github.com/facebook/react/issues/3398.                             //\n      this.props = nextProps;                                                           // 20\n      this.state = nextState;                                                           // 21\n      newData = this._meteorDataManager.calculateData();                                // 22\n    } finally {                                                                         //\n      this.props = saveProps;                                                           // 24\n      this.state = saveState;                                                           // 25\n    }                                                                                   //\n                                                                                        //\n    this._meteorDataManager.updateData(newData);                                        // 28\n  },                                                                                    //\n  componentWillUnmount: function () {                                                   // 30\n    this._meteorDataManager.dispose();                                                  // 31\n  }                                                                                     //\n};                                                                                      //\n                                                                                        //\n// A class to keep the state and utility methods needed to manage                       //\n// the Meteor data for a component.                                                     //\n                                                                                        //\nvar MeteorDataManager = (function () {                                                  //\n  function MeteorDataManager(component) {                                               // 38\n    babelHelpers.classCallCheck(this, MeteorDataManager);                               //\n                                                                                        //\n    this.component = component;                                                         // 39\n    this.computation = null;                                                            // 40\n    this.oldData = null;                                                                // 41\n  }                                                                                     //\n                                                                                        //\n  MeteorDataManager.prototype.dispose = (function () {                                  // 37\n    function dispose() {                                                                // 44\n      if (this.computation) {                                                           // 45\n        this.computation.stop();                                                        // 46\n        this.computation = null;                                                        // 47\n      }                                                                                 //\n    }                                                                                   //\n                                                                                        //\n    return dispose;                                                                     //\n  })();                                                                                 //\n                                                                                        //\n  MeteorDataManager.prototype.calculateData = (function () {                            // 37\n    function calculateData() {                                                          // 51\n      var component = this.component;                                                   // 52\n                                                                                        //\n      if (!component.getMeteorData) {                                                   // 54\n        return null;                                                                    // 55\n      }                                                                                 //\n                                                                                        //\n      // When rendering on the server, we don't want to use the Tracker.                //\n      // We only do the first rendering on the server so we can get the data right away\n      if (Meteor.isServer) {                                                            // 60\n        return component.getMeteorData();                                               // 61\n      }                                                                                 //\n                                                                                        //\n      if (this.computation) {                                                           // 64\n        this.computation.stop();                                                        // 65\n        this.computation = null;                                                        // 66\n      }                                                                                 //\n                                                                                        //\n      var data = undefined;                                                             // 69\n      // Use Tracker.nonreactive in case we are inside a Tracker Computation.           //\n      // This can happen if someone calls `ReactDOM.render` inside a Computation.       //\n      // In that case, we want to opt out of the normal behavior of nested              //\n      // Computations, where if the outer one is invalidated or stopped,                //\n      // it stops the inner one.                                                        //\n      this.computation = Tracker.nonreactive(function () {                              // 75\n        return Tracker.autorun(function (c) {                                           // 76\n          if (c.firstRun) {                                                             // 77\n            var savedSetState = component.setState;                                     // 78\n            try {                                                                       // 79\n              component.setState = function () {                                        // 80\n                throw new Error(\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" + \" loop. To respond to Meteor data changing, consider making this component\" + \" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" + \" a child component. Then you can use `componentWillReceiveProps` in that\" + \" child component.\");\n              };                                                                        //\n                                                                                        //\n              data = component.getMeteorData();                                         // 89\n            } finally {                                                                 //\n              component.setState = savedSetState;                                       // 91\n            }                                                                           //\n          } else {                                                                      //\n            // Stop this computation instead of using the re-run.                       //\n            // We use a brand-new autorun for each call to getMeteorData                //\n            // to capture dependencies on any reactive data sources that                //\n            // are accessed.  The reason we can't use a single autorun                  //\n            // for the lifetime of the component is that Tracker only                   //\n            // re-runs autoruns at flush time, while we need to be able to              //\n            // re-call getMeteorData synchronously whenever we want, e.g.               //\n            // from componentWillUpdate.                                                //\n            c.stop();                                                                   // 102\n            // Calling forceUpdate() triggers componentWillUpdate which                 //\n            // recalculates getMeteorData() and re-renders the component.               //\n            component.forceUpdate();                                                    // 105\n          }                                                                             //\n        });                                                                             //\n      });                                                                               //\n                                                                                        //\n      if (Package.mongo && Package.mongo.Mongo) {                                       // 110\n        Object.keys(data).forEach(function (key) {                                      // 111\n          if (data[key] instanceof Package.mongo.Mongo.Cursor) {                        // 112\n            console.warn(\"Warning: you are returning a Mongo cursor from getMeteorData. This value \" + \"will not be reactive. You probably want to call `.fetch()` on the cursor \" + \"before returning it.\");\n          }                                                                             //\n        });                                                                             //\n      }                                                                                 //\n                                                                                        //\n      return data;                                                                      // 121\n    }                                                                                   //\n                                                                                        //\n    return calculateData;                                                               //\n  })();                                                                                 //\n                                                                                        //\n  MeteorDataManager.prototype.updateData = (function () {                               // 37\n    function updateData(newData) {                                                      // 124\n      var component = this.component;                                                   // 125\n      var oldData = this.oldData;                                                       // 126\n                                                                                        //\n      if (!(newData && typeof newData === 'object')) {                                  // 128\n        throw new Error(\"Expected object returned from getMeteorData\");                 // 129\n      }                                                                                 //\n      // update componentData in place based on newData                                 //\n      for (var key in babelHelpers.sanitizeForInObject(newData)) {                      // 132\n        component.data[key] = newData[key];                                             // 133\n      }                                                                                 //\n      // if there is oldData (which is every time this method is called                 //\n      // except the first), delete keys in newData that aren't in                       //\n      // oldData.  don't interfere with other keys, in case we are                      //\n      // co-existing with something else that writes to a component's                   //\n      // this.data.                                                                     //\n      if (oldData) {                                                                    // 140\n        for (var key in babelHelpers.sanitizeForInObject(oldData)) {                    // 141\n          if (!(key in newData)) {                                                      // 142\n            delete component.data[key];                                                 // 143\n          }                                                                             //\n        }                                                                               //\n      }                                                                                 //\n      this.oldData = newData;                                                           // 147\n    }                                                                                   //\n                                                                                        //\n    return updateData;                                                                  //\n  })();                                                                                 //\n                                                                                        //\n  return MeteorDataManager;                                                             //\n})();                                                                                   //\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['react-meteor-data'] = {\n  ReactMeteorData: ReactMeteorData\n};\n\n})();\n","servePath":"/packages/react-meteor-data.js","sourceMap":{"version":3,"sources":["/meteor-data-mixin.jsx"],"names":[],"mappings":"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","file":"/packages/react-meteor-data.js","sourcesContent":["ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  }\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n"]}}]