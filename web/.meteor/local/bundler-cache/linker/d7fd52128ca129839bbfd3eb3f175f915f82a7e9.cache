[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Random = Package.random.Random;\n\n/* Package-scope variables */\nvar RateLimiter;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/rate-limit/rate-limit.js                                            //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n// Default time interval (in milliseconds) to reset rate limit counters         // 1\nvar DEFAULT_INTERVAL_TIME_IN_MILLISECONDS = 1000;                               // 2\n// Default number of events allowed per time interval                           // 3\nvar DEFAULT_REQUESTS_PER_INTERVAL = 10;                                         // 4\n                                                                                // 5\n// A rule is defined by an options object that contains two fields,             // 6\n// `numRequestsAllowed` which is the number of events allowed per interval, and\n// an `intervalTime` which is the amount of time in milliseconds before the     // 8\n// rate limit restarts its internal counters, and by a matchers object. A       // 9\n// matchers object is a POJO that contains a set of keys with values that       // 10\n// define the entire set of inputs that match for each key. The values can      // 11\n// either be null (optional), a primitive or a function that returns a boolean  // 12\n// of whether the provided input's value matches for this key.                  // 13\n//                                                                              // 14\n// Rules are uniquely assigned an `id` and they store a dictionary of counters,\n// which are records used to keep track of inputs that match the rule. If a     // 16\n// counter reaches the `numRequestsAllowed` within a given `intervalTime`, a    // 17\n// rate limit is reached and future inputs that map to that counter will        // 18\n// result in errors being returned to the client.                               // 19\nvar Rule = function (options, matchers) {                                       // 20\n  var self = this;                                                              // 21\n                                                                                // 22\n  self.id = Random.id();                                                        // 23\n                                                                                // 24\n  self.options = options;                                                       // 25\n                                                                                // 26\n  self._matchers = matchers;                                                    // 27\n                                                                                // 28\n  self._lastResetTime = new Date().getTime();                                   // 29\n                                                                                // 30\n  // Dictionary of input keys to counters                                       // 31\n  self.counters = {};                                                           // 32\n};                                                                              // 33\n                                                                                // 34\n_.extend(Rule.prototype, {                                                      // 35\n  // Determine if this rule applies to the given input by comparing all         // 36\n  // rule.matchers. If the match fails, search short circuits instead of        // 37\n  // iterating through all matchers.                                            // 38\n  match: function (input) {                                                     // 39\n    var self = this;                                                            // 40\n    var ruleMatches = true;                                                     // 41\n    return _.every(self._matchers, function (matcher, key) {                    // 42\n      if (matcher !== null) {                                                   // 43\n        if (!(_.has(input,key))) {                                              // 44\n          return false;                                                         // 45\n        } else {                                                                // 46\n          if (typeof matcher === 'function') {                                  // 47\n            if (!(matcher(input[key]))) {                                       // 48\n              return false;                                                     // 49\n            }                                                                   // 50\n          } else {                                                              // 51\n            if (matcher !== input[key]) {                                       // 52\n              return false;                                                     // 53\n            }                                                                   // 54\n          }                                                                     // 55\n        }                                                                       // 56\n      }                                                                         // 57\n      return true;                                                              // 58\n    });                                                                         // 59\n  },                                                                            // 60\n                                                                                // 61\n  // Generates unique key string for provided input by concatenating all the    // 62\n  // keys in the matcher with the corresponding values in the input.            // 63\n  // Only called if rule matches input.                                         // 64\n  _generateKeyString: function (input) {                                        // 65\n    var self = this;                                                            // 66\n    var returnString = \"\";                                                      // 67\n    _.each(self._matchers, function (matcher, key) {                            // 68\n      if (matcher !== null) {                                                   // 69\n        if (typeof matcher === 'function') {                                    // 70\n          if (matcher(input[key])) {                                            // 71\n            returnString += key + input[key];                                   // 72\n          }                                                                     // 73\n        } else {                                                                // 74\n          returnString += key + input[key];                                     // 75\n        }                                                                       // 76\n      }                                                                         // 77\n    });                                                                         // 78\n    return returnString;                                                        // 79\n  },                                                                            // 80\n                                                                                // 81\n  // Applies the provided input and returns the key string, time since counters\n  // were last reset and time to next reset.                                    // 83\n  apply: function (input) {                                                     // 84\n    var self = this;                                                            // 85\n    var keyString = self._generateKeyString(input);                             // 86\n    var timeSinceLastReset = new Date().getTime() - self._lastResetTime;        // 87\n    var timeToNextReset = self.options.intervalTime - timeSinceLastReset;       // 88\n    return {                                                                    // 89\n      key: keyString,                                                           // 90\n      timeSinceLastReset: timeSinceLastReset,                                   // 91\n      timeToNextReset: timeToNextReset                                          // 92\n    };                                                                          // 93\n  },                                                                            // 94\n  // Reset counter dictionary for this specific rule. Called once the           // 95\n  // timeSinceLastReset has exceeded the intervalTime. _lastResetTime is        // 96\n  // set to be the current time in milliseconds.                                // 97\n  resetCounter: function () {                                                   // 98\n    var self = this;                                                            // 99\n                                                                                // 100\n    // Delete the old counters dictionary to allow for garbage collection       // 101\n    self.counters = {};                                                         // 102\n    self._lastResetTime = new Date().getTime();                                 // 103\n  }                                                                             // 104\n});                                                                             // 105\n                                                                                // 106\n// Initialize rules to be an empty dictionary.                                  // 107\nRateLimiter = function () {                                                     // 108\n  var self = this;                                                              // 109\n                                                                                // 110\n  // Dictionary of all rules associated with this RateLimiter, keyed by their   // 111\n  // id. Each rule object stores the rule pattern, number of events allowed,    // 112\n  // last reset time and the rule reset interval in milliseconds.               // 113\n  self.rules = {};                                                              // 114\n};                                                                              // 115\n                                                                                // 116\n/**                                                                             // 117\n * Checks if this input has exceeded any rate limits.                           // 118\n * @param  {object} input dictionary containing key-value pairs of attributes   // 119\n * that match to rules                                                          // 120\n * @return {object} Returns object of following structure                       // 121\n * { 'allowed': boolean - is this input allowed                                 // 122\n *   'timeToReset': integer | Infinity - returns time until counters are reset  // 123\n *                   in milliseconds                                            // 124\n *   'numInvocationsLeft': integer | Infinity - returns number of calls left    // 125\n *   before limit is reached                                                    // 126\n * }                                                                            // 127\n * If multiple rules match, the least number of invocations left is returned.   // 128\n * If the rate limit has been reached, the longest timeToReset is returned.     // 129\n */                                                                             // 130\nRateLimiter.prototype.check = function (input) {                                // 131\n  var self = this;                                                              // 132\n  var reply = {                                                                 // 133\n    allowed: true,                                                              // 134\n    timeToReset: 0,                                                             // 135\n    numInvocationsLeft: Infinity                                                // 136\n  };                                                                            // 137\n                                                                                // 138\n  var matchedRules = self._findAllMatchingRules(input);                         // 139\n  _.each(matchedRules, function (rule) {                                        // 140\n    var ruleResult = rule.apply(input);                                         // 141\n    var numInvocations = rule.counters[ruleResult.key];                         // 142\n                                                                                // 143\n    if (ruleResult.timeToNextReset < 0) {                                       // 144\n      // Reset all the counters since the rule has reset                        // 145\n      rule.resetCounter();                                                      // 146\n      ruleResult.timeSinceLastReset = new Date().getTime() -                    // 147\n        rule._lastResetTime;                                                    // 148\n      ruleResult.timeToNextReset = rule.options.intervalTime;                   // 149\n      numInvocations = 0;                                                       // 150\n    }                                                                           // 151\n                                                                                // 152\n    if (numInvocations > rule.options.numRequestsAllowed) {                     // 153\n      // Only update timeToReset if the new time would be longer than the       // 154\n      // previously set time. This is to ensure that if this input triggers     // 155\n      // multiple rules, we return the longest period of time until they can    // 156\n      // successfully make another call                                         // 157\n      if (reply.timeToReset < ruleResult.timeToNextReset) {                     // 158\n        reply.timeToReset = ruleResult.timeToNextReset;                         // 159\n      };                                                                        // 160\n      reply.allowed = false;                                                    // 161\n      reply.numInvocationsLeft = 0;                                             // 162\n    } else {                                                                    // 163\n      // If this is an allowed attempt and we haven't failed on any of the      // 164\n      // other rules that match, update the reply field.                        // 165\n      if (rule.options.numRequestsAllowed - numInvocations <                    // 166\n        reply.numInvocationsLeft && reply.allowed) {                            // 167\n        reply.timeToReset = ruleResult.timeToNextReset;                         // 168\n        reply.numInvocationsLeft = rule.options.numRequestsAllowed -            // 169\n          numInvocations;                                                       // 170\n      }                                                                         // 171\n    }                                                                           // 172\n  });                                                                           // 173\n  return reply;                                                                 // 174\n};                                                                              // 175\n                                                                                // 176\n/**                                                                             // 177\n * Adds a rule to dictionary of rules that are checked against on every call.   // 178\n * Only inputs that pass all of the rules will be allowed. Returns unique rule  // 179\n * id that can be passed to `removeRule`.                                       // 180\n * @param {object} rule    Input dictionary defining certain attributes and     // 181\n * rules associated with them.                                                  // 182\n * Each attribute's value can either be a value, a function or null. All        // 183\n * functions must return a boolean of whether the input is matched by that      // 184\n * attribute's rule or not                                                      // 185\n * @param {integer} numRequestsAllowed Optional. Number of events allowed per   // 186\n * interval. Default = 10.                                                      // 187\n * @param {integer} intervalTime Optional. Number of milliseconds before        // 188\n * rule's counters are reset. Default = 1000.                                   // 189\n * @return {string} Returns unique rule id                                      // 190\n */                                                                             // 191\nRateLimiter.prototype.addRule = function (rule, numRequestsAllowed,             // 192\n  intervalTime) {                                                               // 193\n  var self = this;                                                              // 194\n                                                                                // 195\n  var options = {                                                               // 196\n    numRequestsAllowed: numRequestsAllowed || DEFAULT_REQUESTS_PER_INTERVAL,    // 197\n    intervalTime: intervalTime || DEFAULT_INTERVAL_TIME_IN_MILLISECONDS         // 198\n  };                                                                            // 199\n                                                                                // 200\n  var newRule = new Rule(options, rule);                                        // 201\n  this.rules[newRule.id] = newRule;                                             // 202\n  return newRule.id;                                                            // 203\n};                                                                              // 204\n                                                                                // 205\n/**                                                                             // 206\n * Increment counters in every rule that match to this input                    // 207\n * @param  {object} input Dictionary object containing attributes that may      // 208\n * match to rules                                                               // 209\n */                                                                             // 210\nRateLimiter.prototype.increment = function (input) {                            // 211\n  var self = this;                                                              // 212\n                                                                                // 213\n  // Only increment rule counters that match this input                         // 214\n  var matchedRules = self._findAllMatchingRules(input);                         // 215\n  _.each(matchedRules, function (rule) {                                        // 216\n    var ruleResult = rule.apply(input);                                         // 217\n                                                                                // 218\n    if (ruleResult.timeSinceLastReset > rule.options.intervalTime) {            // 219\n      // Reset all the counters since the rule has reset                        // 220\n      rule.resetCounter();                                                      // 221\n    }                                                                           // 222\n                                                                                // 223\n    // Check whether the key exists, incrementing it if so or otherwise         // 224\n    // adding the key and setting its value to 1                                // 225\n    if (_.has(rule.counters, ruleResult.key))                                   // 226\n      rule.counters[ruleResult.key]++;                                          // 227\n    else                                                                        // 228\n      rule.counters[ruleResult.key] = 1;                                        // 229\n  });                                                                           // 230\n};                                                                              // 231\n                                                                                // 232\n// Returns an array of all rules that apply to provided input                   // 233\nRateLimiter.prototype._findAllMatchingRules = function (input) {                // 234\n  var self = this;                                                              // 235\n                                                                                // 236\n  return _.filter(self.rules, function(rule) {                                  // 237\n    return rule.match(input);                                                   // 238\n  });                                                                           // 239\n};                                                                              // 240\n/**                                                                             // 241\n * Provides a mechanism to remove rules from the rate limiter. Returns boolean  // 242\n * about success.                                                               // 243\n * @param  {string} id Rule id returned from #addRule                           // 244\n * @return {boolean} Returns true if rule was found and deleted, else false.    // 245\n */                                                                             // 246\nRateLimiter.prototype.removeRule = function (id) {                              // 247\n  var self = this;                                                              // 248\n  if (self.rules[id]) {                                                         // 249\n    delete self.rules[id];                                                      // 250\n    return true;                                                                // 251\n  } else {                                                                      // 252\n    return false;                                                               // 253\n  }                                                                             // 254\n};                                                                              // 255\n                                                                                // 256\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['rate-limit'] = {\n  RateLimiter: RateLimiter\n};\n\n})();\n","servePath":"/packages/rate-limit.js","sourceMap":{"version":3,"sources":["/packages/rate-limit/rate-limit.js"],"names":[],"mappingssF","file":"/packages/rate-limit.js","sourcesContent":["// Default time interval (in milliseconds) to reset rate limit counters\nvar DEFAULT_INTERVAL_TIME_IN_MILLISECONDS = 1000;\n// Default number of events allowed per time interval\nvar DEFAULT_REQUESTS_PER_INTERVAL = 10;\n\n// A rule is defined by an options object that contains two fields,\n// `numRequestsAllowed` which is the number of events allowed per interval, and\n// an `intervalTime` which is the amount of time in milliseconds before the\n// rate limit restarts its internal counters, and by a matchers object. A\n// matchers object is a POJO that contains a set of keys with values that\n// define the entire set of inputs that match for each key. The values can\n// either be null (optional), a primitive or a function that returns a boolean\n// of whether the provided input's value matches for this key.\n//\n// Rules are uniquely assigned an `id` and they store a dictionary of counters,\n// which are records used to keep track of inputs that match the rule. If a\n// counter reaches the `numRequestsAllowed` within a given `intervalTime`, a\n// rate limit is reached and future inputs that map to that counter will\n// result in errors being returned to the client.\nvar Rule = function (options, matchers) {\n  var self = this;\n\n  self.id = Random.id();\n\n  self.options = options;\n\n  self._matchers = matchers;\n\n  self._lastResetTime = new Date().getTime();\n\n  // Dictionary of input keys to counters\n  self.counters = {};\n};\n\n_.extend(Rule.prototype, {\n  // Determine if this rule applies to the given input by comparing all\n  // rule.matchers. If the match fails, search short circuits instead of\n  // iterating through all matchers.\n  match: function (input) {\n    var self = this;\n    var ruleMatches = true;\n    return _.every(self._matchers, function (matcher, key) {\n      if (matcher !== null) {\n        if (!(_.has(input,key))) {\n          return false;\n        } else {\n          if (typeof matcher === 'function') {\n            if (!(matcher(input[key]))) {\n              return false;\n            }\n          } else {\n            if (matcher !== input[key]) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    });\n  },\n\n  // Generates unique key string for provided input by concatenating all the\n  // keys in the matcher with the corresponding values in the input.\n  // Only called if rule matches input.\n  _generateKeyString: function (input) {\n    var self = this;\n    var returnString = \"\";\n    _.each(self._matchers, function (matcher, key) {\n      if (matcher !== null) {\n        if (typeof matcher === 'function') {\n          if (matcher(input[key])) {\n            returnString += key + input[key];\n          }\n        } else {\n          returnString += key + input[key];\n        }\n      }\n    });\n    return returnString;\n  },\n\n  // Applies the provided input and returns the key string, time since counters\n  // were last reset and time to next reset.\n  apply: function (input) {\n    var self = this;\n    var keyString = self._generateKeyString(input);\n    var timeSinceLastReset = new Date().getTime() - self._lastResetTime;\n    var timeToNextReset = self.options.intervalTime - timeSinceLastReset;\n    return {\n      key: keyString,\n      timeSinceLastReset: timeSinceLastReset,\n      timeToNextReset: timeToNextReset\n    };\n  },\n  // Reset counter dictionary for this specific rule. Called once the\n  // timeSinceLastReset has exceeded the intervalTime. _lastResetTime is\n  // set to be the current time in milliseconds.\n  resetCounter: function () {\n    var self = this;\n\n    // Delete the old counters dictionary to allow for garbage collection\n    self.counters = {};\n    self._lastResetTime = new Date().getTime();\n  }\n});\n\n// Initialize rules to be an empty dictionary.\nRateLimiter = function () {\n  var self = this;\n\n  // Dictionary of all rules associated with this RateLimiter, keyed by their\n  // id. Each rule object stores the rule pattern, number of events allowed,\n  // last reset time and the rule reset interval in milliseconds.\n  self.rules = {};\n};\n\n/**\n * Checks if this input has exceeded any rate limits.\n * @param  {object} input dictionary containing key-value pairs of attributes\n * that match to rules\n * @return {object} Returns object of following structure\n * { 'allowed': boolean - is this input allowed\n *   'timeToReset': integer | Infinity - returns time until counters are reset\n *                   in milliseconds\n *   'numInvocationsLeft': integer | Infinity - returns number of calls left\n *   before limit is reached\n * }\n * If multiple rules match, the least number of invocations left is returned.\n * If the rate limit has been reached, the longest timeToReset is returned.\n */\nRateLimiter.prototype.check = function (input) {\n  var self = this;\n  var reply = {\n    allowed: true,\n    timeToReset: 0,\n    numInvocationsLeft: Infinity\n  };\n\n  var matchedRules = self._findAllMatchingRules(input);\n  _.each(matchedRules, function (rule) {\n    var ruleResult = rule.apply(input);\n    var numInvocations = rule.counters[ruleResult.key];\n\n    if (ruleResult.timeToNextReset < 0) {\n      // Reset all the counters since the rule has reset\n      rule.resetCounter();\n      ruleResult.timeSinceLastReset = new Date().getTime() -\n        rule._lastResetTime;\n      ruleResult.timeToNextReset = rule.options.intervalTime;\n      numInvocations = 0;\n    }\n\n    if (numInvocations > rule.options.numRequestsAllowed) {\n      // Only update timeToReset if the new time would be longer than the\n      // previously set time. This is to ensure that if this input triggers\n      // multiple rules, we return the longest period of time until they can\n      // successfully make another call\n      if (reply.timeToReset < ruleResult.timeToNextReset) {\n        reply.timeToReset = ruleResult.timeToNextReset;\n      };\n      reply.allowed = false;\n      reply.numInvocationsLeft = 0;\n    } else {\n      // If this is an allowed attempt and we haven't failed on any of the\n      // other rules that match, update the reply field.\n      if (rule.options.numRequestsAllowed - numInvocations <\n        reply.numInvocationsLeft && reply.allowed) {\n        reply.timeToReset = ruleResult.timeToNextReset;\n        reply.numInvocationsLeft = rule.options.numRequestsAllowed -\n          numInvocations;\n      }\n    }\n  });\n  return reply;\n};\n\n/**\n * Adds a rule to dictionary of rules that are checked against on every call.\n * Only inputs that pass all of the rules will be allowed. Returns unique rule\n * id that can be passed to `removeRule`.\n * @param {object} rule    Input dictionary defining certain attributes and\n * rules associated with them.\n * Each attribute's value can either be a value, a function or null. All\n * functions must return a boolean of whether the input is matched by that\n * attribute's rule or not\n * @param {integer} numRequestsAllowed Optional. Number of events allowed per\n * interval. Default = 10.\n * @param {integer} intervalTime Optional. Number of milliseconds before\n * rule's counters are reset. Default = 1000.\n * @return {string} Returns unique rule id\n */\nRateLimiter.prototype.addRule = function (rule, numRequestsAllowed,\n  intervalTime) {\n  var self = this;\n\n  var options = {\n    numRequestsAllowed: numRequestsAllowed || DEFAULT_REQUESTS_PER_INTERVAL,\n    intervalTime: intervalTime || DEFAULT_INTERVAL_TIME_IN_MILLISECONDS\n  };\n\n  var newRule = new Rule(options, rule);\n  this.rules[newRule.id] = newRule;\n  return newRule.id;\n};\n\n/**\n * Increment counters in every rule that match to this input\n * @param  {object} input Dictionary object containing attributes that may\n * match to rules\n */\nRateLimiter.prototype.increment = function (input) {\n  var self = this;\n\n  // Only increment rule counters that match this input\n  var matchedRules = self._findAllMatchingRules(input);\n  _.each(matchedRules, function (rule) {\n    var ruleResult = rule.apply(input);\n\n    if (ruleResult.timeSinceLastReset > rule.options.intervalTime) {\n      // Reset all the counters since the rule has reset\n      rule.resetCounter();\n    }\n\n    // Check whether the key exists, incrementing it if so or otherwise\n    // adding the key and setting its value to 1\n    if (_.has(rule.counters, ruleResult.key))\n      rule.counters[ruleResult.key]++;\n    else\n      rule.counters[ruleResult.key] = 1;\n  });\n};\n\n// Returns an array of all rules that apply to provided input\nRateLimiter.prototype._findAllMatchingRules = function (input) {\n  var self = this;\n\n  return _.filter(self.rules, function(rule) {\n    return rule.match(input);\n  });\n};\n/**\n * Provides a mechanism to remove rules from the rate limiter. Returns boolean\n * about success.\n * @param  {string} id Rule id returned from #addRule\n * @return {boolean} Returns true if rule was found and deleted, else false.\n */\nRateLimiter.prototype.removeRule = function (id) {\n  var self = this;\n  if (self.rules[id]) {\n    delete self.rules[id];\n    return true;\n  } else {\n    return false;\n  }\n};\n"]}}]