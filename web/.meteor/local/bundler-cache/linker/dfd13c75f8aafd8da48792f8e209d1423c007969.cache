[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar Async, response;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/meteorhacks_async/packages/meteorhacks_async.js                                                 //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n(function () {                                                                                              // 1\n                                                                                                            // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                                                    //    // 4\n// packages/meteorhacks:async/async.js                                                                //    // 5\n//                                                                                                    //    // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                                      //    // 8\nvar Future = Npm.require('fibers/future');                                                            // 1  // 9\nAsync = {};                                                                                           // 2  // 10\n                                                                                                      // 3  // 11\nAsync.runSync = Meteor.sync = function(asynFunction) {                                                // 4  // 12\n  var future = new Future();                                                                          // 5  // 13\n  var sent = false;                                                                                   // 6  // 14\n  var payload;                                                                                        // 7  // 15\n                                                                                                      // 8  // 16\n  var wrappedAsyncFunction = Meteor.bindEnvironment(asynFunction, function(err) {                     // 9  // 17\n    console.error('Error inside the Async.runSync: ' + err.message);                                  // 10\n    returnFuture(err);                                                                                // 11\n  });                                                                                                 // 12\n                                                                                                      // 13\n  setTimeout(function() {                                                                             // 14\n    wrappedAsyncFunction(returnFuture);                                                               // 15\n  }, 0);                                                                                              // 16\n                                                                                                      // 17\n  future.wait();                                                                                      // 18\n  sent = true;                                                                                        // 19\n                                                                                                      // 20\n  function returnFuture(error, result) {                                                              // 21\n    if(!sent) {                                                                                       // 22\n      payload = { result: result, error: error};                                                      // 23\n      future.return();                                                                                // 24\n    }                                                                                                 // 25\n  }                                                                                                   // 26\n                                                                                                      // 27\n  return payload;                                                                                     // 28\n};                                                                                                    // 29\n                                                                                                      // 30\nAsync.wrap = function(arg1, arg2) {                                                                   // 31\n  if(typeof arg1 == 'function') {                                                                     // 32\n    var func = arg1;                                                                                  // 33\n    return wrapFunction(func);                                                                        // 34\n  } else if(typeof arg1 == 'object' && typeof arg2 == 'string') {                                     // 35\n    var obj = arg1;                                                                                   // 36\n    var funcName = arg2;                                                                              // 37\n    return wrapObject(obj, [funcName])[funcName];                                                     // 38\n  } else if(typeof arg1 == 'object' &&  arg2 instanceof Array) {                                      // 39\n    var obj = arg1;                                                                                   // 40\n    var funcNameList = arg2;                                                                          // 41\n    return wrapObject(obj, funcNameList);                                                             // 42\n  } else {                                                                                            // 43\n    throw new Error('unsupported argument list');                                                     // 44\n  }                                                                                                   // 45\n                                                                                                      // 46\n  function wrapObject(obj, funcNameList) {                                                            // 47\n    var returnObj = {};                                                                               // 48\n    funcNameList.forEach(function(funcName) {                                                         // 49\n      if(obj[funcName]) {                                                                             // 50\n        var func = obj[funcName].bind(obj);                                                           // 51\n        returnObj[funcName] = wrapFunction(func);                                                     // 52\n      } else {                                                                                        // 53\n        throw new Error('instance method not exists: ' + funcName);                                   // 54\n      }                                                                                               // 55\n    });                                                                                               // 56\n    return returnObj;                                                                                 // 57\n  }                                                                                                   // 58\n                                                                                                      // 59\n  function wrapFunction(func) {                                                                       // 60\n    return function() {                                                                               // 61\n      var args = arguments;                                                                           // 62\n      response = Meteor.sync(function(done) {                                                         // 63\n        Array.prototype.push.call(args, done);                                                        // 64\n        func.apply(null, args);                                                                       // 65\n      });                                                                                             // 66\n                                                                                                      // 67\n      if(response.error) {                                                                            // 68\n        //we need to wrap a new error here something throw error object comes with response does not  // 69\n        //print the correct error to the console, if there is not try catch block                     // 70\n        var error = new Error(response.error.message);                                                // 71\n        for(var key in response.error) {                                                              // 72\n          if(error[key] === undefined) {                                                              // 73\n            error[key] = response.error[key];                                                         // 74\n          }                                                                                           // 75\n        }                                                                                             // 76\n        throw error;                                                                                  // 77\n      } else {                                                                                        // 78\n        return response.result;                                                                       // 79\n      }                                                                                               // 80\n    };                                                                                                // 81\n  }                                                                                                   // 82\n};                                                                                                    // 83\n////////////////////////////////////////////////////////////////////////////////////////////////////////    // 92\n                                                                                                            // 93\n}).call(this);                                                                                              // 94\n                                                                                                            // 95\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['meteorhacks:async'] = {\n  Async: Async\n};\n\n})();\n","servePath":"/packages/meteorhacks_async.js","sourceMap":{"version":3,"sources":["/packages/meteorhacks_async/packages/meteorhacks_async.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iH","file":"/packages/meteorhacks_async.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/meteorhacks:async/async.js                                                                //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nvar Future = Npm.require('fibers/future');                                                            // 1\nAsync = {};                                                                                           // 2\n                                                                                                      // 3\nAsync.runSync = Meteor.sync = function(asynFunction) {                                                // 4\n  var future = new Future();                                                                          // 5\n  var sent = false;                                                                                   // 6\n  var payload;                                                                                        // 7\n                                                                                                      // 8\n  var wrappedAsyncFunction = Meteor.bindEnvironment(asynFunction, function(err) {                     // 9\n    console.error('Error inside the Async.runSync: ' + err.message);                                  // 10\n    returnFuture(err);                                                                                // 11\n  });                                                                                                 // 12\n                                                                                                      // 13\n  setTimeout(function() {                                                                             // 14\n    wrappedAsyncFunction(returnFuture);                                                               // 15\n  }, 0);                                                                                              // 16\n                                                                                                      // 17\n  future.wait();                                                                                      // 18\n  sent = true;                                                                                        // 19\n                                                                                                      // 20\n  function returnFuture(error, result) {                                                              // 21\n    if(!sent) {                                                                                       // 22\n      payload = { result: result, error: error};                                                      // 23\n      future.return();                                                                                // 24\n    }                                                                                                 // 25\n  }                                                                                                   // 26\n                                                                                                      // 27\n  return payload;                                                                                     // 28\n};                                                                                                    // 29\n                                                                                                      // 30\nAsync.wrap = function(arg1, arg2) {                                                                   // 31\n  if(typeof arg1 == 'function') {                                                                     // 32\n    var func = arg1;                                                                                  // 33\n    return wrapFunction(func);                                                                        // 34\n  } else if(typeof arg1 == 'object' && typeof arg2 == 'string') {                                     // 35\n    var obj = arg1;                                                                                   // 36\n    var funcName = arg2;                                                                              // 37\n    return wrapObject(obj, [funcName])[funcName];                                                     // 38\n  } else if(typeof arg1 == 'object' &&  arg2 instanceof Array) {                                      // 39\n    var obj = arg1;                                                                                   // 40\n    var funcNameList = arg2;                                                                          // 41\n    return wrapObject(obj, funcNameList);                                                             // 42\n  } else {                                                                                            // 43\n    throw new Error('unsupported argument list');                                                     // 44\n  }                                                                                                   // 45\n                                                                                                      // 46\n  function wrapObject(obj, funcNameList) {                                                            // 47\n    var returnObj = {};                                                                               // 48\n    funcNameList.forEach(function(funcName) {                                                         // 49\n      if(obj[funcName]) {                                                                             // 50\n        var func = obj[funcName].bind(obj);                                                           // 51\n        returnObj[funcName] = wrapFunction(func);                                                     // 52\n      } else {                                                                                        // 53\n        throw new Error('instance method not exists: ' + funcName);                                   // 54\n      }                                                                                               // 55\n    });                                                                                               // 56\n    return returnObj;                                                                                 // 57\n  }                                                                                                   // 58\n                                                                                                      // 59\n  function wrapFunction(func) {                                                                       // 60\n    return function() {                                                                               // 61\n      var args = arguments;                                                                           // 62\n      response = Meteor.sync(function(done) {                                                         // 63\n        Array.prototype.push.call(args, done);                                                        // 64\n        func.apply(null, args);                                                                       // 65\n      });                                                                                             // 66\n                                                                                                      // 67\n      if(response.error) {                                                                            // 68\n        //we need to wrap a new error here something throw error object comes with response does not  // 69\n        //print the correct error to the console, if there is not try catch block                     // 70\n        var error = new Error(response.error.message);                                                // 71\n        for(var key in response.error) {                                                              // 72\n          if(error[key] === undefined) {                                                              // 73\n            error[key] = response.error[key];                                                         // 74\n          }                                                                                           // 75\n        }                                                                                             // 76\n        throw error;                                                                                  // 77\n      } else {                                                                                        // 78\n        return response.result;                                                                       // 79\n      }                                                                                               // 80\n    };                                                                                                // 81\n  }                                                                                                   // 82\n};                                                                                                    // 83\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]