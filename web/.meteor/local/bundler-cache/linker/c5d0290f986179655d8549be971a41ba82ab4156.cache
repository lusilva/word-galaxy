[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nvar React = Package['react-runtime'].React;\nvar ReactDOM = Package['react-runtime'].ReactDOM;\nvar ReactDOMServer = Package['react-runtime'].ReactDOMServer;\nvar ReactRouter = Package['reactrouter:react-router'].ReactRouter;\nvar FastRender = Package['meteorhacks:fast-render'].FastRender;\nvar InjectData = Package['meteorhacks:inject-data'].InjectData;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar _ = Package.underscore._;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\n\n/* Package-scope variables */\nvar ReactRouterSSR;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactrouter_react-router-ssr/lib/react-router-ssr.js                                                  //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nReactRouterSSR = {};                                                                                              // 1\n                                                                                                                  // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactrouter_react-router-ssr/lib/server.jsx                                                           //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n// meteor algorithm to check if this is a meteor serving http request or not                                      //\nfunction IsAppUrl(req) {                                                                                          // 2\n  var url = req.url;                                                                                              // 3\n  if (url === '/favicon.ico' || url === '/robots.txt') {                                                          // 4\n    return false;                                                                                                 // 5\n  }                                                                                                               //\n                                                                                                                  //\n  // NOTE: app.manifest is not a web standard like favicon.ico and                                                //\n  // robots.txt. It is a file name we have chosen to use for HTML5                                                //\n  // appcache URLs. It is included here to prevent using an appcache                                              //\n  // then removing it from poisoning an app permanently. Eventually,                                              //\n  // once we have server side routing, this won't be needed as                                                    //\n  // unknown URLs with return a 404 automatically.                                                                //\n  if (url === '/app.manifest') {                                                                                  // 14\n    return false;                                                                                                 // 15\n  }                                                                                                               //\n                                                                                                                  //\n  // Avoid serving app HTML for declared routes such as /sockjs/.                                                 //\n  if (RoutePolicy.classify(url)) {                                                                                // 19\n    return false;                                                                                                 // 20\n  }                                                                                                               //\n  return true;                                                                                                    // 22\n}                                                                                                                 //\n                                                                                                                  //\nvar _ReactRouter = ReactRouter;                                                                                   //\nvar RouterContext = _ReactRouter.RouterContext;                                                                   //\n                                                                                                                  //\nvar url = Npm.require('url');                                                                                     // 26\nvar Fiber = Npm.require('fibers');                                                                                // 27\nvar cookieParser = Npm.require('cookie-parser');                                                                  // 28\n                                                                                                                  //\nvar webpackStats = undefined;                                                                                     // 30\n                                                                                                                  //\nReactRouterSSR.LoadWebpackStats = function (stats) {                                                              // 32\n  webpackStats = stats;                                                                                           // 33\n};                                                                                                                //\n                                                                                                                  //\nReactRouterSSR.Run = function (routes, clientOptions, serverOptions) {                                            // 36\n  if (!clientOptions) {                                                                                           // 37\n    clientOptions = {};                                                                                           // 38\n  }                                                                                                               //\n                                                                                                                  //\n  if (!serverOptions) {                                                                                           // 41\n    serverOptions = {};                                                                                           // 42\n  }                                                                                                               //\n                                                                                                                  //\n  if (!serverOptions.webpackStats) {                                                                              // 45\n    serverOptions.webpackStats = webpackStats;                                                                    // 46\n  }                                                                                                               //\n                                                                                                                  //\n  Meteor.bindEnvironment(function () {                                                                            // 49\n    // Parse cookies for the login token                                                                          //\n    WebApp.rawConnectHandlers.use(cookieParser());                                                                // 51\n                                                                                                                  //\n    WebApp.connectHandlers.use(Meteor.bindEnvironment(function (req, res, next) {                                 // 53\n      if (!IsAppUrl(req)) {                                                                                       // 54\n        next();                                                                                                   // 55\n        return;                                                                                                   // 56\n      }                                                                                                           //\n                                                                                                                  //\n      global.__CHUNK_COLLECTOR__ = [];                                                                            // 59\n                                                                                                                  //\n      var loginToken = req.cookies['meteor_login_token'];                                                         // 61\n      var headers = req.headers;                                                                                  // 62\n      var context = new FastRender._Context(loginToken, { headers: headers });                                    // 63\n                                                                                                                  //\n      var originalUserId = Meteor.userId;                                                                         // 65\n      var originalUser = Meteor.user;                                                                             // 66\n                                                                                                                  //\n      // This should be the state of the client when he remount the app                                           //\n      Meteor.userId = function () {                                                                               // 69\n        return context.userId;                                                                                    //\n      };                                                                                                          //\n      Meteor.user = function () {                                                                                 // 70\n        return undefined;                                                                                         //\n      };                                                                                                          //\n                                                                                                                  //\n      // On the server, no route should be async (I guess we trust the app)                                       //\n      ReactRouter.match({ routes: routes, location: req.url }, Meteor.bindEnvironment(function (err, redirectLocation, renderProps) {\n        if (err) {                                                                                                // 74\n          res.writeHead(500);                                                                                     // 75\n          res.write(err.messages);                                                                                // 76\n          res.end();                                                                                              // 77\n        } else if (redirectLocation) {                                                                            //\n          res.writeHead(302, { Location: redirectLocation.pathname + redirectLocation.search });                  // 79\n          res.end();                                                                                              // 80\n        } else if (renderProps) {                                                                                 //\n          sendSSRHtml(clientOptions, serverOptions, context, req, res, next, renderProps);                        // 82\n        } else {                                                                                                  //\n          res.writeHead(404);                                                                                     // 84\n          res.write('Not found');                                                                                 // 85\n          res.end();                                                                                              // 86\n        }                                                                                                         //\n      }));                                                                                                        //\n                                                                                                                  //\n      Meteor.userId = originalUserId;                                                                             // 90\n      Meteor.user = originalUser;                                                                                 // 91\n    }));                                                                                                          //\n  })();                                                                                                           //\n};                                                                                                                //\n                                                                                                                  //\nfunction sendSSRHtml(clientOptions, serverOptions, context, req, res, next, renderProps) {                        // 96\n  var _generateSSRData = generateSSRData(serverOptions, context, req, res, renderProps);                          //\n                                                                                                                  //\n  var css = _generateSSRData.css;                                                                                 //\n  var html = _generateSSRData.html;                                                                               //\n  var head = _generateSSRData.head;                                                                               //\n                                                                                                                  //\n  res.write = patchResWrite(clientOptions, serverOptions, res.write, css, html, head);                            // 98\n                                                                                                                  //\n  next();                                                                                                         // 100\n}                                                                                                                 //\n                                                                                                                  //\nfunction patchResWrite(clientOptions, serverOptions, originalWrite, css, html, head) {                            // 103\n  return function (data) {                                                                                        // 104\n    if (typeof data === 'string' && data.indexOf('<!DOCTYPE html>') === 0) {                                      // 105\n      if (!serverOptions.dontMoveScripts) {                                                                       // 106\n        data = moveScripts(data);                                                                                 // 107\n      }                                                                                                           //\n                                                                                                                  //\n      if (css) {                                                                                                  // 110\n        data = data.replace('</head>', '<style id=\"' + (clientOptions.styleCollectorId || 'css-style-collector-data') + '\">' + css + '</style></head>');\n      }                                                                                                           //\n                                                                                                                  //\n      if (head) {                                                                                                 // 114\n        // Add react-helmet stuff in the header (yay SEO!)                                                        //\n        data = data.replace('<head>', '<head>' + head.title + head.base + head.meta + head.link + head.script);   // 116\n      }                                                                                                           //\n                                                                                                                  //\n      /*                                                                                                          //\n       To set multiple root element attributes such as class and style tags, simply pass it a 2-dimensional array\n       of attribute value pairs. I.e. [[\"class\", \"sidebar main\"], [\"style\", \"background-color: white\"]]           //\n       */                                                                                                         //\n      var rootElementAttributes = '';                                                                             // 125\n      var attributes = clientOptions.rootElementAttributes instanceof Array ? clientOptions.rootElementAttributes : [];\n      // check if a 2-dimensional array was passed... if not, be nice and handle it anyway                        //\n      if (attributes[0] instanceof Array) {                                                                       // 128\n        // set as concatenated string attributes                                                                  //\n        for (var i = 0; i < attributes.length; i++) {                                                             // 130\n          rootElementAttributes = rootElementAttributes + ' ' + attributes[i][0] + '=\"' + attributes[i][1] + '\"';\n        }                                                                                                         //\n      } else if (attributes.length > 0) {                                                                         //\n        rootElementAttributes = ' ' + attributes[0] + '=\"' + attributes[1] + '\"';                                 // 134\n      }                                                                                                           //\n                                                                                                                  //\n      data = data.replace('<body>', '<body><' + (clientOptions.rootElementType || 'div') + ' id=\"' + (clientOptions.rootElement || 'react-app') + '\"' + rootElementAttributes + '>' + html + '</' + (clientOptions.rootElementType || 'div') + '>');\n                                                                                                                  //\n      if (typeof serverOptions.webpackStats !== 'undefined') {                                                    // 139\n        data = addAssetsChunks(serverOptions, data);                                                              // 140\n      }                                                                                                           //\n    }                                                                                                             //\n                                                                                                                  //\n    originalWrite.call(this, data);                                                                               // 144\n  };                                                                                                              //\n}                                                                                                                 //\n                                                                                                                  //\nfunction addAssetsChunks(serverOptions, data) {                                                                   // 148\n  var chunkNames = serverOptions.webpackStats.assetsByChunkName;                                                  // 149\n  var publicPath = serverOptions.webpackStats.publicPath;                                                         // 150\n                                                                                                                  //\n  if (typeof chunkNames.common !== 'undefined') {                                                                 // 152\n    var chunkSrc = typeof chunkNames.common === 'string' ? chunkNames.common : chunkNames.common[0];              // 153\n                                                                                                                  //\n    data = data.replace('<head>', '<head><script type=\"text/javascript\" src=\"' + publicPath + chunkSrc + '\"></script>');\n  }                                                                                                               //\n                                                                                                                  //\n  for (var i = 0; i < global.__CHUNK_COLLECTOR__.length; ++i) {                                                   // 160\n    if (typeof chunkNames[global.__CHUNK_COLLECTOR__[i]] !== 'undefined') {                                       // 161\n      var chunkSrc = typeof chunkNames[global.__CHUNK_COLLECTOR__[i]] === 'string' ? chunkNames[global.__CHUNK_COLLECTOR__[i]] : chunkNames[global.__CHUNK_COLLECTOR__[i]][0];\n                                                                                                                  //\n      data = data.replace('</head>', '<script type=\"text/javascript\" src=\"' + publicPath + chunkSrc + '\"></script></head>');\n    }                                                                                                             //\n  }                                                                                                               //\n                                                                                                                  //\n  return data;                                                                                                    // 170\n}                                                                                                                 //\n                                                                                                                  //\nfunction generateSSRData(serverOptions, context, req, res, renderProps) {                                         // 173\n  var html = undefined,                                                                                           // 174\n      css = undefined,                                                                                            //\n      head = undefined;                                                                                           //\n                                                                                                                  //\n  try {                                                                                                           // 176\n    FastRender.frContext.withValue(context, function () {                                                         // 177\n      var originalSubscribe = Meteor.subscribe;                                                                   // 178\n      Meteor.subscribe = SSRSubscribe(context);                                                                   // 179\n                                                                                                                  //\n      if (Package.mongo && !Package.autopublish) {                                                                // 181\n        Mongo.Collection._isSSR = true;                                                                           // 182\n        Mongo.Collection._ssrData = {};                                                                           // 183\n      }                                                                                                           //\n                                                                                                                  //\n      if (serverOptions.preRender) {                                                                              // 186\n        serverOptions.preRender(req, res);                                                                        // 187\n      }                                                                                                           //\n                                                                                                                  //\n      global.__STYLE_COLLECTOR_MODULES__ = [];                                                                    // 190\n      global.__STYLE_COLLECTOR__ = '';                                                                            // 191\n                                                                                                                  //\n      renderProps = babelHelpers._extends({}, renderProps, serverOptions.props);                                  // 193\n                                                                                                                  //\n      // If using redux, create the store.                                                                        //\n      var reduxStore = undefined;                                                                                 // 199\n      if (typeof serverOptions.createReduxStore !== 'undefined') {                                                // 200\n        // Create a history and set the current path, in case the callback wants                                  //\n        // to bind it to the store using redux-simple-router's syncReduxAndRouter().                              //\n        var _history = ReactRouter.history.useQueries(ReactRouter.history.createMemoryHistory)();                 // 203\n        _history.replace(req.url);                                                                                // 204\n        // Create the store, with no initial state.                                                               //\n        reduxStore = serverOptions.createReduxStore(undefined, _history);                                         // 206\n        // Fetch components data.                                                                                 //\n        fetchComponentData(renderProps, reduxStore);                                                              // 208\n      }                                                                                                           //\n                                                                                                                  //\n      // Wrap the <RouterContext> if needed before rendering it.                                                  //\n      var app = React.createElement(RouterContext, renderProps);                                                  // 212\n      if (serverOptions.wrapper) {                                                                                // 213\n        var wrapperProps = {};                                                                                    // 214\n        // Pass the redux store to the wrapper, which is supposed to be some                                      //\n        // flavour of react-redux's <Provider>.                                                                   //\n        if (reduxStore) {                                                                                         // 217\n          wrapperProps.store = reduxStore;                                                                        // 218\n        }                                                                                                         //\n        app = React.createElement(                                                                                // 220\n          serverOptions.wrapper,                                                                                  // 220\n          wrapperProps,                                                                                           //\n          app                                                                                                     //\n        );                                                                                                        //\n      }                                                                                                           //\n                                                                                                                  //\n      // Do the rendering.                                                                                        //\n      html = ReactDOMServer.renderToString(app);                                                                  // 224\n                                                                                                                  //\n      // If using redux, pass the resulting redux state to the client so that it                                  //\n      // can hydrate from there.                                                                                  //\n      if (reduxStore) {                                                                                           // 228\n        // inject-data accepts raw objects and calls EJSON.stringify() on them,                                   //\n        // but the _.each() done in there does not play nice if the store contains                                //\n        // ImmutableJS data. To avoid that, we serialize ourselves.                                               //\n        InjectData.pushData(res, 'redux-initial-state', JSON.stringify(reduxStore.getState()));                   // 232\n      }                                                                                                           //\n                                                                                                                  //\n      if (Package['nfl:react-helmet']) {                                                                          // 235\n        head = ReactHelmet.rewind();                                                                              // 236\n      }                                                                                                           //\n                                                                                                                  //\n      css = global.__STYLE_COLLECTOR__;                                                                           // 239\n                                                                                                                  //\n      if (serverOptions.postRender) {                                                                             // 241\n        serverOptions.postRender(req, res);                                                                       // 242\n      }                                                                                                           //\n                                                                                                                  //\n      if (Package.mongo && !Package.autopublish) {                                                                // 245\n        Mongo.Collection._isSSR = false;                                                                          // 246\n      }                                                                                                           //\n                                                                                                                  //\n      Meteor.subscribe = originalSubscribe;                                                                       // 249\n    });                                                                                                           //\n                                                                                                                  //\n    InjectData.pushData(res, 'fast-render-data', context.getData());                                              // 252\n  } catch (err) {                                                                                                 //\n    console.error('error while server-rendering', err.stack);                                                     // 254\n  }                                                                                                               //\n                                                                                                                  //\n  return { html: html, css: css, head: head };                                                                    // 257\n}                                                                                                                 //\n                                                                                                                  //\nfunction fetchComponentData(renderProps, reduxStore) {                                                            // 260\n  var componentsWithFetch = renderProps.components                                                                // 261\n  // Weed out 'undefined' routes.                                                                                 //\n  .filter(function (component) {                                                                                  //\n    return !!component;                                                                                           //\n  })                                                                                                              //\n  // Only look at components with a static fetchData() method                                                     //\n  .filter(function (component) {                                                                                  //\n    return component.fetchData;                                                                                   //\n  });                                                                                                             //\n                                                                                                                  //\n  if (!componentsWithFetch.length) {                                                                              // 267\n    return;                                                                                                       // 268\n  }                                                                                                               //\n                                                                                                                  //\n  if (!Package.promise) {                                                                                         // 271\n    console.error(\"react-router-ssr: Support for fetchData() static methods on route components requires the 'promise' package.\");\n    return;                                                                                                       // 273\n  }                                                                                                               //\n                                                                                                                  //\n  // Call the fetchData() methods, which lets the component dispatch possibly                                     //\n  // asynchronous actions, and collect the promises.                                                              //\n  var promises = componentsWithFetch.map(function (component) {                                                   // 278\n    return component.fetchData(reduxStore.getState, reduxStore.dispatch, renderProps);                            //\n  });                                                                                                             //\n                                                                                                                  //\n  // Wait until all promises have been resolved.                                                                  //\n  Promise.awaitAll(promises);                                                                                     // 282\n}                                                                                                                 //\n                                                                                                                  //\nfunction SSRSubscribe(context) {                                                                                  // 285\n  return function (name) {                                                                                        // 286\n    if (Package.mongo && !Package.autopublish) {                                                                  // 287\n      Mongo.Collection._isSSR = false;                                                                            // 288\n    }                                                                                                             //\n                                                                                                                  //\n    // Even with autopublish, this is needed to load data in fast-render                                          //\n                                                                                                                  //\n    for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {   //\n      params[_key - 1] = arguments[_key];                                                                         // 286\n    }                                                                                                             //\n                                                                                                                  //\n    var data = context.subscribe.apply(context, [name].concat(params));                                           // 292\n                                                                                                                  //\n    if (Package.mongo && !Package.autopublish) {                                                                  // 294\n      Mongo.Collection._fakePublish(data);                                                                        // 295\n      Mongo.Collection._isSSR = true;                                                                             // 296\n    }                                                                                                             //\n                                                                                                                  //\n    // Fire the onReady callback immediately.                                                                     //\n    if (params.length) {                                                                                          // 300\n      var callbacks = {};                                                                                         // 301\n      var lastParam = params[params.length - 1];                                                                  // 302\n      if (_.isFunction(lastParam)) {                                                                              // 303\n        callbacks.onReady = params.pop();                                                                         // 304\n      } else if (lastParam &&                                                                                     //\n      // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                                            //\n      // onStop with an error callback instead.                                                                   //\n      _.any([lastParam.onReady, lastParam.onError, lastParam.onStop], _.isFunction)) {                            // 308\n        callbacks = params.pop();                                                                                 // 310\n      }                                                                                                           //\n      callbacks.onReady && callbacks.onReady();                                                                   // 312\n    }                                                                                                             //\n                                                                                                                  //\n    return {                                                                                                      // 315\n      stop: function () {}, // Nothing to stop on server-rendering                                                // 316\n      ready: function () {                                                                                        // 317\n        return true;                                                                                              // 317\n      } // server gets the data straight away                                                                     //\n    };                                                                                                            //\n  };                                                                                                              //\n}                                                                                                                 //\n                                                                                                                  //\n// Thank you FlowRouter for this wonderful idea :)                                                                //\n// https://github.com/kadirahq/flow-router/blob/ssr/server/route.js                                               //\nvar Cheerio = Npm.require('cheerio');                                                                             // 324\n                                                                                                                  //\nfunction moveScripts(data) {                                                                                      // 326\n  var $ = Cheerio.load(data, {                                                                                    // 327\n    decodeEntities: false                                                                                         // 328\n  });                                                                                                             //\n  var heads = $('head script:not([data-dont-move])');                                                             // 330\n  $('body').append(heads);                                                                                        // 331\n                                                                                                                  //\n  // Remove empty lines caused by removing scripts                                                                //\n  $('head').html($('head').html().replace(/(^[ \\t]*\\n)/gm, ''));                                                  // 334\n                                                                                                                  //\n  return $.html();                                                                                                // 336\n}                                                                                                                 //\n                                                                                                                  //\nif (Package.mongo && !Package.autopublish) {                                                                      // 339\n  (function () {                                                                                                  //\n    // Protect against returning data that has not been published                                                 //\n    var originalFind = Mongo.Collection.prototype.find;                                                           // 341\n    var originalFindOne = Mongo.Collection.prototype.findOne;                                                     // 342\n                                                                                                                  //\n    Mongo.Collection.prototype._getSSRCollection = function () {                                                  // 344\n      return Mongo.Collection._ssrData[this._name] || new LocalCollection(this._name);                            // 345\n    };                                                                                                            //\n                                                                                                                  //\n    Mongo.Collection.prototype.findOne = function () {                                                            // 348\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {                //\n        args[_key2] = arguments[_key2];                                                                           // 348\n      }                                                                                                           //\n                                                                                                                  //\n      if (!Mongo.Collection._isSSR) {                                                                             // 349\n        return originalFindOne.apply(this, args);                                                                 // 350\n      }                                                                                                           //\n                                                                                                                  //\n      // collection transforms compatibility                                                                      //\n      var selector = args.length === 0 ? {} : args[0];                                                            // 354\n      var options = args.length < 2 ? {} : args[1];                                                               // 355\n                                                                                                                  //\n      if (typeof this._transform === 'function') {                                                                // 357\n        options.transform = this._transform;                                                                      // 358\n      }                                                                                                           //\n      return this._getSSRCollection().findOne(selector, options);                                                 // 360\n    };                                                                                                            //\n                                                                                                                  //\n    Mongo.Collection.prototype.find = function () {                                                               // 363\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {                //\n        args[_key3] = arguments[_key3];                                                                           // 363\n      }                                                                                                           //\n                                                                                                                  //\n      if (!Mongo.Collection._isSSR) {                                                                             // 364\n        return originalFind.apply(this, args);                                                                    // 365\n      }                                                                                                           //\n                                                                                                                  //\n      // collection transforms compatibility                                                                      //\n      var selector = args.length === 0 ? {} : args[0];                                                            // 369\n      var options = args.length < 2 ? {} : args[1];                                                               // 370\n                                                                                                                  //\n      if (typeof this._transform === 'function') {                                                                // 372\n        options.transform = this._transform;                                                                      // 373\n      }                                                                                                           //\n                                                                                                                  //\n      return this._getSSRCollection().find(selector, options);                                                    // 376\n    };                                                                                                            //\n                                                                                                                  //\n    Mongo.Collection._fakePublish = function (data) {                                                             // 379\n      var _loop = function (_name) {                                                                              //\n        if (!Mongo.Collection._ssrData[_name]) {                                                                  // 382\n          Mongo.Collection._ssrData[_name] = new LocalCollection(_name);                                          // 383\n        }                                                                                                         //\n                                                                                                                  //\n        for (var i = 0; i < data[_name].length; ++i) {                                                            // 386\n          data[_name][i].forEach(function (doc) {                                                                 // 387\n            Mongo.Collection._ssrData[_name].update({ _id: doc._id }, doc, { upsert: true });                     // 388\n          });                                                                                                     //\n        }                                                                                                         //\n      };                                                                                                          //\n                                                                                                                  //\n      // Create a local collection and only add the published data                                                //\n      for (var _name in babelHelpers.sanitizeForInObject(data)) {                                                 // 381\n        _loop(_name);                                                                                             //\n      }                                                                                                           //\n    };                                                                                                            //\n                                                                                                                  //\n    // Support SSR for publish-counts                                                                             //\n    if (Package['tmeasday:publish-counts']) {                                                                     // 395\n      // Counts doesn't exist if we don't wait for startup (weird)                                                //\n      Meteor.startup(function () {                                                                                // 397\n        Counts.get = function (name) {                                                                            // 398\n          var collection = Mongo.Collection._ssrData.counts || new LocalCollection('counts');                     // 399\n          var count = collection.findOne(name);                                                                   // 400\n                                                                                                                  //\n          return count && count.count || 0;                                                                       // 402\n        };                                                                                                        //\n                                                                                                                  //\n        Counts.has = function (name) {                                                                            // 405\n          var collection = Mongo.Collection._ssrData.counts || new LocalCollection('counts');                     // 406\n          return !!collection.findOne(name);                                                                      // 407\n        };                                                                                                        //\n      });                                                                                                         //\n    }                                                                                                             //\n  })();                                                                                                           //\n}                                                                                                                 //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['reactrouter:react-router-ssr'] = {\n  ReactRouterSSR: ReactRouterSSR\n};\n\n})();\n","servePath":"/packages/reactrouter_react-router-ssr.js","sourceMap":{"version":3,"sources":["/packages/reactrouter_react-router-ssr/lib/react-router-ssr.js","/lib/server.jsx"],"names":[],"mappings":"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","file":"/packages/reactrouter_react-router-ssr.js","sourcesContent":["ReactRouterSSR = {};\n","// meteor algorithm to check if this is a meteor serving http request or not\nfunction IsAppUrl(req) {\n  var url = req.url\n  if(url === '/favicon.ico' || url === '/robots.txt') {\n    return false;\n  }\n\n  // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n  if(url === '/app.manifest') {\n    return false;\n  }\n\n  // Avoid serving app HTML for declared routes such as /sockjs/.\n  if(RoutePolicy.classify(url)) {\n    return false;\n  }\n  return true;\n}\n\nconst { RouterContext } = ReactRouter;\nconst url = Npm.require('url');\nconst Fiber = Npm.require('fibers');\nconst cookieParser = Npm.require('cookie-parser');\n\nlet webpackStats;\n\nReactRouterSSR.LoadWebpackStats = function(stats) {\n  webpackStats = stats;\n}\n\nReactRouterSSR.Run = function(routes, clientOptions, serverOptions) {\n  if (!clientOptions) {\n    clientOptions = {};\n  }\n\n  if (!serverOptions) {\n    serverOptions = {};\n  }\n\n  if (!serverOptions.webpackStats) {\n    serverOptions.webpackStats = webpackStats;\n  }\n\n  Meteor.bindEnvironment(function() {\n    // Parse cookies for the login token\n    WebApp.rawConnectHandlers.use(cookieParser());\n\n    WebApp.connectHandlers.use(Meteor.bindEnvironment(function(req, res, next) {\n      if (!IsAppUrl(req)) {\n        next();\n        return;\n      }\n\n      global.__CHUNK_COLLECTOR__ = [];\n\n      var loginToken = req.cookies['meteor_login_token'];\n      var headers = req.headers;\n      var context = new FastRender._Context(loginToken, { headers });\n\n      const originalUserId = Meteor.userId;\n      const originalUser = Meteor.user;\n\n      // This should be the state of the client when he remount the app\n      Meteor.userId = () => context.userId;\n      Meteor.user = () => undefined;\n\n      // On the server, no route should be async (I guess we trust the app)\n      ReactRouter.match({ routes, location: req.url }, Meteor.bindEnvironment((err, redirectLocation, renderProps) => {\n        if (err) {\n          res.writeHead(500);\n          res.write(err.messages);\n          res.end();\n        } else if (redirectLocation) {\n          res.writeHead(302, { Location: redirectLocation.pathname + redirectLocation.search })\n          res.end();\n        } else if (renderProps) {\n          sendSSRHtml(clientOptions, serverOptions, context, req, res, next, renderProps);\n        } else {\n          res.writeHead(404);\n          res.write('Not found');\n          res.end();\n        }\n      }));\n\n      Meteor.userId = originalUserId;\n      Meteor.user = originalUser;\n    }));\n  })();\n};\n\nfunction sendSSRHtml(clientOptions, serverOptions, context, req, res, next, renderProps) {\n  const { css, html, head } = generateSSRData(serverOptions, context, req, res, renderProps);\n  res.write = patchResWrite(clientOptions, serverOptions, res.write, css, html, head);\n\n  next();\n}\n\nfunction patchResWrite(clientOptions, serverOptions, originalWrite, css, html, head) {\n  return function(data) {\n    if(typeof data === 'string' && data.indexOf('<!DOCTYPE html>') === 0) {\n      if (!serverOptions.dontMoveScripts) {\n        data = moveScripts(data);\n      }\n\n      if (css) {\n        data = data.replace('</head>', '<style id=\"' + (clientOptions.styleCollectorId || 'css-style-collector-data') + '\">' + css + '</style></head>');\n      }\n\n      if (head) {\n        // Add react-helmet stuff in the header (yay SEO!)\n        data = data.replace('<head>',\n          '<head>' + head.title + head.base + head.meta + head.link + head.script\n        );\n      }\n\n      /*\n       To set multiple root element attributes such as class and style tags, simply pass it a 2-dimensional array\n       of attribute value pairs. I.e. [[\"class\", \"sidebar main\"], [\"style\", \"background-color: white\"]]\n       */\n      let rootElementAttributes = '';\n      const attributes = clientOptions.rootElementAttributes instanceof Array ? clientOptions.rootElementAttributes : [];\n      // check if a 2-dimensional array was passed... if not, be nice and handle it anyway\n      if(attributes[0] instanceof Array) {\n        // set as concatenated string attributes\n        for(var i = 0; i < attributes.length; i++) {\n          rootElementAttributes = rootElementAttributes + ' ' + attributes[i][0] + '=\"' + attributes[i][1] + '\"';\n        }\n      } else if (attributes.length > 0){\n        rootElementAttributes = ' ' + attributes[0] + '=\"' + attributes[1] + '\"';\n      }\n\n      data = data.replace('<body>', '<body><' + (clientOptions.rootElementType || 'div') + ' id=\"' + (clientOptions.rootElement || 'react-app') + '\"' + rootElementAttributes + '>' + html + '</' + (clientOptions.rootElementType || 'div') + '>');\n\n      if (typeof serverOptions.webpackStats !== 'undefined') {\n        data = addAssetsChunks(serverOptions, data);\n      }\n    }\n\n    originalWrite.call(this, data);\n  }\n}\n\nfunction addAssetsChunks(serverOptions, data) {\n  const chunkNames = serverOptions.webpackStats.assetsByChunkName;\n  const publicPath = serverOptions.webpackStats.publicPath;\n\n  if (typeof chunkNames.common !== 'undefined') {\n    var chunkSrc = (typeof chunkNames.common === 'string')?\n      chunkNames.common :\n      chunkNames.common[0];\n\n    data = data.replace('<head>', '<head><script type=\"text/javascript\" src=\"' + publicPath + chunkSrc + '\"></script>');\n  }\n\n  for (var i = 0; i < global.__CHUNK_COLLECTOR__.length; ++i) {\n    if (typeof chunkNames[global.__CHUNK_COLLECTOR__[i]] !== 'undefined') {\n      var chunkSrc = (typeof chunkNames[global.__CHUNK_COLLECTOR__[i]] === 'string')?\n        chunkNames[global.__CHUNK_COLLECTOR__[i]] :\n        chunkNames[global.__CHUNK_COLLECTOR__[i]][0];\n\n      data = data.replace('</head>', '<script type=\"text/javascript\" src=\"' + publicPath + chunkSrc + '\"></script></head>');\n    }\n  }\n\n  return data;\n}\n\nfunction generateSSRData(serverOptions, context, req, res, renderProps) {\n  let html, css, head;\n\n  try {\n    FastRender.frContext.withValue(context, function() {\n      const originalSubscribe = Meteor.subscribe;\n      Meteor.subscribe = SSRSubscribe(context);\n\n      if (Package.mongo && !Package.autopublish) {\n        Mongo.Collection._isSSR = true;\n        Mongo.Collection._ssrData = {};\n      }\n\n      if (serverOptions.preRender) {\n        serverOptions.preRender(req, res);\n      }\n\n      global.__STYLE_COLLECTOR_MODULES__ = [];\n      global.__STYLE_COLLECTOR__ = '';\n\n      renderProps = {\n        ...renderProps,\n        ...serverOptions.props\n      };\n\n      // If using redux, create the store.\n      let reduxStore;\n      if (typeof serverOptions.createReduxStore !== 'undefined') {\n        // Create a history and set the current path, in case the callback wants\n        // to bind it to the store using redux-simple-router's syncReduxAndRouter().\n        const history = ReactRouter.history.useQueries(ReactRouter.history.createMemoryHistory)();\n        history.replace(req.url);\n        // Create the store, with no initial state.\n        reduxStore = serverOptions.createReduxStore(undefined, history);\n        // Fetch components data.\n        fetchComponentData(renderProps, reduxStore);\n      }\n\n      // Wrap the <RouterContext> if needed before rendering it.\n      let app = <RouterContext {...renderProps} />;\n      if (serverOptions.wrapper) {\n        const wrapperProps = {};\n        // Pass the redux store to the wrapper, which is supposed to be some\n        // flavour of react-redux's <Provider>.\n        if (reduxStore) {\n          wrapperProps.store = reduxStore;\n        }\n        app = <serverOptions.wrapper {...wrapperProps}>{app}</serverOptions.wrapper>;\n      }\n\n      // Do the rendering.\n      html = ReactDOMServer.renderToString(app);\n\n      // If using redux, pass the resulting redux state to the client so that it\n      // can hydrate from there.\n      if (reduxStore) {\n        // inject-data accepts raw objects and calls EJSON.stringify() on them,\n        // but the _.each() done in there does not play nice if the store contains\n        // ImmutableJS data. To avoid that, we serialize ourselves.\n        InjectData.pushData(res, 'redux-initial-state', JSON.stringify(reduxStore.getState()));\n      }\n\n      if (Package['nfl:react-helmet']) {\n        head = ReactHelmet.rewind();\n      }\n\n      css = global.__STYLE_COLLECTOR__;\n\n      if (serverOptions.postRender) {\n        serverOptions.postRender(req, res);\n      }\n\n      if (Package.mongo && !Package.autopublish) {\n        Mongo.Collection._isSSR = false;\n      }\n\n      Meteor.subscribe = originalSubscribe;\n    });\n\n    InjectData.pushData(res, 'fast-render-data', context.getData());\n  } catch(err) {\n    console.error('error while server-rendering', err.stack);\n  }\n\n  return { html, css, head };\n}\n\nfunction fetchComponentData(renderProps, reduxStore) {\n  const componentsWithFetch = renderProps.components\n    // Weed out 'undefined' routes.\n    .filter(component => !!component)\n    // Only look at components with a static fetchData() method\n    .filter(component => component.fetchData);\n\n  if (!componentsWithFetch.length) {\n    return;\n  }\n\n  if (!Package.promise) {\n    console.error(\"react-router-ssr: Support for fetchData() static methods on route components requires the 'promise' package.\");\n    return;\n  }\n\n  // Call the fetchData() methods, which lets the component dispatch possibly\n  // asynchronous actions, and collect the promises.\n  const promises = componentsWithFetch\n    .map(component => component.fetchData(reduxStore.getState, reduxStore.dispatch, renderProps));\n\n  // Wait until all promises have been resolved.\n  Promise.awaitAll(promises);\n}\n\nfunction SSRSubscribe(context) {\n  return function(name, ...params) {\n    if (Package.mongo && !Package.autopublish) {\n      Mongo.Collection._isSSR = false;\n    }\n\n    // Even with autopublish, this is needed to load data in fast-render\n    const data = context.subscribe(name, ...params);\n\n    if (Package.mongo && !Package.autopublish) {\n      Mongo.Collection._fakePublish(data);\n      Mongo.Collection._isSSR = true;\n    }\n\n    // Fire the onReady callback immediately.\n    if (params.length) {\n      var callbacks = {};\n      var lastParam = params[params.length - 1];\n      if (_.isFunction(lastParam)) {\n        callbacks.onReady = params.pop();\n      } else if (lastParam &&\n          // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use\n          // onStop with an error callback instead.\n        _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],\n          _.isFunction)) {\n        callbacks = params.pop();\n      }\n      callbacks.onReady && callbacks.onReady();\n    }\n\n    return {\n      stop() {}, // Nothing to stop on server-rendering\n      ready() { return true; } // server gets the data straight away\n    };\n  }\n}\n\n// Thank you FlowRouter for this wonderful idea :)\n// https://github.com/kadirahq/flow-router/blob/ssr/server/route.js\nconst Cheerio = Npm.require('cheerio');\n\nfunction moveScripts(data) {\n  const $ = Cheerio.load(data, {\n    decodeEntities: false\n  });\n  const heads = $('head script:not([data-dont-move])');\n  $('body').append(heads);\n\n  // Remove empty lines caused by removing scripts\n  $('head').html($('head').html().replace(/(^[ \\t]*\\n)/gm, ''));\n\n  return $.html();\n}\n\nif (Package.mongo && !Package.autopublish) {\n  // Protect against returning data that has not been published\n  const originalFind = Mongo.Collection.prototype.find;\n  const originalFindOne = Mongo.Collection.prototype.findOne;\n\n  Mongo.Collection.prototype._getSSRCollection = function() {\n    return Mongo.Collection._ssrData[this._name] || new LocalCollection(this._name);\n  };\n\n  Mongo.Collection.prototype.findOne = function(...args) {\n    if (!Mongo.Collection._isSSR) {\n      return originalFindOne.apply(this, args);\n    }\n\n    // collection transforms compatibility\n    const selector = args.length === 0 ? {} : args[0];\n    let options = args.length < 2 ? {} : args[1];\n\n    if (typeof this._transform === 'function') {\n      options.transform = this._transform;\n    }\n    return this._getSSRCollection().findOne(selector, options);\n  };\n\n  Mongo.Collection.prototype.find = function(...args) {\n    if (!Mongo.Collection._isSSR) {\n      return originalFind.apply(this, args);\n    }\n\n    // collection transforms compatibility\n    const selector = args.length === 0 ? {} : args[0];\n    let options = args.length < 2 ? {} : args[1];\n\n    if (typeof this._transform === 'function') {\n      options.transform = this._transform;\n    }\n\n    return this._getSSRCollection().find(selector, options);\n  };\n\n  Mongo.Collection._fakePublish = function(data) {\n    // Create a local collection and only add the published data\n    for (let name in data) {\n      if (!Mongo.Collection._ssrData[name]) {\n        Mongo.Collection._ssrData[name] = new LocalCollection(name);\n      }\n\n      for (let i = 0; i < data[name].length; ++i) {\n        data[name][i].forEach(doc => {\n          Mongo.Collection._ssrData[name].update({ _id: doc._id }, doc, { upsert: true });\n        });\n      }\n    }\n  };\n\n  // Support SSR for publish-counts\n  if (Package['tmeasday:publish-counts']) {\n    // Counts doesn't exist if we don't wait for startup (weird)\n    Meteor.startup(function() {\n      Counts.get = function(name) {\n        const collection = Mongo.Collection._ssrData.counts || new LocalCollection('counts');\n        const count = collection.findOne(name);\n\n        return count && count.count || 0;\n      };\n\n      Counts.has = function(name) {\n        const collection = Mongo.Collection._ssrData.counts || new LocalCollection('counts');\n        return !!collection.findOne(name);\n      }\n    });\n  }\n}\n"]}}]