[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsServer = Package['accounts-base'].AccountsServer;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar ServiceConfiguration;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/service-configuration/service_configuration_common.js                     //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\nif (typeof ServiceConfiguration === 'undefined') {                                    // 1\n  ServiceConfiguration = {};                                                          // 2\n}                                                                                     // 3\n                                                                                      // 4\n                                                                                      // 5\n// Table containing documents with configuration options for each                     // 6\n// login service                                                                      // 7\nServiceConfiguration.configurations = new Mongo.Collection(                           // 8\n  \"meteor_accounts_loginServiceConfiguration\", {                                      // 9\n    _preventAutopublish: true,                                                        // 10\n    connection: Meteor.isClient ? Accounts.connection : Meteor.connection             // 11\n  });                                                                                 // 12\n// Leave this collection open in insecure mode. In theory, someone could              // 13\n// hijack your oauth connect requests to a different endpoint or appId,               // 14\n// but you did ask for 'insecure'. The advantage is that it is much                   // 15\n// easier to write a configuration wizard that works only in insecure                 // 16\n// mode.                                                                              // 17\n                                                                                      // 18\n                                                                                      // 19\n// Thrown when trying to use a login service which is not configured                  // 20\nServiceConfiguration.ConfigError = function (serviceName) {                           // 21\n  if (Meteor.isClient && !Accounts.loginServicesConfigured()) {                       // 22\n    this.message = \"Login service configuration not yet loaded\";                      // 23\n  } else if (serviceName) {                                                           // 24\n    this.message = \"Service \" + serviceName + \" not configured\";                      // 25\n  } else {                                                                            // 26\n    this.message = \"Service not configured\";                                          // 27\n  }                                                                                   // 28\n};                                                                                    // 29\nServiceConfiguration.ConfigError.prototype = new Error();                             // 30\nServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';\n                                                                                      // 32\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/service-configuration/service_configuration_server.js                     //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n// Only one configuration should ever exist for each service.                         // 1\n// A unique index helps avoid various race conditions which could                     // 2\n// otherwise lead to an inconsistent database state (when there are multiple          // 3\n// configurations for a single service, which configuration is correct?)              // 4\ntry {                                                                                 // 5\n    ServiceConfiguration.configurations._ensureIndex(                                 // 6\n        { \"service\": 1 },                                                             // 7\n        { unique: true }                                                              // 8\n    );                                                                                // 9\n} catch (err) {                                                                       // 10\n    console.error(                                                                    // 11\n        \"The service-configuration package persists configuration in the \" +          // 12\n        \"meteor_accounts_loginServiceConfiguration collection in MongoDB. As \" +      // 13\n        \"each service should have exactly one configuration, Meteor \" +               // 14\n        \"automatically creates a MongoDB index with a unique constraint on the \" +    // 15\n        \" meteor_accounts_loginServiceConfiguration collection. The \" +               // 16\n        \"_ensureIndex command which creates that index is failing.\\n\\n\" +             // 17\n        \"Meteor versions before 1.0.4 did not create this index. If you recently \" +  // 18\n        \"upgraded and are seeing this error message for the first time, please \" +    // 19\n        \"check your meteor_accounts_loginServiceConfiguration collection for \" +      // 20\n        \"multiple configuration entries for the same service and delete \" +           // 21\n        \"configuration entries until there is no more than one configuration \" +      // 22\n        \"entry per service.\\n\\n\" +                                                    // 23\n        \"If the meteor_accounts_loginServiceConfiguration collection looks \" +        // 24\n        \"fine, the _ensureIndex command is failing for some other reason.\\n\\n\" +      // 25\n        \"For more information on this history of this issue, please see \" +           // 26\n        \"https://github.com/meteor/meteor/pull/3514.\\n\"                               // 27\n    );                                                                                // 28\n    throw err;                                                                        // 29\n}                                                                                     // 30\n                                                                                      // 31\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['service-configuration'] = {\n  ServiceConfiguration: ServiceConfiguration\n};\n\n})();\n","servePath":"/packages/service-configuration.js","sourceMap":{"version":3,"sources":["/packages/service-configuration/service_configuration_common.js","/packages/service-configuration/service_configuration_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2F;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2F","file":"/packages/service-configuration.js","sourcesContent":["if (typeof ServiceConfiguration === 'undefined') {\n  ServiceConfiguration = {};\n}\n\n\n// Table containing documents with configuration options for each\n// login service\nServiceConfiguration.configurations = new Mongo.Collection(\n  \"meteor_accounts_loginServiceConfiguration\", {\n    _preventAutopublish: true,\n    connection: Meteor.isClient ? Accounts.connection : Meteor.connection\n  });\n// Leave this collection open in insecure mode. In theory, someone could\n// hijack your oauth connect requests to a different endpoint or appId,\n// but you did ask for 'insecure'. The advantage is that it is much\n// easier to write a configuration wizard that works only in insecure\n// mode.\n\n\n// Thrown when trying to use a login service which is not configured\nServiceConfiguration.ConfigError = function (serviceName) {\n  if (Meteor.isClient && !Accounts.loginServicesConfigured()) {\n    this.message = \"Login service configuration not yet loaded\";\n  } else if (serviceName) {\n    this.message = \"Service \" + serviceName + \" not configured\";\n  } else {\n    this.message = \"Service not configured\";\n  }\n};\nServiceConfiguration.ConfigError.prototype = new Error();\nServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';\n","// Only one configuration should ever exist for each service.\n// A unique index helps avoid various race conditions which could\n// otherwise lead to an inconsistent database state (when there are multiple\n// configurations for a single service, which configuration is correct?)\ntry {\n    ServiceConfiguration.configurations._ensureIndex(\n        { \"service\": 1 },\n        { unique: true }\n    );\n} catch (err) {\n    console.error(\n        \"The service-configuration package persists configuration in the \" +\n        \"meteor_accounts_loginServiceConfiguration collection in MongoDB. As \" +\n        \"each service should have exactly one configuration, Meteor \" +\n        \"automatically creates a MongoDB index with a unique constraint on the \" +\n        \" meteor_accounts_loginServiceConfiguration collection. The \" +\n        \"_ensureIndex command which creates that index is failing.\\n\\n\" +\n        \"Meteor versions before 1.0.4 did not create this index. If you recently \" +\n        \"upgraded and are seeing this error message for the first time, please \" +\n        \"check your meteor_accounts_loginServiceConfiguration collection for \" +\n        \"multiple configuration entries for the same service and delete \" +\n        \"configuration entries until there is no more than one configuration \" +\n        \"entry per service.\\n\\n\" +\n        \"If the meteor_accounts_loginServiceConfiguration collection looks \" +\n        \"fine, the _ensureIndex command is failing for some other reason.\\n\\n\" +\n        \"For more information on this history of this issue, please see \" +\n        \"https://github.com/meteor/meteor/pull/3514.\\n\"\n    );\n    throw err;\n}\n"]}}]