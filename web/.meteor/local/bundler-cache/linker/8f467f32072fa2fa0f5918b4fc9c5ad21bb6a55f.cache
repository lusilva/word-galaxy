[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\n\n/* Package-scope variables */\nvar Babel, BabelCompiler;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// packages/babel-compiler/babel.js                                           //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nvar meteorBabel = Npm.require('meteor-babel');                                // 1\n                                                                              // 2\nfunction validateExtraFeatures(extraFeatures) {                               // 3\n  if (extraFeatures) {                                                        // 4\n    check(extraFeatures, {                                                    // 5\n      // Modify options to enable ES2015 module syntax.                       // 6\n      modules: Match.Optional(Boolean),                                       // 7\n      // Modify options to enable async/await syntax powered by Fibers.       // 8\n      meteorAsyncAwait: Match.Optional(Boolean),                              // 9\n      // Modify options to enable React/JSX syntax.                           // 10\n      react: Match.Optional(Boolean),                                         // 11\n      // Improve compatibility in older versions of Internet Explorer.        // 12\n      jscript: Match.Optional(Boolean)                                        // 13\n    });                                                                       // 14\n  }                                                                           // 15\n}                                                                             // 16\n                                                                              // 17\n/**                                                                           // 18\n * Returns a new object containing default options appropriate for            // 19\n */                                                                           // 20\nfunction getDefaultOptions(extraFeatures) {                                   // 21\n  validateExtraFeatures(extraFeatures);                                       // 22\n                                                                              // 23\n  // See https://github.com/meteor/babel/blob/master/options.js for more      // 24\n  // information about what the default options are.                          // 25\n  var options = meteorBabel.getDefaultOptions(extraFeatures);                 // 26\n                                                                              // 27\n  // The sourceMap option should probably be removed from the default         // 28\n  // options returned by meteorBabel.getDefaultOptions.                       // 29\n  delete options.sourceMap;                                                   // 30\n                                                                              // 31\n  return options;                                                             // 32\n}                                                                             // 33\n                                                                              // 34\nBabel = {                                                                     // 35\n  getDefaultOptions: getDefaultOptions,                                       // 36\n                                                                              // 37\n  validateExtraFeatures: validateExtraFeatures,                               // 38\n                                                                              // 39\n  compile: function (source, options) {                                       // 40\n    options = options || getDefaultOptions();                                 // 41\n    return meteorBabel.compile(source, options);                              // 42\n  },                                                                          // 43\n                                                                              // 44\n  // Provided for backwards compatibility; prefer Babel.compile.              // 45\n  transformMeteor: function (source, extraOptions) {                          // 46\n    var options = getDefaultOptions();                                        // 47\n                                                                              // 48\n    if (extraOptions) {                                                       // 49\n      if (extraOptions.extraWhitelist) {                                      // 50\n        options.whitelist.push.apply(                                         // 51\n          options.whitelist,                                                  // 52\n          extraOptions.extraWhitelist                                         // 53\n        );                                                                    // 54\n      }                                                                       // 55\n                                                                              // 56\n      for (var key in extraOptions) {                                         // 57\n        if (key !== \"extraWhitelist\" &&                                       // 58\n            hasOwnProperty.call(extraOptions, key)) {                         // 59\n          options[key] = extraOptions[key];                                   // 60\n        }                                                                     // 61\n      }                                                                       // 62\n    }                                                                         // 63\n                                                                              // 64\n    return meteorBabel.compile(source, options);                              // 65\n  },                                                                          // 66\n                                                                              // 67\n  setCacheDir: function (cacheDir) {                                          // 68\n    meteorBabel.setCacheDir(cacheDir);                                        // 69\n  }                                                                           // 70\n};                                                                            // 71\n                                                                              // 72\n////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// packages/babel-compiler/babel-compiler.js                                  //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\n/**                                                                           // 1\n * A compiler that can be instantiated with features and used inside          // 2\n * Plugin.registerCompiler                                                    // 3\n * @param {Object} extraFeatures The same object that getDefaultOptions takes\n */                                                                           // 5\nBabelCompiler = function BabelCompiler(extraFeatures) {                       // 6\n  Babel.validateExtraFeatures(extraFeatures);                                 // 7\n  this.extraFeatures = extraFeatures;                                         // 8\n};                                                                            // 9\n                                                                              // 10\nvar BCp = BabelCompiler.prototype;                                            // 11\nvar excludedFileExtensionPattern = /\\.es5\\.js$/i;                             // 12\n                                                                              // 13\nBCp.processFilesForTarget = function (inputFiles) {                           // 14\n  var self = this;                                                            // 15\n                                                                              // 16\n  inputFiles.forEach(function (inputFile) {                                   // 17\n    var source = inputFile.getContentsAsString();                             // 18\n    var inputFilePath = inputFile.getPathInPackage();                         // 19\n    var outputFilePath = inputFile.getPathInPackage();                        // 20\n    var fileOptions = inputFile.getFileOptions();                             // 21\n    var toBeAdded = {                                                         // 22\n      sourcePath: inputFilePath,                                              // 23\n      path: outputFilePath,                                                   // 24\n      data: source,                                                           // 25\n      hash: inputFile.getSourceHash(),                                        // 26\n      sourceMap: null,                                                        // 27\n      bare: !! fileOptions.bare                                               // 28\n    };                                                                        // 29\n                                                                              // 30\n    // If you need to exclude a specific file within a package from Babel     // 31\n    // compilation, pass the { transpile: false } options to api.addFiles     // 32\n    // when you add that file.                                                // 33\n    if (fileOptions.transpile !== false &&                                    // 34\n        // If you need to exclude a specific file within an app from Babel    // 35\n        // compilation, give it the following file extension: .es5.js         // 36\n        ! excludedFileExtensionPattern.test(inputFilePath)) {                 // 37\n                                                                              // 38\n      var targetCouldBeInternetExplorer8 =                                    // 39\n        inputFile.getArch() === \"web.browser\";                                // 40\n                                                                              // 41\n      self.extraFeatures = self.extraFeatures || {};                          // 42\n      if (! self.extraFeatures.hasOwnProperty(\"jscript\")) {                   // 43\n        // Perform some additional transformations to improve                 // 44\n        // compatibility in older browsers (e.g. wrapping named function      // 45\n        // expressions, per http://kiro.me/blog/nfe_dilemma.html).            // 46\n        self.extraFeatures.jscript = targetCouldBeInternetExplorer8;          // 47\n      }                                                                       // 48\n                                                                              // 49\n      var babelOptions = Babel.getDefaultOptions(self.extraFeatures);         // 50\n                                                                              // 51\n      babelOptions.sourceMap = true;                                          // 52\n      babelOptions.filename = inputFilePath;                                  // 53\n      babelOptions.sourceFileName = \"/\" + inputFilePath;                      // 54\n      babelOptions.sourceMapName = \"/\" + outputFilePath + \".map\";             // 55\n                                                                              // 56\n      try {                                                                   // 57\n        var result = Babel.compile(source, babelOptions);                     // 58\n      } catch (e) {                                                           // 59\n        if (e.loc) {                                                          // 60\n          inputFile.error({                                                   // 61\n            message: e.message,                                               // 62\n            sourcePath: inputFilePath,                                        // 63\n            line: e.loc.line,                                                 // 64\n            column: e.loc.column,                                             // 65\n          });                                                                 // 66\n                                                                              // 67\n          return;                                                             // 68\n        }                                                                     // 69\n                                                                              // 70\n        throw e;                                                              // 71\n      }                                                                       // 72\n                                                                              // 73\n      toBeAdded.data = result.code;                                           // 74\n      toBeAdded.hash = result.hash;                                           // 75\n      toBeAdded.sourceMap = result.map;                                       // 76\n    }                                                                         // 77\n                                                                              // 78\n    inputFile.addJavaScript(toBeAdded);                                       // 79\n  });                                                                         // 80\n};                                                                            // 81\n                                                                              // 82\nBCp.setDiskCacheDirectory = function (cacheDir) {                             // 83\n  Babel.setCacheDir(cacheDir);                                                // 84\n};                                                                            // 85\n                                                                              // 86\n////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['babel-compiler'] = {\n  Babel: Babel,\n  BabelCompiler: BabelCompiler\n};\n\n})();\n","servePath":"/packages/babel-compiler.js","sourceMap":{"version":3,"sources":["/packages/babel-compiler/babel.js","/packages/babel-compiler/babel-compiler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mF;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mF","file":"/packages/babel-compiler.js","sourcesContent":["var meteorBabel = Npm.require('meteor-babel');\n\nfunction validateExtraFeatures(extraFeatures) {\n  if (extraFeatures) {\n    check(extraFeatures, {\n      // Modify options to enable ES2015 module syntax.\n      modules: Match.Optional(Boolean),\n      // Modify options to enable async/await syntax powered by Fibers.\n      meteorAsyncAwait: Match.Optional(Boolean),\n      // Modify options to enable React/JSX syntax.\n      react: Match.Optional(Boolean),\n      // Improve compatibility in older versions of Internet Explorer.\n      jscript: Match.Optional(Boolean)\n    });\n  }\n}\n\n/**\n * Returns a new object containing default options appropriate for\n */\nfunction getDefaultOptions(extraFeatures) {\n  validateExtraFeatures(extraFeatures);\n\n  // See https://github.com/meteor/babel/blob/master/options.js for more\n  // information about what the default options are.\n  var options = meteorBabel.getDefaultOptions(extraFeatures);\n\n  // The sourceMap option should probably be removed from the default\n  // options returned by meteorBabel.getDefaultOptions.\n  delete options.sourceMap;\n\n  return options;\n}\n\nBabel = {\n  getDefaultOptions: getDefaultOptions,\n\n  validateExtraFeatures: validateExtraFeatures,\n\n  compile: function (source, options) {\n    options = options || getDefaultOptions();\n    return meteorBabel.compile(source, options);\n  },\n\n  // Provided for backwards compatibility; prefer Babel.compile.\n  transformMeteor: function (source, extraOptions) {\n    var options = getDefaultOptions();\n\n    if (extraOptions) {\n      if (extraOptions.extraWhitelist) {\n        options.whitelist.push.apply(\n          options.whitelist,\n          extraOptions.extraWhitelist\n        );\n      }\n\n      for (var key in extraOptions) {\n        if (key !== \"extraWhitelist\" &&\n            hasOwnProperty.call(extraOptions, key)) {\n          options[key] = extraOptions[key];\n        }\n      }\n    }\n\n    return meteorBabel.compile(source, options);\n  },\n\n  setCacheDir: function (cacheDir) {\n    meteorBabel.setCacheDir(cacheDir);\n  }\n};\n","/**\n * A compiler that can be instantiated with features and used inside\n * Plugin.registerCompiler\n * @param {Object} extraFeatures The same object that getDefaultOptions takes\n */\nBabelCompiler = function BabelCompiler(extraFeatures) {\n  Babel.validateExtraFeatures(extraFeatures);\n  this.extraFeatures = extraFeatures;\n};\n\nvar BCp = BabelCompiler.prototype;\nvar excludedFileExtensionPattern = /\\.es5\\.js$/i;\n\nBCp.processFilesForTarget = function (inputFiles) {\n  var self = this;\n\n  inputFiles.forEach(function (inputFile) {\n    var source = inputFile.getContentsAsString();\n    var inputFilePath = inputFile.getPathInPackage();\n    var outputFilePath = inputFile.getPathInPackage();\n    var fileOptions = inputFile.getFileOptions();\n    var toBeAdded = {\n      sourcePath: inputFilePath,\n      path: outputFilePath,\n      data: source,\n      hash: inputFile.getSourceHash(),\n      sourceMap: null,\n      bare: !! fileOptions.bare\n    };\n\n    // If you need to exclude a specific file within a package from Babel\n    // compilation, pass the { transpile: false } options to api.addFiles\n    // when you add that file.\n    if (fileOptions.transpile !== false &&\n        // If you need to exclude a specific file within an app from Babel\n        // compilation, give it the following file extension: .es5.js\n        ! excludedFileExtensionPattern.test(inputFilePath)) {\n\n      var targetCouldBeInternetExplorer8 =\n        inputFile.getArch() === \"web.browser\";\n\n      self.extraFeatures = self.extraFeatures || {};\n      if (! self.extraFeatures.hasOwnProperty(\"jscript\")) {\n        // Perform some additional transformations to improve\n        // compatibility in older browsers (e.g. wrapping named function\n        // expressions, per http://kiro.me/blog/nfe_dilemma.html).\n        self.extraFeatures.jscript = targetCouldBeInternetExplorer8;\n      }\n\n      var babelOptions = Babel.getDefaultOptions(self.extraFeatures);\n\n      babelOptions.sourceMap = true;\n      babelOptions.filename = inputFilePath;\n      babelOptions.sourceFileName = \"/\" + inputFilePath;\n      babelOptions.sourceMapName = \"/\" + outputFilePath + \".map\";\n\n      try {\n        var result = Babel.compile(source, babelOptions);\n      } catch (e) {\n        if (e.loc) {\n          inputFile.error({\n            message: e.message,\n            sourcePath: inputFilePath,\n            line: e.loc.line,\n            column: e.loc.column,\n          });\n\n          return;\n        }\n\n        throw e;\n      }\n\n      toBeAdded.data = result.code;\n      toBeAdded.hash = result.hash;\n      toBeAdded.sourceMap = result.map;\n    }\n\n    inputFile.addJavaScript(toBeAdded);\n  });\n};\n\nBCp.setDiskCacheDirectory = function (cacheDir) {\n  Babel.setCacheDir(cacheDir);\n};\n"]}}]