[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar ClientVersions, Autoupdate;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/autoupdate/autoupdate_client.js                                                //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n// Subscribe to the `meteor_autoupdate_clientVersions` collection,                         // 1\n// which contains the set of acceptable client versions.                                   // 2\n//                                                                                         // 3\n// A \"hard code push\" occurs when the running client version is not in                     // 4\n// the set of acceptable client versions (or the server updates the                        // 5\n// collection, there is a published client version marked `current` and                    // 6\n// the running client version is no longer in the set).                                    // 7\n//                                                                                         // 8\n// When the `reload` package is loaded, a hard code push causes                            // 9\n// the browser to reload, so that it will load the latest client                           // 10\n// version from the server.                                                                // 11\n//                                                                                         // 12\n// A \"soft code push\" represents the situation when the running client                     // 13\n// version is in the set of acceptable versions, but there is a newer                      // 14\n// version available on the server.                                                        // 15\n//                                                                                         // 16\n// `Autoupdate.newClientAvailable` is a reactive data source which                         // 17\n// becomes `true` if there is a new version of the client is available on                  // 18\n// the server.                                                                             // 19\n//                                                                                         // 20\n// This package doesn't implement a soft code reload process itself,                       // 21\n// but `newClientAvailable` could be used for example to display a                         // 22\n// \"click to reload\" link to the user.                                                     // 23\n                                                                                           // 24\n// The client version of the client code currently running in the                          // 25\n// browser.                                                                                // 26\nvar autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || \"unknown\";          // 27\nvar autoupdateVersionRefreshable =                                                         // 28\n  __meteor_runtime_config__.autoupdateVersionRefreshable || \"unknown\";                     // 29\n                                                                                           // 30\n// The collection of acceptable client versions.                                           // 31\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");                 // 32\n                                                                                           // 33\nAutoupdate = {};                                                                           // 34\n                                                                                           // 35\nAutoupdate.newClientAvailable = function () {                                              // 36\n  return !! ClientVersions.findOne({                                                       // 37\n               _id: \"version\",                                                             // 38\n               version: {$ne: autoupdateVersion} }) ||                                     // 39\n         !! ClientVersions.findOne({                                                       // 40\n               _id: \"version-refreshable\",                                                 // 41\n               version: {$ne: autoupdateVersionRefreshable} });                            // 42\n};                                                                                         // 43\nAutoupdate._ClientVersions = ClientVersions;  // Used by a self-test                       // 44\n                                                                                           // 45\nvar knownToSupportCssOnLoad = false;                                                       // 46\n                                                                                           // 47\nvar retry = new Retry({                                                                    // 48\n  // Unlike the stream reconnect use of Retry, which we want to be instant                 // 49\n  // in normal operation, this is a wacky failure. We don't want to retry                  // 50\n  // right away, we can start slowly.                                                      // 51\n  //                                                                                       // 52\n  // A better way than timeconstants here might be to use the knowledge                    // 53\n  // of when we reconnect to help trigger these retries. Typically, the                    // 54\n  // server fixing code will result in a restart and reconnect, but                        // 55\n  // potentially the subscription could have a transient error.                            // 56\n  minCount: 0, // don't do any immediate retries                                           // 57\n  baseTimeout: 30*1000 // start with 30s                                                   // 58\n});                                                                                        // 59\nvar failures = 0;                                                                          // 60\n                                                                                           // 61\nAutoupdate._retrySubscription = function () {                                              // 62\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {                                   // 63\n    onError: function (error) {                                                            // 64\n      Meteor._debug(\"autoupdate subscription failed:\", error);                             // 65\n      failures++;                                                                          // 66\n      retry.retryLater(failures, function () {                                             // 67\n        // Just retry making the subscription, don't reload the whole                      // 68\n        // page. While reloading would catch more cases (for example,                      // 69\n        // the server went back a version and is now doing old-style hot                   // 70\n        // code push), it would also be more prone to reload loops,                        // 71\n        // which look really bad to the user. Just retrying the                            // 72\n        // subscription over DDP means it is at least possible to fix by                   // 73\n        // updating the server.                                                            // 74\n        Autoupdate._retrySubscription();                                                   // 75\n      });                                                                                  // 76\n    },                                                                                     // 77\n    onReady: function () {                                                                 // 78\n      if (Package.reload) {                                                                // 79\n        var checkNewVersionDocument = function (doc) {                                     // 80\n          var self = this;                                                                 // 81\n          if (doc._id === 'version-refreshable' &&                                         // 82\n              doc.version !== autoupdateVersionRefreshable) {                              // 83\n            autoupdateVersionRefreshable = doc.version;                                    // 84\n            // Switch out old css links for the new css links. Inspired by:                // 85\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = (doc.assets && doc.assets.allCss) || [];                          // 87\n            var oldLinks = [];                                                             // 88\n            _.each(document.getElementsByTagName('link'), function (link) {                // 89\n              if (link.className === '__meteor-css__') {                                   // 90\n                oldLinks.push(link);                                                       // 91\n              }                                                                            // 92\n            });                                                                            // 93\n                                                                                           // 94\n            var waitUntilCssLoads = function  (link, callback) {                           // 95\n              var executeCallback = _.once(callback);                                      // 96\n              link.onload = function () {                                                  // 97\n                knownToSupportCssOnLoad = true;                                            // 98\n                executeCallback();                                                         // 99\n              };                                                                           // 100\n              if (! knownToSupportCssOnLoad) {                                             // 101\n                var id = Meteor.setInterval(function () {                                  // 102\n                  if (link.sheet) {                                                        // 103\n                    executeCallback();                                                     // 104\n                    Meteor.clearInterval(id);                                              // 105\n                  }                                                                        // 106\n                }, 50);                                                                    // 107\n              }                                                                            // 108\n            };                                                                             // 109\n                                                                                           // 110\n            var removeOldLinks = _.after(newCss.length, function () {                      // 111\n              _.each(oldLinks, function (oldLink) {                                        // 112\n                oldLink.parentNode.removeChild(oldLink);                                   // 113\n              });                                                                          // 114\n            });                                                                            // 115\n                                                                                           // 116\n            var attachStylesheetLink = function (newLink) {                                // 117\n              document.getElementsByTagName(\"head\").item(0).appendChild(newLink);          // 118\n                                                                                           // 119\n              waitUntilCssLoads(newLink, function () {                                     // 120\n                Meteor.setTimeout(removeOldLinks, 200);                                    // 121\n              });                                                                          // 122\n            };                                                                             // 123\n                                                                                           // 124\n            if (newCss.length !== 0) {                                                     // 125\n              _.each(newCss, function (css) {                                              // 126\n                var newLink = document.createElement(\"link\");                              // 127\n                newLink.setAttribute(\"rel\", \"stylesheet\");                                 // 128\n                newLink.setAttribute(\"type\", \"text/css\");                                  // 129\n                newLink.setAttribute(\"class\", \"__meteor-css__\");                           // 130\n                newLink.setAttribute(\"href\", Meteor._relativeToSiteRootUrl(css.url));      // 131\n                attachStylesheetLink(newLink);                                             // 132\n              });                                                                          // 133\n            } else {                                                                       // 134\n              removeOldLinks();                                                            // 135\n            }                                                                              // 136\n                                                                                           // 137\n          }                                                                                // 138\n          else if (doc._id === 'version' && doc.version !== autoupdateVersion) {           // 139\n            handle && handle.stop();                                                       // 140\n                                                                                           // 141\n            if (Package.reload) {                                                          // 142\n              Package.reload.Reload._reload();                                             // 143\n            }                                                                              // 144\n          }                                                                                // 145\n        };                                                                                 // 146\n                                                                                           // 147\n        var handle = ClientVersions.find().observe({                                       // 148\n          added: checkNewVersionDocument,                                                  // 149\n          changed: checkNewVersionDocument                                                 // 150\n        });                                                                                // 151\n      }                                                                                    // 152\n    }                                                                                      // 153\n  });                                                                                      // 154\n};                                                                                         // 155\nAutoupdate._retrySubscription();                                                           // 156\n                                                                                           // 157\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.autoupdate = {\n  Autoupdate: Autoupdate\n};\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["/packages/autoupdate/autoupdate_client.js"],"names":[],"mappingsiG","file":"/packages/autoupdate.js","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\nvar autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || \"unknown\";\nvar autoupdateVersionRefreshable =\n  __meteor_runtime_config__.autoupdateVersionRefreshable || \"unknown\";\n\n// The collection of acceptable client versions.\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate = {};\n\nAutoupdate.newClientAvailable = function () {\n  return !! ClientVersions.findOne({\n               _id: \"version\",\n               version: {$ne: autoupdateVersion} }) ||\n         !! ClientVersions.findOne({\n               _id: \"version-refreshable\",\n               version: {$ne: autoupdateVersionRefreshable} });\n};\nAutoupdate._ClientVersions = ClientVersions;  // Used by a self-test\n\nvar knownToSupportCssOnLoad = false;\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function () {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError: function (error) {\n      Meteor._debug(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function () {\n      if (Package.reload) {\n        var checkNewVersionDocument = function (doc) {\n          var self = this;\n          if (doc._id === 'version-refreshable' &&\n              doc.version !== autoupdateVersionRefreshable) {\n            autoupdateVersionRefreshable = doc.version;\n            // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = (doc.assets && doc.assets.allCss) || [];\n            var oldLinks = [];\n            _.each(document.getElementsByTagName('link'), function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            });\n\n            var waitUntilCssLoads = function  (link, callback) {\n              var executeCallback = _.once(callback);\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n                executeCallback();\n              };\n              if (! knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    executeCallback();\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            };\n\n            var removeOldLinks = _.after(newCss.length, function () {\n              _.each(oldLinks, function (oldLink) {\n                oldLink.parentNode.removeChild(oldLink);\n              });\n            });\n\n            var attachStylesheetLink = function (newLink) {\n              document.getElementsByTagName(\"head\").item(0).appendChild(newLink);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n            };\n\n            if (newCss.length !== 0) {\n              _.each(newCss, function (css) {\n                var newLink = document.createElement(\"link\");\n                newLink.setAttribute(\"rel\", \"stylesheet\");\n                newLink.setAttribute(\"type\", \"text/css\");\n                newLink.setAttribute(\"class\", \"__meteor-css__\");\n                newLink.setAttribute(\"href\", Meteor._relativeToSiteRootUrl(css.url));\n                attachStylesheetLink(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n\n          }\n          else if (doc._id === 'version' && doc.version !== autoupdateVersion) {\n            handle && handle.stop();\n\n            if (Package.reload) {\n              Package.reload.Reload._reload();\n            }\n          }\n        };\n\n        var handle = ClientVersions.find().observe({\n          added: checkNewVersionDocument,\n          changed: checkNewVersionDocument\n        });\n      }\n    }\n  });\n};\nAutoupdate._retrySubscription();\n"]}}]