[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\n\n/* Package-scope variables */\nvar DDPCommon;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/namespace.js                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n/**                                                                                                  // 1\n * @namespace DDPCommon                                                                              // 2\n * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3\n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4\n * of a ddp client for both client AND server; and the ddp server is the                             // 5\n * implementation of the livedata server and stream server. Common                                   // 6\n * functionality shared between both can be shared under this namespace                              // 7\n */                                                                                                  // 8\nDDPCommon = {};                                                                                      // 9\n                                                                                                     // 10\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/heartbeat.js                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// Heartbeat options:                                                                                // 1\n//   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2\n//   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3\n//     received, in milliseconds.                                                                    // 4\n//   sendPing: function to call to send a ping on the connection.                                    // 5\n//   onTimeout: function to call to close the connection.                                            // 6\n                                                                                                     // 7\nDDPCommon.Heartbeat = function (options) {                                                           // 8\n  var self = this;                                                                                   // 9\n                                                                                                     // 10\n  self.heartbeatInterval = options.heartbeatInterval;                                                // 11\n  self.heartbeatTimeout = options.heartbeatTimeout;                                                  // 12\n  self._sendPing = options.sendPing;                                                                 // 13\n  self._onTimeout = options.onTimeout;                                                               // 14\n  self._seenPacket = false;                                                                          // 15\n                                                                                                     // 16\n  self._heartbeatIntervalHandle = null;                                                              // 17\n  self._heartbeatTimeoutHandle = null;                                                               // 18\n};                                                                                                   // 19\n                                                                                                     // 20\n_.extend(DDPCommon.Heartbeat.prototype, {                                                            // 21\n  stop: function () {                                                                                // 22\n    var self = this;                                                                                 // 23\n    self._clearHeartbeatIntervalTimer();                                                             // 24\n    self._clearHeartbeatTimeoutTimer();                                                              // 25\n  },                                                                                                 // 26\n                                                                                                     // 27\n  start: function () {                                                                               // 28\n    var self = this;                                                                                 // 29\n    self.stop();                                                                                     // 30\n    self._startHeartbeatIntervalTimer();                                                             // 31\n  },                                                                                                 // 32\n                                                                                                     // 33\n  _startHeartbeatIntervalTimer: function () {                                                        // 34\n    var self = this;                                                                                 // 35\n    self._heartbeatIntervalHandle = Meteor.setInterval(                                              // 36\n      _.bind(self._heartbeatIntervalFired, self),                                                    // 37\n      self.heartbeatInterval                                                                         // 38\n    );                                                                                               // 39\n  },                                                                                                 // 40\n                                                                                                     // 41\n  _startHeartbeatTimeoutTimer: function () {                                                         // 42\n    var self = this;                                                                                 // 43\n    self._heartbeatTimeoutHandle = Meteor.setTimeout(                                                // 44\n      _.bind(self._heartbeatTimeoutFired, self),                                                     // 45\n      self.heartbeatTimeout                                                                          // 46\n    );                                                                                               // 47\n  },                                                                                                 // 48\n                                                                                                     // 49\n  _clearHeartbeatIntervalTimer: function () {                                                        // 50\n    var self = this;                                                                                 // 51\n    if (self._heartbeatIntervalHandle) {                                                             // 52\n      Meteor.clearInterval(self._heartbeatIntervalHandle);                                           // 53\n      self._heartbeatIntervalHandle = null;                                                          // 54\n    }                                                                                                // 55\n  },                                                                                                 // 56\n                                                                                                     // 57\n  _clearHeartbeatTimeoutTimer: function () {                                                         // 58\n    var self = this;                                                                                 // 59\n    if (self._heartbeatTimeoutHandle) {                                                              // 60\n      Meteor.clearTimeout(self._heartbeatTimeoutHandle);                                             // 61\n      self._heartbeatTimeoutHandle = null;                                                           // 62\n    }                                                                                                // 63\n  },                                                                                                 // 64\n                                                                                                     // 65\n  // The heartbeat interval timer is fired when we should send a ping.                               // 66\n  _heartbeatIntervalFired: function () {                                                             // 67\n    var self = this;                                                                                 // 68\n    // don't send ping if we've seen a packet since we last checked,                                 // 69\n    // *or* if we have already sent a ping and are awaiting a timeout.                               // 70\n    // That shouldn't happen, but it's possible if                                                   // 71\n    // `self.heartbeatInterval` is smaller than                                                      // 72\n    // `self.heartbeatTimeout`.                                                                      // 73\n    if (! self._seenPacket && ! self._heartbeatTimeoutHandle) {                                      // 74\n      self._sendPing();                                                                              // 75\n      // Set up timeout, in case a pong doesn't arrive in time.                                      // 76\n      self._startHeartbeatTimeoutTimer();                                                            // 77\n    }                                                                                                // 78\n    self._seenPacket = false;                                                                        // 79\n  },                                                                                                 // 80\n                                                                                                     // 81\n  // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82\n  // timed out waiting for the pong.                                                                 // 83\n  _heartbeatTimeoutFired: function () {                                                              // 84\n    var self = this;                                                                                 // 85\n    self._heartbeatTimeoutHandle = null;                                                             // 86\n    self._onTimeout();                                                                               // 87\n  },                                                                                                 // 88\n                                                                                                     // 89\n  messageReceived: function () {                                                                     // 90\n    var self = this;                                                                                 // 91\n    // Tell periodic checkin that we have seen a packet, and thus it                                 // 92\n    // does not need to send a ping this cycle.                                                      // 93\n    self._seenPacket = true;                                                                         // 94\n    // If we were waiting for a pong, we got it.                                                     // 95\n    if (self._heartbeatTimeoutHandle) {                                                              // 96\n      self._clearHeartbeatTimeoutTimer();                                                            // 97\n    }                                                                                                // 98\n  }                                                                                                  // 99\n});                                                                                                  // 100\n                                                                                                     // 101\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/utils.js                                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nDDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];                                          // 1\n                                                                                                     // 2\nDDPCommon.parseDDP = function (stringMessage) {                                                      // 3\n  try {                                                                                              // 4\n    var msg = JSON.parse(stringMessage);                                                             // 5\n  } catch (e) {                                                                                      // 6\n    Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);                            // 7\n    return null;                                                                                     // 8\n  }                                                                                                  // 9\n  // DDP messages must be objects.                                                                   // 10\n  if (msg === null || typeof msg !== 'object') {                                                     // 11\n    Meteor._debug(\"Discarding non-object DDP message\", stringMessage);                               // 12\n    return null;                                                                                     // 13\n  }                                                                                                  // 14\n                                                                                                     // 15\n  // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.                        // 16\n                                                                                                     // 17\n  // switch between \"cleared\" rep of unsetting fields and \"undefined\"                                // 18\n  // rep of same                                                                                     // 19\n  if (_.has(msg, 'cleared')) {                                                                       // 20\n    if (!_.has(msg, 'fields'))                                                                       // 21\n      msg.fields = {};                                                                               // 22\n    _.each(msg.cleared, function (clearKey) {                                                        // 23\n      msg.fields[clearKey] = undefined;                                                              // 24\n    });                                                                                              // 25\n    delete msg.cleared;                                                                              // 26\n  }                                                                                                  // 27\n                                                                                                     // 28\n  _.each(['fields', 'params', 'result'], function (field) {                                          // 29\n    if (_.has(msg, field))                                                                           // 30\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);                                      // 31\n  });                                                                                                // 32\n                                                                                                     // 33\n  return msg;                                                                                        // 34\n};                                                                                                   // 35\n                                                                                                     // 36\nDDPCommon.stringifyDDP = function (msg) {                                                            // 37\n  var copy = EJSON.clone(msg);                                                                       // 38\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39\n  // and cleared' rep                                                                                // 40\n  if (_.has(msg, 'fields')) {                                                                        // 41\n    var cleared = [];                                                                                // 42\n    _.each(msg.fields, function (value, key) {                                                       // 43\n      if (value === undefined) {                                                                     // 44\n        cleared.push(key);                                                                           // 45\n        delete copy.fields[key];                                                                     // 46\n      }                                                                                              // 47\n    });                                                                                              // 48\n    if (!_.isEmpty(cleared))                                                                         // 49\n      copy.cleared = cleared;                                                                        // 50\n    if (_.isEmpty(copy.fields))                                                                      // 51\n      delete copy.fields;                                                                            // 52\n  }                                                                                                  // 53\n  // adjust types to basic                                                                           // 54\n  _.each(['fields', 'params', 'result'], function (field) {                                          // 55\n    if (_.has(copy, field))                                                                          // 56\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);                                      // 57\n  });                                                                                                // 58\n  if (msg.id && typeof msg.id !== 'string') {                                                        // 59\n    throw new Error(\"Message id is not a string\");                                                   // 60\n  }                                                                                                  // 61\n  return JSON.stringify(copy);                                                                       // 62\n};                                                                                                   // 63\n                                                                                                     // 64\n                                                                                                     // 65\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/method_invocation.js                                                          //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// Instance name is this because it is usually referred to as this inside a                          // 1\n// method definition                                                                                 // 2\n/**                                                                                                  // 3\n * @summary The state for a single invocation of a method, referenced by this                        // 4\n * inside a method definition.                                                                       // 5\n * @param {Object} options                                                                           // 6\n * @instanceName this                                                                                // 7\n */                                                                                                  // 8\nDDPCommon.MethodInvocation = function (options) {                                                    // 9\n  var self = this;                                                                                   // 10\n                                                                                                     // 11\n  // true if we're running not the actual method, but a stub (that is,                               // 12\n  // if we're on a client (which may be a browser, or in the future a                                // 13\n  // server connecting to another server) and presently running a                                    // 14\n  // simulation of a server-side method for latency compensation                                     // 15\n  // purposes). not currently true except in a client such as a browser,                             // 16\n  // since there's usually no point in running stubs unless you have a                               // 17\n  // zero-latency connection to the user.                                                            // 18\n                                                                                                     // 19\n  /**                                                                                                // 20\n   * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 21\n   * @locus Anywhere                                                                                 // 22\n   * @name  isSimulation                                                                             // 23\n   * @memberOf DDPCommon.MethodInvocation                                                            // 24\n   * @instance                                                                                       // 25\n   * @type {Boolean}                                                                                 // 26\n   */                                                                                                // 27\n  this.isSimulation = options.isSimulation;                                                          // 28\n                                                                                                     // 29\n  // call this function to allow other method invocations (from the                                  // 30\n  // same client) to continue running without waiting for this one to                                // 31\n  // complete.                                                                                       // 32\n  this._unblock = options.unblock || function () {};                                                 // 33\n  this._calledUnblock = false;                                                                       // 34\n                                                                                                     // 35\n  // current user id                                                                                 // 36\n                                                                                                     // 37\n  /**                                                                                                // 38\n   * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 39\n   * @locus Anywhere                                                                                 // 40\n   * @name  userId                                                                                   // 41\n   * @memberOf DDPCommon.MethodInvocation                                                            // 42\n   * @instance                                                                                       // 43\n   */                                                                                                // 44\n  this.userId = options.userId;                                                                      // 45\n                                                                                                     // 46\n  // sets current user id in all appropriate server contexts and                                     // 47\n  // reruns subscriptions                                                                            // 48\n  this._setUserId = options.setUserId || function () {};                                             // 49\n                                                                                                     // 50\n  // On the server, the connection this method call came in on.                                      // 51\n                                                                                                     // 52\n  /**                                                                                                // 53\n   * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call.\n   * @locus Server                                                                                   // 55\n   * @name  connection                                                                               // 56\n   * @memberOf DDPCommon.MethodInvocation                                                            // 57\n   * @instance                                                                                       // 58\n   */                                                                                                // 59\n  this.connection = options.connection;                                                              // 60\n                                                                                                     // 61\n  // The seed for randomStream value generation                                                      // 62\n  this.randomSeed = options.randomSeed;                                                              // 63\n                                                                                                     // 64\n  // This is set by RandomStream.get; and holds the random stream state                              // 65\n  this.randomStream = null;                                                                          // 66\n};                                                                                                   // 67\n                                                                                                     // 68\n_.extend(DDPCommon.MethodInvocation.prototype, {                                                     // 69\n  /**                                                                                                // 70\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server                                                                                   // 72\n   * @memberOf DDPCommon.MethodInvocation                                                            // 73\n   * @instance                                                                                       // 74\n   */                                                                                                // 75\n  unblock: function () {                                                                             // 76\n    var self = this;                                                                                 // 77\n    self._calledUnblock = true;                                                                      // 78\n    self._unblock();                                                                                 // 79\n  },                                                                                                 // 80\n                                                                                                     // 81\n  /**                                                                                                // 82\n   * @summary Set the logged in user.                                                                // 83\n   * @locus Server                                                                                   // 84\n   * @memberOf DDPCommon.MethodInvocation                                                            // 85\n   * @instance                                                                                       // 86\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */                                                                                                // 88\n  setUserId: function(userId) {                                                                      // 89\n    var self = this;                                                                                 // 90\n    if (self._calledUnblock)                                                                         // 91\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");                     // 92\n    self.userId = userId;                                                                            // 93\n    self._setUserId(userId);                                                                         // 94\n  }                                                                                                  // 95\n});                                                                                                  // 96\n                                                                                                     // 97\n                                                                                                     // 98\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/random_stream.js                                                              //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// RandomStream allows for generation of pseudo-random values, from a seed.                          // 1\n//                                                                                                   // 2\n// We use this for consistent 'random' numbers across the client and server.                         // 3\n// We want to generate probably-unique IDs on the client, and we ideally want                        // 4\n// the server to generate the same IDs when it executes the method.                                  // 5\n//                                                                                                   // 6\n// For generated values to be the same, we must seed ourselves the same way,                         // 7\n// and we must keep track of the current state of our pseudo-random generators.                      // 8\n// We call this state the scope. By default, we use the current DDP method                           // 9\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10\n// If a randomSeed is provided it will be used to seed our random sequences.                         // 11\n// In this way, client and server method calls will generate the same values.                        // 12\n//                                                                                                   // 13\n// We expose multiple named streams; each stream is independent                                      // 14\n// and is seeded differently (but predictably from the name).                                        // 15\n// By using multiple streams, we support reordering of requests,                                     // 16\n// as long as they occur on different streams.                                                       // 17\n//                                                                                                   // 18\n// @param options {Optional Object}                                                                  // 19\n//   seed: Array or value - Seed value(s) for the generator.                                         // 20\n//                          If an array, will be used as-is                                          // 21\n//                          If a value, will be converted to a single-value array                    // 22\n//                          If omitted, a random array will be used as the seed.                     // 23\nDDPCommon.RandomStream = function (options) {                                                        // 24\n  var self = this;                                                                                   // 25\n                                                                                                     // 26\n  this.seed = [].concat(options.seed || randomToken());                                              // 27\n                                                                                                     // 28\n  this.sequences = {};                                                                               // 29\n};                                                                                                   // 30\n                                                                                                     // 31\n// Returns a random string of sufficient length for a random seed.                                   // 32\n// This is a placeholder function; a similar function is planned                                     // 33\n// for Random itself; when that is added we should remove this function,                             // 34\n// and call Random's randomToken instead.                                                            // 35\nfunction randomToken() {                                                                             // 36\n  return Random.hexString(20);                                                                       // 37\n};                                                                                                   // 38\n                                                                                                     // 39\n// Returns the random stream with the specified name, in the specified                               // 40\n// scope. If a scope is passed, then we use that to seed a (not                                      // 41\n// cryptographically secure) PRNG using the fast Alea algorithm.  If                                 // 42\n// scope is null (or otherwise falsey) then we use a generated seed.                                 // 43\n//                                                                                                   // 44\n// However, scope will normally be the current DDP method invocation,                                // 45\n// so we'll use the stream with the specified name, and we should get                                // 46\n// consistent values on the client and server sides of a method call.                                // 47\nDDPCommon.RandomStream.get = function (scope, name) {                                                // 48\n  if (!name) {                                                                                       // 49\n    name = \"default\";                                                                                // 50\n  }                                                                                                  // 51\n  if (!scope) {                                                                                      // 52\n    // There was no scope passed in; the sequence won't actually be                                  // 53\n    // reproducible. but make it fast (and not cryptographically                                     // 54\n    // secure) anyways, so that the behavior is similar to what you'd                                // 55\n    // get by passing in a scope.                                                                    // 56\n    return Random.insecure;                                                                          // 57\n  }                                                                                                  // 58\n  var randomStream = scope.randomStream;                                                             // 59\n  if (!randomStream) {                                                                               // 60\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({                                 // 61\n      seed: scope.randomSeed                                                                         // 62\n    });                                                                                              // 63\n  }                                                                                                  // 64\n  return randomStream._sequence(name);                                                               // 65\n};                                                                                                   // 66\n                                                                                                     // 67\n                                                                                                     // 68\n// Creates a randomSeed for passing to a method call.                                                // 69\n// Note that we take enclosing as an argument,                                                       // 70\n// though we expect it to be DDP._CurrentInvocation.get()                                            // 71\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 72\n// invocation may not be the one currently in scope.                                                 // 73\n// If enclosing is null, we'll use Random and values won't be repeatable.                            // 74\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {                                           // 75\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);                          // 76\n  return stream.hexString(20);                                                                       // 77\n};                                                                                                   // 78\n                                                                                                     // 79\n_.extend(DDPCommon.RandomStream.prototype, {                                                         // 80\n  // Get a random sequence with the specified name, creating it if does not exist.                   // 81\n  // New sequences are seeded with the seed concatenated with the name.                              // 82\n  // By passing a seed into Random.create, we use the Alea generator.                                // 83\n  _sequence: function (name) {                                                                       // 84\n    var self = this;                                                                                 // 85\n                                                                                                     // 86\n    var sequence = self.sequences[name] || null;                                                     // 87\n    if (sequence === null) {                                                                         // 88\n      var sequenceSeed = self.seed.concat(name);                                                     // 89\n      for (var i = 0; i < sequenceSeed.length; i++) {                                                // 90\n        if (_.isFunction(sequenceSeed[i])) {                                                         // 91\n          sequenceSeed[i] = sequenceSeed[i]();                                                       // 92\n        }                                                                                            // 93\n      }                                                                                              // 94\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);            // 95\n    }                                                                                                // 96\n    return sequence;                                                                                 // 97\n  }                                                                                                  // 98\n});                                                                                                  // 99\n                                                                                                     // 100\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ddp-common'] = {\n  DDPCommon: DDPCommon\n};\n\n})();\n","servePath":"/packages/ddp-common.js","sourceMap":{"version":3,"sources":["/packages/ddp-common/namespace.js","/packages/ddp-common/heartbeat.js","/packages/ddp-common/utils.js","/packages/ddp-common/method_invocation.js","/packages/ddp-common/random_stream.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0G;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2G;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0G;;;;;;;;;;;;;;;;;;AChjfile":"/packages/ddp-common.js","sourcesContent":["/**\n * @namespace DDPCommon\n * @summary Namespace for DDPCommon-related methods/classes. Shared between \n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation\n * of a ddp client for both client AND server; and the ddp server is the\n * implementation of the livedata server and stream server. Common \n * functionality shared between both can be shared under this namespace\n */\nDDPCommon = {};\n","// Heartbeat options:\n//   heartbeatInterval: interval to send pings, in milliseconds.\n//   heartbeatTimeout: timeout to close the connection if a reply isn't\n//     received, in milliseconds.\n//   sendPing: function to call to send a ping on the connection.\n//   onTimeout: function to call to close the connection.\n\nDDPCommon.Heartbeat = function (options) {\n  var self = this;\n\n  self.heartbeatInterval = options.heartbeatInterval;\n  self.heartbeatTimeout = options.heartbeatTimeout;\n  self._sendPing = options.sendPing;\n  self._onTimeout = options.onTimeout;\n  self._seenPacket = false;\n\n  self._heartbeatIntervalHandle = null;\n  self._heartbeatTimeoutHandle = null;\n};\n\n_.extend(DDPCommon.Heartbeat.prototype, {\n  stop: function () {\n    var self = this;\n    self._clearHeartbeatIntervalTimer();\n    self._clearHeartbeatTimeoutTimer();\n  },\n\n  start: function () {\n    var self = this;\n    self.stop();\n    self._startHeartbeatIntervalTimer();\n  },\n\n  _startHeartbeatIntervalTimer: function () {\n    var self = this;\n    self._heartbeatIntervalHandle = Meteor.setInterval(\n      _.bind(self._heartbeatIntervalFired, self),\n      self.heartbeatInterval\n    );\n  },\n\n  _startHeartbeatTimeoutTimer: function () {\n    var self = this;\n    self._heartbeatTimeoutHandle = Meteor.setTimeout(\n      _.bind(self._heartbeatTimeoutFired, self),\n      self.heartbeatTimeout\n    );\n  },\n\n  _clearHeartbeatIntervalTimer: function () {\n    var self = this;\n    if (self._heartbeatIntervalHandle) {\n      Meteor.clearInterval(self._heartbeatIntervalHandle);\n      self._heartbeatIntervalHandle = null;\n    }\n  },\n\n  _clearHeartbeatTimeoutTimer: function () {\n    var self = this;\n    if (self._heartbeatTimeoutHandle) {\n      Meteor.clearTimeout(self._heartbeatTimeoutHandle);\n      self._heartbeatTimeoutHandle = null;\n    }\n  },\n\n  // The heartbeat interval timer is fired when we should send a ping.\n  _heartbeatIntervalFired: function () {\n    var self = this;\n    // don't send ping if we've seen a packet since we last checked,\n    // *or* if we have already sent a ping and are awaiting a timeout.\n    // That shouldn't happen, but it's possible if\n    // `self.heartbeatInterval` is smaller than\n    // `self.heartbeatTimeout`.\n    if (! self._seenPacket && ! self._heartbeatTimeoutHandle) {\n      self._sendPing();\n      // Set up timeout, in case a pong doesn't arrive in time.\n      self._startHeartbeatTimeoutTimer();\n    }\n    self._seenPacket = false;\n  },\n\n  // The heartbeat timeout timer is fired when we sent a ping, but we\n  // timed out waiting for the pong.\n  _heartbeatTimeoutFired: function () {\n    var self = this;\n    self._heartbeatTimeoutHandle = null;\n    self._onTimeout();\n  },\n\n  messageReceived: function () {\n    var self = this;\n    // Tell periodic checkin that we have seen a packet, and thus it\n    // does not need to send a ping this cycle.\n    self._seenPacket = true;\n    // If we were waiting for a pong, we got it.\n    if (self._heartbeatTimeoutHandle) {\n      self._clearHeartbeatTimeoutTimer();\n    }\n  }\n});\n","DDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];\n\nDDPCommon.parseDDP = function (stringMessage) {\n  try {\n    var msg = JSON.parse(stringMessage);\n  } catch (e) {\n    Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);\n    return null;\n  }\n  // DDP messages must be objects.\n  if (msg === null || typeof msg !== 'object') {\n    Meteor._debug(\"Discarding non-object DDP message\", stringMessage);\n    return null;\n  }\n\n  // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.\n\n  // switch between \"cleared\" rep of unsetting fields and \"undefined\"\n  // rep of same\n  if (_.has(msg, 'cleared')) {\n    if (!_.has(msg, 'fields'))\n      msg.fields = {};\n    _.each(msg.cleared, function (clearKey) {\n      msg.fields[clearKey] = undefined;\n    });\n    delete msg.cleared;\n  }\n\n  _.each(['fields', 'params', 'result'], function (field) {\n    if (_.has(msg, field))\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\n  });\n\n  return msg;\n};\n\nDDPCommon.stringifyDDP = function (msg) {\n  var copy = EJSON.clone(msg);\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields\n  // and cleared' rep\n  if (_.has(msg, 'fields')) {\n    var cleared = [];\n    _.each(msg.fields, function (value, key) {\n      if (value === undefined) {\n        cleared.push(key);\n        delete copy.fields[key];\n      }\n    });\n    if (!_.isEmpty(cleared))\n      copy.cleared = cleared;\n    if (_.isEmpty(copy.fields))\n      delete copy.fields;\n  }\n  // adjust types to basic\n  _.each(['fields', 'params', 'result'], function (field) {\n    if (_.has(copy, field))\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\n  });\n  if (msg.id && typeof msg.id !== 'string') {\n    throw new Error(\"Message id is not a string\");\n  }\n  return JSON.stringify(copy);\n};\n\n","// Instance name is this because it is usually referred to as this inside a\n// method definition\n/**\n * @summary The state for a single invocation of a method, referenced by this\n * inside a method definition.\n * @param {Object} options\n * @instanceName this\n */\nDDPCommon.MethodInvocation = function (options) {\n  var self = this;\n\n  // true if we're running not the actual method, but a stub (that is,\n  // if we're on a client (which may be a browser, or in the future a\n  // server connecting to another server) and presently running a\n  // simulation of a server-side method for latency compensation\n  // purposes). not currently true except in a client such as a browser,\n  // since there's usually no point in running stubs unless you have a\n  // zero-latency connection to the user.\n\n  /**\n   * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\n   * @locus Anywhere\n   * @name  isSimulation\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @type {Boolean}\n   */\n  this.isSimulation = options.isSimulation;\n\n  // call this function to allow other method invocations (from the\n  // same client) to continue running without waiting for this one to\n  // complete.\n  this._unblock = options.unblock || function () {};\n  this._calledUnblock = false;\n\n  // current user id\n\n  /**\n   * @summary The id of the user that made this method call, or `null` if no user was logged in.\n   * @locus Anywhere\n   * @name  userId\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  this.userId = options.userId;\n\n  // sets current user id in all appropriate server contexts and\n  // reruns subscriptions\n  this._setUserId = options.setUserId || function () {};\n\n  // On the server, the connection this method call came in on.\n\n  /**\n   * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call.\n   * @locus Server\n   * @name  connection\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  this.connection = options.connection;\n\n  // The seed for randomStream value generation\n  this.randomSeed = options.randomSeed;\n\n  // This is set by RandomStream.get; and holds the random stream state\n  this.randomStream = null;\n};\n\n_.extend(DDPCommon.MethodInvocation.prototype, {\n  /**\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  unblock: function () {\n    var self = this;\n    self._calledUnblock = true;\n    self._unblock();\n  },\n\n  /**\n   * @summary Set the logged in user.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */\n  setUserId: function(userId) {\n    var self = this;\n    if (self._calledUnblock)\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");\n    self.userId = userId;\n    self._setUserId(userId);\n  }\n});\n\n","// RandomStream allows for generation of pseudo-random values, from a seed.\n//\n// We use this for consistent 'random' numbers across the client and server.\n// We want to generate probably-unique IDs on the client, and we ideally want\n// the server to generate the same IDs when it executes the method.\n//\n// For generated values to be the same, we must seed ourselves the same way,\n// and we must keep track of the current state of our pseudo-random generators.\n// We call this state the scope. By default, we use the current DDP method\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.\n// If a randomSeed is provided it will be used to seed our random sequences.\n// In this way, client and server method calls will generate the same values.\n//\n// We expose multiple named streams; each stream is independent\n// and is seeded differently (but predictably from the name).\n// By using multiple streams, we support reordering of requests,\n// as long as they occur on different streams.\n//\n// @param options {Optional Object}\n//   seed: Array or value - Seed value(s) for the generator.\n//                          If an array, will be used as-is\n//                          If a value, will be converted to a single-value array\n//                          If omitted, a random array will be used as the seed.\nDDPCommon.RandomStream = function (options) {\n  var self = this;\n\n  this.seed = [].concat(options.seed || randomToken());\n\n  this.sequences = {};\n};\n\n// Returns a random string of sufficient length for a random seed.\n// This is a placeholder function; a similar function is planned\n// for Random itself; when that is added we should remove this function,\n// and call Random's randomToken instead.\nfunction randomToken() {\n  return Random.hexString(20);\n};\n\n// Returns the random stream with the specified name, in the specified\n// scope. If a scope is passed, then we use that to seed a (not\n// cryptographically secure) PRNG using the fast Alea algorithm.  If\n// scope is null (or otherwise falsey) then we use a generated seed.\n//\n// However, scope will normally be the current DDP method invocation,\n// so we'll use the stream with the specified name, and we should get\n// consistent values on the client and server sides of a method call.\nDDPCommon.RandomStream.get = function (scope, name) {\n  if (!name) {\n    name = \"default\";\n  }\n  if (!scope) {\n    // There was no scope passed in; the sequence won't actually be\n    // reproducible. but make it fast (and not cryptographically\n    // secure) anyways, so that the behavior is similar to what you'd\n    // get by passing in a scope.\n    return Random.insecure;\n  }\n  var randomStream = scope.randomStream;\n  if (!randomStream) {\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({\n      seed: scope.randomSeed\n    });\n  }\n  return randomStream._sequence(name);\n};\n\n\n// Creates a randomSeed for passing to a method call.\n// Note that we take enclosing as an argument,\n// though we expect it to be DDP._CurrentInvocation.get()\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant\n// invocation may not be the one currently in scope.\n// If enclosing is null, we'll use Random and values won't be repeatable.\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);\n  return stream.hexString(20);\n};\n\n_.extend(DDPCommon.RandomStream.prototype, {\n  // Get a random sequence with the specified name, creating it if does not exist.\n  // New sequences are seeded with the seed concatenated with the name.\n  // By passing a seed into Random.create, we use the Alea generator.\n  _sequence: function (name) {\n    var self = this;\n\n    var sequence = self.sequences[name] || null;\n    if (sequence === null) {\n      var sequenceSeed = self.seed.concat(name);\n      for (var i = 0; i < sequenceSeed.length; i++) {\n        if (_.isFunction(sequenceSeed[i])) {\n          sequenceSeed[i] = sequenceSeed[i]();\n        }\n      }\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);\n    }\n    return sequence;\n  }\n});\n"]}}]