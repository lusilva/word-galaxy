[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar OrderedDict = Package['ordered-dict'].OrderedDict;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar MongoID = Package['mongo-id'].MongoID;\nvar Random = Package.random.Random;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar GeoJSON = Package['geojson-utils'].GeoJSON;\n\n/* Package-scope variables */\nvar LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree, combineImportantPathsIntoProjection;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/minimongo.js                                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// XXX type checking on selectors (graceful error if malformed)                                               // 1\n                                                                                                              // 2\n// LocalCollection: a set of documents that supports queries and modifiers.                                   // 3\n                                                                                                              // 4\n// Cursor: a specification for a particular subset of documents, w/                                           // 5\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),                        // 6\n                                                                                                              // 7\n// ObserveHandle: the return value of a live query.                                                           // 8\n                                                                                                              // 9\nLocalCollection = function (name) {                                                                           // 10\n  var self = this;                                                                                            // 11\n  self.name = name;                                                                                           // 12\n  // _id -> document (also containing id)                                                                     // 13\n  self._docs = new LocalCollection._IdMap;                                                                    // 14\n                                                                                                              // 15\n  self._observeQueue = new Meteor._SynchronousQueue();                                                        // 16\n                                                                                                              // 17\n  self.next_qid = 1; // live query id generator                                                               // 18\n                                                                                                              // 19\n  // qid -> live query object. keys:                                                                          // 20\n  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                                  // 21\n  //  results: array (ordered) or object (unordered) of current results                                       // 22\n  //    (aliased with self._docs!)                                                                            // 23\n  //  resultsSnapshot: snapshot of results. null if not paused.                                               // 24\n  //  cursor: Cursor object for the query.                                                                    // 25\n  //  selector, sorter, (callbacks): functions                                                                // 26\n  self.queries = {};                                                                                          // 27\n                                                                                                              // 28\n  // null if not saving originals; an IdMap from id to original document value if                             // 29\n  // saving originals. See comments before saveOriginals().                                                   // 30\n  self._savedOriginals = null;                                                                                // 31\n                                                                                                              // 32\n  // True when observers are paused and we should not send callbacks.                                         // 33\n  self.paused = false;                                                                                        // 34\n};                                                                                                            // 35\n                                                                                                              // 36\nMinimongo = {};                                                                                               // 37\n                                                                                                              // 38\n// Object exported only for unit testing.                                                                     // 39\n// Use it to export private functions to test in Tinytest.                                                    // 40\nMinimongoTest = {};                                                                                           // 41\n                                                                                                              // 42\nMinimongoError = function (message) {                                                                         // 43\n  var e = new Error(message);                                                                                 // 44\n  e.name = \"MinimongoError\";                                                                                  // 45\n  return e;                                                                                                   // 46\n};                                                                                                            // 47\n                                                                                                              // 48\n                                                                                                              // 49\n// options may include sort, skip, limit, reactive                                                            // 50\n// sort may be any of these forms:                                                                            // 51\n//     {a: 1, b: -1}                                                                                          // 52\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]                                                                          // 53\n//     [\"a\", [\"b\", \"desc\"]]                                                                                   // 54\n//   (in the first form you're beholden to key enumeration order in                                           // 55\n//   your javascript VM)                                                                                      // 56\n//                                                                                                            // 57\n// reactive: if given, and false, don't register with Tracker (default                                        // 58\n// is true)                                                                                                   // 59\n//                                                                                                            // 60\n// XXX possibly should support retrieving a subset of fields? and                                             // 61\n// have it be a hint (ignored on the client, when not copying the                                             // 62\n// doc?)                                                                                                      // 63\n//                                                                                                            // 64\n// XXX sort does not yet support subkeys ('a.b') .. fix that!                                                 // 65\n// XXX add one more sort form: \"key\"                                                                          // 66\n// XXX tests                                                                                                  // 67\nLocalCollection.prototype.find = function (selector, options) {                                               // 68\n  // default syntax for everything is to omit the selector argument.                                          // 69\n  // but if selector is explicitly passed in as false or undefined, we                                        // 70\n  // want a selector that matches nothing.                                                                    // 71\n  if (arguments.length === 0)                                                                                 // 72\n    selector = {};                                                                                            // 73\n                                                                                                              // 74\n  return new LocalCollection.Cursor(this, selector, options);                                                 // 75\n};                                                                                                            // 76\n                                                                                                              // 77\n// don't call this ctor directly.  use LocalCollection.find().                                                // 78\n                                                                                                              // 79\nLocalCollection.Cursor = function (collection, selector, options) {                                           // 80\n  var self = this;                                                                                            // 81\n  if (!options) options = {};                                                                                 // 82\n                                                                                                              // 83\n  self.collection = collection;                                                                               // 84\n  self.sorter = null;                                                                                         // 85\n  self.matcher = new Minimongo.Matcher(selector);                                                             // 86\n                                                                                                              // 87\n  if (LocalCollection._selectorIsId(selector)) {                                                              // 88\n    // stash for fast path                                                                                    // 89\n    self._selectorId = selector;                                                                              // 90\n  } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                        // 91\n    // also do the fast path for { _id: idString }                                                            // 92\n    self._selectorId = selector._id;                                                                          // 93\n  } else {                                                                                                    // 94\n    self._selectorId = undefined;                                                                             // 95\n    if (self.matcher.hasGeoQuery() || options.sort) {                                                         // 96\n      self.sorter = new Minimongo.Sorter(options.sort || [],                                                  // 97\n                                         { matcher: self.matcher });                                          // 98\n    }                                                                                                         // 99\n  }                                                                                                           // 100\n                                                                                                              // 101\n  self.skip = options.skip;                                                                                   // 102\n  self.limit = options.limit;                                                                                 // 103\n  self.fields = options.fields;                                                                               // 104\n                                                                                                              // 105\n  self._projectionFn = LocalCollection._compileProjection(self.fields || {});                                 // 106\n                                                                                                              // 107\n  self._transform = LocalCollection.wrapTransform(options.transform);                                         // 108\n                                                                                                              // 109\n  // by default, queries register w/ Tracker when it is available.                                            // 110\n  if (typeof Tracker !== \"undefined\")                                                                         // 111\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;                               // 112\n};                                                                                                            // 113\n                                                                                                              // 114\n// Since we don't actually have a \"nextObject\" interface, there's really no                                   // 115\n// reason to have a \"rewind\" interface.  All it did was make multiple calls                                   // 116\n// to fetch/map/forEach return nothing the second time.                                                       // 117\n// XXX COMPAT WITH 0.8.1                                                                                      // 118\nLocalCollection.Cursor.prototype.rewind = function () {                                                       // 119\n};                                                                                                            // 120\n                                                                                                              // 121\nLocalCollection.prototype.findOne = function (selector, options) {                                            // 122\n  if (arguments.length === 0)                                                                                 // 123\n    selector = {};                                                                                            // 124\n                                                                                                              // 125\n  // NOTE: by setting limit 1 here, we end up using very inefficient                                          // 126\n  // code that recomputes the whole query on each update. The upside is                                       // 127\n  // that when you reactively depend on a findOne you only get                                                // 128\n  // invalidated when the found object changes, not any object in the                                         // 129\n  // collection. Most findOne will be by id, which has a fast path, so                                        // 130\n  // this might not be a big deal. In most cases, invalidation causes                                         // 131\n  // the called to re-query anyway, so this should be a net performance                                       // 132\n  // improvement.                                                                                             // 133\n  options = options || {};                                                                                    // 134\n  options.limit = 1;                                                                                          // 135\n                                                                                                              // 136\n  return this.find(selector, options).fetch()[0];                                                             // 137\n};                                                                                                            // 138\n                                                                                                              // 139\n/**                                                                                                           // 140\n * @callback IterationCallback                                                                                // 141\n * @param {Object} doc                                                                                        // 142\n * @param {Number} index                                                                                      // 143\n */                                                                                                           // 144\n/**                                                                                                           // 145\n * @summary Call `callback` once for each matching document, sequentially and synchronously.                  // 146\n * @locus Anywhere                                                                                            // 147\n * @method  forEach                                                                                           // 148\n * @instance                                                                                                  // 149\n * @memberOf Mongo.Cursor                                                                                     // 150\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                      // 152\n */                                                                                                           // 153\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {                                     // 154\n  var self = this;                                                                                            // 155\n                                                                                                              // 156\n  var objects = self._getRawObjects({ordered: true});                                                         // 157\n                                                                                                              // 158\n  if (self.reactive) {                                                                                        // 159\n    self._depend({                                                                                            // 160\n      addedBefore: true,                                                                                      // 161\n      removed: true,                                                                                          // 162\n      changed: true,                                                                                          // 163\n      movedBefore: true});                                                                                    // 164\n  }                                                                                                           // 165\n                                                                                                              // 166\n  _.each(objects, function (elt, i) {                                                                         // 167\n    // This doubles as a clone operation.                                                                     // 168\n    elt = self._projectionFn(elt);                                                                            // 169\n                                                                                                              // 170\n    if (self._transform)                                                                                      // 171\n      elt = self._transform(elt);                                                                             // 172\n    callback.call(thisArg, elt, i, self);                                                                     // 173\n  });                                                                                                         // 174\n};                                                                                                            // 175\n                                                                                                              // 176\nLocalCollection.Cursor.prototype.getTransform = function () {                                                 // 177\n  return this._transform;                                                                                     // 178\n};                                                                                                            // 179\n                                                                                                              // 180\n/**                                                                                                           // 181\n * @summary Map callback over all matching documents.  Returns an Array.                                      // 182\n * @locus Anywhere                                                                                            // 183\n * @method map                                                                                                // 184\n * @instance                                                                                                  // 185\n * @memberOf Mongo.Cursor                                                                                     // 186\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                      // 188\n */                                                                                                           // 189\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {                                         // 190\n  var self = this;                                                                                            // 191\n  var res = [];                                                                                               // 192\n  self.forEach(function (doc, index) {                                                                        // 193\n    res.push(callback.call(thisArg, doc, index, self));                                                       // 194\n  });                                                                                                         // 195\n  return res;                                                                                                 // 196\n};                                                                                                            // 197\n                                                                                                              // 198\n/**                                                                                                           // 199\n * @summary Return all matching documents as an Array.                                                        // 200\n * @memberOf Mongo.Cursor                                                                                     // 201\n * @method  fetch                                                                                             // 202\n * @instance                                                                                                  // 203\n * @locus Anywhere                                                                                            // 204\n * @returns {Object[]}                                                                                        // 205\n */                                                                                                           // 206\nLocalCollection.Cursor.prototype.fetch = function () {                                                        // 207\n  var self = this;                                                                                            // 208\n  var res = [];                                                                                               // 209\n  self.forEach(function (doc) {                                                                               // 210\n    res.push(doc);                                                                                            // 211\n  });                                                                                                         // 212\n  return res;                                                                                                 // 213\n};                                                                                                            // 214\n                                                                                                              // 215\n/**                                                                                                           // 216\n * @summary Returns the number of documents that match a query.                                               // 217\n * @memberOf Mongo.Cursor                                                                                     // 218\n * @method  count                                                                                             // 219\n * @instance                                                                                                  // 220\n * @locus Anywhere                                                                                            // 221\n * @returns {Number}                                                                                          // 222\n */                                                                                                           // 223\nLocalCollection.Cursor.prototype.count = function () {                                                        // 224\n  var self = this;                                                                                            // 225\n                                                                                                              // 226\n  if (self.reactive)                                                                                          // 227\n    self._depend({added: true, removed: true},                                                                // 228\n                 true /* allow the observe to be unordered */);                                               // 229\n                                                                                                              // 230\n  return self._getRawObjects({ordered: true}).length;                                                         // 231\n};                                                                                                            // 232\n                                                                                                              // 233\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {                                            // 234\n  var self = this;                                                                                            // 235\n  if (! self.collection.name)                                                                                 // 236\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");                              // 237\n  var collection = self.collection.name;                                                                      // 238\n                                                                                                              // 239\n  // XXX minimongo should not depend on mongo-livedata!                                                       // 240\n  if (! Package.mongo) {                                                                                      // 241\n    throw new Error(\"Can't publish from Minimongo without the `mongo` package.\");                             // 242\n  }                                                                                                           // 243\n                                                                                                              // 244\n  return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);                                // 245\n};                                                                                                            // 246\n                                                                                                              // 247\nLocalCollection.Cursor.prototype._getCollectionName = function () {                                           // 248\n  var self = this;                                                                                            // 249\n  return self.collection.name;                                                                                // 250\n};                                                                                                            // 251\n                                                                                                              // 252\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {                                   // 253\n  if (callbacks.added && callbacks.addedBefore)                                                               // 254\n    throw new Error(\"Please specify only one of added() and addedBefore()\");                                  // 255\n  return !!(callbacks.addedBefore || callbacks.movedBefore);                                                  // 256\n};                                                                                                            // 257\n                                                                                                              // 258\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {                                          // 259\n  if (callbacks.addedAt && callbacks.added)                                                                   // 260\n    throw new Error(\"Please specify only one of added() and addedAt()\");                                      // 261\n  if (callbacks.changedAt && callbacks.changed)                                                               // 262\n    throw new Error(\"Please specify only one of changed() and changedAt()\");                                  // 263\n  if (callbacks.removed && callbacks.removedAt)                                                               // 264\n    throw new Error(\"Please specify only one of removed() and removedAt()\");                                  // 265\n                                                                                                              // 266\n  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt                                     // 267\n            || callbacks.removedAt);                                                                          // 268\n};                                                                                                            // 269\n                                                                                                              // 270\n// the handle that comes back from observe.                                                                   // 271\nLocalCollection.ObserveHandle = function () {};                                                               // 272\n                                                                                                              // 273\n// options to contain:                                                                                        // 274\n//  * callbacks for observe():                                                                                // 275\n//    - addedAt (document, atIndex)                                                                           // 276\n//    - added (document)                                                                                      // 277\n//    - changedAt (newDocument, oldDocument, atIndex)                                                         // 278\n//    - changed (newDocument, oldDocument)                                                                    // 279\n//    - removedAt (document, atIndex)                                                                         // 280\n//    - removed (document)                                                                                    // 281\n//    - movedTo (document, oldIndex, newIndex)                                                                // 282\n//                                                                                                            // 283\n// attributes available on returned query handle:                                                             // 284\n//  * stop(): end updates                                                                                     // 285\n//  * collection: the collection this query is querying                                                       // 286\n//                                                                                                            // 287\n// iff x is a returned query handle, (x instanceof                                                            // 288\n// LocalCollection.ObserveHandle) is true                                                                     // 289\n//                                                                                                            // 290\n// initial results delivered through added callback                                                           // 291\n// XXX maybe callbacks should take a list of objects, to expose transactions?                                 // 292\n// XXX maybe support field limiting (to limit what you're notified on)                                        // 293\n                                                                                                              // 294\n_.extend(LocalCollection.Cursor.prototype, {                                                                  // 295\n  /**                                                                                                         // 296\n   * @summary Watch a query.  Receive callbacks as the result set changes.                                    // 297\n   * @locus Anywhere                                                                                          // 298\n   * @memberOf Mongo.Cursor                                                                                   // 299\n   * @instance                                                                                                // 300\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes                      // 301\n   */                                                                                                         // 302\n  observe: function (options) {                                                                               // 303\n    var self = this;                                                                                          // 304\n    return LocalCollection._observeFromObserveChanges(self, options);                                         // 305\n  },                                                                                                          // 306\n                                                                                                              // 307\n  /**                                                                                                         // 308\n   * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.\n   * @locus Anywhere                                                                                          // 310\n   * @memberOf Mongo.Cursor                                                                                   // 311\n   * @instance                                                                                                // 312\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes                      // 313\n   */                                                                                                         // 314\n  observeChanges: function (options) {                                                                        // 315\n    var self = this;                                                                                          // 316\n                                                                                                              // 317\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);                                // 318\n                                                                                                              // 319\n    // there are several places that assume you aren't combining skip/limit with                              // 320\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"                              // 321\n    // comment in _modifyAndNotify                                                                            // 322\n    // XXX allow skip/limit with unordered observe                                                            // 323\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))                                   // 324\n      throw new Error(\"must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit\");  // 325\n                                                                                                              // 326\n    if (self.fields && (self.fields._id === 0 || self.fields._id === false))                                  // 327\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");                                    // 328\n                                                                                                              // 329\n    var query = {                                                                                             // 330\n      matcher: self.matcher, // not fast pathed                                                               // 331\n      sorter: ordered && self.sorter,                                                                         // 332\n      distances: (                                                                                            // 333\n        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),                                 // 334\n      resultsSnapshot: null,                                                                                  // 335\n      ordered: ordered,                                                                                       // 336\n      cursor: self,                                                                                           // 337\n      projectionFn: self._projectionFn                                                                        // 338\n    };                                                                                                        // 339\n    var qid;                                                                                                  // 340\n                                                                                                              // 341\n    // Non-reactive queries call added[Before] and then never call anything                                   // 342\n    // else.                                                                                                  // 343\n    if (self.reactive) {                                                                                      // 344\n      qid = self.collection.next_qid++;                                                                       // 345\n      self.collection.queries[qid] = query;                                                                   // 346\n    }                                                                                                         // 347\n    query.results = self._getRawObjects({                                                                     // 348\n      ordered: ordered, distances: query.distances});                                                         // 349\n    if (self.collection.paused)                                                                               // 350\n      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);                                    // 351\n                                                                                                              // 352\n    // wrap callbacks we were passed. callbacks only fire when not paused and                                 // 353\n    // are never undefined                                                                                    // 354\n    // Filters out blacklisted fields according to cursor's projection.                                       // 355\n    // XXX wrong place for this?                                                                              // 356\n                                                                                                              // 357\n    // furthermore, callbacks enqueue until the operation we're working on is                                 // 358\n    // done.                                                                                                  // 359\n    var wrapCallback = function (f) {                                                                         // 360\n      if (!f)                                                                                                 // 361\n        return function () {};                                                                                // 362\n      return function (/*args*/) {                                                                            // 363\n        var context = this;                                                                                   // 364\n        var args = arguments;                                                                                 // 365\n                                                                                                              // 366\n        if (self.collection.paused)                                                                           // 367\n          return;                                                                                             // 368\n                                                                                                              // 369\n        self.collection._observeQueue.queueTask(function () {                                                 // 370\n          f.apply(context, args);                                                                             // 371\n        });                                                                                                   // 372\n      };                                                                                                      // 373\n    };                                                                                                        // 374\n    query.added = wrapCallback(options.added);                                                                // 375\n    query.changed = wrapCallback(options.changed);                                                            // 376\n    query.removed = wrapCallback(options.removed);                                                            // 377\n    if (ordered) {                                                                                            // 378\n      query.addedBefore = wrapCallback(options.addedBefore);                                                  // 379\n      query.movedBefore = wrapCallback(options.movedBefore);                                                  // 380\n    }                                                                                                         // 381\n                                                                                                              // 382\n    if (!options._suppress_initial && !self.collection.paused) {                                              // 383\n      // XXX unify ordered and unordered interface                                                            // 384\n      var each = ordered                                                                                      // 385\n            ? _.bind(_.each, null, query.results)                                                             // 386\n            : _.bind(query.results.forEach, query.results);                                                   // 387\n      each(function (doc) {                                                                                   // 388\n        var fields = EJSON.clone(doc);                                                                        // 389\n                                                                                                              // 390\n        delete fields._id;                                                                                    // 391\n        if (ordered)                                                                                          // 392\n          query.addedBefore(doc._id, self._projectionFn(fields), null);                                       // 393\n        query.added(doc._id, self._projectionFn(fields));                                                     // 394\n      });                                                                                                     // 395\n    }                                                                                                         // 396\n                                                                                                              // 397\n    var handle = new LocalCollection.ObserveHandle;                                                           // 398\n    _.extend(handle, {                                                                                        // 399\n      collection: self.collection,                                                                            // 400\n      stop: function () {                                                                                     // 401\n        if (self.reactive)                                                                                    // 402\n          delete self.collection.queries[qid];                                                                // 403\n      }                                                                                                       // 404\n    });                                                                                                       // 405\n                                                                                                              // 406\n    if (self.reactive && Tracker.active) {                                                                    // 407\n      // XXX in many cases, the same observe will be recreated when                                           // 408\n      // the current autorun is rerun.  we could save work by                                                 // 409\n      // letting it linger across rerun and potentially get                                                   // 410\n      // repurposed if the same observe is performed, using logic                                             // 411\n      // similar to that of Meteor.subscribe.                                                                 // 412\n      Tracker.onInvalidate(function () {                                                                      // 413\n        handle.stop();                                                                                        // 414\n      });                                                                                                     // 415\n    }                                                                                                         // 416\n    // run the observe callbacks resulting from the initial contents                                          // 417\n    // before we leave the observe.                                                                           // 418\n    self.collection._observeQueue.drain();                                                                    // 419\n                                                                                                              // 420\n    return handle;                                                                                            // 421\n  }                                                                                                           // 422\n});                                                                                                           // 423\n                                                                                                              // 424\n// Returns a collection of matching objects, but doesn't deep copy them.                                      // 425\n//                                                                                                            // 426\n// If ordered is set, returns a sorted array, respecting sorter, skip, and limit                              // 427\n// properties of the query.  if sorter is falsey, no sort -- you get the natural                              // 428\n// order.                                                                                                     // 429\n//                                                                                                            // 430\n// If ordered is not set, returns an object mapping from ID to doc (sorter, skip                              // 431\n// and limit should not be set).                                                                              // 432\n//                                                                                                            // 433\n// If ordered is set and this cursor is a $near geoquery, then this function                                  // 434\n// will use an _IdMap to track each distance from the $near argument point in                                 // 435\n// order to use it as a sort key. If an _IdMap is passed in the 'distances'                                   // 436\n// argument, this function will clear it and use it for this purpose (otherwise                               // 437\n// it will just create its own _IdMap). The observeChanges implementation uses                                // 438\n// this to remember the distances after this function returns.                                                // 439\nLocalCollection.Cursor.prototype._getRawObjects = function (options) {                                        // 440\n  var self = this;                                                                                            // 441\n  options = options || {};                                                                                    // 442\n                                                                                                              // 443\n  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict                                     // 444\n  // compatible                                                                                               // 445\n  var results = options.ordered ? [] : new LocalCollection._IdMap;                                            // 446\n                                                                                                              // 447\n  // fast path for single ID value                                                                            // 448\n  if (self._selectorId !== undefined) {                                                                       // 449\n    // If you have non-zero skip and ask for a single id, you get                                             // 450\n    // nothing. This is so it matches the behavior of the '{_id: foo}'                                        // 451\n    // path.                                                                                                  // 452\n    if (self.skip)                                                                                            // 453\n      return results;                                                                                         // 454\n                                                                                                              // 455\n    var selectedDoc = self.collection._docs.get(self._selectorId);                                            // 456\n    if (selectedDoc) {                                                                                        // 457\n      if (options.ordered)                                                                                    // 458\n        results.push(selectedDoc);                                                                            // 459\n      else                                                                                                    // 460\n        results.set(self._selectorId, selectedDoc);                                                           // 461\n    }                                                                                                         // 462\n    return results;                                                                                           // 463\n  }                                                                                                           // 464\n                                                                                                              // 465\n  // slow path for arbitrary selector, sort, skip, limit                                                      // 466\n                                                                                                              // 467\n  // in the observeChanges case, distances is actually part of the \"query\" (ie,                               // 468\n  // live results set) object.  in other cases, distances is only used inside                                 // 469\n  // this function.                                                                                           // 470\n  var distances;                                                                                              // 471\n  if (self.matcher.hasGeoQuery() && options.ordered) {                                                        // 472\n    if (options.distances) {                                                                                  // 473\n      distances = options.distances;                                                                          // 474\n      distances.clear();                                                                                      // 475\n    } else {                                                                                                  // 476\n      distances = new LocalCollection._IdMap();                                                               // 477\n    }                                                                                                         // 478\n  }                                                                                                           // 479\n                                                                                                              // 480\n  self.collection._docs.forEach(function (doc, id) {                                                          // 481\n    var matchResult = self.matcher.documentMatches(doc);                                                      // 482\n    if (matchResult.result) {                                                                                 // 483\n      if (options.ordered) {                                                                                  // 484\n        results.push(doc);                                                                                    // 485\n        if (distances && matchResult.distance !== undefined)                                                  // 486\n          distances.set(id, matchResult.distance);                                                            // 487\n      } else {                                                                                                // 488\n        results.set(id, doc);                                                                                 // 489\n      }                                                                                                       // 490\n    }                                                                                                         // 491\n    // Fast path for limited unsorted queries.                                                                // 492\n    // XXX 'length' check here seems wrong for ordered                                                        // 493\n    if (self.limit && !self.skip && !self.sorter &&                                                           // 494\n        results.length === self.limit)                                                                        // 495\n      return false;  // break                                                                                 // 496\n    return true;  // continue                                                                                 // 497\n  });                                                                                                         // 498\n                                                                                                              // 499\n  if (!options.ordered)                                                                                       // 500\n    return results;                                                                                           // 501\n                                                                                                              // 502\n  if (self.sorter) {                                                                                          // 503\n    var comparator = self.sorter.getComparator({distances: distances});                                       // 504\n    results.sort(comparator);                                                                                 // 505\n  }                                                                                                           // 506\n                                                                                                              // 507\n  var idx_start = self.skip || 0;                                                                             // 508\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;                                       // 509\n  return results.slice(idx_start, idx_end);                                                                   // 510\n};                                                                                                            // 511\n                                                                                                              // 512\n// XXX Maybe we need a version of observe that just calls a callback if                                       // 513\n// anything changed.                                                                                          // 514\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {                            // 515\n  var self = this;                                                                                            // 516\n                                                                                                              // 517\n  if (Tracker.active) {                                                                                       // 518\n    var v = new Tracker.Dependency;                                                                           // 519\n    v.depend();                                                                                               // 520\n    var notifyChange = _.bind(v.changed, v);                                                                  // 521\n                                                                                                              // 522\n    var options = {                                                                                           // 523\n      _suppress_initial: true,                                                                                // 524\n      _allow_unordered: _allow_unordered                                                                      // 525\n    };                                                                                                        // 526\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],                                     // 527\n           function (fnName) {                                                                                // 528\n             if (changers[fnName])                                                                            // 529\n               options[fnName] = notifyChange;                                                                // 530\n           });                                                                                                // 531\n                                                                                                              // 532\n    // observeChanges will stop() when this computation is invalidated                                        // 533\n    self.observeChanges(options);                                                                             // 534\n  }                                                                                                           // 535\n};                                                                                                            // 536\n                                                                                                              // 537\n// XXX enforce rule that field names can't start with '$' or contain '.'                                      // 538\n// (real mongodb does in fact enforce this)                                                                   // 539\n// XXX possibly enforce that 'undefined' does not appear (we assume                                           // 540\n// this in our handling of null and $exists)                                                                  // 541\nLocalCollection.prototype.insert = function (doc, callback) {                                                 // 542\n  var self = this;                                                                                            // 543\n  doc = EJSON.clone(doc);                                                                                     // 544\n                                                                                                              // 545\n  if (!_.has(doc, '_id')) {                                                                                   // 546\n    // if you really want to use ObjectIDs, set this global.                                                  // 547\n    // Mongo.Collection specifies its own ids and does not use this code.                                     // 548\n    doc._id = LocalCollection._useOID ? new MongoID.ObjectID()                                                // 549\n                                      : Random.id();                                                          // 550\n  }                                                                                                           // 551\n  var id = doc._id;                                                                                           // 552\n                                                                                                              // 553\n  if (self._docs.has(id))                                                                                     // 554\n    throw MinimongoError(\"Duplicate _id '\" + id + \"'\");                                                       // 555\n                                                                                                              // 556\n  self._saveOriginal(id, undefined);                                                                          // 557\n  self._docs.set(id, doc);                                                                                    // 558\n                                                                                                              // 559\n  var queriesToRecompute = [];                                                                                // 560\n  // trigger live queries that match                                                                          // 561\n  for (var qid in self.queries) {                                                                             // 562\n    var query = self.queries[qid];                                                                            // 563\n    var matchResult = query.matcher.documentMatches(doc);                                                     // 564\n    if (matchResult.result) {                                                                                 // 565\n      if (query.distances && matchResult.distance !== undefined)                                              // 566\n        query.distances.set(id, matchResult.distance);                                                        // 567\n      if (query.cursor.skip || query.cursor.limit)                                                            // 568\n        queriesToRecompute.push(qid);                                                                         // 569\n      else                                                                                                    // 570\n        LocalCollection._insertInResults(query, doc);                                                         // 571\n    }                                                                                                         // 572\n  }                                                                                                           // 573\n                                                                                                              // 574\n  _.each(queriesToRecompute, function (qid) {                                                                 // 575\n    if (self.queries[qid])                                                                                    // 576\n      self._recomputeResults(self.queries[qid]);                                                              // 577\n  });                                                                                                         // 578\n  self._observeQueue.drain();                                                                                 // 579\n                                                                                                              // 580\n  // Defer because the caller likely doesn't expect the callback to be run                                    // 581\n  // immediately.                                                                                             // 582\n  if (callback)                                                                                               // 583\n    Meteor.defer(function () {                                                                                // 584\n      callback(null, id);                                                                                     // 585\n    });                                                                                                       // 586\n  return id;                                                                                                  // 587\n};                                                                                                            // 588\n                                                                                                              // 589\n// Iterates over a subset of documents that could match selector; calls                                       // 590\n// f(doc, id) on each of them.  Specifically, if selector specifies                                           // 591\n// specific _id's, it only looks at those.  doc is *not* cloned: it is the                                    // 592\n// same object that is in _docs.                                                                              // 593\nLocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {                                 // 594\n  var self = this;                                                                                            // 595\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                          // 596\n  if (specificIds) {                                                                                          // 597\n    for (var i = 0; i < specificIds.length; ++i) {                                                            // 598\n      var id = specificIds[i];                                                                                // 599\n      var doc = self._docs.get(id);                                                                           // 600\n      if (doc) {                                                                                              // 601\n        var breakIfFalse = f(doc, id);                                                                        // 602\n        if (breakIfFalse === false)                                                                           // 603\n          break;                                                                                              // 604\n      }                                                                                                       // 605\n    }                                                                                                         // 606\n  } else {                                                                                                    // 607\n    self._docs.forEach(f);                                                                                    // 608\n  }                                                                                                           // 609\n};                                                                                                            // 610\n                                                                                                              // 611\nLocalCollection.prototype.remove = function (selector, callback) {                                            // 612\n  var self = this;                                                                                            // 613\n                                                                                                              // 614\n  // Easy special case: if we're not calling observeChanges callbacks and we're                               // 615\n  // not saving originals and we got asked to remove everything, then just empty                              // 616\n  // everything directly.                                                                                     // 617\n  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {                                   // 618\n    var result = self._docs.size();                                                                           // 619\n    self._docs.clear();                                                                                       // 620\n    _.each(self.queries, function (query) {                                                                   // 621\n      if (query.ordered) {                                                                                    // 622\n        query.results = [];                                                                                   // 623\n      } else {                                                                                                // 624\n        query.results.clear();                                                                                // 625\n      }                                                                                                       // 626\n    });                                                                                                       // 627\n    if (callback) {                                                                                           // 628\n      Meteor.defer(function () {                                                                              // 629\n        callback(null, result);                                                                               // 630\n      });                                                                                                     // 631\n    }                                                                                                         // 632\n    return result;                                                                                            // 633\n  }                                                                                                           // 634\n                                                                                                              // 635\n  var matcher = new Minimongo.Matcher(selector);                                                              // 636\n  var remove = [];                                                                                            // 637\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                // 638\n    if (matcher.documentMatches(doc).result)                                                                  // 639\n      remove.push(id);                                                                                        // 640\n  });                                                                                                         // 641\n                                                                                                              // 642\n  var queriesToRecompute = [];                                                                                // 643\n  var queryRemove = [];                                                                                       // 644\n  for (var i = 0; i < remove.length; i++) {                                                                   // 645\n    var removeId = remove[i];                                                                                 // 646\n    var removeDoc = self._docs.get(removeId);                                                                 // 647\n    _.each(self.queries, function (query, qid) {                                                              // 648\n      if (query.matcher.documentMatches(removeDoc).result) {                                                  // 649\n        if (query.cursor.skip || query.cursor.limit)                                                          // 650\n          queriesToRecompute.push(qid);                                                                       // 651\n        else                                                                                                  // 652\n          queryRemove.push({qid: qid, doc: removeDoc});                                                       // 653\n      }                                                                                                       // 654\n    });                                                                                                       // 655\n    self._saveOriginal(removeId, removeDoc);                                                                  // 656\n    self._docs.remove(removeId);                                                                              // 657\n  }                                                                                                           // 658\n                                                                                                              // 659\n  // run live query callbacks _after_ we've removed the documents.                                            // 660\n  _.each(queryRemove, function (remove) {                                                                     // 661\n    var query = self.queries[remove.qid];                                                                     // 662\n    if (query) {                                                                                              // 663\n      query.distances && query.distances.remove(remove.doc._id);                                              // 664\n      LocalCollection._removeFromResults(query, remove.doc);                                                  // 665\n    }                                                                                                         // 666\n  });                                                                                                         // 667\n  _.each(queriesToRecompute, function (qid) {                                                                 // 668\n    var query = self.queries[qid];                                                                            // 669\n    if (query)                                                                                                // 670\n      self._recomputeResults(query);                                                                          // 671\n  });                                                                                                         // 672\n  self._observeQueue.drain();                                                                                 // 673\n  result = remove.length;                                                                                     // 674\n  if (callback)                                                                                               // 675\n    Meteor.defer(function () {                                                                                // 676\n      callback(null, result);                                                                                 // 677\n    });                                                                                                       // 678\n  return result;                                                                                              // 679\n};                                                                                                            // 680\n                                                                                                              // 681\n// XXX atomicity: if multi is true, and one modification fails, do                                            // 682\n// we rollback the whole operation, or what?                                                                  // 683\nLocalCollection.prototype.update = function (selector, mod, options, callback) {                              // 684\n  var self = this;                                                                                            // 685\n  if (! callback && options instanceof Function) {                                                            // 686\n    callback = options;                                                                                       // 687\n    options = null;                                                                                           // 688\n  }                                                                                                           // 689\n  if (!options) options = {};                                                                                 // 690\n                                                                                                              // 691\n  var matcher = new Minimongo.Matcher(selector);                                                              // 692\n                                                                                                              // 693\n  // Save the original results of any query that we might need to                                             // 694\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in                                // 695\n  // it. (We don't need to save the original results of paused queries because                                // 696\n  // they already have a resultsSnapshot and we won't be diffing in                                           // 697\n  // _recomputeResults.)                                                                                      // 698\n  var qidToOriginalResults = {};                                                                              // 699\n  _.each(self.queries, function (query, qid) {                                                                // 700\n    // XXX for now, skip/limit implies ordered observe, so query.results is                                   // 701\n    // always an array                                                                                        // 702\n    if ((query.cursor.skip || query.cursor.limit) && ! self.paused)                                           // 703\n      qidToOriginalResults[qid] = EJSON.clone(query.results);                                                 // 704\n  });                                                                                                         // 705\n  var recomputeQids = {};                                                                                     // 706\n                                                                                                              // 707\n  var updateCount = 0;                                                                                        // 708\n                                                                                                              // 709\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                // 710\n    var queryResult = matcher.documentMatches(doc);                                                           // 711\n    if (queryResult.result) {                                                                                 // 712\n      // XXX Should we save the original even if mod ends up being a no-op?                                   // 713\n      self._saveOriginal(id, doc);                                                                            // 714\n      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);                               // 715\n      ++updateCount;                                                                                          // 716\n      if (!options.multi)                                                                                     // 717\n        return false;  // break                                                                               // 718\n    }                                                                                                         // 719\n    return true;                                                                                              // 720\n  });                                                                                                         // 721\n                                                                                                              // 722\n  _.each(recomputeQids, function (dummy, qid) {                                                               // 723\n    var query = self.queries[qid];                                                                            // 724\n    if (query)                                                                                                // 725\n      self._recomputeResults(query, qidToOriginalResults[qid]);                                               // 726\n  });                                                                                                         // 727\n  self._observeQueue.drain();                                                                                 // 728\n                                                                                                              // 729\n  // If we are doing an upsert, and we didn't modify any documents yet, then                                  // 730\n  // it's time to do an insert. Figure out what document we are inserting, and                                // 731\n  // generate an id for it.                                                                                   // 732\n  var insertedId;                                                                                             // 733\n  if (updateCount === 0 && options.upsert) {                                                                  // 734\n    var newDoc = LocalCollection._removeDollarOperators(selector);                                            // 735\n    LocalCollection._modify(newDoc, mod, {isInsert: true});                                                   // 736\n    if (! newDoc._id && options.insertedId)                                                                   // 737\n      newDoc._id = options.insertedId;                                                                        // 738\n    insertedId = self.insert(newDoc);                                                                         // 739\n    updateCount = 1;                                                                                          // 740\n  }                                                                                                           // 741\n                                                                                                              // 742\n  // Return the number of affected documents, or in the upsert case, an object                                // 743\n  // containing the number of affected docs and the id of the doc that was                                    // 744\n  // inserted, if any.                                                                                        // 745\n  var result;                                                                                                 // 746\n  if (options._returnObject) {                                                                                // 747\n    result = {                                                                                                // 748\n      numberAffected: updateCount                                                                             // 749\n    };                                                                                                        // 750\n    if (insertedId !== undefined)                                                                             // 751\n      result.insertedId = insertedId;                                                                         // 752\n  } else {                                                                                                    // 753\n    result = updateCount;                                                                                     // 754\n  }                                                                                                           // 755\n                                                                                                              // 756\n  if (callback)                                                                                               // 757\n    Meteor.defer(function () {                                                                                // 758\n      callback(null, result);                                                                                 // 759\n    });                                                                                                       // 760\n  return result;                                                                                              // 761\n};                                                                                                            // 762\n                                                                                                              // 763\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                                       // 764\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:                              // 765\n// true }).                                                                                                   // 766\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {                              // 767\n  var self = this;                                                                                            // 768\n  if (! callback && typeof options === \"function\") {                                                          // 769\n    callback = options;                                                                                       // 770\n    options = {};                                                                                             // 771\n  }                                                                                                           // 772\n  return self.update(selector, mod, _.extend({}, options, {                                                   // 773\n    upsert: true,                                                                                             // 774\n    _returnObject: true                                                                                       // 775\n  }), callback);                                                                                              // 776\n};                                                                                                            // 777\n                                                                                                              // 778\nLocalCollection.prototype._modifyAndNotify = function (                                                       // 779\n    doc, mod, recomputeQids, arrayIndices) {                                                                  // 780\n  var self = this;                                                                                            // 781\n                                                                                                              // 782\n  var matched_before = {};                                                                                    // 783\n  for (var qid in self.queries) {                                                                             // 784\n    var query = self.queries[qid];                                                                            // 785\n    if (query.ordered) {                                                                                      // 786\n      matched_before[qid] = query.matcher.documentMatches(doc).result;                                        // 787\n    } else {                                                                                                  // 788\n      // Because we don't support skip or limit (yet) in unordered queries, we                                // 789\n      // can just do a direct lookup.                                                                         // 790\n      matched_before[qid] = query.results.has(doc._id);                                                       // 791\n    }                                                                                                         // 792\n  }                                                                                                           // 793\n                                                                                                              // 794\n  var old_doc = EJSON.clone(doc);                                                                             // 795\n                                                                                                              // 796\n  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});                                            // 797\n                                                                                                              // 798\n  for (qid in self.queries) {                                                                                 // 799\n    query = self.queries[qid];                                                                                // 800\n    var before = matched_before[qid];                                                                         // 801\n    var afterMatch = query.matcher.documentMatches(doc);                                                      // 802\n    var after = afterMatch.result;                                                                            // 803\n    if (after && query.distances && afterMatch.distance !== undefined)                                        // 804\n      query.distances.set(doc._id, afterMatch.distance);                                                      // 805\n                                                                                                              // 806\n    if (query.cursor.skip || query.cursor.limit) {                                                            // 807\n      // We need to recompute any query where the doc may have been in the                                    // 808\n      // cursor's window either before or after the update. (Note that if skip                                // 809\n      // or limit is set, \"before\" and \"after\" being true do not necessarily                                  // 810\n      // mean that the document is in the cursor's output after skip/limit is                                 // 811\n      // applied... but if they are false, then the document definitely is NOT                                // 812\n      // in the output. So it's safe to skip recompute if neither before or                                   // 813\n      // after are true.)                                                                                     // 814\n      if (before || after)                                                                                    // 815\n        recomputeQids[qid] = true;                                                                            // 816\n    } else if (before && !after) {                                                                            // 817\n      LocalCollection._removeFromResults(query, doc);                                                         // 818\n    } else if (!before && after) {                                                                            // 819\n      LocalCollection._insertInResults(query, doc);                                                           // 820\n    } else if (before && after) {                                                                             // 821\n      LocalCollection._updateInResults(query, doc, old_doc);                                                  // 822\n    }                                                                                                         // 823\n  }                                                                                                           // 824\n};                                                                                                            // 825\n                                                                                                              // 826\n// XXX the sorted-query logic below is laughably inefficient. we'll                                           // 827\n// need to come up with a better datastructure for this.                                                      // 828\n//                                                                                                            // 829\n// XXX the logic for observing with a skip or a limit is even more                                            // 830\n// laughably inefficient. we recompute the whole results every time!                                          // 831\n                                                                                                              // 832\nLocalCollection._insertInResults = function (query, doc) {                                                    // 833\n  var fields = EJSON.clone(doc);                                                                              // 834\n  delete fields._id;                                                                                          // 835\n  if (query.ordered) {                                                                                        // 836\n    if (!query.sorter) {                                                                                      // 837\n      query.addedBefore(doc._id, query.projectionFn(fields), null);                                           // 838\n      query.results.push(doc);                                                                                // 839\n    } else {                                                                                                  // 840\n      var i = LocalCollection._insertInSortedList(                                                            // 841\n        query.sorter.getComparator({distances: query.distances}),                                             // 842\n        query.results, doc);                                                                                  // 843\n      var next = query.results[i+1];                                                                          // 844\n      if (next)                                                                                               // 845\n        next = next._id;                                                                                      // 846\n      else                                                                                                    // 847\n        next = null;                                                                                          // 848\n      query.addedBefore(doc._id, query.projectionFn(fields), next);                                           // 849\n    }                                                                                                         // 850\n    query.added(doc._id, query.projectionFn(fields));                                                         // 851\n  } else {                                                                                                    // 852\n    query.added(doc._id, query.projectionFn(fields));                                                         // 853\n    query.results.set(doc._id, doc);                                                                          // 854\n  }                                                                                                           // 855\n};                                                                                                            // 856\n                                                                                                              // 857\nLocalCollection._removeFromResults = function (query, doc) {                                                  // 858\n  if (query.ordered) {                                                                                        // 859\n    var i = LocalCollection._findInOrderedResults(query, doc);                                                // 860\n    query.removed(doc._id);                                                                                   // 861\n    query.results.splice(i, 1);                                                                               // 862\n  } else {                                                                                                    // 863\n    var id = doc._id;  // in case callback mutates doc                                                        // 864\n    query.removed(doc._id);                                                                                   // 865\n    query.results.remove(id);                                                                                 // 866\n  }                                                                                                           // 867\n};                                                                                                            // 868\n                                                                                                              // 869\nLocalCollection._updateInResults = function (query, doc, old_doc) {                                           // 870\n  if (!EJSON.equals(doc._id, old_doc._id))                                                                    // 871\n    throw new Error(\"Can't change a doc's _id while updating\");                                               // 872\n  var projectionFn = query.projectionFn;                                                                      // 873\n  var changedFields = DiffSequence.makeChangedFields(                                                         // 874\n    projectionFn(doc), projectionFn(old_doc));                                                                // 875\n                                                                                                              // 876\n  if (!query.ordered) {                                                                                       // 877\n    if (!_.isEmpty(changedFields)) {                                                                          // 878\n      query.changed(doc._id, changedFields);                                                                  // 879\n      query.results.set(doc._id, doc);                                                                        // 880\n    }                                                                                                         // 881\n    return;                                                                                                   // 882\n  }                                                                                                           // 883\n                                                                                                              // 884\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);                                           // 885\n                                                                                                              // 886\n  if (!_.isEmpty(changedFields))                                                                              // 887\n    query.changed(doc._id, changedFields);                                                                    // 888\n  if (!query.sorter)                                                                                          // 889\n    return;                                                                                                   // 890\n                                                                                                              // 891\n  // just take it out and put it back in again, and see if the index                                          // 892\n  // changes                                                                                                  // 893\n  query.results.splice(orig_idx, 1);                                                                          // 894\n  var new_idx = LocalCollection._insertInSortedList(                                                          // 895\n    query.sorter.getComparator({distances: query.distances}),                                                 // 896\n    query.results, doc);                                                                                      // 897\n  if (orig_idx !== new_idx) {                                                                                 // 898\n    var next = query.results[new_idx+1];                                                                      // 899\n    if (next)                                                                                                 // 900\n      next = next._id;                                                                                        // 901\n    else                                                                                                      // 902\n      next = null;                                                                                            // 903\n    query.movedBefore && query.movedBefore(doc._id, next);                                                    // 904\n  }                                                                                                           // 905\n};                                                                                                            // 906\n                                                                                                              // 907\n// Recomputes the results of a query and runs observe callbacks for the                                       // 908\n// difference between the previous results and the current results (unless                                    // 909\n// paused). Used for skip/limit queries.                                                                      // 910\n//                                                                                                            // 911\n// When this is used by insert or remove, it can just use query.results for the                               // 912\n// old results (and there's no need to pass in oldResults), because these                                     // 913\n// operations don't mutate the documents in the collection. Update needs to pass                              // 914\n// in an oldResults which was deep-copied before the modifier was applied.                                    // 915\n//                                                                                                            // 916\n// oldResults is guaranteed to be ignored if the query is not paused.                                         // 917\nLocalCollection.prototype._recomputeResults = function (query, oldResults) {                                  // 918\n  var self = this;                                                                                            // 919\n  if (! self.paused && ! oldResults)                                                                          // 920\n    oldResults = query.results;                                                                               // 921\n  if (query.distances)                                                                                        // 922\n    query.distances.clear();                                                                                  // 923\n  query.results = query.cursor._getRawObjects({                                                               // 924\n    ordered: query.ordered, distances: query.distances});                                                     // 925\n                                                                                                              // 926\n  if (! self.paused) {                                                                                        // 927\n    LocalCollection._diffQueryChanges(                                                                        // 928\n      query.ordered, oldResults, query.results, query,                                                        // 929\n      { projectionFn: query.projectionFn });                                                                  // 930\n  }                                                                                                           // 931\n};                                                                                                            // 932\n                                                                                                              // 933\n                                                                                                              // 934\nLocalCollection._findInOrderedResults = function (query, doc) {                                               // 935\n  if (!query.ordered)                                                                                         // 936\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");                                   // 937\n  for (var i = 0; i < query.results.length; i++)                                                              // 938\n    if (query.results[i] === doc)                                                                             // 939\n      return i;                                                                                               // 940\n  throw Error(\"object missing from query\");                                                                   // 941\n};                                                                                                            // 942\n                                                                                                              // 943\n// This binary search puts a value between any equal values, and the first                                    // 944\n// lesser value.                                                                                              // 945\nLocalCollection._binarySearch = function (cmp, array, value) {                                                // 946\n  var first = 0, rangeLength = array.length;                                                                  // 947\n                                                                                                              // 948\n  while (rangeLength > 0) {                                                                                   // 949\n    var halfRange = Math.floor(rangeLength/2);                                                                // 950\n    if (cmp(value, array[first + halfRange]) >= 0) {                                                          // 951\n      first += halfRange + 1;                                                                                 // 952\n      rangeLength -= halfRange + 1;                                                                           // 953\n    } else {                                                                                                  // 954\n      rangeLength = halfRange;                                                                                // 955\n    }                                                                                                         // 956\n  }                                                                                                           // 957\n  return first;                                                                                               // 958\n};                                                                                                            // 959\n                                                                                                              // 960\nLocalCollection._insertInSortedList = function (cmp, array, value) {                                          // 961\n  if (array.length === 0) {                                                                                   // 962\n    array.push(value);                                                                                        // 963\n    return 0;                                                                                                 // 964\n  }                                                                                                           // 965\n                                                                                                              // 966\n  var idx = LocalCollection._binarySearch(cmp, array, value);                                                 // 967\n  array.splice(idx, 0, value);                                                                                // 968\n  return idx;                                                                                                 // 969\n};                                                                                                            // 970\n                                                                                                              // 971\n// To track what documents are affected by a piece of code, call saveOriginals()                              // 972\n// before it and retrieveOriginals() after it. retrieveOriginals returns an                                   // 973\n// object whose keys are the ids of the documents that were affected since the                                // 974\n// call to saveOriginals(), and the values are equal to the document's contents                               // 975\n// at the time of saveOriginals. (In the case of an inserted document, undefined                              // 976\n// is the value.) You must alternate between calls to saveOriginals() and                                     // 977\n// retrieveOriginals().                                                                                       // 978\nLocalCollection.prototype.saveOriginals = function () {                                                       // 979\n  var self = this;                                                                                            // 980\n  if (self._savedOriginals)                                                                                   // 981\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");                                  // 982\n  self._savedOriginals = new LocalCollection._IdMap;                                                          // 983\n};                                                                                                            // 984\nLocalCollection.prototype.retrieveOriginals = function () {                                                   // 985\n  var self = this;                                                                                            // 986\n  if (!self._savedOriginals)                                                                                  // 987\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");                                        // 988\n                                                                                                              // 989\n  var originals = self._savedOriginals;                                                                       // 990\n  self._savedOriginals = null;                                                                                // 991\n  return originals;                                                                                           // 992\n};                                                                                                            // 993\n                                                                                                              // 994\nLocalCollection.prototype._saveOriginal = function (id, doc) {                                                // 995\n  var self = this;                                                                                            // 996\n  // Are we even trying to save originals?                                                                    // 997\n  if (!self._savedOriginals)                                                                                  // 998\n    return;                                                                                                   // 999\n  // Have we previously mutated the original (and so 'doc' is not actually                                    // 1000\n  // original)?  (Note the 'has' check rather than truth: we store undefined                                  // 1001\n  // here for inserted docs!)                                                                                 // 1002\n  if (self._savedOriginals.has(id))                                                                           // 1003\n    return;                                                                                                   // 1004\n  self._savedOriginals.set(id, EJSON.clone(doc));                                                             // 1005\n};                                                                                                            // 1006\n                                                                                                              // 1007\n// Pause the observers. No callbacks from observers will fire until                                           // 1008\n// 'resumeObservers' is called.                                                                               // 1009\nLocalCollection.prototype.pauseObservers = function () {                                                      // 1010\n  // No-op if already paused.                                                                                 // 1011\n  if (this.paused)                                                                                            // 1012\n    return;                                                                                                   // 1013\n                                                                                                              // 1014\n  // Set the 'paused' flag such that new observer messages don't fire.                                        // 1015\n  this.paused = true;                                                                                         // 1016\n                                                                                                              // 1017\n  // Take a snapshot of the query results for each query.                                                     // 1018\n  for (var qid in this.queries) {                                                                             // 1019\n    var query = this.queries[qid];                                                                            // 1020\n                                                                                                              // 1021\n    query.resultsSnapshot = EJSON.clone(query.results);                                                       // 1022\n  }                                                                                                           // 1023\n};                                                                                                            // 1024\n                                                                                                              // 1025\n// Resume the observers. Observers immediately receive change                                                 // 1026\n// notifications to bring them to the current state of the                                                    // 1027\n// database. Note that this is not just replaying all the changes that                                        // 1028\n// happened during the pause, it is a smarter 'coalesced' diff.                                               // 1029\nLocalCollection.prototype.resumeObservers = function () {                                                     // 1030\n  var self = this;                                                                                            // 1031\n  // No-op if not paused.                                                                                     // 1032\n  if (!this.paused)                                                                                           // 1033\n    return;                                                                                                   // 1034\n                                                                                                              // 1035\n  // Unset the 'paused' flag. Make sure to do this first, otherwise                                           // 1036\n  // observer methods won't actually fire when we trigger them.                                               // 1037\n  this.paused = false;                                                                                        // 1038\n                                                                                                              // 1039\n  for (var qid in this.queries) {                                                                             // 1040\n    var query = self.queries[qid];                                                                            // 1041\n    // Diff the current results against the snapshot and send to observers.                                   // 1042\n    // pass the query object for its observer callbacks.                                                      // 1043\n    LocalCollection._diffQueryChanges(                                                                        // 1044\n      query.ordered, query.resultsSnapshot, query.results, query,                                             // 1045\n      { projectionFn: query.projectionFn });                                                                  // 1046\n    query.resultsSnapshot = null;                                                                             // 1047\n  }                                                                                                           // 1048\n  self._observeQueue.drain();                                                                                 // 1049\n};                                                                                                            // 1050\n                                                                                                              // 1051\n                                                                                                              // 1052\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/wrap_transform.js                                                                       //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Wrap a transform function to return objects that have the _id field                                        // 1\n// of the untransformed document. This ensures that subsystems such as                                        // 2\n// the observe-sequence package that call `observe` can keep track of                                         // 3\n// the documents identities.                                                                                  // 4\n//                                                                                                            // 5\n// - Require that it returns objects                                                                          // 6\n// - If the return value has an _id field, verify that it matches the                                         // 7\n//   original _id field                                                                                       // 8\n// - If the return value doesn't have an _id field, add it back.                                              // 9\nLocalCollection.wrapTransform = function (transform) {                                                        // 10\n  if (! transform)                                                                                            // 11\n    return null;                                                                                              // 12\n                                                                                                              // 13\n  // No need to doubly-wrap transforms.                                                                       // 14\n  if (transform.__wrappedTransform__)                                                                         // 15\n    return transform;                                                                                         // 16\n                                                                                                              // 17\n  var wrapped = function (doc) {                                                                              // 18\n    if (!_.has(doc, '_id')) {                                                                                 // 19\n      // XXX do we ever have a transform on the oplog's collection? because that                              // 20\n      // collection has no _id.                                                                               // 21\n      throw new Error(\"can only transform documents with _id\");                                               // 22\n    }                                                                                                         // 23\n                                                                                                              // 24\n    var id = doc._id;                                                                                         // 25\n    // XXX consider making tracker a weak dependency and checking Package.tracker here                        // 26\n    var transformed = Tracker.nonreactive(function () {                                                       // 27\n      return transform(doc);                                                                                  // 28\n    });                                                                                                       // 29\n                                                                                                              // 30\n    if (!isPlainObject(transformed)) {                                                                        // 31\n      throw new Error(\"transform must return object\");                                                        // 32\n    }                                                                                                         // 33\n                                                                                                              // 34\n    if (_.has(transformed, '_id')) {                                                                          // 35\n      if (!EJSON.equals(transformed._id, id)) {                                                               // 36\n        throw new Error(\"transformed document can't have different _id\");                                     // 37\n      }                                                                                                       // 38\n    } else {                                                                                                  // 39\n      transformed._id = id;                                                                                   // 40\n    }                                                                                                         // 41\n    return transformed;                                                                                       // 42\n  };                                                                                                          // 43\n  wrapped.__wrappedTransform__ = true;                                                                        // 44\n  return wrapped;                                                                                             // 45\n};                                                                                                            // 46\n                                                                                                              // 47\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/helpers.js                                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as                               // 1\n// arrays.                                                                                                    // 2\n// XXX maybe this should be EJSON.isArray                                                                     // 3\nisArray = function (x) {                                                                                      // 4\n  return _.isArray(x) && !EJSON.isBinary(x);                                                                  // 5\n};                                                                                                            // 6\n                                                                                                              // 7\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                                   // 8\n// RegExp                                                                                                     // 9\n// XXX note that _type(undefined) === 3!!!!                                                                   // 10\nisPlainObject = LocalCollection._isPlainObject = function (x) {                                               // 11\n  return x && LocalCollection._f._type(x) === 3;                                                              // 12\n};                                                                                                            // 13\n                                                                                                              // 14\nisIndexable = function (x) {                                                                                  // 15\n  return isArray(x) || isPlainObject(x);                                                                      // 16\n};                                                                                                            // 17\n                                                                                                              // 18\n// Returns true if this is an object with at least one key and all keys begin                                 // 19\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and                                // 20\n// others don't.                                                                                              // 21\nisOperatorObject = function (valueSelector, inconsistentOK) {                                                 // 22\n  if (!isPlainObject(valueSelector))                                                                          // 23\n    return false;                                                                                             // 24\n                                                                                                              // 25\n  var theseAreOperators = undefined;                                                                          // 26\n  _.each(valueSelector, function (value, selKey) {                                                            // 27\n    var thisIsOperator = selKey.substr(0, 1) === '$';                                                         // 28\n    if (theseAreOperators === undefined) {                                                                    // 29\n      theseAreOperators = thisIsOperator;                                                                     // 30\n    } else if (theseAreOperators !== thisIsOperator) {                                                        // 31\n      if (!inconsistentOK)                                                                                    // 32\n        throw new Error(\"Inconsistent operator: \" +                                                           // 33\n                        JSON.stringify(valueSelector));                                                       // 34\n      theseAreOperators = false;                                                                              // 35\n    }                                                                                                         // 36\n  });                                                                                                         // 37\n  return !!theseAreOperators;  // {} has no operators                                                         // 38\n};                                                                                                            // 39\n                                                                                                              // 40\n                                                                                                              // 41\n// string can be converted to integer                                                                         // 42\nisNumericKey = function (s) {                                                                                 // 43\n  return /^[0-9]+$/.test(s);                                                                                  // 44\n};                                                                                                            // 45\n                                                                                                              // 46\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/selector.js                                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// The minimongo selector compiler!                                                                           // 1\n                                                                                                              // 2\n// Terminology:                                                                                               // 3\n//  - a \"selector\" is the EJSON object representing a selector                                                // 4\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher                                      // 5\n//    object or one of the component lambdas that matches parts of it)                                        // 6\n//  - a \"result object\" is an object with a \"result\" field and maybe                                          // 7\n//    distance and arrayIndices.                                                                              // 8\n//  - a \"branched value\" is an object with a \"value\" field and maybe                                          // 9\n//    \"dontIterate\" and \"arrayIndices\".                                                                       // 10\n//  - a \"document\" is a top-level object that can be stored in a collection.                                  // 11\n//  - a \"lookup function\" is a function that takes in a document and returns                                  // 12\n//    an array of \"branched values\".                                                                          // 13\n//  - a \"branched matcher\" maps from an array of branched values to a result                                  // 14\n//    object.                                                                                                 // 15\n//  - an \"element matcher\" maps from a single value to a bool.                                                // 16\n                                                                                                              // 17\n// Main entry point.                                                                                          // 18\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});                                                      // 19\n//   if (matcher.documentMatches({a: 7})) ...                                                                 // 20\nMinimongo.Matcher = function (selector) {                                                                     // 21\n  var self = this;                                                                                            // 22\n  // A set (object mapping string -> *) of all of the document paths looked                                   // 23\n  // at by the selector. Also includes the empty string if it may look at any                                 // 24\n  // path (eg, $where).                                                                                       // 25\n  self._paths = {};                                                                                           // 26\n  // Set to true if compilation finds a $near.                                                                // 27\n  self._hasGeoQuery = false;                                                                                  // 28\n  // Set to true if compilation finds a $where.                                                               // 29\n  self._hasWhere = false;                                                                                     // 30\n  // Set to false if compilation finds anything other than a simple equality or                               // 31\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with                              // 32\n  // scalars as operands.                                                                                     // 33\n  self._isSimple = true;                                                                                      // 34\n  // Set to a dummy document which always matches this Matcher. Or set to null                                // 35\n  // if such document is too hard to find.                                                                    // 36\n  self._matchingDocument = undefined;                                                                         // 37\n  // A clone of the original selector. It may just be a function if the user                                  // 38\n  // passed in a function; otherwise is definitely an object (eg, IDs are                                     // 39\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                                     // 40\n  // Sorter._useWithMatcher.                                                                                  // 41\n  self._selector = null;                                                                                      // 42\n  self._docMatcher = self._compileSelector(selector);                                                         // 43\n};                                                                                                            // 44\n                                                                                                              // 45\n_.extend(Minimongo.Matcher.prototype, {                                                                       // 46\n  documentMatches: function (doc) {                                                                           // 47\n    if (!doc || typeof doc !== \"object\") {                                                                    // 48\n      throw Error(\"documentMatches needs a document\");                                                        // 49\n    }                                                                                                         // 50\n    return this._docMatcher(doc);                                                                             // 51\n  },                                                                                                          // 52\n  hasGeoQuery: function () {                                                                                  // 53\n    return this._hasGeoQuery;                                                                                 // 54\n  },                                                                                                          // 55\n  hasWhere: function () {                                                                                     // 56\n    return this._hasWhere;                                                                                    // 57\n  },                                                                                                          // 58\n  isSimple: function () {                                                                                     // 59\n    return this._isSimple;                                                                                    // 60\n  },                                                                                                          // 61\n                                                                                                              // 62\n  // Given a selector, return a function that takes one argument, a                                           // 63\n  // document. It returns a result object.                                                                    // 64\n  _compileSelector: function (selector) {                                                                     // 65\n    var self = this;                                                                                          // 66\n    // you can pass a literal function instead of a selector                                                  // 67\n    if (selector instanceof Function) {                                                                       // 68\n      self._isSimple = false;                                                                                 // 69\n      self._selector = selector;                                                                              // 70\n      self._recordPathUsed('');                                                                               // 71\n      return function (doc) {                                                                                 // 72\n        return {result: !!selector.call(doc)};                                                                // 73\n      };                                                                                                      // 74\n    }                                                                                                         // 75\n                                                                                                              // 76\n    // shorthand -- scalars match _id                                                                         // 77\n    if (LocalCollection._selectorIsId(selector)) {                                                            // 78\n      self._selector = {_id: selector};                                                                       // 79\n      self._recordPathUsed('_id');                                                                            // 80\n      return function (doc) {                                                                                 // 81\n        return {result: EJSON.equals(doc._id, selector)};                                                     // 82\n      };                                                                                                      // 83\n    }                                                                                                         // 84\n                                                                                                              // 85\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both                                // 86\n    // likely programmer error, and not what you want, particularly for                                       // 87\n    // destructive operations.                                                                                // 88\n    if (!selector || (('_id' in selector) && !selector._id)) {                                                // 89\n      self._isSimple = false;                                                                                 // 90\n      return nothingMatcher;                                                                                  // 91\n    }                                                                                                         // 92\n                                                                                                              // 93\n    // Top level can't be an array or true or binary.                                                         // 94\n    if (typeof(selector) === 'boolean' || isArray(selector) ||                                                // 95\n        EJSON.isBinary(selector))                                                                             // 96\n      throw new Error(\"Invalid selector: \" + selector);                                                       // 97\n                                                                                                              // 98\n    self._selector = EJSON.clone(selector);                                                                   // 99\n    return compileDocumentSelector(selector, self, {isRoot: true});                                           // 100\n  },                                                                                                          // 101\n  _recordPathUsed: function (path) {                                                                          // 102\n    this._paths[path] = true;                                                                                 // 103\n  },                                                                                                          // 104\n  // Returns a list of key paths the given selector is looking for. It includes                               // 105\n  // the empty string if there is a $where.                                                                   // 106\n  _getPaths: function () {                                                                                    // 107\n    return _.keys(this._paths);                                                                               // 108\n  }                                                                                                           // 109\n});                                                                                                           // 110\n                                                                                                              // 111\n                                                                                                              // 112\n// Takes in a selector that could match a full document (eg, the original                                     // 113\n// selector). Returns a function mapping document->result object.                                             // 114\n//                                                                                                            // 115\n// matcher is the Matcher object we are compiling.                                                            // 116\n//                                                                                                            // 117\n// If this is the root document selector (ie, not wrapped in $and or the like),                               // 118\n// then isRoot is true. (This is used by $near.)                                                              // 119\nvar compileDocumentSelector = function (docSelector, matcher, options) {                                      // 120\n  options = options || {};                                                                                    // 121\n  var docMatchers = [];                                                                                       // 122\n  _.each(docSelector, function (subSelector, key) {                                                           // 123\n    if (key.substr(0, 1) === '$') {                                                                           // 124\n      // Outer operators are either logical operators (they recurse back into                                 // 125\n      // this function), or $where.                                                                           // 126\n      if (!_.has(LOGICAL_OPERATORS, key))                                                                     // 127\n        throw new Error(\"Unrecognized logical operator: \" + key);                                             // 128\n      matcher._isSimple = false;                                                                              // 129\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,                                           // 130\n                                              options.inElemMatch));                                          // 131\n    } else {                                                                                                  // 132\n      // Record this path, but only if we aren't in an elemMatcher, since in an                               // 133\n      // elemMatch this is a path inside an object in an array, not in the doc                                // 134\n      // root.                                                                                                // 135\n      if (!options.inElemMatch)                                                                               // 136\n        matcher._recordPathUsed(key);                                                                         // 137\n      var lookUpByIndex = makeLookupFunction(key);                                                            // 138\n      var valueMatcher =                                                                                      // 139\n        compileValueSelector(subSelector, matcher, options.isRoot);                                           // 140\n      docMatchers.push(function (doc) {                                                                       // 141\n        var branchValues = lookUpByIndex(doc);                                                                // 142\n        return valueMatcher(branchValues);                                                                    // 143\n      });                                                                                                     // 144\n    }                                                                                                         // 145\n  });                                                                                                         // 146\n                                                                                                              // 147\n  return andDocumentMatchers(docMatchers);                                                                    // 148\n};                                                                                                            // 149\n                                                                                                              // 150\n// Takes in a selector that could match a key-indexed value in a document; eg,                                // 151\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                                // 152\n// indicate equality).  Returns a branched matcher: a function mapping                                        // 153\n// [branched value]->result object.                                                                           // 154\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {                                        // 155\n  if (valueSelector instanceof RegExp) {                                                                      // 156\n    matcher._isSimple = false;                                                                                // 157\n    return convertElementMatcherToBranchedMatcher(                                                            // 158\n      regexpElementMatcher(valueSelector));                                                                   // 159\n  } else if (isOperatorObject(valueSelector)) {                                                               // 160\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);                                           // 161\n  } else {                                                                                                    // 162\n    return convertElementMatcherToBranchedMatcher(                                                            // 163\n      equalityElementMatcher(valueSelector));                                                                 // 164\n  }                                                                                                           // 165\n};                                                                                                            // 166\n                                                                                                              // 167\n// Given an element matcher (which evaluates a single value), returns a branched                              // 168\n// value (which evaluates the element matcher on all the branches and returns a                               // 169\n// more structured return value possibly including arrayIndices).                                             // 170\nvar convertElementMatcherToBranchedMatcher = function (                                                       // 171\n    elementMatcher, options) {                                                                                // 172\n  options = options || {};                                                                                    // 173\n  return function (branches) {                                                                                // 174\n    var expanded = branches;                                                                                  // 175\n    if (!options.dontExpandLeafArrays) {                                                                      // 176\n      expanded = expandArraysInBranches(                                                                      // 177\n        branches, options.dontIncludeLeafArrays);                                                             // 178\n    }                                                                                                         // 179\n    var ret = {};                                                                                             // 180\n    ret.result = _.any(expanded, function (element) {                                                         // 181\n      var matched = elementMatcher(element.value);                                                            // 182\n                                                                                                              // 183\n      // Special case for $elemMatch: it means \"true, and use this as an array                                // 184\n      // index if I didn't already have one\".                                                                 // 185\n      if (typeof matched === 'number') {                                                                      // 186\n        // XXX This code dates from when we only stored a single array index                                  // 187\n        // (for the outermost array). Should we be also including deeper array                                // 188\n        // indices from the $elemMatch match?                                                                 // 189\n        if (!element.arrayIndices)                                                                            // 190\n          element.arrayIndices = [matched];                                                                   // 191\n        matched = true;                                                                                       // 192\n      }                                                                                                       // 193\n                                                                                                              // 194\n      // If some element matched, and it's tagged with array indices, include                                 // 195\n      // those indices in our result object.                                                                  // 196\n      if (matched && element.arrayIndices)                                                                    // 197\n        ret.arrayIndices = element.arrayIndices;                                                              // 198\n                                                                                                              // 199\n      return matched;                                                                                         // 200\n    });                                                                                                       // 201\n    return ret;                                                                                               // 202\n  };                                                                                                          // 203\n};                                                                                                            // 204\n                                                                                                              // 205\n// Takes a RegExp object and returns an element matcher.                                                      // 206\nregexpElementMatcher = function (regexp) {                                                                    // 207\n  return function (value) {                                                                                   // 208\n    if (value instanceof RegExp) {                                                                            // 209\n      // Comparing two regexps means seeing if the regexps are identical                                      // 210\n      // (really!). Underscore knows how.                                                                     // 211\n      return _.isEqual(value, regexp);                                                                        // 212\n    }                                                                                                         // 213\n    // Regexps only work against strings.                                                                     // 214\n    if (typeof value !== 'string')                                                                            // 215\n      return false;                                                                                           // 216\n                                                                                                              // 217\n    // Reset regexp's state to avoid inconsistent matching for objects with the                               // 218\n    // same value on consecutive calls of regexp.test. This happens only if the                               // 219\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for                              // 220\n    // which we should *not* change the lastIndex but MongoDB doesn't support                                 // 221\n    // either of these flags.                                                                                 // 222\n    regexp.lastIndex = 0;                                                                                     // 223\n                                                                                                              // 224\n    return regexp.test(value);                                                                                // 225\n  };                                                                                                          // 226\n};                                                                                                            // 227\n                                                                                                              // 228\n// Takes something that is not an operator object and returns an element matcher                              // 229\n// for equality with that thing.                                                                              // 230\nequalityElementMatcher = function (elementSelector) {                                                         // 231\n  if (isOperatorObject(elementSelector))                                                                      // 232\n    throw Error(\"Can't create equalityValueSelector for operator object\");                                    // 233\n                                                                                                              // 234\n  // Special-case: null and undefined are equal (if you got undefined in there                                // 235\n  // somewhere, or if you got it due to some branch being non-existent in the                                 // 236\n  // weird special case), even though they aren't with EJSON.equals.                                          // 237\n  if (elementSelector == null) {  // undefined or null                                                        // 238\n    return function (value) {                                                                                 // 239\n      return value == null;  // undefined or null                                                             // 240\n    };                                                                                                        // 241\n  }                                                                                                           // 242\n                                                                                                              // 243\n  return function (value) {                                                                                   // 244\n    return LocalCollection._f._equal(elementSelector, value);                                                 // 245\n  };                                                                                                          // 246\n};                                                                                                            // 247\n                                                                                                              // 248\n// Takes an operator object (an object with $ keys) and returns a branched                                    // 249\n// matcher for it.                                                                                            // 250\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {                                     // 251\n  // Each valueSelector works separately on the various branches.  So one                                     // 252\n  // operator can match one branch and another can match another branch.  This                                // 253\n  // is OK.                                                                                                   // 254\n                                                                                                              // 255\n  var operatorMatchers = [];                                                                                  // 256\n  _.each(valueSelector, function (operand, operator) {                                                        // 257\n    // XXX we should actually implement $eq, which is new in 2.6                                              // 258\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&                                 // 259\n      _.isNumber(operand);                                                                                    // 260\n    var simpleInequality = operator === '$ne' && !_.isObject(operand);                                        // 261\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&                                            // 262\n      _.isArray(operand) && !_.any(operand, _.isObject);                                                      // 263\n                                                                                                              // 264\n    if (! (operator === '$eq' || simpleRange ||                                                               // 265\n           simpleInclusion || simpleInequality)) {                                                            // 266\n      matcher._isSimple = false;                                                                              // 267\n    }                                                                                                         // 268\n                                                                                                              // 269\n    if (_.has(VALUE_OPERATORS, operator)) {                                                                   // 270\n      operatorMatchers.push(                                                                                  // 271\n        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));                                  // 272\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {                                                          // 273\n      var options = ELEMENT_OPERATORS[operator];                                                              // 274\n      operatorMatchers.push(                                                                                  // 275\n        convertElementMatcherToBranchedMatcher(                                                               // 276\n          options.compileElementSelector(                                                                     // 277\n            operand, valueSelector, matcher),                                                                 // 278\n          options));                                                                                          // 279\n    } else {                                                                                                  // 280\n      throw new Error(\"Unrecognized operator: \" + operator);                                                  // 281\n    }                                                                                                         // 282\n  });                                                                                                         // 283\n                                                                                                              // 284\n  return andBranchedMatchers(operatorMatchers);                                                               // 285\n};                                                                                                            // 286\n                                                                                                              // 287\nvar compileArrayOfDocumentSelectors = function (                                                              // 288\n    selectors, matcher, inElemMatch) {                                                                        // 289\n  if (!isArray(selectors) || _.isEmpty(selectors))                                                            // 290\n    throw Error(\"$and/$or/$nor must be nonempty array\");                                                      // 291\n  return _.map(selectors, function (subSelector) {                                                            // 292\n    if (!isPlainObject(subSelector))                                                                          // 293\n      throw Error(\"$or/$and/$nor entries need to be full objects\");                                           // 294\n    return compileDocumentSelector(                                                                           // 295\n      subSelector, matcher, {inElemMatch: inElemMatch});                                                      // 296\n  });                                                                                                         // 297\n};                                                                                                            // 298\n                                                                                                              // 299\n// Operators that appear at the top level of a document selector.                                             // 300\nvar LOGICAL_OPERATORS = {                                                                                     // 301\n  $and: function (subSelector, matcher, inElemMatch) {                                                        // 302\n    var matchers = compileArrayOfDocumentSelectors(                                                           // 303\n      subSelector, matcher, inElemMatch);                                                                     // 304\n    return andDocumentMatchers(matchers);                                                                     // 305\n  },                                                                                                          // 306\n                                                                                                              // 307\n  $or: function (subSelector, matcher, inElemMatch) {                                                         // 308\n    var matchers = compileArrayOfDocumentSelectors(                                                           // 309\n      subSelector, matcher, inElemMatch);                                                                     // 310\n                                                                                                              // 311\n    // Special case: if there is only one matcher, use it directly, *preserving*                              // 312\n    // any arrayIndices it returns.                                                                           // 313\n    if (matchers.length === 1)                                                                                // 314\n      return matchers[0];                                                                                     // 315\n                                                                                                              // 316\n    return function (doc) {                                                                                   // 317\n      var result = _.any(matchers, function (f) {                                                             // 318\n        return f(doc).result;                                                                                 // 319\n      });                                                                                                     // 320\n      // $or does NOT set arrayIndices when it has multiple                                                   // 321\n      // sub-expressions. (Tested against MongoDB.)                                                           // 322\n      return {result: result};                                                                                // 323\n    };                                                                                                        // 324\n  },                                                                                                          // 325\n                                                                                                              // 326\n  $nor: function (subSelector, matcher, inElemMatch) {                                                        // 327\n    var matchers = compileArrayOfDocumentSelectors(                                                           // 328\n      subSelector, matcher, inElemMatch);                                                                     // 329\n    return function (doc) {                                                                                   // 330\n      var result = _.all(matchers, function (f) {                                                             // 331\n        return !f(doc).result;                                                                                // 332\n      });                                                                                                     // 333\n      // Never set arrayIndices, because we only match if nothing in particular                               // 334\n      // \"matched\" (and because this is consistent with MongoDB).                                             // 335\n      return {result: result};                                                                                // 336\n    };                                                                                                        // 337\n  },                                                                                                          // 338\n                                                                                                              // 339\n  $where: function (selectorValue, matcher) {                                                                 // 340\n    // Record that *any* path may be used.                                                                    // 341\n    matcher._recordPathUsed('');                                                                              // 342\n    matcher._hasWhere = true;                                                                                 // 343\n    if (!(selectorValue instanceof Function)) {                                                               // 344\n      // XXX MongoDB seems to have more complex logic to decide where or or not                               // 345\n      // to add \"return\"; not sure exactly what it is.                                                        // 346\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);                                             // 347\n    }                                                                                                         // 348\n    return function (doc) {                                                                                   // 349\n      // We make the document available as both `this` and `obj`.                                             // 350\n      // XXX not sure what we should do if this throws                                                        // 351\n      return {result: selectorValue.call(doc, doc)};                                                          // 352\n    };                                                                                                        // 353\n  },                                                                                                          // 354\n                                                                                                              // 355\n  // This is just used as a comment in the query (in MongoDB, it also ends up in                              // 356\n  // query logs); it has no effect on the actual selection.                                                   // 357\n  $comment: function () {                                                                                     // 358\n    return function () {                                                                                      // 359\n      return {result: true};                                                                                  // 360\n    };                                                                                                        // 361\n  }                                                                                                           // 362\n};                                                                                                            // 363\n                                                                                                              // 364\n// Returns a branched matcher that matches iff the given matcher does not.                                    // 365\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it                                     // 366\n// means that ALL branch values need to fail to match innerBranchedMatcher.                                   // 367\nvar invertBranchedMatcher = function (branchedMatcher) {                                                      // 368\n  return function (branchValues) {                                                                            // 369\n    var invertMe = branchedMatcher(branchValues);                                                             // 370\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to                              // 371\n    // say \"update the array element that does not match something\", at least                                 // 372\n    // in mongo-land.                                                                                         // 373\n    return {result: !invertMe.result};                                                                        // 374\n  };                                                                                                          // 375\n};                                                                                                            // 376\n                                                                                                              // 377\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                                 // 378\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                                // 379\n// \"match each branched value independently and combine with                                                  // 380\n// convertElementMatcherToBranchedMatcher\".                                                                   // 381\nvar VALUE_OPERATORS = {                                                                                       // 382\n  $not: function (operand, valueSelector, matcher) {                                                          // 383\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));                                     // 384\n  },                                                                                                          // 385\n  $ne: function (operand) {                                                                                   // 386\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                                      // 387\n      equalityElementMatcher(operand)));                                                                      // 388\n  },                                                                                                          // 389\n  $nin: function (operand) {                                                                                  // 390\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                                      // 391\n      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));                                                // 392\n  },                                                                                                          // 393\n  $exists: function (operand) {                                                                               // 394\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {                                    // 395\n      return value !== undefined;                                                                             // 396\n    });                                                                                                       // 397\n    return operand ? exists : invertBranchedMatcher(exists);                                                  // 398\n  },                                                                                                          // 399\n  // $options just provides options for $regex; its logic is inside $regex                                    // 400\n  $options: function (operand, valueSelector) {                                                               // 401\n    if (!_.has(valueSelector, '$regex'))                                                                      // 402\n      throw Error(\"$options needs a $regex\");                                                                 // 403\n    return everythingMatcher;                                                                                 // 404\n  },                                                                                                          // 405\n  // $maxDistance is basically an argument to $near                                                           // 406\n  $maxDistance: function (operand, valueSelector) {                                                           // 407\n    if (!valueSelector.$near)                                                                                 // 408\n      throw Error(\"$maxDistance needs a $near\");                                                              // 409\n    return everythingMatcher;                                                                                 // 410\n  },                                                                                                          // 411\n  $all: function (operand, valueSelector, matcher) {                                                          // 412\n    if (!isArray(operand))                                                                                    // 413\n      throw Error(\"$all requires array\");                                                                     // 414\n    // Not sure why, but this seems to be what MongoDB does.                                                  // 415\n    if (_.isEmpty(operand))                                                                                   // 416\n      return nothingMatcher;                                                                                  // 417\n                                                                                                              // 418\n    var branchedMatchers = [];                                                                                // 419\n    _.each(operand, function (criterion) {                                                                    // 420\n      // XXX handle $all/$elemMatch combination                                                               // 421\n      if (isOperatorObject(criterion))                                                                        // 422\n        throw Error(\"no $ expressions in $all\");                                                              // 423\n      // This is always a regexp or equality selector.                                                        // 424\n      branchedMatchers.push(compileValueSelector(criterion, matcher));                                        // 425\n    });                                                                                                       // 426\n    // andBranchedMatchers does NOT require all selectors to return true on the                               // 427\n    // SAME branch.                                                                                           // 428\n    return andBranchedMatchers(branchedMatchers);                                                             // 429\n  },                                                                                                          // 430\n  $near: function (operand, valueSelector, matcher, isRoot) {                                                 // 431\n    if (!isRoot)                                                                                              // 432\n      throw Error(\"$near can't be inside another $ operator\");                                                // 433\n    matcher._hasGeoQuery = true;                                                                              // 434\n                                                                                                              // 435\n    // There are two kinds of geodata in MongoDB: coordinate pairs and                                        // 436\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are                                 // 437\n    // marked with a $geometry property.                                                                      // 438\n                                                                                                              // 439\n    var maxDistance, point, distance;                                                                         // 440\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {                                              // 441\n      // GeoJSON \"2dsphere\" mode.                                                                             // 442\n      maxDistance = operand.$maxDistance;                                                                     // 443\n      point = operand.$geometry;                                                                              // 444\n      distance = function (value) {                                                                           // 445\n        // XXX: for now, we don't calculate the actual distance between, say,                                 // 446\n        // polygon and circle. If people care about this use-case it will get                                 // 447\n        // a priority.                                                                                        // 448\n        if (!value || !value.type)                                                                            // 449\n          return null;                                                                                        // 450\n        if (value.type === \"Point\") {                                                                         // 451\n          return GeoJSON.pointDistance(point, value);                                                         // 452\n        } else {                                                                                              // 453\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance)                                      // 454\n            ? 0 : maxDistance + 1;                                                                            // 455\n        }                                                                                                     // 456\n      };                                                                                                      // 457\n    } else {                                                                                                  // 458\n      maxDistance = valueSelector.$maxDistance;                                                               // 459\n      if (!isArray(operand) && !isPlainObject(operand))                                                       // 460\n        throw Error(\"$near argument must be coordinate pair or GeoJSON\");                                     // 461\n      point = pointToArray(operand);                                                                          // 462\n      distance = function (value) {                                                                           // 463\n        if (!isArray(value) && !isPlainObject(value))                                                         // 464\n          return null;                                                                                        // 465\n        return distanceCoordinatePairs(point, value);                                                         // 466\n      };                                                                                                      // 467\n    }                                                                                                         // 468\n                                                                                                              // 469\n    return function (branchedValues) {                                                                        // 470\n      // There might be multiple points in the document that match the given                                  // 471\n      // field. Only one of them needs to be within $maxDistance, but we need to                              // 472\n      // evaluate all of them and use the nearest one for the implicit sort                                   // 473\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                                    // 474\n      //                                                                                                      // 475\n      // Note: This differs from MongoDB's implementation, where a document will                              // 476\n      // actually show up *multiple times* in the result set, with one entry for                              // 477\n      // each within-$maxDistance branching point.                                                            // 478\n      branchedValues = expandArraysInBranches(branchedValues);                                                // 479\n      var result = {result: false};                                                                           // 480\n      _.each(branchedValues, function (branch) {                                                              // 481\n        var curDistance = distance(branch.value);                                                             // 482\n        // Skip branches that aren't real points or are too far away.                                         // 483\n        if (curDistance === null || curDistance > maxDistance)                                                // 484\n          return;                                                                                             // 485\n        // Skip anything that's a tie.                                                                        // 486\n        if (result.distance !== undefined && result.distance <= curDistance)                                  // 487\n          return;                                                                                             // 488\n        result.result = true;                                                                                 // 489\n        result.distance = curDistance;                                                                        // 490\n        if (!branch.arrayIndices)                                                                             // 491\n          delete result.arrayIndices;                                                                         // 492\n        else                                                                                                  // 493\n          result.arrayIndices = branch.arrayIndices;                                                          // 494\n      });                                                                                                     // 495\n      return result;                                                                                          // 496\n    };                                                                                                        // 497\n  }                                                                                                           // 498\n};                                                                                                            // 499\n                                                                                                              // 500\n// Helpers for $near.                                                                                         // 501\nvar distanceCoordinatePairs = function (a, b) {                                                               // 502\n  a = pointToArray(a);                                                                                        // 503\n  b = pointToArray(b);                                                                                        // 504\n  var x = a[0] - b[0];                                                                                        // 505\n  var y = a[1] - b[1];                                                                                        // 506\n  if (_.isNaN(x) || _.isNaN(y))                                                                               // 507\n    return null;                                                                                              // 508\n  return Math.sqrt(x * x + y * y);                                                                            // 509\n};                                                                                                            // 510\n// Makes sure we get 2 elements array and assume the first one to be x and                                    // 511\n// the second one to y no matter what user passes.                                                            // 512\n// In case user passes { lon: x, lat: y } returns [x, y]                                                      // 513\nvar pointToArray = function (point) {                                                                         // 514\n  return _.map(point, _.identity);                                                                            // 515\n};                                                                                                            // 516\n                                                                                                              // 517\n// Helper for $lt/$gt/$lte/$gte.                                                                              // 518\nvar makeInequality = function (cmpValueComparator) {                                                          // 519\n  return {                                                                                                    // 520\n    compileElementSelector: function (operand) {                                                              // 521\n      // Arrays never compare false with non-arrays for any inequality.                                       // 522\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but                                    // 523\n      //     it seems to have been reverted.                                                                  // 524\n      //     See https://jira.mongodb.org/browse/SERVER-11444                                                 // 525\n      if (isArray(operand)) {                                                                                 // 526\n        return function () {                                                                                  // 527\n          return false;                                                                                       // 528\n        };                                                                                                    // 529\n      }                                                                                                       // 530\n                                                                                                              // 531\n      // Special case: consider undefined and null the same (so true with                                     // 532\n      // $gte/$lte).                                                                                          // 533\n      if (operand === undefined)                                                                              // 534\n        operand = null;                                                                                       // 535\n                                                                                                              // 536\n      var operandType = LocalCollection._f._type(operand);                                                    // 537\n                                                                                                              // 538\n      return function (value) {                                                                               // 539\n        if (value === undefined)                                                                              // 540\n          value = null;                                                                                       // 541\n        // Comparisons are never true among things of different type (except                                  // 542\n        // null vs undefined).                                                                                // 543\n        if (LocalCollection._f._type(value) !== operandType)                                                  // 544\n          return false;                                                                                       // 545\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));                                   // 546\n      };                                                                                                      // 547\n    }                                                                                                         // 548\n  };                                                                                                          // 549\n};                                                                                                            // 550\n                                                                                                              // 551\n// Each element selector contains:                                                                            // 552\n//  - compileElementSelector, a function with args:                                                           // 553\n//    - operand - the \"right hand side\" of the operator                                                       // 554\n//    - valueSelector - the \"context\" for the operator (so that $regex can find                               // 555\n//      $options)                                                                                             // 556\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile                              // 557\n//      more things)                                                                                          // 558\n//    returning a function mapping a single value to bool.                                                    // 559\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from                                 // 560\n//    being called                                                                                            // 561\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to                                  // 562\n//    expandArraysInBranches if it is called                                                                  // 563\nELEMENT_OPERATORS = {                                                                                         // 564\n  $lt: makeInequality(function (cmpValue) {                                                                   // 565\n    return cmpValue < 0;                                                                                      // 566\n  }),                                                                                                         // 567\n  $gt: makeInequality(function (cmpValue) {                                                                   // 568\n    return cmpValue > 0;                                                                                      // 569\n  }),                                                                                                         // 570\n  $lte: makeInequality(function (cmpValue) {                                                                  // 571\n    return cmpValue <= 0;                                                                                     // 572\n  }),                                                                                                         // 573\n  $gte: makeInequality(function (cmpValue) {                                                                  // 574\n    return cmpValue >= 0;                                                                                     // 575\n  }),                                                                                                         // 576\n  $mod: {                                                                                                     // 577\n    compileElementSelector: function (operand) {                                                              // 578\n      if (!(isArray(operand) && operand.length === 2                                                          // 579\n            && typeof(operand[0]) === 'number'                                                                // 580\n            && typeof(operand[1]) === 'number')) {                                                            // 581\n        throw Error(\"argument to $mod must be an array of two numbers\");                                      // 582\n      }                                                                                                       // 583\n      // XXX could require to be ints or round or something                                                   // 584\n      var divisor = operand[0];                                                                               // 585\n      var remainder = operand[1];                                                                             // 586\n      return function (value) {                                                                               // 587\n        return typeof value === 'number' && value % divisor === remainder;                                    // 588\n      };                                                                                                      // 589\n    }                                                                                                         // 590\n  },                                                                                                          // 591\n  $in: {                                                                                                      // 592\n    compileElementSelector: function (operand) {                                                              // 593\n      if (!isArray(operand))                                                                                  // 594\n        throw Error(\"$in needs an array\");                                                                    // 595\n                                                                                                              // 596\n      var elementMatchers = [];                                                                               // 597\n      _.each(operand, function (option) {                                                                     // 598\n        if (option instanceof RegExp)                                                                         // 599\n          elementMatchers.push(regexpElementMatcher(option));                                                 // 600\n        else if (isOperatorObject(option))                                                                    // 601\n          throw Error(\"cannot nest $ under $in\");                                                             // 602\n        else                                                                                                  // 603\n          elementMatchers.push(equalityElementMatcher(option));                                               // 604\n      });                                                                                                     // 605\n                                                                                                              // 606\n      return function (value) {                                                                               // 607\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                         // 608\n        if (value === undefined)                                                                              // 609\n          value = null;                                                                                       // 610\n        return _.any(elementMatchers, function (e) {                                                          // 611\n          return e(value);                                                                                    // 612\n        });                                                                                                   // 613\n      };                                                                                                      // 614\n    }                                                                                                         // 615\n  },                                                                                                          // 616\n  $size: {                                                                                                    // 617\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                                // 618\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                                // 619\n    // possible value.                                                                                        // 620\n    dontExpandLeafArrays: true,                                                                               // 621\n    compileElementSelector: function (operand) {                                                              // 622\n      if (typeof operand === 'string') {                                                                      // 623\n        // Don't ask me why, but by experimentation, this seems to be what Mongo                              // 624\n        // does.                                                                                              // 625\n        operand = 0;                                                                                          // 626\n      } else if (typeof operand !== 'number') {                                                               // 627\n        throw Error(\"$size needs a number\");                                                                  // 628\n      }                                                                                                       // 629\n      return function (value) {                                                                               // 630\n        return isArray(value) && value.length === operand;                                                    // 631\n      };                                                                                                      // 632\n    }                                                                                                         // 633\n  },                                                                                                          // 634\n  $type: {                                                                                                    // 635\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                                 // 636\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                                 // 637\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                                 // 638\n    // should *not* include it itself.                                                                        // 639\n    dontIncludeLeafArrays: true,                                                                              // 640\n    compileElementSelector: function (operand) {                                                              // 641\n      if (typeof operand !== 'number')                                                                        // 642\n        throw Error(\"$type needs a number\");                                                                  // 643\n      return function (value) {                                                                               // 644\n        return value !== undefined                                                                            // 645\n          && LocalCollection._f._type(value) === operand;                                                     // 646\n      };                                                                                                      // 647\n    }                                                                                                         // 648\n  },                                                                                                          // 649\n  $regex: {                                                                                                   // 650\n    compileElementSelector: function (operand, valueSelector) {                                               // 651\n      if (!(typeof operand === 'string' || operand instanceof RegExp))                                        // 652\n        throw Error(\"$regex has to be a string or RegExp\");                                                   // 653\n                                                                                                              // 654\n      var regexp;                                                                                             // 655\n      if (valueSelector.$options !== undefined) {                                                             // 656\n        // Options passed in $options (even the empty string) always overrides                                // 657\n        // options in the RegExp object itself. (See also                                                     // 658\n        // Mongo.Collection._rewriteSelector.)                                                                // 659\n                                                                                                              // 660\n        // Be clear that we only support the JS-supported options, not extended                               // 661\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s                              // 662\n        // by transforming the regexp, but not today...                                                       // 663\n        if (/[^gim]/.test(valueSelector.$options))                                                            // 664\n          throw new Error(\"Only the i, m, and g regexp options are supported\");                               // 665\n                                                                                                              // 666\n        var regexSource = operand instanceof RegExp ? operand.source : operand;                               // 667\n        regexp = new RegExp(regexSource, valueSelector.$options);                                             // 668\n      } else if (operand instanceof RegExp) {                                                                 // 669\n        regexp = operand;                                                                                     // 670\n      } else {                                                                                                // 671\n        regexp = new RegExp(operand);                                                                         // 672\n      }                                                                                                       // 673\n      return regexpElementMatcher(regexp);                                                                    // 674\n    }                                                                                                         // 675\n  },                                                                                                          // 676\n  $elemMatch: {                                                                                               // 677\n    dontExpandLeafArrays: true,                                                                               // 678\n    compileElementSelector: function (operand, valueSelector, matcher) {                                      // 679\n      if (!isPlainObject(operand))                                                                            // 680\n        throw Error(\"$elemMatch need an object\");                                                             // 681\n                                                                                                              // 682\n      var subMatcher, isDocMatcher;                                                                           // 683\n      if (isOperatorObject(operand, true)) {                                                                  // 684\n        subMatcher = compileValueSelector(operand, matcher);                                                  // 685\n        isDocMatcher = false;                                                                                 // 686\n      } else {                                                                                                // 687\n        // This is NOT the same as compileValueSelector(operand), and not just                                // 688\n        // because of the slightly different calling convention.                                              // 689\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not                                       // 690\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.                               // 691\n        subMatcher = compileDocumentSelector(operand, matcher,                                                // 692\n                                             {inElemMatch: true});                                            // 693\n        isDocMatcher = true;                                                                                  // 694\n      }                                                                                                       // 695\n                                                                                                              // 696\n      return function (value) {                                                                               // 697\n        if (!isArray(value))                                                                                  // 698\n          return false;                                                                                       // 699\n        for (var i = 0; i < value.length; ++i) {                                                              // 700\n          var arrayElement = value[i];                                                                        // 701\n          var arg;                                                                                            // 702\n          if (isDocMatcher) {                                                                                 // 703\n            // We can only match {$elemMatch: {b: 3}} against objects.                                        // 704\n            // (We can also match against arrays, if there's numeric indices,                                 // 705\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                          // 706\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement))                                       // 707\n              return false;                                                                                   // 708\n            arg = arrayElement;                                                                               // 709\n          } else {                                                                                            // 710\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                                   // 711\n            // {a: [8]} but not {a: [[8]]}                                                                    // 712\n            arg = [{value: arrayElement, dontIterate: true}];                                                 // 713\n          }                                                                                                   // 714\n          // XXX support $near in $elemMatch by propagating $distance?                                        // 715\n          if (subMatcher(arg).result)                                                                         // 716\n            return i;   // specially understood to mean \"use as arrayIndices\"                                 // 717\n        }                                                                                                     // 718\n        return false;                                                                                         // 719\n      };                                                                                                      // 720\n    }                                                                                                         // 721\n  }                                                                                                           // 722\n};                                                                                                            // 723\n                                                                                                              // 724\n// makeLookupFunction(key) returns a lookup function.                                                         // 725\n//                                                                                                            // 726\n// A lookup function takes in a document and returns an array of matching                                     // 727\n// branches.  If no arrays are found while looking up the key, this array will                                // 728\n// have exactly one branches (possibly 'undefined', if some segment of the key                                // 729\n// was not found).                                                                                            // 730\n//                                                                                                            // 731\n// If arrays are found in the middle, this can have more than one element, since                              // 732\n// we \"branch\". When we \"branch\", if there are more key segments to look up,                                  // 733\n// then we only pursue branches that are plain objects (not arrays or scalars).                               // 734\n// This means we can actually end up with no branches!                                                        // 735\n//                                                                                                            // 736\n// We do *NOT* branch on arrays that are found at the end (ie, at the last                                    // 737\n// dotted member of the key). We just return that array; if you want to                                       // 738\n// effectively \"branch\" over the array's values, post-process the lookup                                      // 739\n// function with expandArraysInBranches.                                                                      // 740\n//                                                                                                            // 741\n// Each branch is an object with keys:                                                                        // 742\n//  - value: the value at the branch                                                                          // 743\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array                               // 744\n//    that expandArraysInBranches should NOT expand. This specifically happens                                // 745\n//    when there is a numeric index in the key, and ensures the                                               // 746\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                           // 747\n//    match {a: [[5]]}.                                                                                       // 748\n//  - arrayIndices: if any array indexing was done during lookup (either due to                               // 749\n//    explicit numeric indices or implicit branching), this will be an array of                               // 750\n//    the array indices used, from outermost to innermost; it is falsey or                                    // 751\n//    absent if no array index is used. If an explicit numeric index is used,                                 // 752\n//    the index will be followed in arrayIndices by the string 'x'.                                           // 753\n//                                                                                                            // 754\n//    Note: arrayIndices is used for two purposes. First, it is used to                                       // 755\n//    implement the '$' modifier feature, which only ever looks at its first                                  // 756\n//    element.                                                                                                // 757\n//                                                                                                            // 758\n//    Second, it is used for sort key generation, which needs to be able to tell                              // 759\n//    the difference between different paths. Moreover, it needs to                                           // 760\n//    differentiate between explicit and implicit branching, which is why                                     // 761\n//    there's the somewhat hacky 'x' entry: this means that explicit and                                      // 762\n//    implicit array lookups will have different full arrayIndices paths. (That                               // 763\n//    code only requires that different paths have different arrayIndices; it                                 // 764\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices                                  // 765\n//    could contain objects with flags like \"implicit\", but I think that only                                 // 766\n//    makes the code surrounding them more complex.)                                                          // 767\n//                                                                                                            // 768\n//    (By the way, this field ends up getting passed around a lot without                                     // 769\n//    cloning, so never mutate any arrayIndices field/var in this package!)                                   // 770\n//                                                                                                            // 771\n//                                                                                                            // 772\n// At the top level, you may only pass in a plain object or array.                                            // 773\n//                                                                                                            // 774\n// See the test 'minimongo - lookup' for some examples of what lookup functions                               // 775\n// return.                                                                                                    // 776\nmakeLookupFunction = function (key, options) {                                                                // 777\n  options = options || {};                                                                                    // 778\n  var parts = key.split('.');                                                                                 // 779\n  var firstPart = parts.length ? parts[0] : '';                                                               // 780\n  var firstPartIsNumeric = isNumericKey(firstPart);                                                           // 781\n  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);                                        // 782\n  var lookupRest;                                                                                             // 783\n  if (parts.length > 1) {                                                                                     // 784\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));                                                // 785\n  }                                                                                                           // 786\n                                                                                                              // 787\n  var omitUnnecessaryFields = function (retVal) {                                                             // 788\n    if (!retVal.dontIterate)                                                                                  // 789\n      delete retVal.dontIterate;                                                                              // 790\n    if (retVal.arrayIndices && !retVal.arrayIndices.length)                                                   // 791\n      delete retVal.arrayIndices;                                                                             // 792\n    return retVal;                                                                                            // 793\n  };                                                                                                          // 794\n                                                                                                              // 795\n  // Doc will always be a plain object or an array.                                                           // 796\n  // apply an explicit numeric index, an array.                                                               // 797\n  return function (doc, arrayIndices) {                                                                       // 798\n    if (!arrayIndices)                                                                                        // 799\n      arrayIndices = [];                                                                                      // 800\n                                                                                                              // 801\n    if (isArray(doc)) {                                                                                       // 802\n      // If we're being asked to do an invalid lookup into an array (non-integer                              // 803\n      // or out-of-bounds), return no results (which is different from returning                              // 804\n      // a single undefined result, in that `null` equality checks won't match).                              // 805\n      if (!(firstPartIsNumeric && firstPart < doc.length))                                                    // 806\n        return [];                                                                                            // 807\n                                                                                                              // 808\n      // Remember that we used this array index. Include an 'x' to indicate that                              // 809\n      // the previous index came from being considered as an explicit array                                   // 810\n      // index (not branching).                                                                               // 811\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');                                                    // 812\n    }                                                                                                         // 813\n                                                                                                              // 814\n    // Do our first lookup.                                                                                   // 815\n    var firstLevel = doc[firstPart];                                                                          // 816\n                                                                                                              // 817\n    // If there is no deeper to dig, return what we found.                                                    // 818\n    //                                                                                                        // 819\n    // If what we found is an array, most value selectors will choose to treat                                // 820\n    // the elements of the array as matchable values in their own right, but                                  // 821\n    // that's done outside of the lookup function. (Exceptions to this are $size                              // 822\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                              // 823\n    // [[1, 2]]}.)                                                                                            // 824\n    //                                                                                                        // 825\n    // That said, if we just did an *explicit* array lookup (on doc) to find                                  // 826\n    // firstLevel, and firstLevel is an array too, we do NOT want value                                       // 827\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                               // 828\n    // So in that case, we mark the return value as \"don't iterate\".                                          // 829\n    if (!lookupRest) {                                                                                        // 830\n      return [omitUnnecessaryFields({                                                                         // 831\n        value: firstLevel,                                                                                    // 832\n        dontIterate: isArray(doc) && isArray(firstLevel),                                                     // 833\n        arrayIndices: arrayIndices})];                                                                        // 834\n    }                                                                                                         // 835\n                                                                                                              // 836\n    // We need to dig deeper.  But if we can't, because what we've found is not                               // 837\n    // an array or plain object, we're done. If we just did a numeric index into                              // 838\n    // an array, we return nothing here (this is a change in Mongo 2.5 from                                   // 839\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                                // 840\n    // return a single `undefined` (which can, for example, match via equality                                // 841\n    // with `null`).                                                                                          // 842\n    if (!isIndexable(firstLevel)) {                                                                           // 843\n      if (isArray(doc))                                                                                       // 844\n        return [];                                                                                            // 845\n      return [omitUnnecessaryFields({value: undefined,                                                        // 846\n                                      arrayIndices: arrayIndices})];                                          // 847\n    }                                                                                                         // 848\n                                                                                                              // 849\n    var result = [];                                                                                          // 850\n    var appendToResult = function (more) {                                                                    // 851\n      Array.prototype.push.apply(result, more);                                                               // 852\n    };                                                                                                        // 853\n                                                                                                              // 854\n    // Dig deeper: look up the rest of the parts on whatever we've found.                                     // 855\n    // (lookupRest is smart enough to not try to do invalid lookups into                                      // 856\n    // firstLevel if it's an array.)                                                                          // 857\n    appendToResult(lookupRest(firstLevel, arrayIndices));                                                     // 858\n                                                                                                              // 859\n    // If we found an array, then in *addition* to potentially treating the next                              // 860\n    // part as a literal integer lookup, we should also \"branch\": try to look up                              // 861\n    // the rest of the parts on each array element in parallel.                                               // 862\n    //                                                                                                        // 863\n    // In this case, we *only* dig deeper into array elements that are plain                                  // 864\n    // objects. (Recall that we only got this far if we have further to dig.)                                 // 865\n    // This makes sense: we certainly don't dig deeper into non-indexable                                     // 866\n    // objects. And it would be weird to dig into an array: it's simpler to have                              // 867\n    // a rule that explicit integer indexes only apply to an outer array, not to                              // 868\n    // an array you find after a branching search.                                                            // 869\n    //                                                                                                        // 870\n    // In the special case of a numeric part in a *sort selector* (not a query                                // 871\n    // selector), we skip the branching: we ONLY allow the numeric part to mean                               // 872\n    // \"look up this index\" in that case, not \"also look up this index in all                                 // 873\n    // the elements of the array\".                                                                            // 874\n    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {                                     // 875\n      _.each(firstLevel, function (branch, arrayIndex) {                                                      // 876\n        if (isPlainObject(branch)) {                                                                          // 877\n          appendToResult(lookupRest(                                                                          // 878\n            branch,                                                                                           // 879\n            arrayIndices.concat(arrayIndex)));                                                                // 880\n        }                                                                                                     // 881\n      });                                                                                                     // 882\n    }                                                                                                         // 883\n                                                                                                              // 884\n    return result;                                                                                            // 885\n  };                                                                                                          // 886\n};                                                                                                            // 887\nMinimongoTest.makeLookupFunction = makeLookupFunction;                                                        // 888\n                                                                                                              // 889\nexpandArraysInBranches = function (branches, skipTheArrays) {                                                 // 890\n  var branchesOut = [];                                                                                       // 891\n  _.each(branches, function (branch) {                                                                        // 892\n    var thisIsArray = isArray(branch.value);                                                                  // 893\n    // We include the branch itself, *UNLESS* we it's an array that we're going                               // 894\n    // to iterate and we're told to skip arrays.  (That's right, we include some                              // 895\n    // arrays even skipTheArrays is true: these are arrays that were found via                                // 896\n    // explicit numerical indices.)                                                                           // 897\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {                                             // 898\n      branchesOut.push({                                                                                      // 899\n        value: branch.value,                                                                                  // 900\n        arrayIndices: branch.arrayIndices                                                                     // 901\n      });                                                                                                     // 902\n    }                                                                                                         // 903\n    if (thisIsArray && !branch.dontIterate) {                                                                 // 904\n      _.each(branch.value, function (leaf, i) {                                                               // 905\n        branchesOut.push({                                                                                    // 906\n          value: leaf,                                                                                        // 907\n          arrayIndices: (branch.arrayIndices || []).concat(i)                                                 // 908\n        });                                                                                                   // 909\n      });                                                                                                     // 910\n    }                                                                                                         // 911\n  });                                                                                                         // 912\n  return branchesOut;                                                                                         // 913\n};                                                                                                            // 914\n                                                                                                              // 915\nvar nothingMatcher = function (docOrBranchedValues) {                                                         // 916\n  return {result: false};                                                                                     // 917\n};                                                                                                            // 918\n                                                                                                              // 919\nvar everythingMatcher = function (docOrBranchedValues) {                                                      // 920\n  return {result: true};                                                                                      // 921\n};                                                                                                            // 922\n                                                                                                              // 923\n                                                                                                              // 924\n// NB: We are cheating and using this function to implement \"AND\" for both                                    // 925\n// \"document matchers\" and \"branched matchers\". They both return result objects                               // 926\n// but the argument is different: for the former it's a whole doc, whereas for                                // 927\n// the latter it's an array of \"branched values\".                                                             // 928\nvar andSomeMatchers = function (subMatchers) {                                                                // 929\n  if (subMatchers.length === 0)                                                                               // 930\n    return everythingMatcher;                                                                                 // 931\n  if (subMatchers.length === 1)                                                                               // 932\n    return subMatchers[0];                                                                                    // 933\n                                                                                                              // 934\n  return function (docOrBranches) {                                                                           // 935\n    var ret = {};                                                                                             // 936\n    ret.result = _.all(subMatchers, function (f) {                                                            // 937\n      var subResult = f(docOrBranches);                                                                       // 938\n      // Copy a 'distance' number out of the first sub-matcher that has                                       // 939\n      // one. Yes, this means that if there are multiple $near fields in a                                    // 940\n      // query, something arbitrary happens; this appears to be consistent with                               // 941\n      // Mongo.                                                                                               // 942\n      if (subResult.result && subResult.distance !== undefined                                                // 943\n          && ret.distance === undefined) {                                                                    // 944\n        ret.distance = subResult.distance;                                                                    // 945\n      }                                                                                                       // 946\n      // Similarly, propagate arrayIndices from sub-matchers... but to match                                  // 947\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                                 // 948\n      // wins.                                                                                                // 949\n      if (subResult.result && subResult.arrayIndices) {                                                       // 950\n        ret.arrayIndices = subResult.arrayIndices;                                                            // 951\n      }                                                                                                       // 952\n      return subResult.result;                                                                                // 953\n    });                                                                                                       // 954\n                                                                                                              // 955\n    // If we didn't actually match, forget any extra metadata we came up with.                                // 956\n    if (!ret.result) {                                                                                        // 957\n      delete ret.distance;                                                                                    // 958\n      delete ret.arrayIndices;                                                                                // 959\n    }                                                                                                         // 960\n    return ret;                                                                                               // 961\n  };                                                                                                          // 962\n};                                                                                                            // 963\n                                                                                                              // 964\nvar andDocumentMatchers = andSomeMatchers;                                                                    // 965\nvar andBranchedMatchers = andSomeMatchers;                                                                    // 966\n                                                                                                              // 967\n                                                                                                              // 968\n// helpers used by compiled selector code                                                                     // 969\nLocalCollection._f = {                                                                                        // 970\n  // XXX for _all and _in, consider building 'inquery' at compile time..                                      // 971\n                                                                                                              // 972\n  _type: function (v) {                                                                                       // 973\n    if (typeof v === \"number\")                                                                                // 974\n      return 1;                                                                                               // 975\n    if (typeof v === \"string\")                                                                                // 976\n      return 2;                                                                                               // 977\n    if (typeof v === \"boolean\")                                                                               // 978\n      return 8;                                                                                               // 979\n    if (isArray(v))                                                                                           // 980\n      return 4;                                                                                               // 981\n    if (v === null)                                                                                           // 982\n      return 10;                                                                                              // 983\n    if (v instanceof RegExp)                                                                                  // 984\n      // note that typeof(/x/) === \"object\"                                                                   // 985\n      return 11;                                                                                              // 986\n    if (typeof v === \"function\")                                                                              // 987\n      return 13;                                                                                              // 988\n    if (v instanceof Date)                                                                                    // 989\n      return 9;                                                                                               // 990\n    if (EJSON.isBinary(v))                                                                                    // 991\n      return 5;                                                                                               // 992\n    if (v instanceof MongoID.ObjectID)                                                                        // 993\n      return 7;                                                                                               // 994\n    return 3; // object                                                                                       // 995\n                                                                                                              // 996\n    // XXX support some/all of these:                                                                         // 997\n    // 14, symbol                                                                                             // 998\n    // 15, javascript code with scope                                                                         // 999\n    // 16, 18: 32-bit/64-bit integer                                                                          // 1000\n    // 17, timestamp                                                                                          // 1001\n    // 255, minkey                                                                                            // 1002\n    // 127, maxkey                                                                                            // 1003\n  },                                                                                                          // 1004\n                                                                                                              // 1005\n  // deep equality test: use for literal document and array matches                                           // 1006\n  _equal: function (a, b) {                                                                                   // 1007\n    return EJSON.equals(a, b, {keyOrderSensitive: true});                                                     // 1008\n  },                                                                                                          // 1009\n                                                                                                              // 1010\n  // maps a type code to a value that can be used to sort values of                                           // 1011\n  // different types                                                                                          // 1012\n  _typeorder: function (t) {                                                                                  // 1013\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                           // 1014\n    // XXX what is the correct sort position for Javascript code?                                             // 1015\n    // ('100' in the matrix below)                                                                            // 1016\n    // XXX minkey/maxkey                                                                                      // 1017\n    return [-1,  // (not a type)                                                                              // 1018\n            1,   // number                                                                                    // 1019\n            2,   // string                                                                                    // 1020\n            3,   // object                                                                                    // 1021\n            4,   // array                                                                                     // 1022\n            5,   // binary                                                                                    // 1023\n            -1,  // deprecated                                                                                // 1024\n            6,   // ObjectID                                                                                  // 1025\n            7,   // bool                                                                                      // 1026\n            8,   // Date                                                                                      // 1027\n            0,   // null                                                                                      // 1028\n            9,   // RegExp                                                                                    // 1029\n            -1,  // deprecated                                                                                // 1030\n            100, // JS code                                                                                   // 1031\n            2,   // deprecated (symbol)                                                                       // 1032\n            100, // JS code                                                                                   // 1033\n            1,   // 32-bit int                                                                                // 1034\n            8,   // Mongo timestamp                                                                           // 1035\n            1    // 64-bit int                                                                                // 1036\n           ][t];                                                                                              // 1037\n  },                                                                                                          // 1038\n                                                                                                              // 1039\n  // compare two values of unknown type according to BSON ordering                                            // 1040\n  // semantics. (as an extension, consider 'undefined' to be less than                                        // 1041\n  // any other value.) return negative if a is less, positive if b is                                         // 1042\n  // less, or 0 if equal                                                                                      // 1043\n  _cmp: function (a, b) {                                                                                     // 1044\n    if (a === undefined)                                                                                      // 1045\n      return b === undefined ? 0 : -1;                                                                        // 1046\n    if (b === undefined)                                                                                      // 1047\n      return 1;                                                                                               // 1048\n    var ta = LocalCollection._f._type(a);                                                                     // 1049\n    var tb = LocalCollection._f._type(b);                                                                     // 1050\n    var oa = LocalCollection._f._typeorder(ta);                                                               // 1051\n    var ob = LocalCollection._f._typeorder(tb);                                                               // 1052\n    if (oa !== ob)                                                                                            // 1053\n      return oa < ob ? -1 : 1;                                                                                // 1054\n    if (ta !== tb)                                                                                            // 1055\n      // XXX need to implement this if we implement Symbol or integers, or                                    // 1056\n      // Timestamp                                                                                            // 1057\n      throw Error(\"Missing type coercion logic in _cmp\");                                                     // 1058\n    if (ta === 7) { // ObjectID                                                                               // 1059\n      // Convert to string.                                                                                   // 1060\n      ta = tb = 2;                                                                                            // 1061\n      a = a.toHexString();                                                                                    // 1062\n      b = b.toHexString();                                                                                    // 1063\n    }                                                                                                         // 1064\n    if (ta === 9) { // Date                                                                                   // 1065\n      // Convert to millis.                                                                                   // 1066\n      ta = tb = 1;                                                                                            // 1067\n      a = a.getTime();                                                                                        // 1068\n      b = b.getTime();                                                                                        // 1069\n    }                                                                                                         // 1070\n                                                                                                              // 1071\n    if (ta === 1) // double                                                                                   // 1072\n      return a - b;                                                                                           // 1073\n    if (tb === 2) // string                                                                                   // 1074\n      return a < b ? -1 : (a === b ? 0 : 1);                                                                  // 1075\n    if (ta === 3) { // Object                                                                                 // 1076\n      // this could be much more efficient in the expected case ...                                           // 1077\n      var to_array = function (obj) {                                                                         // 1078\n        var ret = [];                                                                                         // 1079\n        for (var key in obj) {                                                                                // 1080\n          ret.push(key);                                                                                      // 1081\n          ret.push(obj[key]);                                                                                 // 1082\n        }                                                                                                     // 1083\n        return ret;                                                                                           // 1084\n      };                                                                                                      // 1085\n      return LocalCollection._f._cmp(to_array(a), to_array(b));                                               // 1086\n    }                                                                                                         // 1087\n    if (ta === 4) { // Array                                                                                  // 1088\n      for (var i = 0; ; i++) {                                                                                // 1089\n        if (i === a.length)                                                                                   // 1090\n          return (i === b.length) ? 0 : -1;                                                                   // 1091\n        if (i === b.length)                                                                                   // 1092\n          return 1;                                                                                           // 1093\n        var s = LocalCollection._f._cmp(a[i], b[i]);                                                          // 1094\n        if (s !== 0)                                                                                          // 1095\n          return s;                                                                                           // 1096\n      }                                                                                                       // 1097\n    }                                                                                                         // 1098\n    if (ta === 5) { // binary                                                                                 // 1099\n      // Surprisingly, a small binary blob is always less than a large one in                                 // 1100\n      // Mongo.                                                                                               // 1101\n      if (a.length !== b.length)                                                                              // 1102\n        return a.length - b.length;                                                                           // 1103\n      for (i = 0; i < a.length; i++) {                                                                        // 1104\n        if (a[i] < b[i])                                                                                      // 1105\n          return -1;                                                                                          // 1106\n        if (a[i] > b[i])                                                                                      // 1107\n          return 1;                                                                                           // 1108\n      }                                                                                                       // 1109\n      return 0;                                                                                               // 1110\n    }                                                                                                         // 1111\n    if (ta === 8) { // boolean                                                                                // 1112\n      if (a) return b ? 0 : 1;                                                                                // 1113\n      return b ? -1 : 0;                                                                                      // 1114\n    }                                                                                                         // 1115\n    if (ta === 10) // null                                                                                    // 1116\n      return 0;                                                                                               // 1117\n    if (ta === 11) // regexp                                                                                  // 1118\n      throw Error(\"Sorting not supported on regular expression\"); // XXX                                      // 1119\n    // 13: javascript code                                                                                    // 1120\n    // 14: symbol                                                                                             // 1121\n    // 15: javascript code with scope                                                                         // 1122\n    // 16: 32-bit integer                                                                                     // 1123\n    // 17: timestamp                                                                                          // 1124\n    // 18: 64-bit integer                                                                                     // 1125\n    // 255: minkey                                                                                            // 1126\n    // 127: maxkey                                                                                            // 1127\n    if (ta === 13) // javascript code                                                                         // 1128\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX                                         // 1129\n    throw Error(\"Unknown type to sort\");                                                                      // 1130\n  }                                                                                                           // 1131\n};                                                                                                            // 1132\n                                                                                                              // 1133\n// Oddball function used by upsert.                                                                           // 1134\nLocalCollection._removeDollarOperators = function (selector) {                                                // 1135\n  var selectorDoc = {};                                                                                       // 1136\n  for (var k in selector)                                                                                     // 1137\n    if (k.substr(0, 1) !== '$')                                                                               // 1138\n      selectorDoc[k] = selector[k];                                                                           // 1139\n  return selectorDoc;                                                                                         // 1140\n};                                                                                                            // 1141\n                                                                                                              // 1142\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/sort.js                                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Give a sort spec, which can be in any of these forms:                                                      // 1\n//   {\"key1\": 1, \"key2\": -1}                                                                                  // 2\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]                                                                      // 3\n//   [\"key1\", [\"key2\", \"desc\"]]                                                                               // 4\n//                                                                                                            // 5\n// (.. with the first form being dependent on the key enumeration                                             // 6\n// behavior of your javascript VM, which usually does what you mean in                                        // 7\n// this case if the key names don't look like integers ..)                                                    // 8\n//                                                                                                            // 9\n// return a function that takes two objects, and returns -1 if the                                            // 10\n// first object comes first in order, 1 if the second object comes                                            // 11\n// first, or 0 if neither object comes before the other.                                                      // 12\n                                                                                                              // 13\nMinimongo.Sorter = function (spec, options) {                                                                 // 14\n  var self = this;                                                                                            // 15\n  options = options || {};                                                                                    // 16\n                                                                                                              // 17\n  self._sortSpecParts = [];                                                                                   // 18\n                                                                                                              // 19\n  var addSpecPart = function (path, ascending) {                                                              // 20\n    if (!path)                                                                                                // 21\n      throw Error(\"sort keys must be non-empty\");                                                             // 22\n    if (path.charAt(0) === '$')                                                                               // 23\n      throw Error(\"unsupported sort key: \" + path);                                                           // 24\n    self._sortSpecParts.push({                                                                                // 25\n      path: path,                                                                                             // 26\n      lookup: makeLookupFunction(path, {forSort: true}),                                                      // 27\n      ascending: ascending                                                                                    // 28\n    });                                                                                                       // 29\n  };                                                                                                          // 30\n                                                                                                              // 31\n  if (spec instanceof Array) {                                                                                // 32\n    for (var i = 0; i < spec.length; i++) {                                                                   // 33\n      if (typeof spec[i] === \"string\") {                                                                      // 34\n        addSpecPart(spec[i], true);                                                                           // 35\n      } else {                                                                                                // 36\n        addSpecPart(spec[i][0], spec[i][1] !== \"desc\");                                                       // 37\n      }                                                                                                       // 38\n    }                                                                                                         // 39\n  } else if (typeof spec === \"object\") {                                                                      // 40\n    _.each(spec, function (value, key) {                                                                      // 41\n      addSpecPart(key, value >= 0);                                                                           // 42\n    });                                                                                                       // 43\n  } else {                                                                                                    // 44\n    throw Error(\"Bad sort specification: \" + JSON.stringify(spec));                                           // 45\n  }                                                                                                           // 46\n                                                                                                              // 47\n  // To implement affectedByModifier, we piggy-back on top of Matcher's                                       // 48\n  // affectedByModifier code; we create a selector that is affected by the same                               // 49\n  // modifiers as this sort order. This is only implemented on the server.                                    // 50\n  if (self.affectedByModifier) {                                                                              // 51\n    var selector = {};                                                                                        // 52\n    _.each(self._sortSpecParts, function (spec) {                                                             // 53\n      selector[spec.path] = 1;                                                                                // 54\n    });                                                                                                       // 55\n    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);                                    // 56\n  }                                                                                                           // 57\n                                                                                                              // 58\n  self._keyComparator = composeComparators(                                                                   // 59\n    _.map(self._sortSpecParts, function (spec, i) {                                                           // 60\n      return self._keyFieldComparator(i);                                                                     // 61\n    }));                                                                                                      // 62\n                                                                                                              // 63\n  // If you specify a matcher for this Sorter, _keyFilter may be set to a                                     // 64\n  // function which selects whether or not a given \"sort key\" (tuple of values                                // 65\n  // for the different sort spec fields) is compatible with the selector.                                     // 66\n  self._keyFilter = null;                                                                                     // 67\n  options.matcher && self._useWithMatcher(options.matcher);                                                   // 68\n};                                                                                                            // 69\n                                                                                                              // 70\n// In addition to these methods, sorter_project.js defines combineIntoProjection                              // 71\n// on the server only.                                                                                        // 72\n_.extend(Minimongo.Sorter.prototype, {                                                                        // 73\n  getComparator: function (options) {                                                                         // 74\n    var self = this;                                                                                          // 75\n                                                                                                              // 76\n    // If we have no distances, just use the comparator from the source                                       // 77\n    // specification (which defaults to \"everything is equal\".                                                // 78\n    if (!options || !options.distances) {                                                                     // 79\n      return self._getBaseComparator();                                                                       // 80\n    }                                                                                                         // 81\n                                                                                                              // 82\n    var distances = options.distances;                                                                        // 83\n                                                                                                              // 84\n    // Return a comparator which first tries the sort specification, and if that                              // 85\n    // says \"it's equal\", breaks ties using $near distances.                                                  // 86\n    return composeComparators([self._getBaseComparator(), function (a, b) {                                   // 87\n      if (!distances.has(a._id))                                                                              // 88\n        throw Error(\"Missing distance for \" + a._id);                                                         // 89\n      if (!distances.has(b._id))                                                                              // 90\n        throw Error(\"Missing distance for \" + b._id);                                                         // 91\n      return distances.get(a._id) - distances.get(b._id);                                                     // 92\n    }]);                                                                                                      // 93\n  },                                                                                                          // 94\n                                                                                                              // 95\n  _getPaths: function () {                                                                                    // 96\n    var self = this;                                                                                          // 97\n    return _.pluck(self._sortSpecParts, 'path');                                                              // 98\n  },                                                                                                          // 99\n                                                                                                              // 100\n  // Finds the minimum key from the doc, according to the sort specs.  (We say                                // 101\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"                                // 102\n  // sort fields mean we're finding the max for that field.)                                                  // 103\n  //                                                                                                          // 104\n  // Note that this is NOT \"find the minimum value of the first field, the                                    // 105\n  // minimum value of the second field, etc\"... it's \"choose the                                              // 106\n  // lexicographically minimum value of the key vector, allowing only keys which                              // 107\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:                                // 108\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                              // 109\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                        // 110\n  _getMinKeyFromDoc: function (doc) {                                                                         // 111\n    var self = this;                                                                                          // 112\n    var minKey = null;                                                                                        // 113\n                                                                                                              // 114\n    self._generateKeysFromDoc(doc, function (key) {                                                           // 115\n      if (!self._keyCompatibleWithSelector(key))                                                              // 116\n        return;                                                                                               // 117\n                                                                                                              // 118\n      if (minKey === null) {                                                                                  // 119\n        minKey = key;                                                                                         // 120\n        return;                                                                                               // 121\n      }                                                                                                       // 122\n      if (self._compareKeys(key, minKey) < 0) {                                                               // 123\n        minKey = key;                                                                                         // 124\n      }                                                                                                       // 125\n    });                                                                                                       // 126\n                                                                                                              // 127\n    // This could happen if our key filter somehow filters out all the keys even                              // 128\n    // though somehow the selector matches.                                                                   // 129\n    if (minKey === null)                                                                                      // 130\n      throw Error(\"sort selector found no keys in doc?\");                                                     // 131\n    return minKey;                                                                                            // 132\n  },                                                                                                          // 133\n                                                                                                              // 134\n  _keyCompatibleWithSelector: function (key) {                                                                // 135\n    var self = this;                                                                                          // 136\n    return !self._keyFilter || self._keyFilter(key);                                                          // 137\n  },                                                                                                          // 138\n                                                                                                              // 139\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling                               // 140\n  // 'cb' with the key.                                                                                       // 141\n  _generateKeysFromDoc: function (doc, cb) {                                                                  // 142\n    var self = this;                                                                                          // 143\n                                                                                                              // 144\n    if (self._sortSpecParts.length === 0)                                                                     // 145\n      throw new Error(\"can't generate keys without a spec\");                                                  // 146\n                                                                                                              // 147\n    // maps index -> ({'' -> value} or {path -> value})                                                       // 148\n    var valuesByIndexAndPath = [];                                                                            // 149\n                                                                                                              // 150\n    var pathFromIndices = function (indices) {                                                                // 151\n      return indices.join(',') + ',';                                                                         // 152\n    };                                                                                                        // 153\n                                                                                                              // 154\n    var knownPaths = null;                                                                                    // 155\n                                                                                                              // 156\n    _.each(self._sortSpecParts, function (spec, whichField) {                                                 // 157\n      // Expand any leaf arrays that we find, and ignore those arrays                                         // 158\n      // themselves.  (We never sort based on an array itself.)                                               // 159\n      var branches = expandArraysInBranches(spec.lookup(doc), true);                                          // 160\n                                                                                                              // 161\n      // If there are no values for a key (eg, key goes to an empty array),                                   // 162\n      // pretend we found one null value.                                                                     // 163\n      if (!branches.length)                                                                                   // 164\n        branches = [{value: null}];                                                                           // 165\n                                                                                                              // 166\n      var usedPaths = false;                                                                                  // 167\n      valuesByIndexAndPath[whichField] = {};                                                                  // 168\n      _.each(branches, function (branch) {                                                                    // 169\n        if (!branch.arrayIndices) {                                                                           // 170\n          // If there are no array indices for a branch, then it must be the                                  // 171\n          // only branch, because the only thing that produces multiple branches                              // 172\n          // is the use of arrays.                                                                            // 173\n          if (branches.length > 1)                                                                            // 174\n            throw Error(\"multiple branches but no array used?\");                                              // 175\n          valuesByIndexAndPath[whichField][''] = branch.value;                                                // 176\n          return;                                                                                             // 177\n        }                                                                                                     // 178\n                                                                                                              // 179\n        usedPaths = true;                                                                                     // 180\n        var path = pathFromIndices(branch.arrayIndices);                                                      // 181\n        if (_.has(valuesByIndexAndPath[whichField], path))                                                    // 182\n          throw Error(\"duplicate path: \" + path);                                                             // 183\n        valuesByIndexAndPath[whichField][path] = branch.value;                                                // 184\n                                                                                                              // 185\n        // If two sort fields both go into arrays, they have to go into the                                   // 186\n        // exact same arrays and we have to find the same paths.  This is                                     // 187\n        // roughly the same condition that makes MongoDB throw this strange                                   // 188\n        // error message.  eg, the main thing is that if sort spec is {a: 1,                                  // 189\n        // b:1} then a and b cannot both be arrays.                                                           // 190\n        //                                                                                                    // 191\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                                 // 192\n        // and 'a.x.y' are both arrays, but we don't allow this for now.                                      // 193\n        // #NestedArraySort                                                                                   // 194\n        // XXX achieve full compatibility here                                                                // 195\n        if (knownPaths && !_.has(knownPaths, path)) {                                                         // 196\n          throw Error(\"cannot index parallel arrays\");                                                        // 197\n        }                                                                                                     // 198\n      });                                                                                                     // 199\n                                                                                                              // 200\n      if (knownPaths) {                                                                                       // 201\n        // Similarly to above, paths must match everywhere, unless this is a                                  // 202\n        // non-array field.                                                                                   // 203\n        if (!_.has(valuesByIndexAndPath[whichField], '') &&                                                   // 204\n            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {                                // 205\n          throw Error(\"cannot index parallel arrays!\");                                                       // 206\n        }                                                                                                     // 207\n      } else if (usedPaths) {                                                                                 // 208\n        knownPaths = {};                                                                                      // 209\n        _.each(valuesByIndexAndPath[whichField], function (x, path) {                                         // 210\n          knownPaths[path] = true;                                                                            // 211\n        });                                                                                                   // 212\n      }                                                                                                       // 213\n    });                                                                                                       // 214\n                                                                                                              // 215\n    if (!knownPaths) {                                                                                        // 216\n      // Easy case: no use of arrays.                                                                         // 217\n      var soleKey = _.map(valuesByIndexAndPath, function (values) {                                           // 218\n        if (!_.has(values, ''))                                                                               // 219\n          throw Error(\"no value in sole key case?\");                                                          // 220\n        return values[''];                                                                                    // 221\n      });                                                                                                     // 222\n      cb(soleKey);                                                                                            // 223\n      return;                                                                                                 // 224\n    }                                                                                                         // 225\n                                                                                                              // 226\n    _.each(knownPaths, function (x, path) {                                                                   // 227\n      var key = _.map(valuesByIndexAndPath, function (values) {                                               // 228\n        if (_.has(values, ''))                                                                                // 229\n          return values[''];                                                                                  // 230\n        if (!_.has(values, path))                                                                             // 231\n          throw Error(\"missing path?\");                                                                       // 232\n        return values[path];                                                                                  // 233\n      });                                                                                                     // 234\n      cb(key);                                                                                                // 235\n    });                                                                                                       // 236\n  },                                                                                                          // 237\n                                                                                                              // 238\n  // Takes in two keys: arrays whose lengths match the number of spec                                         // 239\n  // parts. Returns negative, 0, or positive based on using the sort spec to                                  // 240\n  // compare fields.                                                                                          // 241\n  _compareKeys: function (key1, key2) {                                                                       // 242\n    var self = this;                                                                                          // 243\n    if (key1.length !== self._sortSpecParts.length ||                                                         // 244\n        key2.length !== self._sortSpecParts.length) {                                                         // 245\n      throw Error(\"Key has wrong length\");                                                                    // 246\n    }                                                                                                         // 247\n                                                                                                              // 248\n    return self._keyComparator(key1, key2);                                                                   // 249\n  },                                                                                                          // 250\n                                                                                                              // 251\n  // Given an index 'i', returns a comparator that compares two key arrays based                              // 252\n  // on field 'i'.                                                                                            // 253\n  _keyFieldComparator: function (i) {                                                                         // 254\n    var self = this;                                                                                          // 255\n    var invert = !self._sortSpecParts[i].ascending;                                                           // 256\n    return function (key1, key2) {                                                                            // 257\n      var compare = LocalCollection._f._cmp(key1[i], key2[i]);                                                // 258\n      if (invert)                                                                                             // 259\n        compare = -compare;                                                                                   // 260\n      return compare;                                                                                         // 261\n    };                                                                                                        // 262\n  },                                                                                                          // 263\n                                                                                                              // 264\n  // Returns a comparator that represents the sort specification (but not                                     // 265\n  // including a possible geoquery distance tie-breaker).                                                     // 266\n  _getBaseComparator: function () {                                                                           // 267\n    var self = this;                                                                                          // 268\n                                                                                                              // 269\n    // If we're only sorting on geoquery distance and no specs, just say                                      // 270\n    // everything is equal.                                                                                   // 271\n    if (!self._sortSpecParts.length) {                                                                        // 272\n      return function (doc1, doc2) {                                                                          // 273\n        return 0;                                                                                             // 274\n      };                                                                                                      // 275\n    }                                                                                                         // 276\n                                                                                                              // 277\n    return function (doc1, doc2) {                                                                            // 278\n      var key1 = self._getMinKeyFromDoc(doc1);                                                                // 279\n      var key2 = self._getMinKeyFromDoc(doc2);                                                                // 280\n      return self._compareKeys(key1, key2);                                                                   // 281\n    };                                                                                                        // 282\n  },                                                                                                          // 283\n                                                                                                              // 284\n  // In MongoDB, if you have documents                                                                        // 285\n  //    {_id: 'x', a: [1, 10]} and                                                                            // 286\n  //    {_id: 'y', a: [5, 15]},                                                                               // 287\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                                      // 288\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                                   // 289\n  // match the selector, and 5 comes before 10).                                                              // 290\n  //                                                                                                          // 291\n  // The way this works is pretty subtle!  For example, if the documents                                      // 292\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                        // 293\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                           // 294\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                                   // 295\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                        // 296\n  // both follow this rule (y before x).  (ie, you do have to apply this                                      // 297\n  // through $elemMatch.)                                                                                     // 298\n  //                                                                                                          // 299\n  // So if you pass a matcher to this sorter's constructor, we will attempt to                                // 300\n  // skip sort keys that don't match the selector. The logic here is pretty                                   // 301\n  // subtle and undocumented; we've gotten as close as we can figure out based                                // 302\n  // on our understanding of Mongo's behavior.                                                                // 303\n  _useWithMatcher: function (matcher) {                                                                       // 304\n    var self = this;                                                                                          // 305\n                                                                                                              // 306\n    if (self._keyFilter)                                                                                      // 307\n      throw Error(\"called _useWithMatcher twice?\");                                                           // 308\n                                                                                                              // 309\n    // If we are only sorting by distance, then we're not going to bother to                                  // 310\n    // build a key filter.                                                                                    // 311\n    // XXX figure out how geoqueries interact with this stuff                                                 // 312\n    if (_.isEmpty(self._sortSpecParts))                                                                       // 313\n      return;                                                                                                 // 314\n                                                                                                              // 315\n    var selector = matcher._selector;                                                                         // 316\n                                                                                                              // 317\n    // If the user just passed a literal function to find(), then we can't get a                              // 318\n    // key filter from it.                                                                                    // 319\n    if (selector instanceof Function)                                                                         // 320\n      return;                                                                                                 // 321\n                                                                                                              // 322\n    var constraintsByPath = {};                                                                               // 323\n    _.each(self._sortSpecParts, function (spec, i) {                                                          // 324\n      constraintsByPath[spec.path] = [];                                                                      // 325\n    });                                                                                                       // 326\n                                                                                                              // 327\n    _.each(selector, function (subSelector, key) {                                                            // 328\n      // XXX support $and and $or                                                                             // 329\n                                                                                                              // 330\n      var constraints = constraintsByPath[key];                                                               // 331\n      if (!constraints)                                                                                       // 332\n        return;                                                                                               // 333\n                                                                                                              // 334\n      // XXX it looks like the real MongoDB implementation isn't \"does the                                    // 335\n      // regexp match\" but \"does the value fall into a range named by the                                     // 336\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But                                     // 337\n      // \"does the regexp match\" is a good approximation.                                                     // 338\n      if (subSelector instanceof RegExp) {                                                                    // 339\n        // As far as we can tell, using either of the options that both we and                                // 340\n        // MongoDB support ('i' and 'm') disables use of the key filter. This                                 // 341\n        // makes sense: MongoDB mostly appears to be calculating ranges of an                                 // 342\n        // index to use, which means it only cares about regexps that match                                   // 343\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the                                // 344\n        // literal prefix of the regexp from actually meaning one range.                                      // 345\n        if (subSelector.ignoreCase || subSelector.multiline)                                                  // 346\n          return;                                                                                             // 347\n        constraints.push(regexpElementMatcher(subSelector));                                                  // 348\n        return;                                                                                               // 349\n      }                                                                                                       // 350\n                                                                                                              // 351\n      if (isOperatorObject(subSelector)) {                                                                    // 352\n        _.each(subSelector, function (operand, operator) {                                                    // 353\n          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {                                         // 354\n            // XXX this depends on us knowing that these operators don't use any                              // 355\n            // of the arguments to compileElementSelector other than operand.                                 // 356\n            constraints.push(                                                                                 // 357\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand));                                   // 358\n          }                                                                                                   // 359\n                                                                                                              // 360\n          // See comments in the RegExp block above.                                                          // 361\n          if (operator === '$regex' && !subSelector.$options) {                                               // 362\n            constraints.push(                                                                                 // 363\n              ELEMENT_OPERATORS.$regex.compileElementSelector(                                                // 364\n                operand, subSelector));                                                                       // 365\n          }                                                                                                   // 366\n                                                                                                              // 367\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                        // 368\n        });                                                                                                   // 369\n        return;                                                                                               // 370\n      }                                                                                                       // 371\n                                                                                                              // 372\n      // OK, it's an equality thing.                                                                          // 373\n      constraints.push(equalityElementMatcher(subSelector));                                                  // 374\n    });                                                                                                       // 375\n                                                                                                              // 376\n    // It appears that the first sort field is treated differently from the                                   // 377\n    // others; we shouldn't create a key filter unless the first sort field is                                // 378\n    // restricted, though after that point we can restrict the other sort fields                              // 379\n    // or not as we wish.                                                                                     // 380\n    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))                                            // 381\n      return;                                                                                                 // 382\n                                                                                                              // 383\n    self._keyFilter = function (key) {                                                                        // 384\n      return _.all(self._sortSpecParts, function (specPart, index) {                                          // 385\n        return _.all(constraintsByPath[specPart.path], function (f) {                                         // 386\n          return f(key[index]);                                                                               // 387\n        });                                                                                                   // 388\n      });                                                                                                     // 389\n    };                                                                                                        // 390\n  }                                                                                                           // 391\n});                                                                                                           // 392\n                                                                                                              // 393\n// Given an array of comparators                                                                              // 394\n// (functions (a,b)->(negative or positive or zero)), returns a single                                        // 395\n// comparator which uses each comparator in order and returns the first                                       // 396\n// non-zero value.                                                                                            // 397\nvar composeComparators = function (comparatorArray) {                                                         // 398\n  return function (a, b) {                                                                                    // 399\n    for (var i = 0; i < comparatorArray.length; ++i) {                                                        // 400\n      var compare = comparatorArray[i](a, b);                                                                 // 401\n      if (compare !== 0)                                                                                      // 402\n        return compare;                                                                                       // 403\n    }                                                                                                         // 404\n    return 0;                                                                                                 // 405\n  };                                                                                                          // 406\n};                                                                                                            // 407\n                                                                                                              // 408\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/projection.js                                                                           //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Knows how to compile a fields projection to a predicate function.                                          // 1\n// @returns - Function: a closure that filters out an object according to the                                 // 2\n//            fields projection rules:                                                                        // 3\n//            @param obj - Object: MongoDB-styled document                                                    // 4\n//            @returns - Object: a document with the fields filtered out                                      // 5\n//                       according to projection rules. Doesn't retain subfields                              // 6\n//                       of passed argument.                                                                  // 7\nLocalCollection._compileProjection = function (fields) {                                                      // 8\n  LocalCollection._checkSupportedProjection(fields);                                                          // 9\n                                                                                                              // 10\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;                                          // 11\n  var details = projectionDetails(fields);                                                                    // 12\n                                                                                                              // 13\n  // returns transformed doc according to ruleTree                                                            // 14\n  var transform = function (doc, ruleTree) {                                                                  // 15\n    // Special case for \"sets\"                                                                                // 16\n    if (_.isArray(doc))                                                                                       // 17\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });                           // 18\n                                                                                                              // 19\n    var res = details.including ? {} : EJSON.clone(doc);                                                      // 20\n    _.each(ruleTree, function (rule, key) {                                                                   // 21\n      if (!_.has(doc, key))                                                                                   // 22\n        return;                                                                                               // 23\n      if (_.isObject(rule)) {                                                                                 // 24\n        // For sub-objects/subsets we branch                                                                  // 25\n        if (_.isObject(doc[key]))                                                                             // 26\n          res[key] = transform(doc[key], rule);                                                               // 27\n        // Otherwise we don't even touch this subfield                                                        // 28\n      } else if (details.including)                                                                           // 29\n        res[key] = EJSON.clone(doc[key]);                                                                     // 30\n      else                                                                                                    // 31\n        delete res[key];                                                                                      // 32\n    });                                                                                                       // 33\n                                                                                                              // 34\n    return res;                                                                                               // 35\n  };                                                                                                          // 36\n                                                                                                              // 37\n  return function (obj) {                                                                                     // 38\n    var res = transform(obj, details.tree);                                                                   // 39\n                                                                                                              // 40\n    if (_idProjection && _.has(obj, '_id'))                                                                   // 41\n      res._id = obj._id;                                                                                      // 42\n    if (!_idProjection && _.has(res, '_id'))                                                                  // 43\n      delete res._id;                                                                                         // 44\n    return res;                                                                                               // 45\n  };                                                                                                          // 46\n};                                                                                                            // 47\n                                                                                                              // 48\n// Traverses the keys of passed projection and constructs a tree where all                                    // 49\n// leaves are either all True or all False                                                                    // 50\n// @returns Object:                                                                                           // 51\n//  - tree - Object - tree representation of keys involved in projection                                      // 52\n//  (exception for '_id' as it is a special case handled separately)                                          // 53\n//  - including - Boolean - \"take only certain fields\" type of projection                                     // 54\nprojectionDetails = function (fields) {                                                                       // 55\n  // Find the non-_id keys (_id is handled specially because it is included unless                            // 56\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps                                 // 57\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                              // 58\n  var fieldsKeys = _.keys(fields).sort();                                                                     // 59\n                                                                                                              // 60\n  // If _id is the only field in the projection, do not remove it, since it is                                // 61\n  // required to determine if this is an exclusion or exclusion. Also keep an                                 // 62\n  // inclusive _id, since inclusive _id follows the normal rules about mixing                                 // 63\n  // inclusive and exclusive fields. If _id is not the only field in the                                      // 64\n  // projection and is exclusive, remove it so it can be handled later by a                                   // 65\n  // special case, since exclusive _id is always allowed.                                                     // 66\n  if (fieldsKeys.length > 0 &&                                                                                // 67\n      !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&                                                // 68\n      !(_.contains(fieldsKeys, '_id') && fields['_id']))                                                      // 69\n    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });                              // 70\n                                                                                                              // 71\n  var including = null; // Unknown                                                                            // 72\n                                                                                                              // 73\n  _.each(fieldsKeys, function (keyPath) {                                                                     // 74\n    var rule = !!fields[keyPath];                                                                             // 75\n    if (including === null)                                                                                   // 76\n      including = rule;                                                                                       // 77\n    if (including !== rule)                                                                                   // 78\n      // This error message is copied from MongoDB shell                                                      // 79\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");                       // 80\n  });                                                                                                         // 81\n                                                                                                              // 82\n                                                                                                              // 83\n  var projectionRulesTree = pathsToTree(                                                                      // 84\n    fieldsKeys,                                                                                               // 85\n    function (path) { return including; },                                                                    // 86\n    function (node, path, fullPath) {                                                                         // 87\n      // Check passed projection fields' keys: If you have two rules such as                                  // 88\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                                   // 89\n      // that happens, there is a probability you are doing something wrong,                                  // 90\n      // framework should notify you about such mistake earlier on cursor                                     // 91\n      // compilation step than later during runtime.  Note, that real mongo                                   // 92\n      // doesn't do anything about it and the later rule appears in projection                                // 93\n      // project, more priority it takes.                                                                     // 94\n      //                                                                                                      // 95\n      // Example, assume following in mongo shell:                                                            // 96\n      // > db.coll.insert({ a: { b: 23, c: 44 } })                                                            // 97\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                             // 98\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }                                 // 99\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                             // 100\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }                       // 101\n      //                                                                                                      // 102\n      // Note, how second time the return set of keys is different.                                           // 103\n                                                                                                              // 104\n      var currentPath = fullPath;                                                                             // 105\n      var anotherPath = path;                                                                                 // 106\n      throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +                                    // 107\n                           \" found in fields option, using both of them may trigger \" +                       // 108\n                           \"unexpected behavior. Did you mean to use only one of them?\");                     // 109\n    });                                                                                                       // 110\n                                                                                                              // 111\n  return {                                                                                                    // 112\n    tree: projectionRulesTree,                                                                                // 113\n    including: including                                                                                      // 114\n  };                                                                                                          // 115\n};                                                                                                            // 116\n                                                                                                              // 117\n// paths - Array: list of mongo style paths                                                                   // 118\n// newLeafFn - Function: of form function(path) should return a scalar value to                               // 119\n//                       put into list created for that path                                                  // 120\n// conflictFn - Function: of form function(node, path, fullPath) is called                                    // 121\n//                        when building a tree path for 'fullPath' node on                                    // 122\n//                        'path' was already a leaf with a value. Must return a                               // 123\n//                        conflict resolution.                                                                // 124\n// initial tree - Optional Object: starting tree.                                                             // 125\n// @returns - Object: tree represented as a set of nested objects                                             // 126\npathsToTree = function (paths, newLeafFn, conflictFn, tree) {                                                 // 127\n  tree = tree || {};                                                                                          // 128\n  _.each(paths, function (keyPath) {                                                                          // 129\n    var treePos = tree;                                                                                       // 130\n    var pathArr = keyPath.split('.');                                                                         // 131\n                                                                                                              // 132\n    // use _.all just for iteration with break                                                                // 133\n    var success = _.all(pathArr.slice(0, -1), function (key, idx) {                                           // 134\n      if (!_.has(treePos, key))                                                                               // 135\n        treePos[key] = {};                                                                                    // 136\n      else if (!_.isObject(treePos[key])) {                                                                   // 137\n        treePos[key] = conflictFn(treePos[key],                                                               // 138\n                                  pathArr.slice(0, idx + 1).join('.'),                                        // 139\n                                  keyPath);                                                                   // 140\n        // break out of loop if we are failing for this path                                                  // 141\n        if (!_.isObject(treePos[key]))                                                                        // 142\n          return false;                                                                                       // 143\n      }                                                                                                       // 144\n                                                                                                              // 145\n      treePos = treePos[key];                                                                                 // 146\n      return true;                                                                                            // 147\n    });                                                                                                       // 148\n                                                                                                              // 149\n    if (success) {                                                                                            // 150\n      var lastKey = _.last(pathArr);                                                                          // 151\n      if (!_.has(treePos, lastKey))                                                                           // 152\n        treePos[lastKey] = newLeafFn(keyPath);                                                                // 153\n      else                                                                                                    // 154\n        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);                                    // 155\n    }                                                                                                         // 156\n  });                                                                                                         // 157\n                                                                                                              // 158\n  return tree;                                                                                                // 159\n};                                                                                                            // 160\n                                                                                                              // 161\nLocalCollection._checkSupportedProjection = function (fields) {                                               // 162\n  if (!_.isObject(fields) || _.isArray(fields))                                                               // 163\n    throw MinimongoError(\"fields option must be an object\");                                                  // 164\n                                                                                                              // 165\n  _.each(fields, function (val, keyPath) {                                                                    // 166\n    if (_.contains(keyPath.split('.'), '$'))                                                                  // 167\n      throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");                       // 168\n    if (typeof val === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0)\n      throw MinimongoError(\"Minimongo doesn't support operators in projections yet.\");                        // 170\n    if (_.indexOf([1, 0, true, false], val) === -1)                                                           // 171\n      throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");                        // 172\n  });                                                                                                         // 173\n};                                                                                                            // 174\n                                                                                                              // 175\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/modify.js                                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// XXX need a strategy for passing the binding of $ into this                                                 // 1\n// function, from the compiled selector                                                                       // 2\n//                                                                                                            // 3\n// maybe just {key.up.to.just.before.dollarsign: array_index}                                                 // 4\n//                                                                                                            // 5\n// XXX atomicity: if one modification fails, do we roll back the whole                                        // 6\n// change?                                                                                                    // 7\n//                                                                                                            // 8\n// options:                                                                                                   // 9\n//   - isInsert is set when _modify is being called to compute the document to                                // 10\n//     insert as part of an upsert operation. We use this primarily to figure                                 // 11\n//     out when to set the fields in $setOnInsert, if present.                                                // 12\nLocalCollection._modify = function (doc, mod, options) {                                                      // 13\n  options = options || {};                                                                                    // 14\n  if (!isPlainObject(mod))                                                                                    // 15\n    throw MinimongoError(\"Modifier must be an object\");                                                       // 16\n                                                                                                              // 17\n  // Make sure the caller can't mutate our data structures.                                                   // 18\n  mod = EJSON.clone(mod);                                                                                     // 19\n                                                                                                              // 20\n  var isModifier = isOperatorObject(mod);                                                                     // 21\n                                                                                                              // 22\n  var newDoc;                                                                                                 // 23\n                                                                                                              // 24\n  if (!isModifier) {                                                                                          // 25\n    if (mod._id && !EJSON.equals(doc._id, mod._id))                                                           // 26\n      throw MinimongoError(\"Cannot change the _id of a document\");                                            // 27\n                                                                                                              // 28\n    // replace the whole document                                                                             // 29\n    for (var k in mod) {                                                                                      // 30\n      if (/\\./.test(k))                                                                                       // 31\n        throw MinimongoError(                                                                                 // 32\n          \"When replacing document, field name may not contain '.'\");                                         // 33\n    }                                                                                                         // 34\n    newDoc = mod;                                                                                             // 35\n  } else {                                                                                                    // 36\n    // apply modifiers to the doc.                                                                            // 37\n    newDoc = EJSON.clone(doc);                                                                                // 38\n                                                                                                              // 39\n    _.each(mod, function (operand, op) {                                                                      // 40\n      var modFunc = MODIFIERS[op];                                                                            // 41\n      // Treat $setOnInsert as $set if this is an insert.                                                     // 42\n      if (options.isInsert && op === '$setOnInsert')                                                          // 43\n        modFunc = MODIFIERS['$set'];                                                                          // 44\n      if (!modFunc)                                                                                           // 45\n        throw MinimongoError(\"Invalid modifier specified \" + op);                                             // 46\n      _.each(operand, function (arg, keypath) {                                                               // 47\n        if (keypath === '') {                                                                                 // 48\n          throw MinimongoError(\"An empty update path is not valid.\");                                         // 49\n        }                                                                                                     // 50\n                                                                                                              // 51\n        if (keypath === '_id') {                                                                              // 52\n          throw MinimongoError(\"Mod on _id not allowed\");                                                     // 53\n        }                                                                                                     // 54\n                                                                                                              // 55\n        var keyparts = keypath.split('.');                                                                    // 56\n                                                                                                              // 57\n        if (! _.all(keyparts, _.identity)) {                                                                  // 58\n          throw MinimongoError(                                                                               // 59\n            \"The update path '\" + keypath +                                                                   // 60\n              \"' contains an empty field name, which is not allowed.\");                                       // 61\n        }                                                                                                     // 62\n                                                                                                              // 63\n        var noCreate = _.has(NO_CREATE_MODIFIERS, op);                                                        // 64\n        var forbidArray = (op === \"$rename\");                                                                 // 65\n        var target = findModTarget(newDoc, keyparts, {                                                        // 66\n          noCreate: NO_CREATE_MODIFIERS[op],                                                                  // 67\n          forbidArray: (op === \"$rename\"),                                                                    // 68\n          arrayIndices: options.arrayIndices                                                                  // 69\n        });                                                                                                   // 70\n        var field = keyparts.pop();                                                                           // 71\n        modFunc(target, field, arg, keypath, newDoc);                                                         // 72\n      });                                                                                                     // 73\n    });                                                                                                       // 74\n  }                                                                                                           // 75\n                                                                                                              // 76\n  // move new document into place.                                                                            // 77\n  _.each(_.keys(doc), function (k) {                                                                          // 78\n    // Note: this used to be for (var k in doc) however, this does not                                        // 79\n    // work right in Opera. Deleting from a doc while iterating over it                                       // 80\n    // would sometimes cause opera to skip some keys.                                                         // 81\n    if (k !== '_id')                                                                                          // 82\n      delete doc[k];                                                                                          // 83\n  });                                                                                                         // 84\n  _.each(newDoc, function (v, k) {                                                                            // 85\n    doc[k] = v;                                                                                               // 86\n  });                                                                                                         // 87\n};                                                                                                            // 88\n                                                                                                              // 89\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                        // 90\n// and then you would operate on the 'e' property of the returned                                             // 91\n// object.                                                                                                    // 92\n//                                                                                                            // 93\n// if options.noCreate is falsey, creates intermediate levels of                                              // 94\n// structure as necessary, like mkdir -p (and raises an exception if                                          // 95\n// that would mean giving a non-numeric property to an array.) if                                             // 96\n// options.noCreate is true, return undefined instead.                                                        // 97\n//                                                                                                            // 98\n// may modify the last element of keyparts to signal to the caller that it needs                              // 99\n// to use a different value to index into the returned object (for example,                                   // 100\n// ['a', '01'] -> ['a', 1]).                                                                                  // 101\n//                                                                                                            // 102\n// if forbidArray is true, return null if the keypath goes through an array.                                  // 103\n//                                                                                                            // 104\n// if options.arrayIndices is set, use its first element for the (first) '$' in                               // 105\n// the path.                                                                                                  // 106\nvar findModTarget = function (doc, keyparts, options) {                                                       // 107\n  options = options || {};                                                                                    // 108\n  var usedArrayIndex = false;                                                                                 // 109\n  for (var i = 0; i < keyparts.length; i++) {                                                                 // 110\n    var last = (i === keyparts.length - 1);                                                                   // 111\n    var keypart = keyparts[i];                                                                                // 112\n    var indexable = isIndexable(doc);                                                                         // 113\n    if (!indexable) {                                                                                         // 114\n      if (options.noCreate)                                                                                   // 115\n        return undefined;                                                                                     // 116\n      var e = MinimongoError(                                                                                 // 117\n        \"cannot use the part '\" + keypart + \"' to traverse \" + doc);                                          // 118\n      e.setPropertyError = true;                                                                              // 119\n      throw e;                                                                                                // 120\n    }                                                                                                         // 121\n    if (doc instanceof Array) {                                                                               // 122\n      if (options.forbidArray)                                                                                // 123\n        return null;                                                                                          // 124\n      if (keypart === '$') {                                                                                  // 125\n        if (usedArrayIndex)                                                                                   // 126\n          throw MinimongoError(\"Too many positional (i.e. '$') elements\");                                    // 127\n        if (!options.arrayIndices || !options.arrayIndices.length) {                                          // 128\n          throw MinimongoError(\"The positional operator did not find the \" +                                  // 129\n                               \"match needed from the query\");                                                // 130\n        }                                                                                                     // 131\n        keypart = options.arrayIndices[0];                                                                    // 132\n        usedArrayIndex = true;                                                                                // 133\n      } else if (isNumericKey(keypart)) {                                                                     // 134\n        keypart = parseInt(keypart);                                                                          // 135\n      } else {                                                                                                // 136\n        if (options.noCreate)                                                                                 // 137\n          return undefined;                                                                                   // 138\n        throw MinimongoError(                                                                                 // 139\n          \"can't append to array using string field name [\"                                                   // 140\n                    + keypart + \"]\");                                                                         // 141\n      }                                                                                                       // 142\n      if (last)                                                                                               // 143\n        // handle 'a.01'                                                                                      // 144\n        keyparts[i] = keypart;                                                                                // 145\n      if (options.noCreate && keypart >= doc.length)                                                          // 146\n        return undefined;                                                                                     // 147\n      while (doc.length < keypart)                                                                            // 148\n        doc.push(null);                                                                                       // 149\n      if (!last) {                                                                                            // 150\n        if (doc.length === keypart)                                                                           // 151\n          doc.push({});                                                                                       // 152\n        else if (typeof doc[keypart] !== \"object\")                                                            // 153\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] +                                     // 154\n                      \"' of list value \" + JSON.stringify(doc[keypart]));                                     // 155\n      }                                                                                                       // 156\n    } else {                                                                                                  // 157\n      if (keypart.length && keypart.substr(0, 1) === '$')                                                     // 158\n        throw MinimongoError(\"can't set field named \" + keypart);                                             // 159\n      if (!(keypart in doc)) {                                                                                // 160\n        if (options.noCreate)                                                                                 // 161\n          return undefined;                                                                                   // 162\n        if (!last)                                                                                            // 163\n          doc[keypart] = {};                                                                                  // 164\n      }                                                                                                       // 165\n    }                                                                                                         // 166\n                                                                                                              // 167\n    if (last)                                                                                                 // 168\n      return doc;                                                                                             // 169\n    doc = doc[keypart];                                                                                       // 170\n  }                                                                                                           // 171\n                                                                                                              // 172\n  // notreached                                                                                               // 173\n};                                                                                                            // 174\n                                                                                                              // 175\nvar NO_CREATE_MODIFIERS = {                                                                                   // 176\n  $unset: true,                                                                                               // 177\n  $pop: true,                                                                                                 // 178\n  $rename: true,                                                                                              // 179\n  $pull: true,                                                                                                // 180\n  $pullAll: true                                                                                              // 181\n};                                                                                                            // 182\n                                                                                                              // 183\nvar MODIFIERS = {                                                                                             // 184\n  $inc: function (target, field, arg) {                                                                       // 185\n    if (typeof arg !== \"number\")                                                                              // 186\n      throw MinimongoError(\"Modifier $inc allowed for numbers only\");                                         // 187\n    if (field in target) {                                                                                    // 188\n      if (typeof target[field] !== \"number\")                                                                  // 189\n        throw MinimongoError(\"Cannot apply $inc modifier to non-number\");                                     // 190\n      target[field] += arg;                                                                                   // 191\n    } else {                                                                                                  // 192\n      target[field] = arg;                                                                                    // 193\n    }                                                                                                         // 194\n  },                                                                                                          // 195\n  $set: function (target, field, arg) {                                                                       // 196\n    if (!_.isObject(target)) { // not an array or an object                                                   // 197\n      var e = MinimongoError(\"Cannot set property on non-object field\");                                      // 198\n      e.setPropertyError = true;                                                                              // 199\n      throw e;                                                                                                // 200\n    }                                                                                                         // 201\n    if (target === null) {                                                                                    // 202\n      var e = MinimongoError(\"Cannot set property on null\");                                                  // 203\n      e.setPropertyError = true;                                                                              // 204\n      throw e;                                                                                                // 205\n    }                                                                                                         // 206\n    target[field] = arg;                                                                                      // 207\n  },                                                                                                          // 208\n  $setOnInsert: function (target, field, arg) {                                                               // 209\n    // converted to `$set` in `_modify`                                                                       // 210\n  },                                                                                                          // 211\n  $unset: function (target, field, arg) {                                                                     // 212\n    if (target !== undefined) {                                                                               // 213\n      if (target instanceof Array) {                                                                          // 214\n        if (field in target)                                                                                  // 215\n          target[field] = null;                                                                               // 216\n      } else                                                                                                  // 217\n        delete target[field];                                                                                 // 218\n    }                                                                                                         // 219\n  },                                                                                                          // 220\n  $push: function (target, field, arg) {                                                                      // 221\n    if (target[field] === undefined)                                                                          // 222\n      target[field] = [];                                                                                     // 223\n    if (!(target[field] instanceof Array))                                                                    // 224\n      throw MinimongoError(\"Cannot apply $push modifier to non-array\");                                       // 225\n                                                                                                              // 226\n    if (!(arg && arg.$each)) {                                                                                // 227\n      // Simple mode: not $each                                                                               // 228\n      target[field].push(arg);                                                                                // 229\n      return;                                                                                                 // 230\n    }                                                                                                         // 231\n                                                                                                              // 232\n    // Fancy mode: $each (and maybe $slice and $sort and $position)                                           // 233\n    var toPush = arg.$each;                                                                                   // 234\n    if (!(toPush instanceof Array))                                                                           // 235\n      throw MinimongoError(\"$each must be an array\");                                                         // 236\n                                                                                                              // 237\n    // Parse $position                                                                                        // 238\n    var position = undefined;                                                                                 // 239\n    if ('$position' in arg) {                                                                                 // 240\n      if (typeof arg.$position !== \"number\")                                                                  // 241\n        throw MinimongoError(\"$position must be a numeric value\");                                            // 242\n      // XXX should check to make sure integer                                                                // 243\n      if (arg.$position < 0)                                                                                  // 244\n        throw MinimongoError(\"$position in $push must be zero or positive\");                                  // 245\n      position = arg.$position;                                                                               // 246\n    }                                                                                                         // 247\n                                                                                                              // 248\n    // Parse $slice.                                                                                          // 249\n    var slice = undefined;                                                                                    // 250\n    if ('$slice' in arg) {                                                                                    // 251\n      if (typeof arg.$slice !== \"number\")                                                                     // 252\n        throw MinimongoError(\"$slice must be a numeric value\");                                               // 253\n      // XXX should check to make sure integer                                                                // 254\n      if (arg.$slice > 0)                                                                                     // 255\n        throw MinimongoError(\"$slice in $push must be zero or negative\");                                     // 256\n      slice = arg.$slice;                                                                                     // 257\n    }                                                                                                         // 258\n                                                                                                              // 259\n    // Parse $sort.                                                                                           // 260\n    var sortFunction = undefined;                                                                             // 261\n    if (arg.$sort) {                                                                                          // 262\n      if (slice === undefined)                                                                                // 263\n        throw MinimongoError(\"$sort requires $slice to be present\");                                          // 264\n      // XXX this allows us to use a $sort whose value is an array, but that's                                // 265\n      // actually an extension of the Node driver, so it won't work                                           // 266\n      // server-side. Could be confusing!                                                                     // 267\n      // XXX is it correct that we don't do geo-stuff here?                                                   // 268\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();                                         // 269\n      for (var i = 0; i < toPush.length; i++) {                                                               // 270\n        if (LocalCollection._f._type(toPush[i]) !== 3) {                                                      // 271\n          throw MinimongoError(\"$push like modifiers using $sort \" +                                          // 272\n                      \"require all elements to be objects\");                                                  // 273\n        }                                                                                                     // 274\n      }                                                                                                       // 275\n    }                                                                                                         // 276\n                                                                                                              // 277\n    // Actually push.                                                                                         // 278\n    if (position === undefined) {                                                                             // 279\n      for (var j = 0; j < toPush.length; j++)                                                                 // 280\n        target[field].push(toPush[j]);                                                                        // 281\n    } else {                                                                                                  // 282\n      var spliceArguments = [position, 0];                                                                    // 283\n      for (var j = 0; j < toPush.length; j++)                                                                 // 284\n        spliceArguments.push(toPush[j]);                                                                      // 285\n      Array.prototype.splice.apply(target[field], spliceArguments);                                           // 286\n    }                                                                                                         // 287\n                                                                                                              // 288\n    // Actually sort.                                                                                         // 289\n    if (sortFunction)                                                                                         // 290\n      target[field].sort(sortFunction);                                                                       // 291\n                                                                                                              // 292\n    // Actually slice.                                                                                        // 293\n    if (slice !== undefined) {                                                                                // 294\n      if (slice === 0)                                                                                        // 295\n        target[field] = [];  // differs from Array.slice!                                                     // 296\n      else                                                                                                    // 297\n        target[field] = target[field].slice(slice);                                                           // 298\n    }                                                                                                         // 299\n  },                                                                                                          // 300\n  $pushAll: function (target, field, arg) {                                                                   // 301\n    if (!(typeof arg === \"object\" && arg instanceof Array))                                                   // 302\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");                              // 303\n    var x = target[field];                                                                                    // 304\n    if (x === undefined)                                                                                      // 305\n      target[field] = arg;                                                                                    // 306\n    else if (!(x instanceof Array))                                                                           // 307\n      throw MinimongoError(\"Cannot apply $pushAll modifier to non-array\");                                    // 308\n    else {                                                                                                    // 309\n      for (var i = 0; i < arg.length; i++)                                                                    // 310\n        x.push(arg[i]);                                                                                       // 311\n    }                                                                                                         // 312\n  },                                                                                                          // 313\n  $addToSet: function (target, field, arg) {                                                                  // 314\n    var isEach = false;                                                                                       // 315\n    if (typeof arg === \"object\") {                                                                            // 316\n      //check if first key is '$each'                                                                         // 317\n      for (var k in arg) {                                                                                    // 318\n        if (k === \"$each\")                                                                                    // 319\n          isEach = true;                                                                                      // 320\n        break;                                                                                                // 321\n      }                                                                                                       // 322\n    }                                                                                                         // 323\n    var values = isEach ? arg[\"$each\"] : [arg];                                                               // 324\n    var x = target[field];                                                                                    // 325\n    if (x === undefined)                                                                                      // 326\n      target[field] = values;                                                                                 // 327\n    else if (!(x instanceof Array))                                                                           // 328\n      throw MinimongoError(\"Cannot apply $addToSet modifier to non-array\");                                   // 329\n    else {                                                                                                    // 330\n      _.each(values, function (value) {                                                                       // 331\n        for (var i = 0; i < x.length; i++)                                                                    // 332\n          if (LocalCollection._f._equal(value, x[i]))                                                         // 333\n            return;                                                                                           // 334\n        x.push(value);                                                                                        // 335\n      });                                                                                                     // 336\n    }                                                                                                         // 337\n  },                                                                                                          // 338\n  $pop: function (target, field, arg) {                                                                       // 339\n    if (target === undefined)                                                                                 // 340\n      return;                                                                                                 // 341\n    var x = target[field];                                                                                    // 342\n    if (x === undefined)                                                                                      // 343\n      return;                                                                                                 // 344\n    else if (!(x instanceof Array))                                                                           // 345\n      throw MinimongoError(\"Cannot apply $pop modifier to non-array\");                                        // 346\n    else {                                                                                                    // 347\n      if (typeof arg === 'number' && arg < 0)                                                                 // 348\n        x.splice(0, 1);                                                                                       // 349\n      else                                                                                                    // 350\n        x.pop();                                                                                              // 351\n    }                                                                                                         // 352\n  },                                                                                                          // 353\n  $pull: function (target, field, arg) {                                                                      // 354\n    if (target === undefined)                                                                                 // 355\n      return;                                                                                                 // 356\n    var x = target[field];                                                                                    // 357\n    if (x === undefined)                                                                                      // 358\n      return;                                                                                                 // 359\n    else if (!(x instanceof Array))                                                                           // 360\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");                               // 361\n    else {                                                                                                    // 362\n      var out = [];                                                                                           // 363\n      if (arg != null && typeof arg === \"object\" && !(arg instanceof Array)) {                                // 364\n        // XXX would be much nicer to compile this once, rather than                                          // 365\n        // for each document we modify.. but usually we're not                                                // 366\n        // modifying that many documents, so we'll let it slide for                                           // 367\n        // now                                                                                                // 368\n                                                                                                              // 369\n        // XXX Minimongo.Matcher isn't up for the job, because we need                                        // 370\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                            // 371\n        // like {$gt: 4} is not normally a complete selector.                                                 // 372\n        // same issue as $elemMatch possibly?                                                                 // 373\n        var matcher = new Minimongo.Matcher(arg);                                                             // 374\n        for (var i = 0; i < x.length; i++)                                                                    // 375\n          if (!matcher.documentMatches(x[i]).result)                                                          // 376\n            out.push(x[i]);                                                                                   // 377\n      } else {                                                                                                // 378\n        for (var i = 0; i < x.length; i++)                                                                    // 379\n          if (!LocalCollection._f._equal(x[i], arg))                                                          // 380\n            out.push(x[i]);                                                                                   // 381\n      }                                                                                                       // 382\n      target[field] = out;                                                                                    // 383\n    }                                                                                                         // 384\n  },                                                                                                          // 385\n  $pullAll: function (target, field, arg) {                                                                   // 386\n    if (!(typeof arg === \"object\" && arg instanceof Array))                                                   // 387\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");                              // 388\n    if (target === undefined)                                                                                 // 389\n      return;                                                                                                 // 390\n    var x = target[field];                                                                                    // 391\n    if (x === undefined)                                                                                      // 392\n      return;                                                                                                 // 393\n    else if (!(x instanceof Array))                                                                           // 394\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");                               // 395\n    else {                                                                                                    // 396\n      var out = [];                                                                                           // 397\n      for (var i = 0; i < x.length; i++) {                                                                    // 398\n        var exclude = false;                                                                                  // 399\n        for (var j = 0; j < arg.length; j++) {                                                                // 400\n          if (LocalCollection._f._equal(x[i], arg[j])) {                                                      // 401\n            exclude = true;                                                                                   // 402\n            break;                                                                                            // 403\n          }                                                                                                   // 404\n        }                                                                                                     // 405\n        if (!exclude)                                                                                         // 406\n          out.push(x[i]);                                                                                     // 407\n      }                                                                                                       // 408\n      target[field] = out;                                                                                    // 409\n    }                                                                                                         // 410\n  },                                                                                                          // 411\n  $rename: function (target, field, arg, keypath, doc) {                                                      // 412\n    if (keypath === arg)                                                                                      // 413\n      // no idea why mongo has this restriction..                                                             // 414\n      throw MinimongoError(\"$rename source must differ from target\");                                         // 415\n    if (target === null)                                                                                      // 416\n      throw MinimongoError(\"$rename source field invalid\");                                                   // 417\n    if (typeof arg !== \"string\")                                                                              // 418\n      throw MinimongoError(\"$rename target must be a string\");                                                // 419\n    if (target === undefined)                                                                                 // 420\n      return;                                                                                                 // 421\n    var v = target[field];                                                                                    // 422\n    delete target[field];                                                                                     // 423\n                                                                                                              // 424\n    var keyparts = arg.split('.');                                                                            // 425\n    var target2 = findModTarget(doc, keyparts, {forbidArray: true});                                          // 426\n    if (target2 === null)                                                                                     // 427\n      throw MinimongoError(\"$rename target field invalid\");                                                   // 428\n    var field2 = keyparts.pop();                                                                              // 429\n    target2[field2] = v;                                                                                      // 430\n  },                                                                                                          // 431\n  $bit: function (target, field, arg) {                                                                       // 432\n    // XXX mongo only supports $bit on integers, and we only support                                          // 433\n    // native javascript numbers (doubles) so far, so we can't support $bit                                   // 434\n    throw MinimongoError(\"$bit is not supported\");                                                            // 435\n  }                                                                                                           // 436\n};                                                                                                            // 437\n                                                                                                              // 438\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/diff.js                                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// ordered: bool.                                                                                             // 1\n// old_results and new_results: collections of documents.                                                     // 2\n//    if ordered, they are arrays.                                                                            // 3\n//    if unordered, they are IdMaps                                                                           // 4\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {           // 5\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);                   // 6\n};                                                                                                            // 7\n                                                                                                              // 8\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {           // 9\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);                   // 10\n};                                                                                                            // 11\n                                                                                                              // 12\n                                                                                                              // 13\nLocalCollection._diffQueryOrderedChanges =                                                                    // 14\n  function (oldResults, newResults, observer, options) {                                                      // 15\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);                     // 16\n};                                                                                                            // 17\n                                                                                                              // 18\nLocalCollection._diffObjects = function (left, right, callbacks) {                                            // 19\n  return DiffSequence.diffObjects(left, right, callbacks);                                                    // 20\n};                                                                                                            // 21\n                                                                                                              // 22\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/id_map.js                                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nLocalCollection._IdMap = function () {                                                                        // 1\n  var self = this;                                                                                            // 2\n  IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                     // 3\n};                                                                                                            // 4\n                                                                                                              // 5\nMeteor._inherits(LocalCollection._IdMap, IdMap);                                                              // 6\n                                                                                                              // 7\n                                                                                                              // 8\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/observe.js                                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// XXX maybe move these into another ObserveHelpers package or something                                      // 1\n                                                                                                              // 2\n// _CachingChangeObserver is an object which receives observeChanges callbacks                                // 3\n// and keeps a cache of the current cursor state up to date in self.docs. Users                               // 4\n// of this class should read the docs field but not modify it. You should pass                                // 5\n// the \"applyChange\" field as the callbacks to the underlying observeChanges                                  // 6\n// call. Optionally, you can specify your own observeChanges callbacks which are                              // 7\n// invoked immediately before the docs field is updated; this object is made                                  // 8\n// available as `this` to those callbacks.                                                                    // 9\nLocalCollection._CachingChangeObserver = function (options) {                                                 // 10\n  var self = this;                                                                                            // 11\n  options = options || {};                                                                                    // 12\n                                                                                                              // 13\n  var orderedFromCallbacks = options.callbacks &&                                                             // 14\n        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);                                // 15\n  if (_.has(options, 'ordered')) {                                                                            // 16\n    self.ordered = options.ordered;                                                                           // 17\n    if (options.callbacks && options.ordered !== orderedFromCallbacks)                                        // 18\n      throw Error(\"ordered option doesn't match callbacks\");                                                  // 19\n  } else if (options.callbacks) {                                                                             // 20\n    self.ordered = orderedFromCallbacks;                                                                      // 21\n  } else {                                                                                                    // 22\n    throw Error(\"must provide ordered or callbacks\");                                                         // 23\n  }                                                                                                           // 24\n  var callbacks = options.callbacks || {};                                                                    // 25\n                                                                                                              // 26\n  if (self.ordered) {                                                                                         // 27\n    self.docs = new OrderedDict(MongoID.idStringify);                                                         // 28\n    self.applyChange = {                                                                                      // 29\n      addedBefore: function (id, fields, before) {                                                            // 30\n        var doc = EJSON.clone(fields);                                                                        // 31\n        doc._id = id;                                                                                         // 32\n        callbacks.addedBefore && callbacks.addedBefore.call(                                                  // 33\n          self, id, fields, before);                                                                          // 34\n        // This line triggers if we provide added with movedBefore.                                           // 35\n        callbacks.added && callbacks.added.call(self, id, fields);                                            // 36\n        // XXX could `before` be a falsy ID?  Technically                                                     // 37\n        // idStringify seems to allow for them -- though                                                      // 38\n        // OrderedDict won't call stringify on a falsy arg.                                                   // 39\n        self.docs.putBefore(id, doc, before || null);                                                         // 40\n      },                                                                                                      // 41\n      movedBefore: function (id, before) {                                                                    // 42\n        var doc = self.docs.get(id);                                                                          // 43\n        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);                                // 44\n        self.docs.moveBefore(id, before || null);                                                             // 45\n      }                                                                                                       // 46\n    };                                                                                                        // 47\n  } else {                                                                                                    // 48\n    self.docs = new LocalCollection._IdMap;                                                                   // 49\n    self.applyChange = {                                                                                      // 50\n      added: function (id, fields) {                                                                          // 51\n        var doc = EJSON.clone(fields);                                                                        // 52\n        callbacks.added && callbacks.added.call(self, id, fields);                                            // 53\n        doc._id = id;                                                                                         // 54\n        self.docs.set(id,  doc);                                                                              // 55\n      }                                                                                                       // 56\n    };                                                                                                        // 57\n  }                                                                                                           // 58\n                                                                                                              // 59\n  // The methods in _IdMap and OrderedDict used by these callbacks are                                        // 60\n  // identical.                                                                                               // 61\n  self.applyChange.changed = function (id, fields) {                                                          // 62\n    var doc = self.docs.get(id);                                                                              // 63\n    if (!doc)                                                                                                 // 64\n      throw new Error(\"Unknown id for changed: \" + id);                                                       // 65\n    callbacks.changed && callbacks.changed.call(                                                              // 66\n      self, id, EJSON.clone(fields));                                                                         // 67\n    DiffSequence.applyChanges(doc, fields);                                                                   // 68\n  };                                                                                                          // 69\n  self.applyChange.removed = function (id) {                                                                  // 70\n    callbacks.removed && callbacks.removed.call(self, id);                                                    // 71\n    self.docs.remove(id);                                                                                     // 72\n  };                                                                                                          // 73\n};                                                                                                            // 74\n                                                                                                              // 75\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {                            // 76\n  var transform = cursor.getTransform() || function (doc) {return doc;};                                      // 77\n  var suppressed = !!observeCallbacks._suppress_initial;                                                      // 78\n                                                                                                              // 79\n  var observeChangesCallbacks;                                                                                // 80\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {                                        // 81\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the                                  // 82\n    // linear scans required to generate them.  This lets observers that don't                                // 83\n    // need absolute indices benefit from the other features of this API --                                   // 84\n    // relative order, transforms, and applyChanges -- without the speed hit.                                 // 85\n    var indices = !observeCallbacks._no_indices;                                                              // 86\n    observeChangesCallbacks = {                                                                               // 87\n      addedBefore: function (id, fields, before) {                                                            // 88\n        var self = this;                                                                                      // 89\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))                              // 90\n          return;                                                                                             // 91\n        var doc = transform(_.extend(fields, {_id: id}));                                                     // 92\n        if (observeCallbacks.addedAt) {                                                                       // 93\n          var index = indices                                                                                 // 94\n                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                               // 95\n          observeCallbacks.addedAt(doc, index, before);                                                       // 96\n        } else {                                                                                              // 97\n          observeCallbacks.added(doc);                                                                        // 98\n        }                                                                                                     // 99\n      },                                                                                                      // 100\n      changed: function (id, fields) {                                                                        // 101\n        var self = this;                                                                                      // 102\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed))                                        // 103\n          return;                                                                                             // 104\n        var doc = EJSON.clone(self.docs.get(id));                                                             // 105\n        if (!doc)                                                                                             // 106\n          throw new Error(\"Unknown id for changed: \" + id);                                                   // 107\n        var oldDoc = transform(EJSON.clone(doc));                                                             // 108\n        DiffSequence.applyChanges(doc, fields);                                                               // 109\n        doc = transform(doc);                                                                                 // 110\n        if (observeCallbacks.changedAt) {                                                                     // 111\n          var index = indices ? self.docs.indexOf(id) : -1;                                                   // 112\n          observeCallbacks.changedAt(doc, oldDoc, index);                                                     // 113\n        } else {                                                                                              // 114\n          observeCallbacks.changed(doc, oldDoc);                                                              // 115\n        }                                                                                                     // 116\n      },                                                                                                      // 117\n      movedBefore: function (id, before) {                                                                    // 118\n        var self = this;                                                                                      // 119\n        if (!observeCallbacks.movedTo)                                                                        // 120\n          return;                                                                                             // 121\n        var from = indices ? self.docs.indexOf(id) : -1;                                                      // 122\n                                                                                                              // 123\n        var to = indices                                                                                      // 124\n              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                                 // 125\n        // When not moving backwards, adjust for the fact that removing the                                   // 126\n        // document slides everything back one slot.                                                          // 127\n        if (to > from)                                                                                        // 128\n          --to;                                                                                               // 129\n        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),                                   // 130\n                                 from, to, before || null);                                                   // 131\n      },                                                                                                      // 132\n      removed: function (id) {                                                                                // 133\n        var self = this;                                                                                      // 134\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed))                                        // 135\n          return;                                                                                             // 136\n        // technically maybe there should be an EJSON.clone here, but it's about                              // 137\n        // to be removed from self.docs!                                                                      // 138\n        var doc = transform(self.docs.get(id));                                                               // 139\n        if (observeCallbacks.removedAt) {                                                                     // 140\n          var index = indices ? self.docs.indexOf(id) : -1;                                                   // 141\n          observeCallbacks.removedAt(doc, index);                                                             // 142\n        } else {                                                                                              // 143\n          observeCallbacks.removed(doc);                                                                      // 144\n        }                                                                                                     // 145\n      }                                                                                                       // 146\n    };                                                                                                        // 147\n  } else {                                                                                                    // 148\n    observeChangesCallbacks = {                                                                               // 149\n      added: function (id, fields) {                                                                          // 150\n        if (!suppressed && observeCallbacks.added) {                                                          // 151\n          var doc = _.extend(fields, {_id:  id});                                                             // 152\n          observeCallbacks.added(transform(doc));                                                             // 153\n        }                                                                                                     // 154\n      },                                                                                                      // 155\n      changed: function (id, fields) {                                                                        // 156\n        var self = this;                                                                                      // 157\n        if (observeCallbacks.changed) {                                                                       // 158\n          var oldDoc = self.docs.get(id);                                                                     // 159\n          var doc = EJSON.clone(oldDoc);                                                                      // 160\n          DiffSequence.applyChanges(doc, fields);                                                             // 161\n          observeCallbacks.changed(transform(doc),                                                            // 162\n                                   transform(EJSON.clone(oldDoc)));                                           // 163\n        }                                                                                                     // 164\n      },                                                                                                      // 165\n      removed: function (id) {                                                                                // 166\n        var self = this;                                                                                      // 167\n        if (observeCallbacks.removed) {                                                                       // 168\n          observeCallbacks.removed(transform(self.docs.get(id)));                                             // 169\n        }                                                                                                     // 170\n      }                                                                                                       // 171\n    };                                                                                                        // 172\n  }                                                                                                           // 173\n                                                                                                              // 174\n  var changeObserver = new LocalCollection._CachingChangeObserver(                                            // 175\n    {callbacks: observeChangesCallbacks});                                                                    // 176\n  var handle = cursor.observeChanges(changeObserver.applyChange);                                             // 177\n  suppressed = false;                                                                                         // 178\n                                                                                                              // 179\n  return handle;                                                                                              // 180\n};                                                                                                            // 181\n                                                                                                              // 182\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/objectid.js                                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Is this selector just shorthand for lookup by _id?                                                         // 1\nLocalCollection._selectorIsId = function (selector) {                                                         // 2\n  return (typeof selector === \"string\") ||                                                                    // 3\n    (typeof selector === \"number\") ||                                                                         // 4\n    selector instanceof MongoID.ObjectID;                                                                     // 5\n};                                                                                                            // 6\n                                                                                                              // 7\n// Is the selector just lookup by _id (shorthand or not)?                                                     // 8\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {                                          // 9\n  return LocalCollection._selectorIsId(selector) ||                                                           // 10\n    (selector && typeof selector === \"object\" &&                                                              // 11\n     selector._id && LocalCollection._selectorIsId(selector._id) &&                                           // 12\n     _.size(selector) === 1);                                                                                 // 13\n};                                                                                                            // 14\n                                                                                                              // 15\n// If this is a selector which explicitly constrains the match by ID to a finite                              // 16\n// number of documents, returns a list of their IDs.  Otherwise returns                                       // 17\n// null. Note that the selector may have other restrictions so it may not even                                // 18\n// match those document!  We care about $in and $and since those are generated                                // 19\n// access-controlled update and remove.                                                                       // 20\nLocalCollection._idsMatchedBySelector = function (selector) {                                                 // 21\n  // Is the selector just an ID?                                                                              // 22\n  if (LocalCollection._selectorIsId(selector))                                                                // 23\n    return [selector];                                                                                        // 24\n  if (!selector)                                                                                              // 25\n    return null;                                                                                              // 26\n                                                                                                              // 27\n  // Do we have an _id clause?                                                                                // 28\n  if (_.has(selector, '_id')) {                                                                               // 29\n    // Is the _id clause just an ID?                                                                          // 30\n    if (LocalCollection._selectorIsId(selector._id))                                                          // 31\n      return [selector._id];                                                                                  // 32\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?                                                       // 33\n    if (selector._id && selector._id.$in                                                                      // 34\n        && _.isArray(selector._id.$in)                                                                        // 35\n        && !_.isEmpty(selector._id.$in)                                                                       // 36\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {                                          // 37\n      return selector._id.$in;                                                                                // 38\n    }                                                                                                         // 39\n    return null;                                                                                              // 40\n  }                                                                                                           // 41\n                                                                                                              // 42\n  // If this is a top-level $and, and any of the clauses constrain their                                      // 43\n  // documents, then the whole selector is constrained by any one clause's                                    // 44\n  // constraint. (Well, by their intersection, but that seems unlikely.)                                      // 45\n  if (selector.$and && _.isArray(selector.$and)) {                                                            // 46\n    for (var i = 0; i < selector.$and.length; ++i) {                                                          // 47\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);                                   // 48\n      if (subIds)                                                                                             // 49\n        return subIds;                                                                                        // 50\n    }                                                                                                         // 51\n  }                                                                                                           // 52\n                                                                                                              // 53\n  return null;                                                                                                // 54\n};                                                                                                            // 55\n                                                                                                              // 56\n                                                                                                              // 57\n                                                                                                              // 58\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/selector_projection.js                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Knows how to combine a mongo selector and a fields projection to a new fields                              // 1\n// projection taking into account active fields from the passed selector.                                     // 2\n// @returns Object - projection object (same as fields option of mongo cursor)                                // 3\nMinimongo.Matcher.prototype.combineIntoProjection = function (projection) {                                   // 4\n  var self = this;                                                                                            // 5\n  var selectorPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());                                   // 6\n                                                                                                              // 7\n  // Special case for $where operator in the selector - projection should depend                              // 8\n  // on all fields of the document. getSelectorPaths returns a list of paths                                  // 9\n  // selector depends on. If one of the paths is '' (empty string) representing                               // 10\n  // the root or the whole document, complete projection should be returned.                                  // 11\n  if (_.contains(selectorPaths, ''))                                                                          // 12\n    return {};                                                                                                // 13\n                                                                                                              // 14\n  return combineImportantPathsIntoProjection(selectorPaths, projection);                                      // 15\n};                                                                                                            // 16\n                                                                                                              // 17\nMinimongo._pathsElidingNumericKeys = function (paths) {                                                       // 18\n  var self = this;                                                                                            // 19\n  return _.map(paths, function (path) {                                                                       // 20\n    return _.reject(path.split('.'), isNumericKey).join('.');                                                 // 21\n  });                                                                                                         // 22\n};                                                                                                            // 23\n                                                                                                              // 24\ncombineImportantPathsIntoProjection = function (paths, projection) {                                          // 25\n  var prjDetails = projectionDetails(projection);                                                             // 26\n  var tree = prjDetails.tree;                                                                                 // 27\n  var mergedProjection = {};                                                                                  // 28\n                                                                                                              // 29\n  // merge the paths to include                                                                               // 30\n  tree = pathsToTree(paths,                                                                                   // 31\n                     function (path) { return true; },                                                        // 32\n                     function (node, path, fullPath) { return true; },                                        // 33\n                     tree);                                                                                   // 34\n  mergedProjection = treeToPaths(tree);                                                                       // 35\n  if (prjDetails.including) {                                                                                 // 36\n    // both selector and projection are pointing on fields to include                                         // 37\n    // so we can just return the merged tree                                                                  // 38\n    return mergedProjection;                                                                                  // 39\n  } else {                                                                                                    // 40\n    // selector is pointing at fields to include                                                              // 41\n    // projection is pointing at fields to exclude                                                            // 42\n    // make sure we don't exclude important paths                                                             // 43\n    var mergedExclProjection = {};                                                                            // 44\n    _.each(mergedProjection, function (incl, path) {                                                          // 45\n      if (!incl)                                                                                              // 46\n        mergedExclProjection[path] = false;                                                                   // 47\n    });                                                                                                       // 48\n                                                                                                              // 49\n    return mergedExclProjection;                                                                              // 50\n  }                                                                                                           // 51\n};                                                                                                            // 52\n                                                                                                              // 53\n// Returns a set of key paths similar to                                                                      // 54\n// { 'foo.bar': 1, 'a.b.c': 1 }                                                                               // 55\nvar treeToPaths = function (tree, prefix) {                                                                   // 56\n  prefix = prefix || '';                                                                                      // 57\n  var result = {};                                                                                            // 58\n                                                                                                              // 59\n  _.each(tree, function (val, key) {                                                                          // 60\n    if (_.isObject(val))                                                                                      // 61\n      _.extend(result, treeToPaths(val, prefix + key + '.'));                                                 // 62\n    else                                                                                                      // 63\n      result[prefix + key] = val;                                                                             // 64\n  });                                                                                                         // 65\n                                                                                                              // 66\n  return result;                                                                                              // 67\n};                                                                                                            // 68\n                                                                                                              // 69\n                                                                                                              // 70\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/selector_modifier.js                                                                    //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Returns true if the modifier applied to some document may change the result                                // 1\n// of matching the document by selector                                                                       // 2\n// The modifier is always in a form of Object:                                                                // 3\n//  - $set                                                                                                    // 4\n//    - 'a.b.22.z': value                                                                                     // 5\n//    - 'foo.bar': 42                                                                                         // 6\n//  - $unset                                                                                                  // 7\n//    - 'abc.d': 1                                                                                            // 8\nMinimongo.Matcher.prototype.affectedByModifier = function (modifier) {                                        // 9\n  var self = this;                                                                                            // 10\n  // safe check for $set/$unset being objects                                                                 // 11\n  modifier = _.extend({ $set: {}, $unset: {} }, modifier);                                                    // 12\n  var modifiedPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));                                  // 13\n  var meaningfulPaths = self._getPaths();                                                                     // 14\n                                                                                                              // 15\n  return _.any(modifiedPaths, function (path) {                                                               // 16\n    var mod = path.split('.');                                                                                // 17\n    return _.any(meaningfulPaths, function (meaningfulPath) {                                                 // 18\n      var sel = meaningfulPath.split('.');                                                                    // 19\n      var i = 0, j = 0;                                                                                       // 20\n                                                                                                              // 21\n      while (i < sel.length && j < mod.length) {                                                              // 22\n        if (isNumericKey(sel[i]) && isNumericKey(mod[j])) {                                                   // 23\n          // foo.4.bar selector affected by foo.4 modifier                                                    // 24\n          // foo.3.bar selector unaffected by foo.4 modifier                                                  // 25\n          if (sel[i] === mod[j])                                                                              // 26\n            i++, j++;                                                                                         // 27\n          else                                                                                                // 28\n            return false;                                                                                     // 29\n        } else if (isNumericKey(sel[i])) {                                                                    // 30\n          // foo.4.bar selector unaffected by foo.bar modifier                                                // 31\n          return false;                                                                                       // 32\n        } else if (isNumericKey(mod[j])) {                                                                    // 33\n          j++;                                                                                                // 34\n        } else if (sel[i] === mod[j])                                                                         // 35\n          i++, j++;                                                                                           // 36\n        else                                                                                                  // 37\n          return false;                                                                                       // 38\n      }                                                                                                       // 39\n                                                                                                              // 40\n      // One is a prefix of another, taking numeric fields into account                                       // 41\n      return true;                                                                                            // 42\n    });                                                                                                       // 43\n  });                                                                                                         // 44\n};                                                                                                            // 45\n                                                                                                              // 46\n// Minimongo.Sorter gets a similar method, which delegates to a Matcher it made                               // 47\n// for this exact purpose.                                                                                    // 48\nMinimongo.Sorter.prototype.affectedByModifier = function (modifier) {                                         // 49\n  var self = this;                                                                                            // 50\n  return self._selectorForAffectedByModifier.affectedByModifier(modifier);                                    // 51\n};                                                                                                            // 52\n                                                                                                              // 53\n// @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`                               // 54\n//                           only. (assumed to come from oplog)                                               // 55\n// @returns - Boolean: if after applying the modifier, selector can start                                     // 56\n//                     accepting the modified value.                                                          // 57\n// NOTE: assumes that document affected by modifier didn't match this Matcher                                 // 58\n// before, so if modifier can't convince selector in a positive change it would                               // 59\n// stay 'false'.                                                                                              // 60\n// Currently doesn't support $-operators and numeric indices precisely.                                       // 61\nMinimongo.Matcher.prototype.canBecomeTrueByModifier = function (modifier) {                                   // 62\n  var self = this;                                                                                            // 63\n  if (!this.affectedByModifier(modifier))                                                                     // 64\n    return false;                                                                                             // 65\n                                                                                                              // 66\n  modifier = _.extend({$set:{}, $unset:{}}, modifier);                                                        // 67\n  var modifierPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));                                  // 68\n                                                                                                              // 69\n  if (!self.isSimple())                                                                                       // 70\n    return true;                                                                                              // 71\n                                                                                                              // 72\n  if (_.any(self._getPaths(), pathHasNumericKeys) ||                                                          // 73\n      _.any(modifierPaths, pathHasNumericKeys))                                                               // 74\n    return true;                                                                                              // 75\n                                                                                                              // 76\n  // check if there is a $set or $unset that indicates something is an                                        // 77\n  // object rather than a scalar in the actual object where we saw $-operator                                 // 78\n  // NOTE: it is correct since we allow only scalars in $-operators                                           // 79\n  // Example: for selector {'a.b': {$gt: 5}} the modifier {'a.b.c':7} would                                   // 80\n  // definitely set the result to false as 'a.b' appears to be an object.                                     // 81\n  var expectedScalarIsObject = _.any(self._selector, function (sel, path) {                                   // 82\n    if (! isOperatorObject(sel))                                                                              // 83\n      return false;                                                                                           // 84\n    return _.any(modifierPaths, function (modifierPath) {                                                     // 85\n      return startsWith(modifierPath, path + '.');                                                            // 86\n    });                                                                                                       // 87\n  });                                                                                                         // 88\n                                                                                                              // 89\n  if (expectedScalarIsObject)                                                                                 // 90\n    return false;                                                                                             // 91\n                                                                                                              // 92\n  // See if we can apply the modifier on the ideally matching object. If it                                   // 93\n  // still matches the selector, then the modifier could have turned the real                                 // 94\n  // object in the database into something matching.                                                          // 95\n  var matchingDocument = EJSON.clone(self.matchingDocument());                                                // 96\n                                                                                                              // 97\n  // The selector is too complex, anything can happen.                                                        // 98\n  if (matchingDocument === null)                                                                              // 99\n    return true;                                                                                              // 100\n                                                                                                              // 101\n  try {                                                                                                       // 102\n    LocalCollection._modify(matchingDocument, modifier);                                                      // 103\n  } catch (e) {                                                                                               // 104\n    // Couldn't set a property on a field which is a scalar or null in the                                    // 105\n    // selector.                                                                                              // 106\n    // Example:                                                                                               // 107\n    // real document: { 'a.b': 3 }                                                                            // 108\n    // selector: { 'a': 12 }                                                                                  // 109\n    // converted selector (ideal document): { 'a': 12 }                                                       // 110\n    // modifier: { $set: { 'a.b': 4 } }                                                                       // 111\n    // We don't know what real document was like but from the error raised by                                 // 112\n    // $set on a scalar field we can reason that the structure of real document                               // 113\n    // is completely different.                                                                               // 114\n    if (e.name === \"MinimongoError\" && e.setPropertyError)                                                    // 115\n      return false;                                                                                           // 116\n    throw e;                                                                                                  // 117\n  }                                                                                                           // 118\n                                                                                                              // 119\n  return self.documentMatches(matchingDocument).result;                                                       // 120\n};                                                                                                            // 121\n                                                                                                              // 122\n// Returns an object that would match the selector if possible or null if the                                 // 123\n// selector is too complex for us to analyze                                                                  // 124\n// { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }                                            // 125\n// => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }                                         // 126\nMinimongo.Matcher.prototype.matchingDocument = function () {                                                  // 127\n  var self = this;                                                                                            // 128\n                                                                                                              // 129\n  // check if it was computed before                                                                          // 130\n  if (self._matchingDocument !== undefined)                                                                   // 131\n    return self._matchingDocument;                                                                            // 132\n                                                                                                              // 133\n  // If the analysis of this selector is too hard for our implementation                                      // 134\n  // fallback to \"YES\"                                                                                        // 135\n  var fallback = false;                                                                                       // 136\n  self._matchingDocument = pathsToTree(self._getPaths(),                                                      // 137\n    function (path) {                                                                                         // 138\n      var valueSelector = self._selector[path];                                                               // 139\n      if (isOperatorObject(valueSelector)) {                                                                  // 140\n        // if there is a strict equality, there is a good                                                     // 141\n        // chance we can use one of those as \"matching\"                                                       // 142\n        // dummy value                                                                                        // 143\n        if (valueSelector.$in) {                                                                              // 144\n          var matcher = new Minimongo.Matcher({ placeholder: valueSelector });                                // 145\n                                                                                                              // 146\n          // Return anything from $in that matches the whole selector for this                                // 147\n          // path. If nothing matches, returns `undefined` as nothing can make                                // 148\n          // this selector into `true`.                                                                       // 149\n          return _.find(valueSelector.$in, function (x) {                                                     // 150\n            return matcher.documentMatches({ placeholder: x }).result;                                        // 151\n          });                                                                                                 // 152\n        } else if (onlyContainsKeys(valueSelector, ['$gt', '$gte', '$lt', '$lte'])) {                         // 153\n          var lowerBound = -Infinity, upperBound = Infinity;                                                  // 154\n          _.each(['$lte', '$lt'], function (op) {                                                             // 155\n            if (_.has(valueSelector, op) && valueSelector[op] < upperBound)                                   // 156\n              upperBound = valueSelector[op];                                                                 // 157\n          });                                                                                                 // 158\n          _.each(['$gte', '$gt'], function (op) {                                                             // 159\n            if (_.has(valueSelector, op) && valueSelector[op] > lowerBound)                                   // 160\n              lowerBound = valueSelector[op];                                                                 // 161\n          });                                                                                                 // 162\n                                                                                                              // 163\n          var middle = (lowerBound + upperBound) / 2;                                                         // 164\n          var matcher = new Minimongo.Matcher({ placeholder: valueSelector });                                // 165\n          if (!matcher.documentMatches({ placeholder: middle }).result &&                                     // 166\n              (middle === lowerBound || middle === upperBound))                                               // 167\n            fallback = true;                                                                                  // 168\n                                                                                                              // 169\n          return middle;                                                                                      // 170\n        } else if (onlyContainsKeys(valueSelector, ['$nin',' $ne'])) {                                        // 171\n          // Since self._isSimple makes sure $nin and $ne are not combined with                               // 172\n          // objects or arrays, we can confidently return an empty object as it                               // 173\n          // never matches any scalar.                                                                        // 174\n          return {};                                                                                          // 175\n        } else {                                                                                              // 176\n          fallback = true;                                                                                    // 177\n        }                                                                                                     // 178\n      }                                                                                                       // 179\n      return self._selector[path];                                                                            // 180\n    },                                                                                                        // 181\n    _.identity /*conflict resolution is no resolution*/);                                                     // 182\n                                                                                                              // 183\n  if (fallback)                                                                                               // 184\n    self._matchingDocument = null;                                                                            // 185\n                                                                                                              // 186\n  return self._matchingDocument;                                                                              // 187\n};                                                                                                            // 188\n                                                                                                              // 189\nvar getPaths = function (sel) {                                                                               // 190\n  return _.keys(new Minimongo.Matcher(sel)._paths);                                                           // 191\n  return _.chain(sel).map(function (v, k) {                                                                   // 192\n    // we don't know how to handle $where because it can be anything                                          // 193\n    if (k === \"$where\")                                                                                       // 194\n      return ''; // matches everything                                                                        // 195\n    // we branch from $or/$and/$nor operator                                                                  // 196\n    if (_.contains(['$or', '$and', '$nor'], k))                                                               // 197\n      return _.map(v, getPaths);                                                                              // 198\n    // the value is a literal or some comparison operator                                                     // 199\n    return k;                                                                                                 // 200\n  }).flatten().uniq().value();                                                                                // 201\n};                                                                                                            // 202\n                                                                                                              // 203\n// A helper to ensure object has only certain keys                                                            // 204\nvar onlyContainsKeys = function (obj, keys) {                                                                 // 205\n  return _.all(obj, function (v, k) {                                                                         // 206\n    return _.contains(keys, k);                                                                               // 207\n  });                                                                                                         // 208\n};                                                                                                            // 209\n                                                                                                              // 210\nvar pathHasNumericKeys = function (path) {                                                                    // 211\n  return _.any(path.split('.'), isNumericKey);                                                                // 212\n}                                                                                                             // 213\n                                                                                                              // 214\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                    // 215\nvar startsWith = function(str, starts) {                                                                      // 216\n  return str.length >= starts.length &&                                                                       // 217\n    str.substring(0, starts.length) === starts;                                                               // 218\n};                                                                                                            // 219\n                                                                                                              // 220\n                                                                                                              // 221\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/minimongo/sorter_projection.js                                                                    //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nMinimongo.Sorter.prototype.combineIntoProjection = function (projection) {                                    // 1\n  var self = this;                                                                                            // 2\n  var specPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());                                       // 3\n  return combineImportantPathsIntoProjection(specPaths, projection);                                          // 4\n};                                                                                                            // 5\n                                                                                                              // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.minimongo = {\n  LocalCollection: LocalCollection,\n  Minimongo: Minimongo,\n  MinimongoTest: MinimongoTest\n};\n\n})();\n","servePath":"/packages/minimongo.js","sourceMap":{"version":3,"sources":["/packages/minimongo/minimongo.js","/packages/minimongo/wrap_transform.js","/packages/minimongo/helpers.js","/packages/minimongo/selector.js","/packages/minimongo/sort.js","/packages/minimongo/projection.js","/packages/minimongo/modify.js","/packages/minimongo/diff.js","/packages/minimongo/id_map.js","/packages/minimongo/observe.js","/packages/minimongo/objectid.js","/packages/minimongo/selector_projection.js","/packages/minimongo/selector_modifier.js","/packages/minimongo/sorter_projection.js"],"names":[],"mappingsqH;;;;;;;;;;;;;;;;;;AC3hCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mqH;;;;;;;;;;;;;;;;;;ACrnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;;;;;;;;ACvooH;;;;;;;;;;;;;;;;;;ACrbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,koH;;;;;;;;;;;;;;;;;;ACrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACroH;;;;;;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA,kH","file":"/packages/minimongo.js","sourcesContent":["// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\n\n// Cursor: a specification for a particular subset of documents, w/\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\n\n// ObserveHandle: the return value of a live query.\n\nLocalCollection = function (name) {\n  var self = this;\n  self.name = name;\n  // _id -> document (also containing id)\n  self._docs = new LocalCollection._IdMap;\n\n  self._observeQueue = new Meteor._SynchronousQueue();\n\n  self.next_qid = 1; // live query id generator\n\n  // qid -> live query object. keys:\n  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n  //  results: array (ordered) or object (unordered) of current results\n  //    (aliased with self._docs!)\n  //  resultsSnapshot: snapshot of results. null if not paused.\n  //  cursor: Cursor object for the query.\n  //  selector, sorter, (callbacks): functions\n  self.queries = {};\n\n  // null if not saving originals; an IdMap from id to original document value if\n  // saving originals. See comments before saveOriginals().\n  self._savedOriginals = null;\n\n  // True when observers are paused and we should not send callbacks.\n  self.paused = false;\n};\n\nMinimongo = {};\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {};\n\nMinimongoError = function (message) {\n  var e = new Error(message);\n  e.name = \"MinimongoError\";\n  return e;\n};\n\n\n// options may include sort, skip, limit, reactive\n// sort may be any of these forms:\n//     {a: 1, b: -1}\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n//     [\"a\", [\"b\", \"desc\"]]\n//   (in the first form you're beholden to key enumeration order in\n//   your javascript VM)\n//\n// reactive: if given, and false, don't register with Tracker (default\n// is true)\n//\n// XXX possibly should support retrieving a subset of fields? and\n// have it be a hint (ignored on the client, when not copying the\n// doc?)\n//\n// XXX sort does not yet support subkeys ('a.b') .. fix that!\n// XXX add one more sort form: \"key\"\n// XXX tests\nLocalCollection.prototype.find = function (selector, options) {\n  // default syntax for everything is to omit the selector argument.\n  // but if selector is explicitly passed in as false or undefined, we\n  // want a selector that matches nothing.\n  if (arguments.length === 0)\n    selector = {};\n\n  return new LocalCollection.Cursor(this, selector, options);\n};\n\n// don't call this ctor directly.  use LocalCollection.find().\n\nLocalCollection.Cursor = function (collection, selector, options) {\n  var self = this;\n  if (!options) options = {};\n\n  self.collection = collection;\n  self.sorter = null;\n  self.matcher = new Minimongo.Matcher(selector);\n\n  if (LocalCollection._selectorIsId(selector)) {\n    // stash for fast path\n    self._selectorId = selector;\n  } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    // also do the fast path for { _id: idString }\n    self._selectorId = selector._id;\n  } else {\n    self._selectorId = undefined;\n    if (self.matcher.hasGeoQuery() || options.sort) {\n      self.sorter = new Minimongo.Sorter(options.sort || [],\n                                         { matcher: self.matcher });\n    }\n  }\n\n  self.skip = options.skip;\n  self.limit = options.limit;\n  self.fields = options.fields;\n\n  self._projectionFn = LocalCollection._compileProjection(self.fields || {});\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  // by default, queries register w/ Tracker when it is available.\n  if (typeof Tracker !== \"undefined\")\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;\n};\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nLocalCollection.Cursor.prototype.rewind = function () {\n};\n\nLocalCollection.prototype.findOne = function (selector, options) {\n  if (arguments.length === 0)\n    selector = {};\n\n  // NOTE: by setting limit 1 here, we end up using very inefficient\n  // code that recomputes the whole query on each update. The upside is\n  // that when you reactively depend on a findOne you only get\n  // invalidated when the found object changes, not any object in the\n  // collection. Most findOne will be by id, which has a fast path, so\n  // this might not be a big deal. In most cases, invalidation causes\n  // the called to re-query anyway, so this should be a net performance\n  // improvement.\n  options = options || {};\n  options.limit = 1;\n\n  return this.find(selector, options).fetch()[0];\n};\n\n/**\n * @callback IterationCallback\n * @param {Object} doc\n * @param {Number} index\n */\n/**\n * @summary Call `callback` once for each matching document, sequentially and synchronously.\n * @locus Anywhere\n * @method  forEach\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\n  var self = this;\n\n  var objects = self._getRawObjects({ordered: true});\n\n  if (self.reactive) {\n    self._depend({\n      addedBefore: true,\n      removed: true,\n      changed: true,\n      movedBefore: true});\n  }\n\n  _.each(objects, function (elt, i) {\n    // This doubles as a clone operation.\n    elt = self._projectionFn(elt);\n\n    if (self._transform)\n      elt = self._transform(elt);\n    callback.call(thisArg, elt, i, self);\n  });\n};\n\nLocalCollection.Cursor.prototype.getTransform = function () {\n  return this._transform;\n};\n\n/**\n * @summary Map callback over all matching documents.  Returns an Array.\n * @locus Anywhere\n * @method map\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc, index) {\n    res.push(callback.call(thisArg, doc, index, self));\n  });\n  return res;\n};\n\n/**\n * @summary Return all matching documents as an Array.\n * @memberOf Mongo.Cursor\n * @method  fetch\n * @instance\n * @locus Anywhere\n * @returns {Object[]}\n */\nLocalCollection.Cursor.prototype.fetch = function () {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc) {\n    res.push(doc);\n  });\n  return res;\n};\n\n/**\n * @summary Returns the number of documents that match a query.\n * @memberOf Mongo.Cursor\n * @method  count\n * @instance\n * @locus Anywhere\n * @returns {Number}\n */\nLocalCollection.Cursor.prototype.count = function () {\n  var self = this;\n\n  if (self.reactive)\n    self._depend({added: true, removed: true},\n                 true /* allow the observe to be unordered */);\n\n  return self._getRawObjects({ordered: true}).length;\n};\n\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  if (! self.collection.name)\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");\n  var collection = self.collection.name;\n\n  // XXX minimongo should not depend on mongo-livedata!\n  if (! Package.mongo) {\n    throw new Error(\"Can't publish from Minimongo without the `mongo` package.\");\n  }\n\n  return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);\n};\n\nLocalCollection.Cursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self.collection.name;\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore)\n    throw new Error(\"Please specify only one of added() and addedBefore()\");\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.addedAt && callbacks.added)\n    throw new Error(\"Please specify only one of added() and addedAt()\");\n  if (callbacks.changedAt && callbacks.changed)\n    throw new Error(\"Please specify only one of changed() and changedAt()\");\n  if (callbacks.removed && callbacks.removedAt)\n    throw new Error(\"Please specify only one of removed() and removedAt()\");\n\n  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt\n            || callbacks.removedAt);\n};\n\n// the handle that comes back from observe.\nLocalCollection.ObserveHandle = function () {};\n\n// options to contain:\n//  * callbacks for observe():\n//    - addedAt (document, atIndex)\n//    - added (document)\n//    - changedAt (newDocument, oldDocument, atIndex)\n//    - changed (newDocument, oldDocument)\n//    - removedAt (document, atIndex)\n//    - removed (document)\n//    - movedTo (document, oldIndex, newIndex)\n//\n// attributes available on returned query handle:\n//  * stop(): end updates\n//  * collection: the collection this query is querying\n//\n// iff x is a returned query handle, (x instanceof\n// LocalCollection.ObserveHandle) is true\n//\n// initial results delivered through added callback\n// XXX maybe callbacks should take a list of objects, to expose transactions?\n// XXX maybe support field limiting (to limit what you're notified on)\n\n_.extend(LocalCollection.Cursor.prototype, {\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observe: function (options) {\n    var self = this;\n    return LocalCollection._observeFromObserveChanges(self, options);\n  },\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observeChanges: function (options) {\n    var self = this;\n\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))\n      throw new Error(\"must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit\");\n\n    if (self.fields && (self.fields._id === 0 || self.fields._id === false))\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n\n    var query = {\n      matcher: self.matcher, // not fast pathed\n      sorter: ordered && self.sorter,\n      distances: (\n        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),\n      resultsSnapshot: null,\n      ordered: ordered,\n      cursor: self,\n      projectionFn: self._projectionFn\n    };\n    var qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (self.reactive) {\n      qid = self.collection.next_qid++;\n      self.collection.queries[qid] = query;\n    }\n    query.results = self._getRawObjects({\n      ordered: ordered, distances: query.distances});\n    if (self.collection.paused)\n      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    var wrapCallback = function (f) {\n      if (!f)\n        return function () {};\n      return function (/*args*/) {\n        var context = this;\n        var args = arguments;\n\n        if (self.collection.paused)\n          return;\n\n        self.collection._observeQueue.queueTask(function () {\n          f.apply(context, args);\n        });\n      };\n    };\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !self.collection.paused) {\n      // XXX unify ordered and unordered interface\n      var each = ordered\n            ? _.bind(_.each, null, query.results)\n            : _.bind(query.results.forEach, query.results);\n      each(function (doc) {\n        var fields = EJSON.clone(doc);\n\n        delete fields._id;\n        if (ordered)\n          query.addedBefore(doc._id, self._projectionFn(fields), null);\n        query.added(doc._id, self._projectionFn(fields));\n      });\n    }\n\n    var handle = new LocalCollection.ObserveHandle;\n    _.extend(handle, {\n      collection: self.collection,\n      stop: function () {\n        if (self.reactive)\n          delete self.collection.queries[qid];\n      }\n    });\n\n    if (self.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(function () {\n        handle.stop();\n      });\n    }\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    self.collection._observeQueue.drain();\n\n    return handle;\n  }\n});\n\n// Returns a collection of matching objects, but doesn't deep copy them.\n//\n// If ordered is set, returns a sorted array, respecting sorter, skip, and limit\n// properties of the query.  if sorter is falsey, no sort -- you get the natural\n// order.\n//\n// If ordered is not set, returns an object mapping from ID to doc (sorter, skip\n// and limit should not be set).\n//\n// If ordered is set and this cursor is a $near geoquery, then this function\n// will use an _IdMap to track each distance from the $near argument point in\n// order to use it as a sort key. If an _IdMap is passed in the 'distances'\n// argument, this function will clear it and use it for this purpose (otherwise\n// it will just create its own _IdMap). The observeChanges implementation uses\n// this to remember the distances after this function returns.\nLocalCollection.Cursor.prototype._getRawObjects = function (options) {\n  var self = this;\n  options = options || {};\n\n  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n  // compatible\n  var results = options.ordered ? [] : new LocalCollection._IdMap;\n\n  // fast path for single ID value\n  if (self._selectorId !== undefined) {\n    // If you have non-zero skip and ask for a single id, you get\n    // nothing. This is so it matches the behavior of the '{_id: foo}'\n    // path.\n    if (self.skip)\n      return results;\n\n    var selectedDoc = self.collection._docs.get(self._selectorId);\n    if (selectedDoc) {\n      if (options.ordered)\n        results.push(selectedDoc);\n      else\n        results.set(self._selectorId, selectedDoc);\n    }\n    return results;\n  }\n\n  // slow path for arbitrary selector, sort, skip, limit\n\n  // in the observeChanges case, distances is actually part of the \"query\" (ie,\n  // live results set) object.  in other cases, distances is only used inside\n  // this function.\n  var distances;\n  if (self.matcher.hasGeoQuery() && options.ordered) {\n    if (options.distances) {\n      distances = options.distances;\n      distances.clear();\n    } else {\n      distances = new LocalCollection._IdMap();\n    }\n  }\n\n  self.collection._docs.forEach(function (doc, id) {\n    var matchResult = self.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (options.ordered) {\n        results.push(doc);\n        if (distances && matchResult.distance !== undefined)\n          distances.set(id, matchResult.distance);\n      } else {\n        results.set(id, doc);\n      }\n    }\n    // Fast path for limited unsorted queries.\n    // XXX 'length' check here seems wrong for ordered\n    if (self.limit && !self.skip && !self.sorter &&\n        results.length === self.limit)\n      return false;  // break\n    return true;  // continue\n  });\n\n  if (!options.ordered)\n    return results;\n\n  if (self.sorter) {\n    var comparator = self.sorter.getComparator({distances: distances});\n    results.sort(comparator);\n  }\n\n  var idx_start = self.skip || 0;\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;\n  return results.slice(idx_start, idx_end);\n};\n\n// XXX Maybe we need a version of observe that just calls a callback if\n// anything changed.\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\n  var self = this;\n\n  if (Tracker.active) {\n    var v = new Tracker.Dependency;\n    v.depend();\n    var notifyChange = _.bind(v.changed, v);\n\n    var options = {\n      _suppress_initial: true,\n      _allow_unordered: _allow_unordered\n    };\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],\n           function (fnName) {\n             if (changers[fnName])\n               options[fnName] = notifyChange;\n           });\n\n    // observeChanges will stop() when this computation is invalidated\n    self.observeChanges(options);\n  }\n};\n\n// XXX enforce rule that field names can't start with '$' or contain '.'\n// (real mongodb does in fact enforce this)\n// XXX possibly enforce that 'undefined' does not appear (we assume\n// this in our handling of null and $exists)\nLocalCollection.prototype.insert = function (doc, callback) {\n  var self = this;\n  doc = EJSON.clone(doc);\n\n  if (!_.has(doc, '_id')) {\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    doc._id = LocalCollection._useOID ? new MongoID.ObjectID()\n                                      : Random.id();\n  }\n  var id = doc._id;\n\n  if (self._docs.has(id))\n    throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n\n  self._saveOriginal(id, undefined);\n  self._docs.set(id, doc);\n\n  var queriesToRecompute = [];\n  // trigger live queries that match\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    var matchResult = query.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (query.distances && matchResult.distance !== undefined)\n        query.distances.set(id, matchResult.distance);\n      if (query.cursor.skip || query.cursor.limit)\n        queriesToRecompute.push(qid);\n      else\n        LocalCollection._insertInResults(query, doc);\n    }\n  }\n\n  _.each(queriesToRecompute, function (qid) {\n    if (self.queries[qid])\n      self._recomputeResults(self.queries[qid]);\n  });\n  self._observeQueue.drain();\n\n  // Defer because the caller likely doesn't expect the callback to be run\n  // immediately.\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, id);\n    });\n  return id;\n};\n\n// Iterates over a subset of documents that could match selector; calls\n// f(doc, id) on each of them.  Specifically, if selector specifies\n// specific _id's, it only looks at those.  doc is *not* cloned: it is the\n// same object that is in _docs.\nLocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {\n  var self = this;\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    for (var i = 0; i < specificIds.length; ++i) {\n      var id = specificIds[i];\n      var doc = self._docs.get(id);\n      if (doc) {\n        var breakIfFalse = f(doc, id);\n        if (breakIfFalse === false)\n          break;\n      }\n    }\n  } else {\n    self._docs.forEach(f);\n  }\n};\n\nLocalCollection.prototype.remove = function (selector, callback) {\n  var self = this;\n\n  // Easy special case: if we're not calling observeChanges callbacks and we're\n  // not saving originals and we got asked to remove everything, then just empty\n  // everything directly.\n  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {\n    var result = self._docs.size();\n    self._docs.clear();\n    _.each(self.queries, function (query) {\n      if (query.ordered) {\n        query.results = [];\n      } else {\n        query.results.clear();\n      }\n    });\n    if (callback) {\n      Meteor.defer(function () {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n\n  var matcher = new Minimongo.Matcher(selector);\n  var remove = [];\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    if (matcher.documentMatches(doc).result)\n      remove.push(id);\n  });\n\n  var queriesToRecompute = [];\n  var queryRemove = [];\n  for (var i = 0; i < remove.length; i++) {\n    var removeId = remove[i];\n    var removeDoc = self._docs.get(removeId);\n    _.each(self.queries, function (query, qid) {\n      if (query.matcher.documentMatches(removeDoc).result) {\n        if (query.cursor.skip || query.cursor.limit)\n          queriesToRecompute.push(qid);\n        else\n          queryRemove.push({qid: qid, doc: removeDoc});\n      }\n    });\n    self._saveOriginal(removeId, removeDoc);\n    self._docs.remove(removeId);\n  }\n\n  // run live query callbacks _after_ we've removed the documents.\n  _.each(queryRemove, function (remove) {\n    var query = self.queries[remove.qid];\n    if (query) {\n      query.distances && query.distances.remove(remove.doc._id);\n      LocalCollection._removeFromResults(query, remove.doc);\n    }\n  });\n  _.each(queriesToRecompute, function (qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query);\n  });\n  self._observeQueue.drain();\n  result = remove.length;\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// XXX atomicity: if multi is true, and one modification fails, do\n// we rollback the whole operation, or what?\nLocalCollection.prototype.update = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n  if (!options) options = {};\n\n  var matcher = new Minimongo.Matcher(selector);\n\n  // Save the original results of any query that we might need to\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n  // it. (We don't need to save the original results of paused queries because\n  // they already have a resultsSnapshot and we won't be diffing in\n  // _recomputeResults.)\n  var qidToOriginalResults = {};\n  _.each(self.queries, function (query, qid) {\n    // XXX for now, skip/limit implies ordered observe, so query.results is\n    // always an array\n    if ((query.cursor.skip || query.cursor.limit) && ! self.paused)\n      qidToOriginalResults[qid] = EJSON.clone(query.results);\n  });\n  var recomputeQids = {};\n\n  var updateCount = 0;\n\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    var queryResult = matcher.documentMatches(doc);\n    if (queryResult.result) {\n      // XXX Should we save the original even if mod ends up being a no-op?\n      self._saveOriginal(id, doc);\n      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n      ++updateCount;\n      if (!options.multi)\n        return false;  // break\n    }\n    return true;\n  });\n\n  _.each(recomputeQids, function (dummy, qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query, qidToOriginalResults[qid]);\n  });\n  self._observeQueue.drain();\n\n  // If we are doing an upsert, and we didn't modify any documents yet, then\n  // it's time to do an insert. Figure out what document we are inserting, and\n  // generate an id for it.\n  var insertedId;\n  if (updateCount === 0 && options.upsert) {\n    var newDoc = LocalCollection._removeDollarOperators(selector);\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n    if (! newDoc._id && options.insertedId)\n      newDoc._id = options.insertedId;\n    insertedId = self.insert(newDoc);\n    updateCount = 1;\n  }\n\n  // Return the number of affected documents, or in the upsert case, an object\n  // containing the number of affected docs and the id of the doc that was\n  // inserted, if any.\n  var result;\n  if (options._returnObject) {\n    result = {\n      numberAffected: updateCount\n    };\n    if (insertedId !== undefined)\n      result.insertedId = insertedId;\n  } else {\n    result = updateCount;\n  }\n\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\n// true }).\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  return self.update(selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nLocalCollection.prototype._modifyAndNotify = function (\n    doc, mod, recomputeQids, arrayIndices) {\n  var self = this;\n\n  var matched_before = {};\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.ordered) {\n      matched_before[qid] = query.matcher.documentMatches(doc).result;\n    } else {\n      // Because we don't support skip or limit (yet) in unordered queries, we\n      // can just do a direct lookup.\n      matched_before[qid] = query.results.has(doc._id);\n    }\n  }\n\n  var old_doc = EJSON.clone(doc);\n\n  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});\n\n  for (qid in self.queries) {\n    query = self.queries[qid];\n    var before = matched_before[qid];\n    var afterMatch = query.matcher.documentMatches(doc);\n    var after = afterMatch.result;\n    if (after && query.distances && afterMatch.distance !== undefined)\n      query.distances.set(doc._id, afterMatch.distance);\n\n    if (query.cursor.skip || query.cursor.limit) {\n      // We need to recompute any query where the doc may have been in the\n      // cursor's window either before or after the update. (Note that if skip\n      // or limit is set, \"before\" and \"after\" being true do not necessarily\n      // mean that the document is in the cursor's output after skip/limit is\n      // applied... but if they are false, then the document definitely is NOT\n      // in the output. So it's safe to skip recompute if neither before or\n      // after are true.)\n      if (before || after)\n        recomputeQids[qid] = true;\n    } else if (before && !after) {\n      LocalCollection._removeFromResults(query, doc);\n    } else if (!before && after) {\n      LocalCollection._insertInResults(query, doc);\n    } else if (before && after) {\n      LocalCollection._updateInResults(query, doc, old_doc);\n    }\n  }\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results, doc);\n      var next = query.results[i+1];\n      if (next)\n        next = next._id;\n      else\n        next = null;\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id;  // in case callback mutates doc\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id))\n    throw new Error(\"Can't change a doc's _id while updating\");\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc), projectionFn(old_doc));\n\n  if (!query.ordered) {\n    if (!_.isEmpty(changedFields)) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (!_.isEmpty(changedFields))\n    query.changed(doc._id, changedFields);\n  if (!query.sorter)\n    return;\n\n  // just take it out and put it back in again, and see if the index\n  // changes\n  query.results.splice(orig_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results, doc);\n  if (orig_idx !== new_idx) {\n    var next = query.results[new_idx+1];\n    if (next)\n      next = next._id;\n    else\n      next = null;\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\n// Recomputes the results of a query and runs observe callbacks for the\n// difference between the previous results and the current results (unless\n// paused). Used for skip/limit queries.\n//\n// When this is used by insert or remove, it can just use query.results for the\n// old results (and there's no need to pass in oldResults), because these\n// operations don't mutate the documents in the collection. Update needs to pass\n// in an oldResults which was deep-copied before the modifier was applied.\n//\n// oldResults is guaranteed to be ignored if the query is not paused.\nLocalCollection.prototype._recomputeResults = function (query, oldResults) {\n  var self = this;\n  if (! self.paused && ! oldResults)\n    oldResults = query.results;\n  if (query.distances)\n    query.distances.clear();\n  query.results = query.cursor._getRawObjects({\n    ordered: query.ordered, distances: query.distances});\n\n  if (! self.paused) {\n    LocalCollection._diffQueryChanges(\n      query.ordered, oldResults, query.results, query,\n      { projectionFn: query.projectionFn });\n  }\n};\n\n\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered)\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");\n  for (var i = 0; i < query.results.length; i++)\n    if (query.results[i] === doc)\n      return i;\n  throw Error(\"object missing from query\");\n};\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0, rangeLength = array.length;\n\n  while (rangeLength > 0) {\n    var halfRange = Math.floor(rangeLength/2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      rangeLength -= halfRange + 1;\n    } else {\n      rangeLength = halfRange;\n    }\n  }\n  return first;\n};\n\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  var idx = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(idx, 0, value);\n  return idx;\n};\n\n// To track what documents are affected by a piece of code, call saveOriginals()\n// before it and retrieveOriginals() after it. retrieveOriginals returns an\n// object whose keys are the ids of the documents that were affected since the\n// call to saveOriginals(), and the values are equal to the document's contents\n// at the time of saveOriginals. (In the case of an inserted document, undefined\n// is the value.) You must alternate between calls to saveOriginals() and\n// retrieveOriginals().\nLocalCollection.prototype.saveOriginals = function () {\n  var self = this;\n  if (self._savedOriginals)\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\n  self._savedOriginals = new LocalCollection._IdMap;\n};\nLocalCollection.prototype.retrieveOriginals = function () {\n  var self = this;\n  if (!self._savedOriginals)\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");\n\n  var originals = self._savedOriginals;\n  self._savedOriginals = null;\n  return originals;\n};\n\nLocalCollection.prototype._saveOriginal = function (id, doc) {\n  var self = this;\n  // Are we even trying to save originals?\n  if (!self._savedOriginals)\n    return;\n  // Have we previously mutated the original (and so 'doc' is not actually\n  // original)?  (Note the 'has' check rather than truth: we store undefined\n  // here for inserted docs!)\n  if (self._savedOriginals.has(id))\n    return;\n  self._savedOriginals.set(id, EJSON.clone(doc));\n};\n\n// Pause the observers. No callbacks from observers will fire until\n// 'resumeObservers' is called.\nLocalCollection.prototype.pauseObservers = function () {\n  // No-op if already paused.\n  if (this.paused)\n    return;\n\n  // Set the 'paused' flag such that new observer messages don't fire.\n  this.paused = true;\n\n  // Take a snapshot of the query results for each query.\n  for (var qid in this.queries) {\n    var query = this.queries[qid];\n\n    query.resultsSnapshot = EJSON.clone(query.results);\n  }\n};\n\n// Resume the observers. Observers immediately receive change\n// notifications to bring them to the current state of the\n// database. Note that this is not just replaying all the changes that\n// happened during the pause, it is a smarter 'coalesced' diff.\nLocalCollection.prototype.resumeObservers = function () {\n  var self = this;\n  // No-op if not paused.\n  if (!this.paused)\n    return;\n\n  // Unset the 'paused' flag. Make sure to do this first, otherwise\n  // observer methods won't actually fire when we trigger them.\n  this.paused = false;\n\n  for (var qid in this.queries) {\n    var query = self.queries[qid];\n    // Diff the current results against the snapshot and send to observers.\n    // pass the query object for its observer callbacks.\n    LocalCollection._diffQueryChanges(\n      query.ordered, query.resultsSnapshot, query.results, query,\n      { projectionFn: query.projectionFn });\n    query.resultsSnapshot = null;\n  }\n  self._observeQueue.drain();\n};\n\n","// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = function (transform) {\n  if (! transform)\n    return null;\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__)\n    return transform;\n\n  var wrapped = function (doc) {\n    if (!_.has(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error(\"can only transform documents with _id\");\n    }\n\n    var id = doc._id;\n    // XXX consider making tracker a weak dependency and checking Package.tracker here\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n\n    if (!isPlainObject(transformed)) {\n      throw new Error(\"transform must return object\");\n    }\n\n    if (_.has(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error(\"transformed document can't have different _id\");\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n","// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n// arrays.\n// XXX maybe this should be EJSON.isArray\nisArray = function (x) {\n  return _.isArray(x) && !EJSON.isBinary(x);\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nisPlainObject = LocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\nisIndexable = function (x) {\n  return isArray(x) || isPlainObject(x);\n};\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nisOperatorObject = function (valueSelector, inconsistentOK) {\n  if (!isPlainObject(valueSelector))\n    return false;\n\n  var theseAreOperators = undefined;\n  _.each(valueSelector, function (value, selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK)\n        throw new Error(\"Inconsistent operator: \" +\n                        JSON.stringify(valueSelector));\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators;  // {} has no operators\n};\n\n\n// string can be converted to integer\nisNumericKey = function (s) {\n  return /^[0-9]+$/.test(s);\n};\n","// The minimongo selector compiler!\n\n// Terminology:\n//  - a \"selector\" is the EJSON object representing a selector\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a \"result object\" is an object with a \"result\" field and maybe\n//    distance and arrayIndices.\n//  - a \"branched value\" is an object with a \"value\" field and maybe\n//    \"dontIterate\" and \"arrayIndices\".\n//  - a \"document\" is a top-level object that can be stored in a collection.\n//  - a \"lookup function\" is a function that takes in a document and returns\n//    an array of \"branched values\".\n//  - a \"branched matcher\" maps from an array of branched values to a result\n//    object.\n//  - an \"element matcher\" maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nMinimongo.Matcher = function (selector) {\n  var self = this;\n  // A set (object mapping string -> *) of all of the document paths looked\n  // at by the selector. Also includes the empty string if it may look at any\n  // path (eg, $where).\n  self._paths = {};\n  // Set to true if compilation finds a $near.\n  self._hasGeoQuery = false;\n  // Set to true if compilation finds a $where.\n  self._hasWhere = false;\n  // Set to false if compilation finds anything other than a simple equality or\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\n  // scalars as operands.\n  self._isSimple = true;\n  // Set to a dummy document which always matches this Matcher. Or set to null\n  // if such document is too hard to find.\n  self._matchingDocument = undefined;\n  // A clone of the original selector. It may just be a function if the user\n  // passed in a function; otherwise is definitely an object (eg, IDs are\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n  // Sorter._useWithMatcher.\n  self._selector = null;\n  self._docMatcher = self._compileSelector(selector);\n};\n\n_.extend(Minimongo.Matcher.prototype, {\n  documentMatches: function (doc) {\n    if (!doc || typeof doc !== \"object\") {\n      throw Error(\"documentMatches needs a document\");\n    }\n    return this._docMatcher(doc);\n  },\n  hasGeoQuery: function () {\n    return this._hasGeoQuery;\n  },\n  hasWhere: function () {\n    return this._hasWhere;\n  },\n  isSimple: function () {\n    return this._isSimple;\n  },\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector: function (selector) {\n    var self = this;\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      self._isSimple = false;\n      self._selector = selector;\n      self._recordPathUsed('');\n      return function (doc) {\n        return {result: !!selector.call(doc)};\n      };\n    }\n\n    // shorthand -- scalars match _id\n    if (LocalCollection._selectorIsId(selector)) {\n      self._selector = {_id: selector};\n      self._recordPathUsed('_id');\n      return function (doc) {\n        return {result: EJSON.equals(doc._id, selector)};\n      };\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || (('_id' in selector) && !selector._id)) {\n      self._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (typeof(selector) === 'boolean' || isArray(selector) ||\n        EJSON.isBinary(selector))\n      throw new Error(\"Invalid selector: \" + selector);\n\n    self._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, self, {isRoot: true});\n  },\n  _recordPathUsed: function (path) {\n    this._paths[path] = true;\n  },\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths: function () {\n    return _.keys(this._paths);\n  }\n});\n\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nvar compileDocumentSelector = function (docSelector, matcher, options) {\n  options = options || {};\n  var docMatchers = [];\n  _.each(docSelector, function (subSelector, key) {\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!_.has(LOGICAL_OPERATORS, key))\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      matcher._isSimple = false;\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,\n                                              options.inElemMatch));\n    } else {\n      // Record this path, but only if we aren't in an elemMatcher, since in an\n      // elemMatch this is a path inside an object in an array, not in the doc\n      // root.\n      if (!options.inElemMatch)\n        matcher._recordPathUsed(key);\n      var lookUpByIndex = makeLookupFunction(key);\n      var valueMatcher =\n        compileValueSelector(subSelector, matcher, options.isRoot);\n      docMatchers.push(function (doc) {\n        var branchValues = lookUpByIndex(doc);\n        return valueMatcher(branchValues);\n      });\n    }\n  });\n\n  return andDocumentMatchers(docMatchers);\n};\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector));\n  } else if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  } else {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(valueSelector));\n  }\n};\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nvar convertElementMatcherToBranchedMatcher = function (\n    elementMatcher, options) {\n  options = options || {};\n  return function (branches) {\n    var expanded = branches;\n    if (!options.dontExpandLeafArrays) {\n      expanded = expandArraysInBranches(\n        branches, options.dontIncludeLeafArrays);\n    }\n    var ret = {};\n    ret.result = _.any(expanded, function (element) {\n      var matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices)\n          element.arrayIndices = [matched];\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices)\n        ret.arrayIndices = element.arrayIndices;\n\n      return matched;\n    });\n    return ret;\n  };\n};\n\n// Takes a RegExp object and returns an element matcher.\nregexpElementMatcher = function (regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      // Comparing two regexps means seeing if the regexps are identical\n      // (really!). Underscore knows how.\n      return _.isEqual(value, regexp);\n    }\n    // Regexps only work against strings.\n    if (typeof value !== 'string')\n      return false;\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n};\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nequalityElementMatcher = function (elementSelector) {\n  if (isOperatorObject(elementSelector))\n    throw Error(\"Can't create equalityValueSelector for operator object\");\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  if (elementSelector == null) {  // undefined or null\n    return function (value) {\n      return value == null;  // undefined or null\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n};\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n\n  var operatorMatchers = [];\n  _.each(valueSelector, function (operand, operator) {\n    // XXX we should actually implement $eq, which is new in 2.6\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&\n      _.isNumber(operand);\n    var simpleInequality = operator === '$ne' && !_.isObject(operand);\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&\n      _.isArray(operand) && !_.any(operand, _.isObject);\n\n    if (! (operator === '$eq' || simpleRange ||\n           simpleInclusion || simpleInequality)) {\n      matcher._isSimple = false;\n    }\n\n    if (_.has(VALUE_OPERATORS, operator)) {\n      operatorMatchers.push(\n        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      operatorMatchers.push(\n        convertElementMatcherToBranchedMatcher(\n          options.compileElementSelector(\n            operand, valueSelector, matcher),\n          options));\n    } else {\n      throw new Error(\"Unrecognized operator: \" + operator);\n    }\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n};\n\nvar compileArrayOfDocumentSelectors = function (\n    selectors, matcher, inElemMatch) {\n  if (!isArray(selectors) || _.isEmpty(selectors))\n    throw Error(\"$and/$or/$nor must be nonempty array\");\n  return _.map(selectors, function (subSelector) {\n    if (!isPlainObject(subSelector))\n      throw Error(\"$or/$and/$nor entries need to be full objects\");\n    return compileDocumentSelector(\n      subSelector, matcher, {inElemMatch: inElemMatch});\n  });\n};\n\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return andDocumentMatchers(matchers);\n  },\n\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1)\n      return matchers[0];\n\n    return function (doc) {\n      var result = _.any(matchers, function (f) {\n        return f(doc).result;\n      });\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result: result};\n    };\n  },\n\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = _.all(matchers, function (f) {\n        return !f(doc).result;\n      });\n      // Never set arrayIndices, because we only match if nothing in particular\n      // \"matched\" (and because this is consistent with MongoDB).\n      return {result: result};\n    };\n  },\n\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add \"return\"; not sure exactly what it is.\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);\n    }\n    return function (doc) {\n      // We make the document available as both `this` and `obj`.\n      // XXX not sure what we should do if this throws\n      return {result: selectorValue.call(doc, doc)};\n    };\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {result: true};\n    };\n  }\n};\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nvar invertBranchedMatcher = function (branchedMatcher) {\n  return function (branchValues) {\n    var invertMe = branchedMatcher(branchValues);\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !invertMe.result};\n  };\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nvar VALUE_OPERATORS = {\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!_.has(valueSelector, '$regex'))\n      throw Error(\"$options needs a $regex\");\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near)\n      throw Error(\"$maxDistance needs a $near\");\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!isArray(operand))\n      throw Error(\"$all requires array\");\n    // Not sure why, but this seems to be what MongoDB does.\n    if (_.isEmpty(operand))\n      return nothingMatcher;\n\n    var branchedMatchers = [];\n    _.each(operand, function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion))\n        throw Error(\"no $ expressions in $all\");\n      // This is always a regexp or equality selector.\n      branchedMatchers.push(compileValueSelector(criterion, matcher));\n    });\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot)\n      throw Error(\"$near can't be inside another $ operator\");\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property.\n\n    var maxDistance, point, distance;\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value || !value.type)\n          return null;\n        if (value.type === \"Point\") {\n          return GeoJSON.pointDistance(point, value);\n        } else {\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n            ? 0 : maxDistance + 1;\n        }\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n      if (!isArray(operand) && !isPlainObject(operand))\n        throw Error(\"$near argument must be coordinate pair or GeoJSON\");\n      point = pointToArray(operand);\n      distance = function (value) {\n        if (!isArray(value) && !isPlainObject(value))\n          return null;\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      branchedValues = expandArraysInBranches(branchedValues);\n      var result = {result: false};\n      _.each(branchedValues, function (branch) {\n        var curDistance = distance(branch.value);\n        // Skip branches that aren't real points or are too far away.\n        if (curDistance === null || curDistance > maxDistance)\n          return;\n        // Skip anything that's a tie.\n        if (result.distance !== undefined && result.distance <= curDistance)\n          return;\n        result.result = true;\n        result.distance = curDistance;\n        if (!branch.arrayIndices)\n          delete result.arrayIndices;\n        else\n          result.arrayIndices = branch.arrayIndices;\n      });\n      return result;\n    };\n  }\n};\n\n// Helpers for $near.\nvar distanceCoordinatePairs = function (a, b) {\n  a = pointToArray(a);\n  b = pointToArray(b);\n  var x = a[0] - b[0];\n  var y = a[1] - b[1];\n  if (_.isNaN(x) || _.isNaN(y))\n    return null;\n  return Math.sqrt(x * x + y * y);\n};\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nvar pointToArray = function (point) {\n  return _.map(point, _.identity);\n};\n\n// Helper for $lt/$gt/$lte/$gte.\nvar makeInequality = function (cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (isArray(operand)) {\n        return function () {\n          return false;\n        };\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined)\n        operand = null;\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined)\n          value = null;\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType)\n          return false;\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n};\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(isArray(operand) && operand.length === 2\n            && typeof(operand[0]) === 'number'\n            && typeof(operand[1]) === 'number')) {\n        throw Error(\"argument to $mod must be an array of two numbers\");\n      }\n      // XXX could require to be ints or round or something\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!isArray(operand))\n        throw Error(\"$in needs an array\");\n\n      var elementMatchers = [];\n      _.each(operand, function (option) {\n        if (option instanceof RegExp)\n          elementMatchers.push(regexpElementMatcher(option));\n        else if (isOperatorObject(option))\n          throw Error(\"cannot nest $ under $in\");\n        else\n          elementMatchers.push(equalityElementMatcher(option));\n      });\n\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined)\n          value = null;\n        return _.any(elementMatchers, function (e) {\n          return e(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error(\"$size needs a number\");\n      }\n      return function (value) {\n        return isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand !== 'number')\n        throw Error(\"$type needs a number\");\n      return function (value) {\n        return value !== undefined\n          && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp))\n        throw Error(\"$regex has to be a string or RegExp\");\n\n      var regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself. (See also\n        // Mongo.Collection._rewriteSelector.)\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options))\n          throw new Error(\"Only the i, m, and g regexp options are supported\");\n\n        var regexSource = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(regexSource, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isPlainObject(operand))\n        throw Error(\"$elemMatch need an object\");\n\n      var subMatcher, isDocMatcher;\n      if (isOperatorObject(operand, true)) {\n        subMatcher = compileValueSelector(operand, matcher);\n        isDocMatcher = false;\n      } else {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher,\n                                             {inElemMatch: true});\n        isDocMatcher = true;\n      }\n\n      return function (value) {\n        if (!isArray(value))\n          return false;\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement))\n              return false;\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result)\n            return i;   // specially understood to mean \"use as arrayIndices\"\n        }\n        return false;\n      };\n    }\n  }\n};\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we \"branch\". When we \"branch\", if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively \"branch\" over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like \"implicit\", but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nmakeLookupFunction = function (key, options) {\n  options = options || {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var firstPartIsNumeric = isNumericKey(firstPart);\n  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);\n  var lookupRest;\n  if (parts.length > 1) {\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));\n  }\n\n  var omitUnnecessaryFields = function (retVal) {\n    if (!retVal.dontIterate)\n      delete retVal.dontIterate;\n    if (retVal.arrayIndices && !retVal.arrayIndices.length)\n      delete retVal.arrayIndices;\n    return retVal;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return function (doc, arrayIndices) {\n    if (!arrayIndices)\n      arrayIndices = [];\n\n    if (isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(firstPartIsNumeric && firstPart < doc.length))\n        return [];\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    var firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as \"don't iterate\".\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        value: firstLevel,\n        dontIterate: isArray(doc) && isArray(firstLevel),\n        arrayIndices: arrayIndices})];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (isArray(doc))\n        return [];\n      return [omitUnnecessaryFields({value: undefined,\n                                      arrayIndices: arrayIndices})];\n    }\n\n    var result = [];\n    var appendToResult = function (more) {\n      Array.prototype.push.apply(result, more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also \"branch\": try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // \"look up this index\" in that case, not \"also look up this index in all\n    // the elements of the array\".\n    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {\n      _.each(firstLevel, function (branch, arrayIndex) {\n        if (isPlainObject(branch)) {\n          appendToResult(lookupRest(\n            branch,\n            arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n};\nMinimongoTest.makeLookupFunction = makeLookupFunction;\n\nexpandArraysInBranches = function (branches, skipTheArrays) {\n  var branchesOut = [];\n  _.each(branches, function (branch) {\n    var thisIsArray = isArray(branch.value);\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        value: branch.value,\n        arrayIndices: branch.arrayIndices\n      });\n    }\n    if (thisIsArray && !branch.dontIterate) {\n      _.each(branch.value, function (leaf, i) {\n        branchesOut.push({\n          value: leaf,\n          arrayIndices: (branch.arrayIndices || []).concat(i)\n        });\n      });\n    }\n  });\n  return branchesOut;\n};\n\nvar nothingMatcher = function (docOrBranchedValues) {\n  return {result: false};\n};\n\nvar everythingMatcher = function (docOrBranchedValues) {\n  return {result: true};\n};\n\n\n// NB: We are cheating and using this function to implement \"AND\" for both\n// \"document matchers\" and \"branched matchers\". They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of \"branched values\".\nvar andSomeMatchers = function (subMatchers) {\n  if (subMatchers.length === 0)\n    return everythingMatcher;\n  if (subMatchers.length === 1)\n    return subMatchers[0];\n\n  return function (docOrBranches) {\n    var ret = {};\n    ret.result = _.all(subMatchers, function (f) {\n      var subResult = f(docOrBranches);\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result && subResult.distance !== undefined\n          && ret.distance === undefined) {\n        ret.distance = subResult.distance;\n      }\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        ret.arrayIndices = subResult.arrayIndices;\n      }\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!ret.result) {\n      delete ret.distance;\n      delete ret.arrayIndices;\n    }\n    return ret;\n  };\n};\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\n\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n\n  _type: function (v) {\n    if (typeof v === \"number\")\n      return 1;\n    if (typeof v === \"string\")\n      return 2;\n    if (typeof v === \"boolean\")\n      return 8;\n    if (isArray(v))\n      return 4;\n    if (v === null)\n      return 10;\n    if (v instanceof RegExp)\n      // note that typeof(/x/) === \"object\"\n      return 11;\n    if (typeof v === \"function\")\n      return 13;\n    if (v instanceof Date)\n      return 9;\n    if (EJSON.isBinary(v))\n      return 5;\n    if (v instanceof MongoID.ObjectID)\n      return 7;\n    return 3; // object\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of\n  // different types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1,  // (not a type)\n            1,   // number\n            2,   // string\n            3,   // object\n            4,   // array\n            5,   // binary\n            -1,  // deprecated\n            6,   // ObjectID\n            7,   // bool\n            8,   // Date\n            0,   // null\n            9,   // RegExp\n            -1,  // deprecated\n            100, // JS code\n            2,   // deprecated (symbol)\n            100, // JS code\n            1,   // 32-bit int\n            8,   // Mongo timestamp\n            1    // 64-bit int\n           ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined)\n      return b === undefined ? 0 : -1;\n    if (b === undefined)\n      return 1;\n    var ta = LocalCollection._f._type(a);\n    var tb = LocalCollection._f._type(b);\n    var oa = LocalCollection._f._typeorder(ta);\n    var ob = LocalCollection._f._typeorder(tb);\n    if (oa !== ob)\n      return oa < ob ? -1 : 1;\n    if (ta !== tb)\n      // XXX need to implement this if we implement Symbol or integers, or\n      // Timestamp\n      throw Error(\"Missing type coercion logic in _cmp\");\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : (a === b ? 0 : 1);\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      var to_array = function (obj) {\n        var ret = [];\n        for (var key in obj) {\n          ret.push(key);\n          ret.push(obj[key]);\n        }\n        return ret;\n      };\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\n    }\n    if (ta === 4) { // Array\n      for (var i = 0; ; i++) {\n        if (i === a.length)\n          return (i === b.length) ? 0 : -1;\n        if (i === b.length)\n          return 1;\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0)\n          return s;\n      }\n    }\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length)\n        return a.length - b.length;\n      for (i = 0; i < a.length; i++) {\n        if (a[i] < b[i])\n          return -1;\n        if (a[i] > b[i])\n          return 1;\n      }\n      return 0;\n    }\n    if (ta === 8) { // boolean\n      if (a) return b ? 0 : 1;\n      return b ? -1 : 0;\n    }\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\n    throw Error(\"Unknown type to sort\");\n  }\n};\n\n// Oddball function used by upsert.\nLocalCollection._removeDollarOperators = function (selector) {\n  var selectorDoc = {};\n  for (var k in selector)\n    if (k.substr(0, 1) !== '$')\n      selectorDoc[k] = selector[k];\n  return selectorDoc;\n};\n","// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nMinimongo.Sorter = function (spec, options) {\n  var self = this;\n  options = options || {};\n\n  self._sortSpecParts = [];\n\n  var addSpecPart = function (path, ascending) {\n    if (!path)\n      throw Error(\"sort keys must be non-empty\");\n    if (path.charAt(0) === '$')\n      throw Error(\"unsupported sort key: \" + path);\n    self._sortSpecParts.push({\n      path: path,\n      lookup: makeLookupFunction(path, {forSort: true}),\n      ascending: ascending\n    });\n  };\n\n  if (spec instanceof Array) {\n    for (var i = 0; i < spec.length; i++) {\n      if (typeof spec[i] === \"string\") {\n        addSpecPart(spec[i], true);\n      } else {\n        addSpecPart(spec[i][0], spec[i][1] !== \"desc\");\n      }\n    }\n  } else if (typeof spec === \"object\") {\n    _.each(spec, function (value, key) {\n      addSpecPart(key, value >= 0);\n    });\n  } else {\n    throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n  }\n\n  // To implement affectedByModifier, we piggy-back on top of Matcher's\n  // affectedByModifier code; we create a selector that is affected by the same\n  // modifiers as this sort order. This is only implemented on the server.\n  if (self.affectedByModifier) {\n    var selector = {};\n    _.each(self._sortSpecParts, function (spec) {\n      selector[spec.path] = 1;\n    });\n    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n  }\n\n  self._keyComparator = composeComparators(\n    _.map(self._sortSpecParts, function (spec, i) {\n      return self._keyFieldComparator(i);\n    }));\n\n  // If you specify a matcher for this Sorter, _keyFilter may be set to a\n  // function which selects whether or not a given \"sort key\" (tuple of values\n  // for the different sort spec fields) is compatible with the selector.\n  self._keyFilter = null;\n  options.matcher && self._useWithMatcher(options.matcher);\n};\n\n// In addition to these methods, sorter_project.js defines combineIntoProjection\n// on the server only.\n_.extend(Minimongo.Sorter.prototype, {\n  getComparator: function (options) {\n    var self = this;\n\n    // If we have no distances, just use the comparator from the source\n    // specification (which defaults to \"everything is equal\".\n    if (!options || !options.distances) {\n      return self._getBaseComparator();\n    }\n\n    var distances = options.distances;\n\n    // Return a comparator which first tries the sort specification, and if that\n    // says \"it's equal\", breaks ties using $near distances.\n    return composeComparators([self._getBaseComparator(), function (a, b) {\n      if (!distances.has(a._id))\n        throw Error(\"Missing distance for \" + a._id);\n      if (!distances.has(b._id))\n        throw Error(\"Missing distance for \" + b._id);\n      return distances.get(a._id) - distances.get(b._id);\n    }]);\n  },\n\n  _getPaths: function () {\n    var self = this;\n    return _.pluck(self._sortSpecParts, 'path');\n  },\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc: function (doc) {\n    var self = this;\n    var minKey = null;\n\n    self._generateKeysFromDoc(doc, function (key) {\n      if (!self._keyCompatibleWithSelector(key))\n        return;\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n      if (self._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null)\n      throw Error(\"sort selector found no keys in doc?\");\n    return minKey;\n  },\n\n  _keyCompatibleWithSelector: function (key) {\n    var self = this;\n    return !self._keyFilter || self._keyFilter(key);\n  },\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc: function (doc, cb) {\n    var self = this;\n\n    if (self._sortSpecParts.length === 0)\n      throw new Error(\"can't generate keys without a spec\");\n\n    // maps index -> ({'' -> value} or {path -> value})\n    var valuesByIndexAndPath = [];\n\n    var pathFromIndices = function (indices) {\n      return indices.join(',') + ',';\n    };\n\n    var knownPaths = null;\n\n    _.each(self._sortSpecParts, function (spec, whichField) {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      var branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length)\n        branches = [{value: null}];\n\n      var usedPaths = false;\n      valuesByIndexAndPath[whichField] = {};\n      _.each(branches, function (branch) {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1)\n            throw Error(\"multiple branches but no array used?\");\n          valuesByIndexAndPath[whichField][''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n        var path = pathFromIndices(branch.arrayIndices);\n        if (_.has(valuesByIndexAndPath[whichField], path))\n          throw Error(\"duplicate path: \" + path);\n        valuesByIndexAndPath[whichField][path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !_.has(knownPaths, path)) {\n          throw Error(\"cannot index parallel arrays\");\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!_.has(valuesByIndexAndPath[whichField], '') &&\n            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {\n          throw Error(\"cannot index parallel arrays!\");\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n        _.each(valuesByIndexAndPath[whichField], function (x, path) {\n          knownPaths[path] = true;\n        });\n      }\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      var soleKey = _.map(valuesByIndexAndPath, function (values) {\n        if (!_.has(values, ''))\n          throw Error(\"no value in sole key case?\");\n        return values[''];\n      });\n      cb(soleKey);\n      return;\n    }\n\n    _.each(knownPaths, function (x, path) {\n      var key = _.map(valuesByIndexAndPath, function (values) {\n        if (_.has(values, ''))\n          return values[''];\n        if (!_.has(values, path))\n          throw Error(\"missing path?\");\n        return values[path];\n      });\n      cb(key);\n    });\n  },\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys: function (key1, key2) {\n    var self = this;\n    if (key1.length !== self._sortSpecParts.length ||\n        key2.length !== self._sortSpecParts.length) {\n      throw Error(\"Key has wrong length\");\n    }\n\n    return self._keyComparator(key1, key2);\n  },\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator: function (i) {\n    var self = this;\n    var invert = !self._sortSpecParts[i].ascending;\n    return function (key1, key2) {\n      var compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      if (invert)\n        compare = -compare;\n      return compare;\n    };\n  },\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator: function () {\n    var self = this;\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!self._sortSpecParts.length) {\n      return function (doc1, doc2) {\n        return 0;\n      };\n    }\n\n    return function (doc1, doc2) {\n      var key1 = self._getMinKeyFromDoc(doc1);\n      var key2 = self._getMinKeyFromDoc(doc2);\n      return self._compareKeys(key1, key2);\n    };\n  },\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher: function (matcher) {\n    var self = this;\n\n    if (self._keyFilter)\n      throw Error(\"called _useWithMatcher twice?\");\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (_.isEmpty(self._sortSpecParts))\n      return;\n\n    var selector = matcher._selector;\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function)\n      return;\n\n    var constraintsByPath = {};\n    _.each(self._sortSpecParts, function (spec, i) {\n      constraintsByPath[spec.path] = [];\n    });\n\n    _.each(selector, function (subSelector, key) {\n      // XXX support $and and $or\n\n      var constraints = constraintsByPath[key];\n      if (!constraints)\n        return;\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline)\n          return;\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        _.each(subSelector, function (operand, operator) {\n          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand));\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand, subSelector));\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))\n      return;\n\n    self._keyFilter = function (key) {\n      return _.all(self._sortSpecParts, function (specPart, index) {\n        return _.all(constraintsByPath[specPart.path], function (f) {\n          return f(key[index]);\n        });\n      });\n    };\n  }\n});\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nvar composeComparators = function (comparatorArray) {\n  return function (a, b) {\n    for (var i = 0; i < comparatorArray.length; ++i) {\n      var compare = comparatorArray[i](a, b);\n      if (compare !== 0)\n        return compare;\n    }\n    return 0;\n  };\n};\n","// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (_.isArray(doc))\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });\n\n    var res = details.including ? {} : EJSON.clone(doc);\n    _.each(ruleTree, function (rule, key) {\n      if (!_.has(doc, key))\n        return;\n      if (_.isObject(rule)) {\n        // For sub-objects/subsets we branch\n        if (_.isObject(doc[key]))\n          res[key] = transform(doc[key], rule);\n        // Otherwise we don't even touch this subfield\n      } else if (details.including)\n        res[key] = EJSON.clone(doc[key]);\n      else\n        delete res[key];\n    });\n\n    return res;\n  };\n\n  return function (obj) {\n    var res = transform(obj, details.tree);\n\n    if (_idProjection && _.has(obj, '_id'))\n      res._id = obj._id;\n    if (!_idProjection && _.has(res, '_id'))\n      delete res._id;\n    return res;\n  };\n};\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nprojectionDetails = function (fields) {\n  // Find the non-_id keys (_id is handled specially because it is included unless\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = _.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (fieldsKeys.length > 0 &&\n      !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(_.contains(fieldsKeys, '_id') && fields['_id']))\n    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });\n\n  var including = null; // Unknown\n\n  _.each(fieldsKeys, function (keyPath) {\n    var rule = !!fields[keyPath];\n    if (including === null)\n      including = rule;\n    if (including !== rule)\n      // This error message is copied from MongoDB shell\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\n  });\n\n\n  var projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    function (path) { return including; },\n    function (node, path, fullPath) {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\n      //\n      // Note, how second time the return set of keys is different.\n\n      var currentPath = fullPath;\n      var anotherPath = path;\n      throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +\n                           \" found in fields option, using both of them may trigger \" +\n                           \"unexpected behavior. Did you mean to use only one of them?\");\n    });\n\n  return {\n    tree: projectionRulesTree,\n    including: including\n  };\n};\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\npathsToTree = function (paths, newLeafFn, conflictFn, tree) {\n  tree = tree || {};\n  _.each(paths, function (keyPath) {\n    var treePos = tree;\n    var pathArr = keyPath.split('.');\n\n    // use _.all just for iteration with break\n    var success = _.all(pathArr.slice(0, -1), function (key, idx) {\n      if (!_.has(treePos, key))\n        treePos[key] = {};\n      else if (!_.isObject(treePos[key])) {\n        treePos[key] = conflictFn(treePos[key],\n                                  pathArr.slice(0, idx + 1).join('.'),\n                                  keyPath);\n        // break out of loop if we are failing for this path\n        if (!_.isObject(treePos[key]))\n          return false;\n      }\n\n      treePos = treePos[key];\n      return true;\n    });\n\n    if (success) {\n      var lastKey = _.last(pathArr);\n      if (!_.has(treePos, lastKey))\n        treePos[lastKey] = newLeafFn(keyPath);\n      else\n        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);\n    }\n  });\n\n  return tree;\n};\n\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (!_.isObject(fields) || _.isArray(fields))\n    throw MinimongoError(\"fields option must be an object\");\n\n  _.each(fields, function (val, keyPath) {\n    if (_.contains(keyPath.split('.'), '$'))\n      throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");\n    if (typeof val === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0)\n      throw MinimongoError(\"Minimongo doesn't support operators in projections yet.\");\n    if (_.indexOf([1, 0, true, false], val) === -1)\n      throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\n  });\n};\n","// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, mod, options) {\n  options = options || {};\n  if (!isPlainObject(mod))\n    throw MinimongoError(\"Modifier must be an object\");\n\n  // Make sure the caller can't mutate our data structures.\n  mod = EJSON.clone(mod);\n\n  var isModifier = isOperatorObject(mod);\n\n  var newDoc;\n\n  if (!isModifier) {\n    if (mod._id && !EJSON.equals(doc._id, mod._id))\n      throw MinimongoError(\"Cannot change the _id of a document\");\n\n    // replace the whole document\n    for (var k in mod) {\n      if (/\\./.test(k))\n        throw MinimongoError(\n          \"When replacing document, field name may not contain '.'\");\n    }\n    newDoc = mod;\n  } else {\n    // apply modifiers to the doc.\n    newDoc = EJSON.clone(doc);\n\n    _.each(mod, function (operand, op) {\n      var modFunc = MODIFIERS[op];\n      // Treat $setOnInsert as $set if this is an insert.\n      if (options.isInsert && op === '$setOnInsert')\n        modFunc = MODIFIERS['$set'];\n      if (!modFunc)\n        throw MinimongoError(\"Invalid modifier specified \" + op);\n      _.each(operand, function (arg, keypath) {\n        if (keypath === '') {\n          throw MinimongoError(\"An empty update path is not valid.\");\n        }\n\n        if (keypath === '_id') {\n          throw MinimongoError(\"Mod on _id not allowed\");\n        }\n\n        var keyparts = keypath.split('.');\n\n        if (! _.all(keyparts, _.identity)) {\n          throw MinimongoError(\n            \"The update path '\" + keypath +\n              \"' contains an empty field name, which is not allowed.\");\n        }\n\n        var noCreate = _.has(NO_CREATE_MODIFIERS, op);\n        var forbidArray = (op === \"$rename\");\n        var target = findModTarget(newDoc, keyparts, {\n          noCreate: NO_CREATE_MODIFIERS[op],\n          forbidArray: (op === \"$rename\"),\n          arrayIndices: options.arrayIndices\n        });\n        var field = keyparts.pop();\n        modFunc(target, field, arg, keypath, newDoc);\n      });\n    });\n  }\n\n  // move new document into place.\n  _.each(_.keys(doc), function (k) {\n    // Note: this used to be for (var k in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (k !== '_id')\n      delete doc[k];\n  });\n  _.each(newDoc, function (v, k) {\n    doc[k] = v;\n  });\n};\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nvar findModTarget = function (doc, keyparts, options) {\n  options = options || {};\n  var usedArrayIndex = false;\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = (i === keyparts.length - 1);\n    var keypart = keyparts[i];\n    var indexable = isIndexable(doc);\n    if (!indexable) {\n      if (options.noCreate)\n        return undefined;\n      var e = MinimongoError(\n        \"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray)\n        return null;\n      if (keypart === '$') {\n        if (usedArrayIndex)\n          throw MinimongoError(\"Too many positional (i.e. '$') elements\");\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\"The positional operator did not find the \" +\n                               \"match needed from the query\");\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate)\n          return undefined;\n        throw MinimongoError(\n          \"can't append to array using string field name [\"\n                    + keypart + \"]\");\n      }\n      if (last)\n        // handle 'a.01'\n        keyparts[i] = keypart;\n      if (options.noCreate && keypart >= doc.length)\n        return undefined;\n      while (doc.length < keypart)\n        doc.push(null);\n      if (!last) {\n        if (doc.length === keypart)\n          doc.push({});\n        else if (typeof doc[keypart] !== \"object\")\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] +\n                      \"' of list value \" + JSON.stringify(doc[keypart]));\n      }\n    } else {\n      if (keypart.length && keypart.substr(0, 1) === '$')\n        throw MinimongoError(\"can't set field named \" + keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate)\n          return undefined;\n        if (!last)\n          doc[keypart] = {};\n      }\n    }\n\n    if (last)\n      return doc;\n    doc = doc[keypart];\n  }\n\n  // notreached\n};\n\nvar NO_CREATE_MODIFIERS = {\n  $unset: true,\n  $pop: true,\n  $rename: true,\n  $pull: true,\n  $pullAll: true\n};\n\nvar MODIFIERS = {\n  $inc: function (target, field, arg) {\n    if (typeof arg !== \"number\")\n      throw MinimongoError(\"Modifier $inc allowed for numbers only\");\n    if (field in target) {\n      if (typeof target[field] !== \"number\")\n        throw MinimongoError(\"Cannot apply $inc modifier to non-number\");\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set: function (target, field, arg) {\n    if (!_.isObject(target)) { // not an array or an object\n      var e = MinimongoError(\"Cannot set property on non-object field\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (target === null) {\n      var e = MinimongoError(\"Cannot set property on null\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target)\n          target[field] = null;\n      } else\n        delete target[field];\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined)\n      target[field] = [];\n    if (!(target[field] instanceof Array))\n      throw MinimongoError(\"Cannot apply $push modifier to non-array\");\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array))\n      throw MinimongoError(\"$each must be an array\");\n\n    // Parse $position\n    var position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== \"number\")\n        throw MinimongoError(\"$position must be a numeric value\");\n      // XXX should check to make sure integer\n      if (arg.$position < 0)\n        throw MinimongoError(\"$position in $push must be zero or positive\");\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== \"number\")\n        throw MinimongoError(\"$slice must be a numeric value\");\n      // XXX should check to make sure integer\n      if (arg.$slice > 0)\n        throw MinimongoError(\"$slice in $push must be zero or negative\");\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined)\n        throw MinimongoError(\"$sort requires $slice to be present\");\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      for (var i = 0; i < toPush.length; i++) {\n        if (LocalCollection._f._type(toPush[i]) !== 3) {\n          throw MinimongoError(\"$push like modifiers using $sort \" +\n                      \"require all elements to be objects\");\n        }\n      }\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      for (var j = 0; j < toPush.length; j++)\n        target[field].push(toPush[j]);\n    } else {\n      var spliceArguments = [position, 0];\n      for (var j = 0; j < toPush.length; j++)\n        spliceArguments.push(toPush[j]);\n      Array.prototype.splice.apply(target[field], spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction)\n      target[field].sort(sortFunction);\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0)\n        target[field] = [];  // differs from Array.slice!\n      else\n        target[field] = target[field].slice(slice);\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    var x = target[field];\n    if (x === undefined)\n      target[field] = arg;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pushAll modifier to non-array\");\n    else {\n      for (var i = 0; i < arg.length; i++)\n        x.push(arg[i]);\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n    if (typeof arg === \"object\") {\n      //check if first key is '$each'\n      for (var k in arg) {\n        if (k === \"$each\")\n          isEach = true;\n        break;\n      }\n    }\n    var values = isEach ? arg[\"$each\"] : [arg];\n    var x = target[field];\n    if (x === undefined)\n      target[field] = values;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $addToSet modifier to non-array\");\n    else {\n      _.each(values, function (value) {\n        for (var i = 0; i < x.length; i++)\n          if (LocalCollection._f._equal(value, x[i]))\n            return;\n        x.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pop modifier to non-array\");\n    else {\n      if (typeof arg === 'number' && arg < 0)\n        x.splice(0, 1);\n      else\n        x.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = [];\n      if (arg != null && typeof arg === \"object\" && !(arg instanceof Array)) {\n        // XXX would be much nicer to compile this once, rather than\n        // for each document we modify.. but usually we're not\n        // modifying that many documents, so we'll let it slide for\n        // now\n\n        // XXX Minimongo.Matcher isn't up for the job, because we need\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n        // like {$gt: 4} is not normally a complete selector.\n        // same issue as $elemMatch possibly?\n        var matcher = new Minimongo.Matcher(arg);\n        for (var i = 0; i < x.length; i++)\n          if (!matcher.documentMatches(x[i]).result)\n            out.push(x[i]);\n      } else {\n        for (var i = 0; i < x.length; i++)\n          if (!LocalCollection._f._equal(x[i], arg))\n            out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = [];\n      for (var i = 0; i < x.length; i++) {\n        var exclude = false;\n        for (var j = 0; j < arg.length; j++) {\n          if (LocalCollection._f._equal(x[i], arg[j])) {\n            exclude = true;\n            break;\n          }\n        }\n        if (!exclude)\n          out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    if (keypath === arg)\n      // no idea why mongo has this restriction..\n      throw MinimongoError(\"$rename source must differ from target\");\n    if (target === null)\n      throw MinimongoError(\"$rename source field invalid\");\n    if (typeof arg !== \"string\")\n      throw MinimongoError(\"$rename target must be a string\");\n    if (target === undefined)\n      return;\n    var v = target[field];\n    delete target[field];\n\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {forbidArray: true});\n    if (target2 === null)\n      throw MinimongoError(\"$rename target field invalid\");\n    var field2 = keyparts.pop();\n    target2[field2] = v;\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError(\"$bit is not supported\");\n  }\n};\n","// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\n\n\nLocalCollection._diffQueryOrderedChanges =\n  function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n","LocalCollection._IdMap = function () {\n  var self = this;\n  IdMap.call(self, MongoID.idStringify, MongoID.idParse);\n};\n\nMeteor._inherits(LocalCollection._IdMap, IdMap);\n\n","// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in self.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function (options) {\n  var self = this;\n  options = options || {};\n\n  var orderedFromCallbacks = options.callbacks &&\n        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n  if (_.has(options, 'ordered')) {\n    self.ordered = options.ordered;\n    if (options.callbacks && options.ordered !== orderedFromCallbacks)\n      throw Error(\"ordered option doesn't match callbacks\");\n  } else if (options.callbacks) {\n    self.ordered = orderedFromCallbacks;\n  } else {\n    throw Error(\"must provide ordered or callbacks\");\n  }\n  var callbacks = options.callbacks || {};\n\n  if (self.ordered) {\n    self.docs = new OrderedDict(MongoID.idStringify);\n    self.applyChange = {\n      addedBefore: function (id, fields, before) {\n        var doc = EJSON.clone(fields);\n        doc._id = id;\n        callbacks.addedBefore && callbacks.addedBefore.call(\n          self, id, fields, before);\n        // This line triggers if we provide added with movedBefore.\n        callbacks.added && callbacks.added.call(self, id, fields);\n        // XXX could `before` be a falsy ID?  Technically\n        // idStringify seems to allow for them -- though\n        // OrderedDict won't call stringify on a falsy arg.\n        self.docs.putBefore(id, doc, before || null);\n      },\n      movedBefore: function (id, before) {\n        var doc = self.docs.get(id);\n        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);\n        self.docs.moveBefore(id, before || null);\n      }\n    };\n  } else {\n    self.docs = new LocalCollection._IdMap;\n    self.applyChange = {\n      added: function (id, fields) {\n        var doc = EJSON.clone(fields);\n        callbacks.added && callbacks.added.call(self, id, fields);\n        doc._id = id;\n        self.docs.set(id,  doc);\n      }\n    };\n  }\n\n  // The methods in _IdMap and OrderedDict used by these callbacks are\n  // identical.\n  self.applyChange.changed = function (id, fields) {\n    var doc = self.docs.get(id);\n    if (!doc)\n      throw new Error(\"Unknown id for changed: \" + id);\n    callbacks.changed && callbacks.changed.call(\n      self, id, EJSON.clone(fields));\n    DiffSequence.applyChanges(doc, fields);\n  };\n  self.applyChange.removed = function (id) {\n    callbacks.removed && callbacks.removed.call(self, id);\n    self.docs.remove(id);\n  };\n};\n\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {return doc;};\n  var suppressed = !!observeCallbacks._suppress_initial;\n\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        var self = this;\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))\n          return;\n        var doc = transform(_.extend(fields, {_id: id}));\n        if (observeCallbacks.addedAt) {\n          var index = indices\n                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n          observeCallbacks.addedAt(doc, index, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed))\n          return;\n        var doc = EJSON.clone(self.docs.get(id));\n        if (!doc)\n          throw new Error(\"Unknown id for changed: \" + id);\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        doc = transform(doc);\n        if (observeCallbacks.changedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.changedAt(doc, oldDoc, index);\n        } else {\n          observeCallbacks.changed(doc, oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        var self = this;\n        if (!observeCallbacks.movedTo)\n          return;\n        var from = indices ? self.docs.indexOf(id) : -1;\n\n        var to = indices\n              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from)\n          --to;\n        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),\n                                 from, to, before || null);\n      },\n      removed: function (id) {\n        var self = this;\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed))\n          return;\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from self.docs!\n        var doc = transform(self.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.removedAt(doc, index);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          var doc = _.extend(fields, {_id:  id});\n          observeCallbacks.added(transform(doc));\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (observeCallbacks.changed) {\n          var oldDoc = self.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc),\n                                   transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        var self = this;\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(self.docs.get(id)));\n        }\n      }\n    };\n  }\n\n  var changeObserver = new LocalCollection._CachingChangeObserver(\n    {callbacks: observeChangesCallbacks});\n  var handle = cursor.observeChanges(changeObserver.applyChange);\n  suppressed = false;\n\n  return handle;\n};\n","// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return (typeof selector === \"string\") ||\n    (typeof selector === \"number\") ||\n    selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) ||\n    (selector && typeof selector === \"object\" &&\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\n     _.size(selector) === 1);\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector))\n    return [selector];\n  if (!selector)\n    return null;\n\n  // Do we have an _id clause?\n  if (_.has(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id))\n      return [selector._id];\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && selector._id.$in\n        && _.isArray(selector._id.$in)\n        && !_.isEmpty(selector._id.$in)\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (selector.$and && _.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds)\n        return subIds;\n    }\n  }\n\n  return null;\n};\n\n\n","// Knows how to combine a mongo selector and a fields projection to a new fields\n// projection taking into account active fields from the passed selector.\n// @returns Object - projection object (same as fields option of mongo cursor)\nMinimongo.Matcher.prototype.combineIntoProjection = function (projection) {\n  var self = this;\n  var selectorPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());\n\n  // Special case for $where operator in the selector - projection should depend\n  // on all fields of the document. getSelectorPaths returns a list of paths\n  // selector depends on. If one of the paths is '' (empty string) representing\n  // the root or the whole document, complete projection should be returned.\n  if (_.contains(selectorPaths, ''))\n    return {};\n\n  return combineImportantPathsIntoProjection(selectorPaths, projection);\n};\n\nMinimongo._pathsElidingNumericKeys = function (paths) {\n  var self = this;\n  return _.map(paths, function (path) {\n    return _.reject(path.split('.'), isNumericKey).join('.');\n  });\n};\n\ncombineImportantPathsIntoProjection = function (paths, projection) {\n  var prjDetails = projectionDetails(projection);\n  var tree = prjDetails.tree;\n  var mergedProjection = {};\n\n  // merge the paths to include\n  tree = pathsToTree(paths,\n                     function (path) { return true; },\n                     function (node, path, fullPath) { return true; },\n                     tree);\n  mergedProjection = treeToPaths(tree);\n  if (prjDetails.including) {\n    // both selector and projection are pointing on fields to include\n    // so we can just return the merged tree\n    return mergedProjection;\n  } else {\n    // selector is pointing at fields to include\n    // projection is pointing at fields to exclude\n    // make sure we don't exclude important paths\n    var mergedExclProjection = {};\n    _.each(mergedProjection, function (incl, path) {\n      if (!incl)\n        mergedExclProjection[path] = false;\n    });\n\n    return mergedExclProjection;\n  }\n};\n\n// Returns a set of key paths similar to\n// { 'foo.bar': 1, 'a.b.c': 1 }\nvar treeToPaths = function (tree, prefix) {\n  prefix = prefix || '';\n  var result = {};\n\n  _.each(tree, function (val, key) {\n    if (_.isObject(val))\n      _.extend(result, treeToPaths(val, prefix + key + '.'));\n    else\n      result[prefix + key] = val;\n  });\n\n  return result;\n};\n\n","// Returns true if the modifier applied to some document may change the result\n// of matching the document by selector\n// The modifier is always in a form of Object:\n//  - $set\n//    - 'a.b.22.z': value\n//    - 'foo.bar': 42\n//  - $unset\n//    - 'abc.d': 1\nMinimongo.Matcher.prototype.affectedByModifier = function (modifier) {\n  var self = this;\n  // safe check for $set/$unset being objects\n  modifier = _.extend({ $set: {}, $unset: {} }, modifier);\n  var modifiedPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));\n  var meaningfulPaths = self._getPaths();\n\n  return _.any(modifiedPaths, function (path) {\n    var mod = path.split('.');\n    return _.any(meaningfulPaths, function (meaningfulPath) {\n      var sel = meaningfulPath.split('.');\n      var i = 0, j = 0;\n\n      while (i < sel.length && j < mod.length) {\n        if (isNumericKey(sel[i]) && isNumericKey(mod[j])) {\n          // foo.4.bar selector affected by foo.4 modifier\n          // foo.3.bar selector unaffected by foo.4 modifier\n          if (sel[i] === mod[j])\n            i++, j++;\n          else\n            return false;\n        } else if (isNumericKey(sel[i])) {\n          // foo.4.bar selector unaffected by foo.bar modifier\n          return false;\n        } else if (isNumericKey(mod[j])) {\n          j++;\n        } else if (sel[i] === mod[j])\n          i++, j++;\n        else\n          return false;\n      }\n\n      // One is a prefix of another, taking numeric fields into account\n      return true;\n    });\n  });\n};\n\n// Minimongo.Sorter gets a similar method, which delegates to a Matcher it made\n// for this exact purpose.\nMinimongo.Sorter.prototype.affectedByModifier = function (modifier) {\n  var self = this;\n  return self._selectorForAffectedByModifier.affectedByModifier(modifier);\n};\n\n// @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`\n//                           only. (assumed to come from oplog)\n// @returns - Boolean: if after applying the modifier, selector can start\n//                     accepting the modified value.\n// NOTE: assumes that document affected by modifier didn't match this Matcher\n// before, so if modifier can't convince selector in a positive change it would\n// stay 'false'.\n// Currently doesn't support $-operators and numeric indices precisely.\nMinimongo.Matcher.prototype.canBecomeTrueByModifier = function (modifier) {\n  var self = this;\n  if (!this.affectedByModifier(modifier))\n    return false;\n\n  modifier = _.extend({$set:{}, $unset:{}}, modifier);\n  var modifierPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));\n\n  if (!self.isSimple())\n    return true;\n\n  if (_.any(self._getPaths(), pathHasNumericKeys) ||\n      _.any(modifierPaths, pathHasNumericKeys))\n    return true;\n\n  // check if there is a $set or $unset that indicates something is an\n  // object rather than a scalar in the actual object where we saw $-operator\n  // NOTE: it is correct since we allow only scalars in $-operators\n  // Example: for selector {'a.b': {$gt: 5}} the modifier {'a.b.c':7} would\n  // definitely set the result to false as 'a.b' appears to be an object.\n  var expectedScalarIsObject = _.any(self._selector, function (sel, path) {\n    if (! isOperatorObject(sel))\n      return false;\n    return _.any(modifierPaths, function (modifierPath) {\n      return startsWith(modifierPath, path + '.');\n    });\n  });\n\n  if (expectedScalarIsObject)\n    return false;\n\n  // See if we can apply the modifier on the ideally matching object. If it\n  // still matches the selector, then the modifier could have turned the real\n  // object in the database into something matching.\n  var matchingDocument = EJSON.clone(self.matchingDocument());\n\n  // The selector is too complex, anything can happen.\n  if (matchingDocument === null)\n    return true;\n\n  try {\n    LocalCollection._modify(matchingDocument, modifier);\n  } catch (e) {\n    // Couldn't set a property on a field which is a scalar or null in the\n    // selector.\n    // Example:\n    // real document: { 'a.b': 3 }\n    // selector: { 'a': 12 }\n    // converted selector (ideal document): { 'a': 12 }\n    // modifier: { $set: { 'a.b': 4 } }\n    // We don't know what real document was like but from the error raised by\n    // $set on a scalar field we can reason that the structure of real document\n    // is completely different.\n    if (e.name === \"MinimongoError\" && e.setPropertyError)\n      return false;\n    throw e;\n  }\n\n  return self.documentMatches(matchingDocument).result;\n};\n\n// Returns an object that would match the selector if possible or null if the\n// selector is too complex for us to analyze\n// { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }\n// => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }\nMinimongo.Matcher.prototype.matchingDocument = function () {\n  var self = this;\n\n  // check if it was computed before\n  if (self._matchingDocument !== undefined)\n    return self._matchingDocument;\n\n  // If the analysis of this selector is too hard for our implementation\n  // fallback to \"YES\"\n  var fallback = false;\n  self._matchingDocument = pathsToTree(self._getPaths(),\n    function (path) {\n      var valueSelector = self._selector[path];\n      if (isOperatorObject(valueSelector)) {\n        // if there is a strict equality, there is a good\n        // chance we can use one of those as \"matching\"\n        // dummy value\n        if (valueSelector.$in) {\n          var matcher = new Minimongo.Matcher({ placeholder: valueSelector });\n\n          // Return anything from $in that matches the whole selector for this\n          // path. If nothing matches, returns `undefined` as nothing can make\n          // this selector into `true`.\n          return _.find(valueSelector.$in, function (x) {\n            return matcher.documentMatches({ placeholder: x }).result;\n          });\n        } else if (onlyContainsKeys(valueSelector, ['$gt', '$gte', '$lt', '$lte'])) {\n          var lowerBound = -Infinity, upperBound = Infinity;\n          _.each(['$lte', '$lt'], function (op) {\n            if (_.has(valueSelector, op) && valueSelector[op] < upperBound)\n              upperBound = valueSelector[op];\n          });\n          _.each(['$gte', '$gt'], function (op) {\n            if (_.has(valueSelector, op) && valueSelector[op] > lowerBound)\n              lowerBound = valueSelector[op];\n          });\n\n          var middle = (lowerBound + upperBound) / 2;\n          var matcher = new Minimongo.Matcher({ placeholder: valueSelector });\n          if (!matcher.documentMatches({ placeholder: middle }).result &&\n              (middle === lowerBound || middle === upperBound))\n            fallback = true;\n\n          return middle;\n        } else if (onlyContainsKeys(valueSelector, ['$nin',' $ne'])) {\n          // Since self._isSimple makes sure $nin and $ne are not combined with\n          // objects or arrays, we can confidently return an empty object as it\n          // never matches any scalar.\n          return {};\n        } else {\n          fallback = true;\n        }\n      }\n      return self._selector[path];\n    },\n    _.identity /*conflict resolution is no resolution*/);\n\n  if (fallback)\n    self._matchingDocument = null;\n\n  return self._matchingDocument;\n};\n\nvar getPaths = function (sel) {\n  return _.keys(new Minimongo.Matcher(sel)._paths);\n  return _.chain(sel).map(function (v, k) {\n    // we don't know how to handle $where because it can be anything\n    if (k === \"$where\")\n      return ''; // matches everything\n    // we branch from $or/$and/$nor operator\n    if (_.contains(['$or', '$and', '$nor'], k))\n      return _.map(v, getPaths);\n    // the value is a literal or some comparison operator\n    return k;\n  }).flatten().uniq().value();\n};\n\n// A helper to ensure object has only certain keys\nvar onlyContainsKeys = function (obj, keys) {\n  return _.all(obj, function (v, k) {\n    return _.contains(keys, k);\n  });\n};\n\nvar pathHasNumericKeys = function (path) {\n  return _.any(path.split('.'), isNumericKey);\n}\n\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)\nvar startsWith = function(str, starts) {\n  return str.length >= starts.length &&\n    str.substring(0, starts.length) === starts;\n};\n\n","Minimongo.Sorter.prototype.combineIntoProjection = function (projection) {\n  var self = this;\n  var specPaths = Minimongo._pathsElidingNumericKeys(self._getPaths());\n  return combineImportantPathsIntoProjection(specPaths, projection);\n};\n"]}}]