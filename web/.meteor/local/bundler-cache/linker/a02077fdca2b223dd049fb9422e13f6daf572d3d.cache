[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar IdMap = Package['id-map'].IdMap;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\n\n/* Package-scope variables */\nvar DDP, LivedataTest, MongoIDMap, toSockjsUrl, toWebsocketUrl, allConnections;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/ddp-client/namespace.js                                                                           //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/**                                                                                                           // 1\n * @namespace DDP                                                                                             // 2\n * @summary Namespace for DDP-related methods/classes.                                                        // 3\n */                                                                                                           // 4\nDDP          = {};                                                                                            // 5\nLivedataTest = {};                                                                                            // 6\n                                                                                                              // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/ddp-client/id_map.js                                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nMongoIDMap = function () {                                                                                    // 1\n  var self = this;                                                                                            // 2\n  IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                     // 3\n};                                                                                                            // 4\n                                                                                                              // 5\nMeteor._inherits(MongoIDMap, IdMap);                                                                          // 6\n                                                                                                              // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/ddp-client/stream_client_nodejs.js                                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// @param endpoint {String} URL to Meteor app                                                                 // 1\n//   \"http://subdomain.meteor.com/\" or \"/\" or                                                                 // 2\n//   \"ddp+sockjs://foo-**.meteor.com/sockjs\"                                                                  // 3\n//                                                                                                            // 4\n// We do some rewriting of the URL to eventually make it \"ws://\" or \"wss://\",                                 // 5\n// whatever was passed in.  At the very least, what Meteor.absoluteUrl() returns                              // 6\n// us should work.                                                                                            // 7\n//                                                                                                            // 8\n// We don't do any heartbeating. (The logic that did this in sockjs was removed,                              // 9\n// because it used a built-in sockjs mechanism. We could do it with WebSocket                                 // 10\n// ping frames or with DDP-level messages.)                                                                   // 11\nLivedataTest.ClientStream = function (endpoint, options) {                                                    // 12\n  var self = this;                                                                                            // 13\n  options = options || {};                                                                                    // 14\n                                                                                                              // 15\n  self.options = _.extend({                                                                                   // 16\n    retry: true                                                                                               // 17\n  }, options);                                                                                                // 18\n                                                                                                              // 19\n  self.client = null;  // created in _launchConnection                                                        // 20\n  self.endpoint = endpoint;                                                                                   // 21\n                                                                                                              // 22\n  self.headers = self.options.headers || {};                                                                  // 23\n                                                                                                              // 24\n  self._initCommon(self.options);                                                                             // 25\n                                                                                                              // 26\n  //// Kickoff!                                                                                               // 27\n  self._launchConnection();                                                                                   // 28\n};                                                                                                            // 29\n                                                                                                              // 30\n_.extend(LivedataTest.ClientStream.prototype, {                                                               // 31\n                                                                                                              // 32\n  // data is a utf8 string. Data sent while not connected is dropped on                                       // 33\n  // the floor, and it is up the user of this API to retransmit lost                                          // 34\n  // messages on 'reset'                                                                                      // 35\n  send: function (data) {                                                                                     // 36\n    var self = this;                                                                                          // 37\n    if (self.currentStatus.connected) {                                                                       // 38\n      self.client.send(data);                                                                                 // 39\n    }                                                                                                         // 40\n  },                                                                                                          // 41\n                                                                                                              // 42\n  // Changes where this connection points                                                                     // 43\n  _changeUrl: function (url) {                                                                                // 44\n    var self = this;                                                                                          // 45\n    self.endpoint = url;                                                                                      // 46\n  },                                                                                                          // 47\n                                                                                                              // 48\n  _onConnect: function (client) {                                                                             // 49\n    var self = this;                                                                                          // 50\n                                                                                                              // 51\n    if (client !== self.client) {                                                                             // 52\n      // This connection is not from the last call to _launchConnection.                                      // 53\n      // But _launchConnection calls _cleanup which closes previous connections.                              // 54\n      // It's our belief that this stifles future 'open' events, but maybe                                    // 55\n      // we are wrong?                                                                                        // 56\n      throw new Error(\"Got open from inactive client \" + !!self.client);                                      // 57\n    }                                                                                                         // 58\n                                                                                                              // 59\n    if (self._forcedToDisconnect) {                                                                           // 60\n      // We were asked to disconnect between trying to open the connection and                                // 61\n      // actually opening it. Let's just pretend this never happened.                                         // 62\n      self.client.close();                                                                                    // 63\n      self.client = null;                                                                                     // 64\n      return;                                                                                                 // 65\n    }                                                                                                         // 66\n                                                                                                              // 67\n    if (self.currentStatus.connected) {                                                                       // 68\n      // We already have a connection. It must have been the case that we                                     // 69\n      // started two parallel connection attempts (because we wanted to                                       // 70\n      // 'reconnect now' on a hanging connection and we had no way to cancel the                              // 71\n      // connection attempt.) But this shouldn't happen (similarly to the client                              // 72\n      // !== self.client check above).                                                                        // 73\n      throw new Error(\"Two parallel connections?\");                                                           // 74\n    }                                                                                                         // 75\n                                                                                                              // 76\n    self._clearConnectionTimer();                                                                             // 77\n                                                                                                              // 78\n    // update status                                                                                          // 79\n    self.currentStatus.status = \"connected\";                                                                  // 80\n    self.currentStatus.connected = true;                                                                      // 81\n    self.currentStatus.retryCount = 0;                                                                        // 82\n    self.statusChanged();                                                                                     // 83\n                                                                                                              // 84\n    // fire resets. This must come after status change so that clients                                        // 85\n    // can call send from within a reset callback.                                                            // 86\n    _.each(self.eventCallbacks.reset, function (callback) { callback(); });                                   // 87\n  },                                                                                                          // 88\n                                                                                                              // 89\n  _cleanup: function (maybeError) {                                                                           // 90\n    var self = this;                                                                                          // 91\n                                                                                                              // 92\n    self._clearConnectionTimer();                                                                             // 93\n    if (self.client) {                                                                                        // 94\n      var client = self.client;                                                                               // 95\n      self.client = null;                                                                                     // 96\n      client.close();                                                                                         // 97\n                                                                                                              // 98\n      _.each(self.eventCallbacks.disconnect, function (callback) {                                            // 99\n        callback(maybeError);                                                                                 // 100\n      });                                                                                                     // 101\n    }                                                                                                         // 102\n  },                                                                                                          // 103\n                                                                                                              // 104\n  _clearConnectionTimer: function () {                                                                        // 105\n    var self = this;                                                                                          // 106\n                                                                                                              // 107\n    if (self.connectionTimer) {                                                                               // 108\n      clearTimeout(self.connectionTimer);                                                                     // 109\n      self.connectionTimer = null;                                                                            // 110\n    }                                                                                                         // 111\n  },                                                                                                          // 112\n                                                                                                              // 113\n  _getProxyUrl: function (targetUrl) {                                                                        // 114\n    var self = this;                                                                                          // 115\n    // Similar to code in tools/http-helpers.js.                                                              // 116\n    var proxy = process.env.HTTP_PROXY || process.env.http_proxy || null;                                     // 117\n    // if we're going to a secure url, try the https_proxy env variable first.                                // 118\n    if (targetUrl.match(/^wss:/)) {                                                                           // 119\n      proxy = process.env.HTTPS_PROXY || process.env.https_proxy || proxy;                                    // 120\n    }                                                                                                         // 121\n    return proxy;                                                                                             // 122\n  },                                                                                                          // 123\n                                                                                                              // 124\n  _launchConnection: function () {                                                                            // 125\n    var self = this;                                                                                          // 126\n    self._cleanup(); // cleanup the old socket, if there was one.                                             // 127\n                                                                                                              // 128\n    // Since server-to-server DDP is still an experimental feature, we only                                   // 129\n    // require the module if we actually create a server-to-server                                            // 130\n    // connection.                                                                                            // 131\n    var FayeWebSocket = Npm.require('faye-websocket');                                                        // 132\n    var deflate = Npm.require('permessage-deflate');                                                          // 133\n                                                                                                              // 134\n    var targetUrl = toWebsocketUrl(self.endpoint);                                                            // 135\n    var fayeOptions = {                                                                                       // 136\n      headers: self.headers,                                                                                  // 137\n      extensions: [deflate]                                                                                   // 138\n    };                                                                                                        // 139\n    var proxyUrl = self._getProxyUrl(targetUrl);                                                              // 140\n    if (proxyUrl) {                                                                                           // 141\n      fayeOptions.proxy = { origin: proxyUrl };                                                               // 142\n    };                                                                                                        // 143\n                                                                                                              // 144\n    // We would like to specify 'ddp' as the subprotocol here. The npm module we                              // 145\n    // used to use as a client would fail the handshake if we ask for a                                       // 146\n    // subprotocol and the server doesn't send one back (and sockjs doesn't).                                 // 147\n    // Faye doesn't have that behavior; it's unclear from reading RFC 6455 if                                 // 148\n    // Faye is erroneous or not.  So for now, we don't specify protocols.                                     // 149\n    var subprotocols = [];                                                                                    // 150\n                                                                                                              // 151\n    var client = self.client = new FayeWebSocket.Client(                                                      // 152\n      targetUrl, subprotocols, fayeOptions);                                                                  // 153\n                                                                                                              // 154\n    self._clearConnectionTimer();                                                                             // 155\n    self.connectionTimer = Meteor.setTimeout(                                                                 // 156\n      function () {                                                                                           // 157\n        self._lostConnection(                                                                                 // 158\n          new DDP.ConnectionError(\"DDP connection timed out\"));                                               // 159\n      },                                                                                                      // 160\n      self.CONNECT_TIMEOUT);                                                                                  // 161\n                                                                                                              // 162\n    self.client.on('open', Meteor.bindEnvironment(function () {                                               // 163\n      return self._onConnect(client);                                                                         // 164\n    }, \"stream connect callback\"));                                                                           // 165\n                                                                                                              // 166\n    var clientOnIfCurrent = function (event, description, f) {                                                // 167\n      self.client.on(event, Meteor.bindEnvironment(function () {                                              // 168\n        // Ignore events from any connection we've already cleaned up.                                        // 169\n        if (client !== self.client)                                                                           // 170\n          return;                                                                                             // 171\n        f.apply(this, arguments);                                                                             // 172\n      }, description));                                                                                       // 173\n    };                                                                                                        // 174\n                                                                                                              // 175\n    clientOnIfCurrent('error', 'stream error callback', function (error) {                                    // 176\n      if (!self.options._dontPrintErrors)                                                                     // 177\n        Meteor._debug(\"stream error\", error.message);                                                         // 178\n                                                                                                              // 179\n      // Faye's 'error' object is not a JS error (and among other things,                                     // 180\n      // doesn't stringify well). Convert it to one.                                                          // 181\n      self._lostConnection(new DDP.ConnectionError(error.message));                                           // 182\n    });                                                                                                       // 183\n                                                                                                              // 184\n                                                                                                              // 185\n    clientOnIfCurrent('close', 'stream close callback', function () {                                         // 186\n      self._lostConnection();                                                                                 // 187\n    });                                                                                                       // 188\n                                                                                                              // 189\n                                                                                                              // 190\n    clientOnIfCurrent('message', 'stream message callback', function (message) {                              // 191\n      // Ignore binary frames, where message.data is a Buffer                                                 // 192\n      if (typeof message.data !== \"string\")                                                                   // 193\n        return;                                                                                               // 194\n                                                                                                              // 195\n      _.each(self.eventCallbacks.message, function (callback) {                                               // 196\n        callback(message.data);                                                                               // 197\n      });                                                                                                     // 198\n    });                                                                                                       // 199\n  }                                                                                                           // 200\n});                                                                                                           // 201\n                                                                                                              // 202\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/ddp-client/stream_client_common.js                                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                    // 1\nvar startsWith = function(str, starts) {                                                                      // 2\n  return str.length >= starts.length &&                                                                       // 3\n    str.substring(0, starts.length) === starts;                                                               // 4\n};                                                                                                            // 5\nvar endsWith = function(str, ends) {                                                                          // 6\n  return str.length >= ends.length &&                                                                         // 7\n    str.substring(str.length - ends.length) === ends;                                                         // 8\n};                                                                                                            // 9\n                                                                                                              // 10\n// @param url {String} URL to Meteor app, eg:                                                                 // 11\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"                                                 // 12\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"                                                        // 13\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.                           // 14\n// for scheme \"http\" and subPath \"sockjs\"                                                                     // 15\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"                                                        // 16\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"                                                             // 17\nvar translateUrl =  function(url, newSchemeBase, subPath) {                                                   // 18\n  if (! newSchemeBase) {                                                                                      // 19\n    newSchemeBase = \"http\";                                                                                   // 20\n  }                                                                                                           // 21\n                                                                                                              // 22\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);                                                       // 23\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);                                                             // 24\n  var newScheme;                                                                                              // 25\n  if (ddpUrlMatch) {                                                                                          // 26\n    // Remove scheme and split off the host.                                                                  // 27\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);                                                      // 28\n    newScheme = ddpUrlMatch[1] === \"i\" ? newSchemeBase : newSchemeBase + \"s\";                                 // 29\n    var slashPos = urlAfterDDP.indexOf('/');                                                                  // 30\n    var host =                                                                                                // 31\n          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);                                    // 32\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);                                           // 33\n                                                                                                              // 34\n    // In the host (ONLY!), change '*' characters into random digits. This                                    // 35\n    // allows different stream connections to connect to different hostnames                                  // 36\n    // and avoid browser per-hostname connection limits.                                                      // 37\n    host = host.replace(/\\*/g, function () {                                                                  // 38\n      return Math.floor(Random.fraction()*10);                                                                // 39\n    });                                                                                                       // 40\n                                                                                                              // 41\n    return newScheme + '://' + host + rest;                                                                   // 42\n  } else if (httpUrlMatch) {                                                                                  // 43\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + \"s\";                                       // 44\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);                                                    // 45\n    url = newScheme + \"://\" + urlAfterHttp;                                                                   // 46\n  }                                                                                                           // 47\n                                                                                                              // 48\n  // Prefix FQDNs but not relative URLs                                                                       // 49\n  if (url.indexOf(\"://\") === -1 && !startsWith(url, \"/\")) {                                                   // 50\n    url = newSchemeBase + \"://\" + url;                                                                        // 51\n  }                                                                                                           // 52\n                                                                                                              // 53\n  // XXX This is not what we should be doing: if I have a site                                                // 54\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect                                        // 55\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if                                            // 56\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")                                        // 57\n  // to connect to \"/foo/bar\").                                                                               // 58\n  //                                                                                                          // 59\n  // We should make this properly honor absolute paths rather than                                            // 60\n  // forcing the path to be relative to the site root. Simultaneously,                                        // 61\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site                                             // 62\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs                                       // 63\n  url = Meteor._relativeToSiteRootUrl(url);                                                                   // 64\n                                                                                                              // 65\n  if (endsWith(url, \"/\"))                                                                                     // 66\n    return url + subPath;                                                                                     // 67\n  else                                                                                                        // 68\n    return url + \"/\" + subPath;                                                                               // 69\n};                                                                                                            // 70\n                                                                                                              // 71\ntoSockjsUrl = function (url) {                                                                                // 72\n  return translateUrl(url, \"http\", \"sockjs\");                                                                 // 73\n};                                                                                                            // 74\n                                                                                                              // 75\ntoWebsocketUrl = function (url) {                                                                             // 76\n  var ret = translateUrl(url, \"ws\", \"websocket\");                                                             // 77\n  return ret;                                                                                                 // 78\n};                                                                                                            // 79\n                                                                                                              // 80\nLivedataTest.toSockjsUrl = toSockjsUrl;                                                                       // 81\n                                                                                                              // 82\n                                                                                                              // 83\n_.extend(LivedataTest.ClientStream.prototype, {                                                               // 84\n                                                                                                              // 85\n  // Register for callbacks.                                                                                  // 86\n  on: function (name, callback) {                                                                             // 87\n    var self = this;                                                                                          // 88\n                                                                                                              // 89\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')                                      // 90\n      throw new Error(\"unknown event type: \" + name);                                                         // 91\n                                                                                                              // 92\n    if (!self.eventCallbacks[name])                                                                           // 93\n      self.eventCallbacks[name] = [];                                                                         // 94\n    self.eventCallbacks[name].push(callback);                                                                 // 95\n  },                                                                                                          // 96\n                                                                                                              // 97\n                                                                                                              // 98\n  _initCommon: function (options) {                                                                           // 99\n    var self = this;                                                                                          // 100\n    options = options || {};                                                                                  // 101\n                                                                                                              // 102\n    //// Constants                                                                                            // 103\n                                                                                                              // 104\n    // how long to wait until we declare the connection attempt                                               // 105\n    // failed.                                                                                                // 106\n    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;                                                 // 107\n                                                                                                              // 108\n    self.eventCallbacks = {}; // name -> [callback]                                                           // 109\n                                                                                                              // 110\n    self._forcedToDisconnect = false;                                                                         // 111\n                                                                                                              // 112\n    //// Reactive status                                                                                      // 113\n    self.currentStatus = {                                                                                    // 114\n      status: \"connecting\",                                                                                   // 115\n      connected: false,                                                                                       // 116\n      retryCount: 0                                                                                           // 117\n    };                                                                                                        // 118\n                                                                                                              // 119\n                                                                                                              // 120\n    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;                          // 121\n    self.statusChanged = function () {                                                                        // 122\n      if (self.statusListeners)                                                                               // 123\n        self.statusListeners.changed();                                                                       // 124\n    };                                                                                                        // 125\n                                                                                                              // 126\n    //// Retry logic                                                                                          // 127\n    self._retry = new Retry;                                                                                  // 128\n    self.connectionTimer = null;                                                                              // 129\n                                                                                                              // 130\n  },                                                                                                          // 131\n                                                                                                              // 132\n  // Trigger a reconnect.                                                                                     // 133\n  reconnect: function (options) {                                                                             // 134\n    var self = this;                                                                                          // 135\n    options = options || {};                                                                                  // 136\n                                                                                                              // 137\n    if (options.url) {                                                                                        // 138\n      self._changeUrl(options.url);                                                                           // 139\n    }                                                                                                         // 140\n                                                                                                              // 141\n    if (options._sockjsOptions) {                                                                             // 142\n      self.options._sockjsOptions = options._sockjsOptions;                                                   // 143\n    }                                                                                                         // 144\n                                                                                                              // 145\n    if (self.currentStatus.connected) {                                                                       // 146\n      if (options._force || options.url) {                                                                    // 147\n        // force reconnect.                                                                                   // 148\n        self._lostConnection(new DDP.ForcedReconnectError);                                                   // 149\n      } // else, noop.                                                                                        // 150\n      return;                                                                                                 // 151\n    }                                                                                                         // 152\n                                                                                                              // 153\n    // if we're mid-connection, stop it.                                                                      // 154\n    if (self.currentStatus.status === \"connecting\") {                                                         // 155\n      // Pretend it's a clean close.                                                                          // 156\n      self._lostConnection();                                                                                 // 157\n    }                                                                                                         // 158\n                                                                                                              // 159\n    self._retry.clear();                                                                                      // 160\n    self.currentStatus.retryCount -= 1; // don't count manual retries                                         // 161\n    self._retryNow();                                                                                         // 162\n  },                                                                                                          // 163\n                                                                                                              // 164\n  disconnect: function (options) {                                                                            // 165\n    var self = this;                                                                                          // 166\n    options = options || {};                                                                                  // 167\n                                                                                                              // 168\n    // Failed is permanent. If we're failed, don't let people go back                                         // 169\n    // online by calling 'disconnect' then 'reconnect'.                                                       // 170\n    if (self._forcedToDisconnect)                                                                             // 171\n      return;                                                                                                 // 172\n                                                                                                              // 173\n    // If _permanent is set, permanently disconnect a stream. Once a stream                                   // 174\n    // is forced to disconnect, it can never reconnect. This is for                                           // 175\n    // error cases such as ddp version mismatch, where trying again                                           // 176\n    // won't fix the problem.                                                                                 // 177\n    if (options._permanent) {                                                                                 // 178\n      self._forcedToDisconnect = true;                                                                        // 179\n    }                                                                                                         // 180\n                                                                                                              // 181\n    self._cleanup();                                                                                          // 182\n    self._retry.clear();                                                                                      // 183\n                                                                                                              // 184\n    self.currentStatus = {                                                                                    // 185\n      status: (options._permanent ? \"failed\" : \"offline\"),                                                    // 186\n      connected: false,                                                                                       // 187\n      retryCount: 0                                                                                           // 188\n    };                                                                                                        // 189\n                                                                                                              // 190\n    if (options._permanent && options._error)                                                                 // 191\n      self.currentStatus.reason = options._error;                                                             // 192\n                                                                                                              // 193\n    self.statusChanged();                                                                                     // 194\n  },                                                                                                          // 195\n                                                                                                              // 196\n  // maybeError is set unless it's a clean protocol-level close.                                              // 197\n  _lostConnection: function (maybeError) {                                                                    // 198\n    var self = this;                                                                                          // 199\n                                                                                                              // 200\n    self._cleanup(maybeError);                                                                                // 201\n    self._retryLater(maybeError); // sets status. no need to do it here.                                      // 202\n  },                                                                                                          // 203\n                                                                                                              // 204\n  // fired when we detect that we've gone online. try to reconnect                                            // 205\n  // immediately.                                                                                             // 206\n  _online: function () {                                                                                      // 207\n    // if we've requested to be offline by disconnecting, don't reconnect.                                    // 208\n    if (this.currentStatus.status != \"offline\")                                                               // 209\n      this.reconnect();                                                                                       // 210\n  },                                                                                                          // 211\n                                                                                                              // 212\n  _retryLater: function (maybeError) {                                                                        // 213\n    var self = this;                                                                                          // 214\n                                                                                                              // 215\n    var timeout = 0;                                                                                          // 216\n    if (self.options.retry ||                                                                                 // 217\n        (maybeError && maybeError.errorType === \"DDP.ForcedReconnectError\")) {                                // 218\n      timeout = self._retry.retryLater(                                                                       // 219\n        self.currentStatus.retryCount,                                                                        // 220\n        _.bind(self._retryNow, self)                                                                          // 221\n      );                                                                                                      // 222\n      self.currentStatus.status = \"waiting\";                                                                  // 223\n      self.currentStatus.retryTime = (new Date()).getTime() + timeout;                                        // 224\n    } else {                                                                                                  // 225\n      self.currentStatus.status = \"failed\";                                                                   // 226\n      delete self.currentStatus.retryTime;                                                                    // 227\n    }                                                                                                         // 228\n                                                                                                              // 229\n    self.currentStatus.connected = false;                                                                     // 230\n    self.statusChanged();                                                                                     // 231\n  },                                                                                                          // 232\n                                                                                                              // 233\n  _retryNow: function () {                                                                                    // 234\n    var self = this;                                                                                          // 235\n                                                                                                              // 236\n    if (self._forcedToDisconnect)                                                                             // 237\n      return;                                                                                                 // 238\n                                                                                                              // 239\n    self.currentStatus.retryCount += 1;                                                                       // 240\n    self.currentStatus.status = \"connecting\";                                                                 // 241\n    self.currentStatus.connected = false;                                                                     // 242\n    delete self.currentStatus.retryTime;                                                                      // 243\n    self.statusChanged();                                                                                     // 244\n                                                                                                              // 245\n    self._launchConnection();                                                                                 // 246\n  },                                                                                                          // 247\n                                                                                                              // 248\n                                                                                                              // 249\n  // Get current status. Reactive.                                                                            // 250\n  status: function () {                                                                                       // 251\n    var self = this;                                                                                          // 252\n    if (self.statusListeners)                                                                                 // 253\n      self.statusListeners.depend();                                                                          // 254\n    return self.currentStatus;                                                                                // 255\n  }                                                                                                           // 256\n});                                                                                                           // 257\n                                                                                                              // 258\nDDP.ConnectionError = Meteor.makeErrorType(                                                                   // 259\n  \"DDP.ConnectionError\", function (message) {                                                                 // 260\n    var self = this;                                                                                          // 261\n    self.message = message;                                                                                   // 262\n});                                                                                                           // 263\n                                                                                                              // 264\nDDP.ForcedReconnectError = Meteor.makeErrorType(                                                              // 265\n  \"DDP.ForcedReconnectError\", function () {});                                                                // 266\n                                                                                                              // 267\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/ddp-client/livedata_common.js                                                                     //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nLivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS;                                       // 1\n                                                                                                              // 2\n// This is private but it's used in a few places. accounts-base uses                                          // 3\n// it to get the current user. Meteor.setTimeout and friends clear                                            // 4\n// it. We can probably find a better way to factor this.                                                      // 5\nDDP._CurrentInvocation = new Meteor.EnvironmentVariable;                                                      // 6\n                                                                                                              // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/ddp-client/random_stream.js                                                                       //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Returns the named sequence of pseudo-random values.                                                        // 1\n// The scope will be DDP._CurrentInvocation.get(), so the stream will produce                                 // 2\n// consistent values for method calls on the client and server.                                               // 3\nDDP.randomStream = function (name) {                                                                          // 4\n  var scope = DDP._CurrentInvocation.get();                                                                   // 5\n  return DDPCommon.RandomStream.get(scope, name);                                                             // 6\n};                                                                                                            // 7\n                                                                                                              // 8\n                                                                                                              // 9\n                                                                                                              // 10\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/ddp-client/livedata_connection.js                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nif (Meteor.isServer) {                                                                                        // 1\n  var path = Npm.require('path');                                                                             // 2\n  var Fiber = Npm.require('fibers');                                                                          // 3\n  var Future = Npm.require(path.join('fibers', 'future'));                                                    // 4\n}                                                                                                             // 5\n                                                                                                              // 6\n// @param url {String|Object} URL to Meteor app,                                                              // 7\n//   or an object as a test hook (see code)                                                                   // 8\n// Options:                                                                                                   // 9\n//   reloadWithOutstanding: is it OK to reload if there are outstanding methods?                              // 10\n//   headers: extra headers to send on the websockets connection, for                                         // 11\n//     server-to-server DDP only                                                                              // 12\n//   _sockjsOptions: Specifies options to pass through to the sockjs client                                   // 13\n//   onDDPNegotiationVersionFailure: callback when version negotiation fails.                                 // 14\n//                                                                                                            // 15\n// XXX There should be a way to destroy a DDP connection, causing all                                         // 16\n// outstanding method calls to fail.                                                                          // 17\n//                                                                                                            // 18\n// XXX Our current way of handling failure and reconnection is great                                          // 19\n// for an app (where we want to tolerate being disconnected as an                                             // 20\n// expect state, and keep trying forever to reconnect) but cumbersome                                         // 21\n// for something like a command line tool that wants to make a                                                // 22\n// connection, call a method, and print an error if connection                                                // 23\n// fails. We should have better usability in the latter case (while                                           // 24\n// still transparently reconnecting if it's just a transient failure                                          // 25\n// or the server migrating us).                                                                               // 26\nvar Connection = function (url, options) {                                                                    // 27\n  var self = this;                                                                                            // 28\n  options = _.extend({                                                                                        // 29\n    onConnected: function () {},                                                                              // 30\n    onDDPVersionNegotiationFailure: function (description) {                                                  // 31\n      Meteor._debug(description);                                                                             // 32\n    },                                                                                                        // 33\n    heartbeatInterval: 17500,                                                                                 // 34\n    heartbeatTimeout: 15000,                                                                                  // 35\n    // These options are only for testing.                                                                    // 36\n    reloadWithOutstanding: false,                                                                             // 37\n    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,                                                   // 38\n    retry: true,                                                                                              // 39\n    respondToPings: true                                                                                      // 40\n  }, options);                                                                                                // 41\n                                                                                                              // 42\n  // If set, called when we reconnect, queuing method calls _before_ the                                      // 43\n  // existing outstanding ones. This is the only data member that is part of the                              // 44\n  // public API!                                                                                              // 45\n  self.onReconnect = null;                                                                                    // 46\n                                                                                                              // 47\n  // as a test hook, allow passing a stream instead of a url.                                                 // 48\n  if (typeof url === \"object\") {                                                                              // 49\n    self._stream = url;                                                                                       // 50\n  } else {                                                                                                    // 51\n    self._stream = new LivedataTest.ClientStream(url, {                                                       // 52\n      retry: options.retry,                                                                                   // 53\n      headers: options.headers,                                                                               // 54\n      _sockjsOptions: options._sockjsOptions,                                                                 // 55\n      // Used to keep some tests quiet, or for other cases in which                                           // 56\n      // the right thing to do with connection errors is to silently                                          // 57\n      // fail (e.g. sending package usage stats). At some point we                                            // 58\n      // should have a real API for handling client-stream-level                                              // 59\n      // errors.                                                                                              // 60\n      _dontPrintErrors: options._dontPrintErrors,                                                             // 61\n      connectTimeoutMs: options.connectTimeoutMs                                                              // 62\n    });                                                                                                       // 63\n  }                                                                                                           // 64\n                                                                                                              // 65\n  self._lastSessionId = null;                                                                                 // 66\n  self._versionSuggestion = null;  // The last proposed DDP version.                                          // 67\n  self._version = null;   // The DDP version agreed on by client and server.                                  // 68\n  self._stores = {}; // name -> object with methods                                                           // 69\n  self._methodHandlers = {}; // name -> func                                                                  // 70\n  self._nextMethodId = 1;                                                                                     // 71\n  self._supportedDDPVersions = options.supportedDDPVersions;                                                  // 72\n                                                                                                              // 73\n  self._heartbeatInterval = options.heartbeatInterval;                                                        // 74\n  self._heartbeatTimeout = options.heartbeatTimeout;                                                          // 75\n                                                                                                              // 76\n  // Tracks methods which the user has tried to call but which have not yet                                   // 77\n  // called their user callback (ie, they are waiting on their result or for all                              // 78\n  // of their writes to be written to the local cache). Map from method ID to                                 // 79\n  // MethodInvoker object.                                                                                    // 80\n  self._methodInvokers = {};                                                                                  // 81\n                                                                                                              // 82\n  // Tracks methods which the user has called but whose result messages have not                              // 83\n  // arrived yet.                                                                                             // 84\n  //                                                                                                          // 85\n  // _outstandingMethodBlocks is an array of blocks of methods. Each block                                    // 86\n  // represents a set of methods that can run at the same time. The first block                               // 87\n  // represents the methods which are currently in flight; subsequent blocks                                  // 88\n  // must wait for previous blocks to be fully finished before they can be sent                               // 89\n  // to the server.                                                                                           // 90\n  //                                                                                                          // 91\n  // Each block is an object with the following fields:                                                       // 92\n  // - methods: a list of MethodInvoker objects                                                               // 93\n  // - wait: a boolean; if true, this block had a single method invoked with                                  // 94\n  //         the \"wait\" option                                                                                // 95\n  //                                                                                                          // 96\n  // There will never be adjacent blocks with wait=false, because the only thing                              // 97\n  // that makes methods need to be serialized is a wait method.                                               // 98\n  //                                                                                                          // 99\n  // Methods are removed from the first block when their \"result\" is                                          // 100\n  // received. The entire first block is only removed when all of the in-flight                               // 101\n  // methods have received their results (so the \"methods\" list is empty) *AND*                               // 102\n  // all of the data written by those methods are visible in the local cache. So                              // 103\n  // it is possible for the first block's methods list to be empty, if we are                                 // 104\n  // still waiting for some objects to quiesce.                                                               // 105\n  //                                                                                                          // 106\n  // Example:                                                                                                 // 107\n  //  _outstandingMethodBlocks = [                                                                            // 108\n  //    {wait: false, methods: []},                                                                           // 109\n  //    {wait: true, methods: [<MethodInvoker for 'login'>]},                                                 // 110\n  //    {wait: false, methods: [<MethodInvoker for 'foo'>,                                                    // 111\n  //                            <MethodInvoker for 'bar'>]}]                                                  // 112\n  // This means that there were some methods which were sent to the server and                                // 113\n  // which have returned their results, but some of the data written by                                       // 114\n  // the methods may not be visible in the local cache. Once all that data is                                 // 115\n  // visible, we will send a 'login' method. Once the login method has returned                               // 116\n  // and all the data is visible (including re-running subs if userId changes),                               // 117\n  // we will send the 'foo' and 'bar' methods in parallel.                                                    // 118\n  self._outstandingMethodBlocks = [];                                                                         // 119\n                                                                                                              // 120\n  // method ID -> array of objects with keys 'collection' and 'id', listing                                   // 121\n  // documents written by a given method's stub. keys are associated with                                     // 122\n  // methods whose stub wrote at least one document, and whose data-done message                              // 123\n  // has not yet been received.                                                                               // 124\n  self._documentsWrittenByStub = {};                                                                          // 125\n  // collection -> IdMap of \"server document\" object. A \"server document\" has:                                // 126\n  // - \"document\": the version of the document according the                                                  // 127\n  //   server (ie, the snapshot before a stub wrote it, amended by any changes                                // 128\n  //   received from the server)                                                                              // 129\n  //   It is undefined if we think the document does not exist                                                // 130\n  // - \"writtenByStubs\": a set of method IDs whose stubs wrote to the document                                // 131\n  //   whose \"data done\" messages have not yet been processed                                                 // 132\n  self._serverDocuments = {};                                                                                 // 133\n                                                                                                              // 134\n  // Array of callbacks to be called after the next update of the local                                       // 135\n  // cache. Used for:                                                                                         // 136\n  //  - Calling methodInvoker.dataVisible and sub ready callbacks after                                       // 137\n  //    the relevant data is flushed.                                                                         // 138\n  //  - Invoking the callbacks of \"half-finished\" methods after reconnect                                     // 139\n  //    quiescence. Specifically, methods whose result was received over the old                              // 140\n  //    connection (so we don't re-send it) but whose data had not been made                                  // 141\n  //    visible.                                                                                              // 142\n  self._afterUpdateCallbacks = [];                                                                            // 143\n                                                                                                              // 144\n  // In two contexts, we buffer all incoming data messages and then process them                              // 145\n  // all at once in a single update:                                                                          // 146\n  //   - During reconnect, we buffer all data messages until all subs that had                                // 147\n  //     been ready before reconnect are ready again, and all methods that are                                // 148\n  //     active have returned their \"data done message\"; then                                                 // 149\n  //   - During the execution of a \"wait\" method, we buffer all data messages                                 // 150\n  //     until the wait method gets its \"data done\" message. (If the wait method                              // 151\n  //     occurs during reconnect, it doesn't get any special handling.)                                       // 152\n  // all data messages are processed in one update.                                                           // 153\n  //                                                                                                          // 154\n  // The following fields are used for this \"quiescence\" process.                                             // 155\n                                                                                                              // 156\n  // This buffers the messages that aren't being processed yet.                                               // 157\n  self._messagesBufferedUntilQuiescence = [];                                                                 // 158\n  // Map from method ID -> true. Methods are removed from this when their                                     // 159\n  // \"data done\" message is received, and we will not quiesce until it is                                     // 160\n  // empty.                                                                                                   // 161\n  self._methodsBlockingQuiescence = {};                                                                       // 162\n  // map from sub ID -> true for subs that were ready (ie, called the sub                                     // 163\n  // ready callback) before reconnect but haven't become ready again yet                                      // 164\n  self._subsBeingRevived = {}; // map from sub._id -> true                                                    // 165\n  // if true, the next data update should reset all stores. (set during                                       // 166\n  // reconnect.)                                                                                              // 167\n  self._resetStores = false;                                                                                  // 168\n                                                                                                              // 169\n  // name -> array of updates for (yet to be created) collections                                             // 170\n  self._updatesForUnknownStores = {};                                                                         // 171\n  // if we're blocking a migration, the retry func                                                            // 172\n  self._retryMigrate = null;                                                                                  // 173\n                                                                                                              // 174\n  // metadata for subscriptions.  Map from sub ID to object with keys:                                        // 175\n  //   - id                                                                                                   // 176\n  //   - name                                                                                                 // 177\n  //   - params                                                                                               // 178\n  //   - inactive (if true, will be cleaned up if not reused in re-run)                                       // 179\n  //   - ready (has the 'ready' message been received?)                                                       // 180\n  //   - readyCallback (an optional callback to call when ready)                                              // 181\n  //   - errorCallback (an optional callback to call if the sub terminates with                               // 182\n  //                    an error, XXX COMPAT WITH 1.0.3.1)                                                    // 183\n  //   - stopCallback (an optional callback to call when the sub terminates                                   // 184\n  //     for any reason, with an error argument if an error triggered the stop)                               // 185\n  self._subscriptions = {};                                                                                   // 186\n                                                                                                              // 187\n  // Reactive userId.                                                                                         // 188\n  self._userId = null;                                                                                        // 189\n  self._userIdDeps = new Tracker.Dependency;                                                                  // 190\n                                                                                                              // 191\n  // Block auto-reload while we're waiting for method responses.                                              // 192\n  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {                                  // 193\n    Package.reload.Reload._onMigrate(function (retry) {                                                       // 194\n      if (!self._readyToMigrate()) {                                                                          // 195\n        if (self._retryMigrate)                                                                               // 196\n          throw new Error(\"Two migrations in progress?\");                                                     // 197\n        self._retryMigrate = retry;                                                                           // 198\n        return false;                                                                                         // 199\n      } else {                                                                                                // 200\n        return [true];                                                                                        // 201\n      }                                                                                                       // 202\n    });                                                                                                       // 203\n  }                                                                                                           // 204\n                                                                                                              // 205\n  var onMessage = function (raw_msg) {                                                                        // 206\n    try {                                                                                                     // 207\n      var msg = DDPCommon.parseDDP(raw_msg);                                                                  // 208\n    } catch (e) {                                                                                             // 209\n      Meteor._debug(\"Exception while parsing DDP\", e);                                                        // 210\n      return;                                                                                                 // 211\n    }                                                                                                         // 212\n                                                                                                              // 213\n    // Any message counts as receiving a pong, as it demonstrates that                                        // 214\n    // the server is still alive.                                                                             // 215\n    if (self._heartbeat) {                                                                                    // 216\n      self._heartbeat.messageReceived();                                                                      // 217\n    }                                                                                                         // 218\n                                                                                                              // 219\n    if (msg === null || !msg.msg) {                                                                           // 220\n      // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back                                       // 221\n      // compat.  Remove this 'if' once the server stops sending welcome                                      // 222\n      // messages (stream_server.js).                                                                         // 223\n      if (! (msg && msg.server_id))                                                                           // 224\n        Meteor._debug(\"discarding invalid livedata message\", msg);                                            // 225\n      return;                                                                                                 // 226\n    }                                                                                                         // 227\n                                                                                                              // 228\n    if (msg.msg === 'connected') {                                                                            // 229\n      self._version = self._versionSuggestion;                                                                // 230\n      self._livedata_connected(msg);                                                                          // 231\n      options.onConnected();                                                                                  // 232\n    }                                                                                                         // 233\n    else if (msg.msg === 'failed') {                                                                          // 234\n      if (_.contains(self._supportedDDPVersions, msg.version)) {                                              // 235\n        self._versionSuggestion = msg.version;                                                                // 236\n        self._stream.reconnect({_force: true});                                                               // 237\n      } else {                                                                                                // 238\n        var description =                                                                                     // 239\n              \"DDP version negotiation failed; server requested version \" + msg.version;                      // 240\n        self._stream.disconnect({_permanent: true, _error: description});                                     // 241\n        options.onDDPVersionNegotiationFailure(description);                                                  // 242\n      }                                                                                                       // 243\n    }                                                                                                         // 244\n    else if (msg.msg === 'ping' && options.respondToPings) {                                                  // 245\n      self._send({msg: \"pong\", id: msg.id});                                                                  // 246\n    }                                                                                                         // 247\n    else if (msg.msg === 'pong') {                                                                            // 248\n      // noop, as we assume everything's a pong                                                               // 249\n    }                                                                                                         // 250\n    else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg))                         // 251\n      self._livedata_data(msg);                                                                               // 252\n    else if (msg.msg === 'nosub')                                                                             // 253\n      self._livedata_nosub(msg);                                                                              // 254\n    else if (msg.msg === 'result')                                                                            // 255\n      self._livedata_result(msg);                                                                             // 256\n    else if (msg.msg === 'error')                                                                             // 257\n      self._livedata_error(msg);                                                                              // 258\n    else                                                                                                      // 259\n      Meteor._debug(\"discarding unknown livedata message type\", msg);                                         // 260\n  };                                                                                                          // 261\n                                                                                                              // 262\n  var onReset = function () {                                                                                 // 263\n    // Send a connect message at the beginning of the stream.                                                 // 264\n    // NOTE: reset is called even on the first connection, so this is                                         // 265\n    // the only place we send this message.                                                                   // 266\n    var msg = {msg: 'connect'};                                                                               // 267\n    if (self._lastSessionId)                                                                                  // 268\n      msg.session = self._lastSessionId;                                                                      // 269\n    msg.version = self._versionSuggestion || self._supportedDDPVersions[0];                                   // 270\n    self._versionSuggestion = msg.version;                                                                    // 271\n    msg.support = self._supportedDDPVersions;                                                                 // 272\n    self._send(msg);                                                                                          // 273\n                                                                                                              // 274\n    // Now, to minimize setup latency, go ahead and blast out all of                                          // 275\n    // our pending methods ands subscriptions before we've even taken                                         // 276\n    // the necessary RTT to know if we successfully reconnected. (1)                                          // 277\n    // They're supposed to be idempotent; (2) even if we did                                                  // 278\n    // reconnect, we're not sure what messages might have gotten lost                                         // 279\n    // (in either direction) since we were disconnected (TCP being                                            // 280\n    // sloppy about that.)                                                                                    // 281\n                                                                                                              // 282\n    // If the current block of methods all got their results (but didn't all get                              // 283\n    // their data visible), discard the empty block now.                                                      // 284\n    if (! _.isEmpty(self._outstandingMethodBlocks) &&                                                         // 285\n        _.isEmpty(self._outstandingMethodBlocks[0].methods)) {                                                // 286\n      self._outstandingMethodBlocks.shift();                                                                  // 287\n    }                                                                                                         // 288\n                                                                                                              // 289\n    // Mark all messages as unsent, they have not yet been sent on this                                       // 290\n    // connection.                                                                                            // 291\n    _.each(self._methodInvokers, function (m) {                                                               // 292\n      m.sentMessage = false;                                                                                  // 293\n    });                                                                                                       // 294\n                                                                                                              // 295\n    // If an `onReconnect` handler is set, call it first. Go through                                          // 296\n    // some hoops to ensure that methods that are called from within                                          // 297\n    // `onReconnect` get executed _before_ ones that were originally                                          // 298\n    // outstanding (since `onReconnect` is used to re-establish auth                                          // 299\n    // certificates)                                                                                          // 300\n    if (self.onReconnect)                                                                                     // 301\n      self._callOnReconnectAndSendAppropriateOutstandingMethods();                                            // 302\n    else                                                                                                      // 303\n      self._sendOutstandingMethods();                                                                         // 304\n                                                                                                              // 305\n    // add new subscriptions at the end. this way they take effect after                                      // 306\n    // the handlers and we don't see flicker.                                                                 // 307\n    _.each(self._subscriptions, function (sub, id) {                                                          // 308\n      self._send({                                                                                            // 309\n        msg: 'sub',                                                                                           // 310\n        id: id,                                                                                               // 311\n        name: sub.name,                                                                                       // 312\n        params: sub.params                                                                                    // 313\n      });                                                                                                     // 314\n    });                                                                                                       // 315\n  };                                                                                                          // 316\n                                                                                                              // 317\n  var onDisconnect = function () {                                                                            // 318\n    if (self._heartbeat) {                                                                                    // 319\n      self._heartbeat.stop();                                                                                 // 320\n      self._heartbeat = null;                                                                                 // 321\n    }                                                                                                         // 322\n  };                                                                                                          // 323\n                                                                                                              // 324\n  if (Meteor.isServer) {                                                                                      // 325\n    self._stream.on('message', Meteor.bindEnvironment(onMessage, \"handling DDP message\"));                    // 326\n    self._stream.on('reset', Meteor.bindEnvironment(onReset, \"handling DDP reset\"));                          // 327\n    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, \"handling DDP disconnect\"));           // 328\n  } else {                                                                                                    // 329\n    self._stream.on('message', onMessage);                                                                    // 330\n    self._stream.on('reset', onReset);                                                                        // 331\n    self._stream.on('disconnect', onDisconnect);                                                              // 332\n  }                                                                                                           // 333\n};                                                                                                            // 334\n                                                                                                              // 335\n// A MethodInvoker manages sending a method to the server and calling the user's                              // 336\n// callbacks. On construction, it registers itself in the connection's                                        // 337\n// _methodInvokers map; it removes itself once the method is fully finished and                               // 338\n// the callback is invoked. This occurs when it has both received a result,                                   // 339\n// and the data written by it is fully visible.                                                               // 340\nvar MethodInvoker = function (options) {                                                                      // 341\n  var self = this;                                                                                            // 342\n                                                                                                              // 343\n  // Public (within this file) fields.                                                                        // 344\n  self.methodId = options.methodId;                                                                           // 345\n  self.sentMessage = false;                                                                                   // 346\n                                                                                                              // 347\n  self._callback = options.callback;                                                                          // 348\n  self._connection = options.connection;                                                                      // 349\n  self._message = options.message;                                                                            // 350\n  self._onResultReceived = options.onResultReceived || function () {};                                        // 351\n  self._wait = options.wait;                                                                                  // 352\n  self._methodResult = null;                                                                                  // 353\n  self._dataVisible = false;                                                                                  // 354\n                                                                                                              // 355\n  // Register with the connection.                                                                            // 356\n  self._connection._methodInvokers[self.methodId] = self;                                                     // 357\n};                                                                                                            // 358\n_.extend(MethodInvoker.prototype, {                                                                           // 359\n  // Sends the method message to the server. May be called additional times if                                // 360\n  // we lose the connection and reconnect before receiving a result.                                          // 361\n  sendMessage: function () {                                                                                  // 362\n    var self = this;                                                                                          // 363\n    // This function is called before sending a method (including resending on                                // 364\n    // reconnect). We should only (re)send methods where we don't already have a                              // 365\n    // result!                                                                                                // 366\n    if (self.gotResult())                                                                                     // 367\n      throw new Error(\"sendingMethod is called on method with result\");                                       // 368\n                                                                                                              // 369\n    // If we're re-sending it, it doesn't matter if data was written the first                                // 370\n    // time.                                                                                                  // 371\n    self._dataVisible = false;                                                                                // 372\n                                                                                                              // 373\n    self.sentMessage = true;                                                                                  // 374\n                                                                                                              // 375\n    // If this is a wait method, make all data messages be buffered until it is                               // 376\n    // done.                                                                                                  // 377\n    if (self._wait)                                                                                           // 378\n      self._connection._methodsBlockingQuiescence[self.methodId] = true;                                      // 379\n                                                                                                              // 380\n    // Actually send the message.                                                                             // 381\n    self._connection._send(self._message);                                                                    // 382\n  },                                                                                                          // 383\n  // Invoke the callback, if we have both a result and know that all data has                                 // 384\n  // been written to the local cache.                                                                         // 385\n  _maybeInvokeCallback: function () {                                                                         // 386\n    var self = this;                                                                                          // 387\n    if (self._methodResult && self._dataVisible) {                                                            // 388\n      // Call the callback. (This won't throw: the callback was wrapped with                                  // 389\n      // bindEnvironment.)                                                                                    // 390\n      self._callback(self._methodResult[0], self._methodResult[1]);                                           // 391\n                                                                                                              // 392\n      // Forget about this method.                                                                            // 393\n      delete self._connection._methodInvokers[self.methodId];                                                 // 394\n                                                                                                              // 395\n      // Let the connection know that this method is finished, so it can try to                               // 396\n      // move on to the next block of methods.                                                                // 397\n      self._connection._outstandingMethodFinished();                                                          // 398\n    }                                                                                                         // 399\n  },                                                                                                          // 400\n  // Call with the result of the method from the server. Only may be called                                   // 401\n  // once; once it is called, you should not call sendMessage again.                                          // 402\n  // If the user provided an onResultReceived callback, call it immediately.                                  // 403\n  // Then invoke the main callback if data is also visible.                                                   // 404\n  receiveResult: function (err, result) {                                                                     // 405\n    var self = this;                                                                                          // 406\n    if (self.gotResult())                                                                                     // 407\n      throw new Error(\"Methods should only receive results once\");                                            // 408\n    self._methodResult = [err, result];                                                                       // 409\n    self._onResultReceived(err, result);                                                                      // 410\n    self._maybeInvokeCallback();                                                                              // 411\n  },                                                                                                          // 412\n  // Call this when all data written by the method is visible. This means that                                // 413\n  // the method has returns its \"data is done\" message *AND* all server                                       // 414\n  // documents that are buffered at that time have been written to the local                                  // 415\n  // cache. Invokes the main callback if the result has been received.                                        // 416\n  dataVisible: function () {                                                                                  // 417\n    var self = this;                                                                                          // 418\n    self._dataVisible = true;                                                                                 // 419\n    self._maybeInvokeCallback();                                                                              // 420\n  },                                                                                                          // 421\n  // True if receiveResult has been called.                                                                   // 422\n  gotResult: function () {                                                                                    // 423\n    var self = this;                                                                                          // 424\n    return !!self._methodResult;                                                                              // 425\n  }                                                                                                           // 426\n});                                                                                                           // 427\n                                                                                                              // 428\n_.extend(Connection.prototype, {                                                                              // 429\n  // 'name' is the name of the data on the wire that should go in the                                         // 430\n  // store. 'wrappedStore' should be an object with methods beginUpdate, update,                              // 431\n  // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.                              // 432\n  registerStore: function (name, wrappedStore) {                                                              // 433\n    var self = this;                                                                                          // 434\n                                                                                                              // 435\n    if (name in self._stores)                                                                                 // 436\n      return false;                                                                                           // 437\n                                                                                                              // 438\n    // Wrap the input object in an object which makes any store method not                                    // 439\n    // implemented by 'store' into a no-op.                                                                   // 440\n    var store = {};                                                                                           // 441\n    _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals',                                            // 442\n            'retrieveOriginals', 'getDoc'], function (method) {                                               // 443\n              store[method] = function () {                                                                   // 444\n                return (wrappedStore[method]                                                                  // 445\n                        ? wrappedStore[method].apply(wrappedStore, arguments)                                 // 446\n                        : undefined);                                                                         // 447\n              };                                                                                              // 448\n            });                                                                                               // 449\n                                                                                                              // 450\n    self._stores[name] = store;                                                                               // 451\n                                                                                                              // 452\n    var queued = self._updatesForUnknownStores[name];                                                         // 453\n    if (queued) {                                                                                             // 454\n      store.beginUpdate(queued.length, false);                                                                // 455\n      _.each(queued, function (msg) {                                                                         // 456\n        store.update(msg);                                                                                    // 457\n      });                                                                                                     // 458\n      store.endUpdate();                                                                                      // 459\n      delete self._updatesForUnknownStores[name];                                                             // 460\n    }                                                                                                         // 461\n                                                                                                              // 462\n    return true;                                                                                              // 463\n  },                                                                                                          // 464\n                                                                                                              // 465\n  /**                                                                                                         // 466\n   * @memberOf Meteor                                                                                         // 467\n   * @summary Subscribe to a record set.  Returns a handle that provides                                      // 468\n   * `stop()` and `ready()` methods.                                                                          // 469\n   * @locus Client                                                                                            // 470\n   * @param {String} name Name of the subscription.  Matches the name of the                                  // 471\n   * server's `publish()` call.                                                                               // 472\n   * @param {Any} [arg1,arg2...] Optional arguments passed to publisher                                       // 473\n   * function on server.                                                                                      // 474\n   * @param {Function|Object} [callbacks] Optional. May include `onStop`                                      // 475\n   * and `onReady` callbacks. If there is an error, it is passed as an                                        // 476\n   * argument to `onStop`. If a function is passed instead of an object, it                                   // 477\n   * is interpreted as an `onReady` callback.                                                                 // 478\n   */                                                                                                         // 479\n  subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {                                   // 480\n    var self = this;                                                                                          // 481\n                                                                                                              // 482\n    var params = Array.prototype.slice.call(arguments, 1);                                                    // 483\n    var callbacks = {};                                                                                       // 484\n    if (params.length) {                                                                                      // 485\n      var lastParam = params[params.length - 1];                                                              // 486\n      if (_.isFunction(lastParam)) {                                                                          // 487\n        callbacks.onReady = params.pop();                                                                     // 488\n      } else if (lastParam &&                                                                                 // 489\n        // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                                      // 490\n        // onStop with an error callback instead.                                                             // 491\n        _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],                                       // 492\n          _.isFunction)) {                                                                                    // 493\n        callbacks = params.pop();                                                                             // 494\n      }                                                                                                       // 495\n    }                                                                                                         // 496\n                                                                                                              // 497\n    // Is there an existing sub with the same name and param, run in an                                       // 498\n    // invalidated Computation? This will happen if we are rerunning an                                       // 499\n    // existing computation.                                                                                  // 500\n    //                                                                                                        // 501\n    // For example, consider a rerun of:                                                                      // 502\n    //                                                                                                        // 503\n    //     Tracker.autorun(function () {                                                                      // 504\n    //       Meteor.subscribe(\"foo\", Session.get(\"foo\"));                                                     // 505\n    //       Meteor.subscribe(\"bar\", Session.get(\"bar\"));                                                     // 506\n    //     });                                                                                                // 507\n    //                                                                                                        // 508\n    // If \"foo\" has changed but \"bar\" has not, we will match the \"bar\"                                        // 509\n    // subcribe to an existing inactive subscription in order to not                                          // 510\n    // unsub and resub the subscription unnecessarily.                                                        // 511\n    //                                                                                                        // 512\n    // We only look for one such sub; if there are N apparently-identical subs                                // 513\n    // being invalidated, we will require N matching subscribe calls to keep                                  // 514\n    // them all active.                                                                                       // 515\n    var existing = _.find(self._subscriptions, function (sub) {                                               // 516\n      return sub.inactive && sub.name === name &&                                                             // 517\n        EJSON.equals(sub.params, params);                                                                     // 518\n    });                                                                                                       // 519\n                                                                                                              // 520\n    var id;                                                                                                   // 521\n    if (existing) {                                                                                           // 522\n      id = existing.id;                                                                                       // 523\n      existing.inactive = false; // reactivate                                                                // 524\n                                                                                                              // 525\n      if (callbacks.onReady) {                                                                                // 526\n        // If the sub is not already ready, replace any ready callback with the                               // 527\n        // one provided now. (It's not really clear what users would expect for                               // 528\n        // an onReady callback inside an autorun; the semantics we provide is                                 // 529\n        // that at the time the sub first becomes ready, we call the last                                     // 530\n        // onReady callback provided, if any.)                                                                // 531\n        if (!existing.ready)                                                                                  // 532\n          existing.readyCallback = callbacks.onReady;                                                         // 533\n      }                                                                                                       // 534\n                                                                                                              // 535\n      // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call                                      // 536\n      // onStop with an optional error argument                                                               // 537\n      if (callbacks.onError) {                                                                                // 538\n        // Replace existing callback if any, so that errors aren't                                            // 539\n        // double-reported.                                                                                   // 540\n        existing.errorCallback = callbacks.onError;                                                           // 541\n      }                                                                                                       // 542\n                                                                                                              // 543\n      if (callbacks.onStop) {                                                                                 // 544\n        existing.stopCallback = callbacks.onStop;                                                             // 545\n      }                                                                                                       // 546\n    } else {                                                                                                  // 547\n      // New sub! Generate an id, save it locally, and send message.                                          // 548\n      id = Random.id();                                                                                       // 549\n      self._subscriptions[id] = {                                                                             // 550\n        id: id,                                                                                               // 551\n        name: name,                                                                                           // 552\n        params: EJSON.clone(params),                                                                          // 553\n        inactive: false,                                                                                      // 554\n        ready: false,                                                                                         // 555\n        readyDeps: new Tracker.Dependency,                                                                    // 556\n        readyCallback: callbacks.onReady,                                                                     // 557\n        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                             // 558\n        errorCallback: callbacks.onError,                                                                     // 559\n        stopCallback: callbacks.onStop,                                                                       // 560\n        connection: self,                                                                                     // 561\n        remove: function() {                                                                                  // 562\n          delete this.connection._subscriptions[this.id];                                                     // 563\n          this.ready && this.readyDeps.changed();                                                             // 564\n        },                                                                                                    // 565\n        stop: function() {                                                                                    // 566\n          this.connection._send({msg: 'unsub', id: id});                                                      // 567\n          this.remove();                                                                                      // 568\n                                                                                                              // 569\n          if (callbacks.onStop) {                                                                             // 570\n            callbacks.onStop();                                                                               // 571\n          }                                                                                                   // 572\n        }                                                                                                     // 573\n      };                                                                                                      // 574\n      self._send({msg: 'sub', id: id, name: name, params: params});                                           // 575\n    }                                                                                                         // 576\n                                                                                                              // 577\n    // return a handle to the application.                                                                    // 578\n    var handle = {                                                                                            // 579\n      stop: function () {                                                                                     // 580\n        if (!_.has(self._subscriptions, id))                                                                  // 581\n          return;                                                                                             // 582\n                                                                                                              // 583\n        self._subscriptions[id].stop();                                                                       // 584\n      },                                                                                                      // 585\n      ready: function () {                                                                                    // 586\n        // return false if we've unsubscribed.                                                                // 587\n        if (!_.has(self._subscriptions, id))                                                                  // 588\n          return false;                                                                                       // 589\n        var record = self._subscriptions[id];                                                                 // 590\n        record.readyDeps.depend();                                                                            // 591\n        return record.ready;                                                                                  // 592\n      },                                                                                                      // 593\n      subscriptionId: id                                                                                      // 594\n    };                                                                                                        // 595\n                                                                                                              // 596\n    if (Tracker.active) {                                                                                     // 597\n      // We're in a reactive computation, so we'd like to unsubscribe when the                                // 598\n      // computation is invalidated... but not if the rerun just re-subscribes                                // 599\n      // to the same subscription!  When a rerun happens, we use onInvalidate                                 // 600\n      // as a change to mark the subscription \"inactive\" so that it can                                       // 601\n      // be reused from the rerun.  If it isn't reused, it's killed from                                      // 602\n      // an afterFlush.                                                                                       // 603\n      Tracker.onInvalidate(function (c) {                                                                     // 604\n        if (_.has(self._subscriptions, id))                                                                   // 605\n          self._subscriptions[id].inactive = true;                                                            // 606\n                                                                                                              // 607\n        Tracker.afterFlush(function () {                                                                      // 608\n          if (_.has(self._subscriptions, id) &&                                                               // 609\n              self._subscriptions[id].inactive)                                                               // 610\n            handle.stop();                                                                                    // 611\n        });                                                                                                   // 612\n      });                                                                                                     // 613\n    }                                                                                                         // 614\n                                                                                                              // 615\n    return handle;                                                                                            // 616\n  },                                                                                                          // 617\n                                                                                                              // 618\n  // options:                                                                                                 // 619\n  // - onLateError {Function(error)} called if an error was received after the ready event.                   // 620\n  //     (errors received before ready cause an error to be thrown)                                           // 621\n  _subscribeAndWait: function (name, args, options) {                                                         // 622\n    var self = this;                                                                                          // 623\n    var f = new Future();                                                                                     // 624\n    var ready = false;                                                                                        // 625\n    var handle;                                                                                               // 626\n    args = args || [];                                                                                        // 627\n    args.push({                                                                                               // 628\n      onReady: function () {                                                                                  // 629\n        ready = true;                                                                                         // 630\n        f['return']();                                                                                        // 631\n      },                                                                                                      // 632\n      onError: function (e) {                                                                                 // 633\n        if (!ready)                                                                                           // 634\n          f['throw'](e);                                                                                      // 635\n        else                                                                                                  // 636\n          options && options.onLateError && options.onLateError(e);                                           // 637\n      }                                                                                                       // 638\n    });                                                                                                       // 639\n                                                                                                              // 640\n    handle = self.subscribe.apply(self, [name].concat(args));                                                 // 641\n    f.wait();                                                                                                 // 642\n    return handle;                                                                                            // 643\n  },                                                                                                          // 644\n                                                                                                              // 645\n  methods: function (methods) {                                                                               // 646\n    var self = this;                                                                                          // 647\n    _.each(methods, function (func, name) {                                                                   // 648\n      if (typeof func !== 'function')                                                                         // 649\n        throw new Error(\"Method '\" + name + \"' must be a function\");                                          // 650\n      if (self._methodHandlers[name])                                                                         // 651\n        throw new Error(\"A method named '\" + name + \"' is already defined\");                                  // 652\n      self._methodHandlers[name] = func;                                                                      // 653\n    });                                                                                                       // 654\n  },                                                                                                          // 655\n                                                                                                              // 656\n  /**                                                                                                         // 657\n   * @memberOf Meteor                                                                                         // 658\n   * @summary Invokes a method passing any number of arguments.                                               // 659\n   * @locus Anywhere                                                                                          // 660\n   * @param {String} name Name of method to invoke                                                            // 661\n   * @param {EJSONable} [arg1,arg2...] Optional method arguments                                              // 662\n   * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).\n   */                                                                                                         // 664\n  call: function (name /* .. [arguments] .. callback */) {                                                    // 665\n    // if it's a function, the last argument is the result callback,                                          // 666\n    // not a parameter to the remote method.                                                                  // 667\n    var args = Array.prototype.slice.call(arguments, 1);                                                      // 668\n    if (args.length && typeof args[args.length - 1] === \"function\")                                           // 669\n      var callback = args.pop();                                                                              // 670\n    return this.apply(name, args, callback);                                                                  // 671\n  },                                                                                                          // 672\n                                                                                                              // 673\n  // @param options {Optional Object}                                                                         // 674\n  //   wait: Boolean - Should we wait to call this until all current methods                                  // 675\n  //                   are fully finished, and block subsequent method calls                                  // 676\n  //                   until this method is fully finished?                                                   // 677\n  //                   (does not affect methods called from within this method)                               // 678\n  //   onResultReceived: Function - a callback to call as soon as the method                                  // 679\n  //                                result is received. the data written by                                   // 680\n  //                                the method may not yet be in the cache!                                   // 681\n  //   returnStubValue: Boolean - If true then in cases where we would have                                   // 682\n  //                              otherwise discarded the stub's return value                                 // 683\n  //                              and returned undefined, instead we go ahead                                 // 684\n  //                              and return it.  Specifically, this is any                                   // 685\n  //                              time other than when (a) we are already                                     // 686\n  //                              inside a stub or (b) we are in Node and no                                  // 687\n  //                              callback was provided.  Currently we require                                // 688\n  //                              this flag to be explicitly passed to reduce                                 // 689\n  //                              the likelihood that stub return values will                                 // 690\n  //                              be confused with server return values; we                                   // 691\n  //                              may improve this in future.                                                 // 692\n  // @param callback {Optional Function}                                                                      // 693\n                                                                                                              // 694\n  /**                                                                                                         // 695\n   * @memberOf Meteor                                                                                         // 696\n   * @summary Invoke a method passing an array of arguments.                                                  // 697\n   * @locus Anywhere                                                                                          // 698\n   * @param {String} name Name of method to invoke                                                            // 699\n   * @param {EJSONable[]} args Method arguments                                                               // 700\n   * @param {Object} [options]                                                                                // 701\n   * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.\n   * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.\n   * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).\n   */                                                                                                         // 705\n  apply: function (name, args, options, callback) {                                                           // 706\n    var self = this;                                                                                          // 707\n                                                                                                              // 708\n    // We were passed 3 arguments. They may be either (name, args, options)                                   // 709\n    // or (name, args, callback)                                                                              // 710\n    if (!callback && typeof options === 'function') {                                                         // 711\n      callback = options;                                                                                     // 712\n      options = {};                                                                                           // 713\n    }                                                                                                         // 714\n    options = options || {};                                                                                  // 715\n                                                                                                              // 716\n    if (callback) {                                                                                           // 717\n      // XXX would it be better form to do the binding in stream.on,                                          // 718\n      // or caller, instead of here?                                                                          // 719\n      // XXX improve error message (and how we report it)                                                     // 720\n      callback = Meteor.bindEnvironment(                                                                      // 721\n        callback,                                                                                             // 722\n        \"delivering result of invoking '\" + name + \"'\"                                                        // 723\n      );                                                                                                      // 724\n    }                                                                                                         // 725\n                                                                                                              // 726\n    // Keep our args safe from mutation (eg if we don't send the message for a                                // 727\n    // while because of a wait method).                                                                       // 728\n    args = EJSON.clone(args);                                                                                 // 729\n                                                                                                              // 730\n    // Lazily allocate method ID once we know that it'll be needed.                                           // 731\n    var methodId = (function () {                                                                             // 732\n      var id;                                                                                                 // 733\n      return function () {                                                                                    // 734\n        if (id === undefined)                                                                                 // 735\n          id = '' + (self._nextMethodId++);                                                                   // 736\n        return id;                                                                                            // 737\n      };                                                                                                      // 738\n    })();                                                                                                     // 739\n                                                                                                              // 740\n    var enclosing = DDP._CurrentInvocation.get();                                                             // 741\n    var alreadyInSimulation = enclosing && enclosing.isSimulation;                                            // 742\n                                                                                                              // 743\n    // Lazily generate a randomSeed, only if it is requested by the stub.                                     // 744\n    // The random streams only have utility if they're used on both the client                                // 745\n    // and the server; if the client doesn't generate any 'random' values                                     // 746\n    // then we don't expect the server to generate any either.                                                // 747\n    // Less commonly, the server may perform different actions from the client,                               // 748\n    // and may in fact generate values where the client did not, but we don't                                 // 749\n    // have any client-side values to match, so even here we may as well just                                 // 750\n    // use a random seed on the server.  In that case, we don't pass the                                      // 751\n    // randomSeed to save bandwidth, and we don't even generate it to save a                                  // 752\n    // bit of CPU and to avoid consuming entropy.                                                             // 753\n    var randomSeed = null;                                                                                    // 754\n    var randomSeedGenerator = function () {                                                                   // 755\n      if (randomSeed === null) {                                                                              // 756\n        randomSeed = DDPCommon.makeRpcSeed(enclosing, name);                                                  // 757\n      }                                                                                                       // 758\n      return randomSeed;                                                                                      // 759\n    };                                                                                                        // 760\n                                                                                                              // 761\n    // Run the stub, if we have one. The stub is supposed to make some                                        // 762\n    // temporary writes to the database to give the user a smooth experience                                  // 763\n    // until the actual result of executing the method comes back from the                                    // 764\n    // server (whereupon the temporary writes to the database will be reversed                                // 765\n    // during the beginUpdate/endUpdate process.)                                                             // 766\n    //                                                                                                        // 767\n    // Normally, we ignore the return value of the stub (even if it is an                                     // 768\n    // exception), in favor of the real return value from the server. The                                     // 769\n    // exception is if the *caller* is a stub. In that case, we're not going                                  // 770\n    // to do a RPC, so we use the return value of the stub as our return                                      // 771\n    // value.                                                                                                 // 772\n                                                                                                              // 773\n    var stub = self._methodHandlers[name];                                                                    // 774\n    if (stub) {                                                                                               // 775\n      var setUserId = function(userId) {                                                                      // 776\n        self.setUserId(userId);                                                                               // 777\n      };                                                                                                      // 778\n                                                                                                              // 779\n      var invocation = new DDPCommon.MethodInvocation({                                                       // 780\n        isSimulation: true,                                                                                   // 781\n        userId: self.userId(),                                                                                // 782\n        setUserId: setUserId,                                                                                 // 783\n        randomSeed: function () { return randomSeedGenerator(); }                                             // 784\n      });                                                                                                     // 785\n                                                                                                              // 786\n      if (!alreadyInSimulation)                                                                               // 787\n        self._saveOriginals();                                                                                // 788\n                                                                                                              // 789\n      try {                                                                                                   // 790\n        // Note that unlike in the corresponding server code, we never audit                                  // 791\n        // that stubs check() their arguments.                                                                // 792\n        var stubReturnValue = DDP._CurrentInvocation.withValue(invocation, function () {                      // 793\n          if (Meteor.isServer) {                                                                              // 794\n            // Because saveOriginals and retrieveOriginals aren't reentrant,                                  // 795\n            // don't allow stubs to yield.                                                                    // 796\n            return Meteor._noYieldsAllowed(function () {                                                      // 797\n              // re-clone, so that the stub can't affect our caller's values                                  // 798\n              return stub.apply(invocation, EJSON.clone(args));                                               // 799\n            });                                                                                               // 800\n          } else {                                                                                            // 801\n            return stub.apply(invocation, EJSON.clone(args));                                                 // 802\n          }                                                                                                   // 803\n        });                                                                                                   // 804\n      }                                                                                                       // 805\n      catch (e) {                                                                                             // 806\n        var exception = e;                                                                                    // 807\n      }                                                                                                       // 808\n                                                                                                              // 809\n      if (!alreadyInSimulation)                                                                               // 810\n        self._retrieveAndStoreOriginals(methodId());                                                          // 811\n    }                                                                                                         // 812\n                                                                                                              // 813\n    // If we're in a simulation, stop and return the result we have,                                          // 814\n    // rather than going on to do an RPC. If there was no stub,                                               // 815\n    // we'll end up returning undefined.                                                                      // 816\n    if (alreadyInSimulation) {                                                                                // 817\n      if (callback) {                                                                                         // 818\n        callback(exception, stubReturnValue);                                                                 // 819\n        return undefined;                                                                                     // 820\n      }                                                                                                       // 821\n      if (exception)                                                                                          // 822\n        throw exception;                                                                                      // 823\n      return stubReturnValue;                                                                                 // 824\n    }                                                                                                         // 825\n                                                                                                              // 826\n    // If an exception occurred in a stub, and we're ignoring it                                              // 827\n    // because we're doing an RPC and want to use what the server                                             // 828\n    // returns instead, log it so the developer knows                                                         // 829\n    // (unless they explicitly ask to see the error).                                                         // 830\n    //                                                                                                        // 831\n    // Tests can set the 'expected' flag on an exception so it won't                                          // 832\n    // go to log.                                                                                             // 833\n    if (exception) {                                                                                          // 834\n      if (options.throwStubExceptions) {                                                                      // 835\n        throw exception;                                                                                      // 836\n      } else if (!exception.expected) {                                                                       // 837\n        Meteor._debug(\"Exception while simulating the effect of invoking '\" +                                 // 838\n          name + \"'\", exception, exception.stack);                                                            // 839\n      }                                                                                                       // 840\n    }                                                                                                         // 841\n                                                                                                              // 842\n                                                                                                              // 843\n    // At this point we're definitely doing an RPC, and we're going to                                        // 844\n    // return the value of the RPC to the caller.                                                             // 845\n                                                                                                              // 846\n    // If the caller didn't give a callback, decide what to do.                                               // 847\n    if (!callback) {                                                                                          // 848\n      if (Meteor.isClient) {                                                                                  // 849\n        // On the client, we don't have fibers, so we can't block. The                                        // 850\n        // only thing we can do is to return undefined and discard the                                        // 851\n        // result of the RPC. If an error occurred then print the error                                       // 852\n        // to the console.                                                                                    // 853\n        callback = function (err) {                                                                           // 854\n          err && Meteor._debug(\"Error invoking Method '\" + name + \"':\",                                       // 855\n                               err.message);                                                                  // 856\n        };                                                                                                    // 857\n      } else {                                                                                                // 858\n        // On the server, make the function synchronous. Throw on                                             // 859\n        // errors, return on success.                                                                         // 860\n        var future = new Future;                                                                              // 861\n        callback = future.resolver();                                                                         // 862\n      }                                                                                                       // 863\n    }                                                                                                         // 864\n    // Send the RPC. Note that on the client, it is important that the                                        // 865\n    // stub have finished before we send the RPC, so that we know we have                                     // 866\n    // a complete list of which local documents the stub wrote.                                               // 867\n    var message = {                                                                                           // 868\n      msg: 'method',                                                                                          // 869\n      method: name,                                                                                           // 870\n      params: args,                                                                                           // 871\n      id: methodId()                                                                                          // 872\n    };                                                                                                        // 873\n                                                                                                              // 874\n    // Send the randomSeed only if we used it                                                                 // 875\n    if (randomSeed !== null) {                                                                                // 876\n      message.randomSeed = randomSeed;                                                                        // 877\n    }                                                                                                         // 878\n                                                                                                              // 879\n    var methodInvoker = new MethodInvoker({                                                                   // 880\n      methodId: methodId(),                                                                                   // 881\n      callback: callback,                                                                                     // 882\n      connection: self,                                                                                       // 883\n      onResultReceived: options.onResultReceived,                                                             // 884\n      wait: !!options.wait,                                                                                   // 885\n      message: message                                                                                        // 886\n    });                                                                                                       // 887\n                                                                                                              // 888\n    if (options.wait) {                                                                                       // 889\n      // It's a wait method! Wait methods go in their own block.                                              // 890\n      self._outstandingMethodBlocks.push(                                                                     // 891\n        {wait: true, methods: [methodInvoker]});                                                              // 892\n    } else {                                                                                                  // 893\n      // Not a wait method. Start a new block if the previous block was a wait                                // 894\n      // block, and add it to the last block of methods.                                                      // 895\n      if (_.isEmpty(self._outstandingMethodBlocks) ||                                                         // 896\n          _.last(self._outstandingMethodBlocks).wait)                                                         // 897\n        self._outstandingMethodBlocks.push({wait: false, methods: []});                                       // 898\n      _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);                                      // 899\n    }                                                                                                         // 900\n                                                                                                              // 901\n    // If we added it to the first block, send it out now.                                                    // 902\n    if (self._outstandingMethodBlocks.length === 1)                                                           // 903\n      methodInvoker.sendMessage();                                                                            // 904\n                                                                                                              // 905\n    // If we're using the default callback on the server,                                                     // 906\n    // block waiting for the result.                                                                          // 907\n    if (future) {                                                                                             // 908\n      return future.wait();                                                                                   // 909\n    }                                                                                                         // 910\n    return options.returnStubValue ? stubReturnValue : undefined;                                             // 911\n  },                                                                                                          // 912\n                                                                                                              // 913\n  // Before calling a method stub, prepare all stores to track changes and allow                              // 914\n  // _retrieveAndStoreOriginals to get the original versions of changed                                       // 915\n  // documents.                                                                                               // 916\n  _saveOriginals: function () {                                                                               // 917\n    var self = this;                                                                                          // 918\n    _.each(self._stores, function (s) {                                                                       // 919\n      s.saveOriginals();                                                                                      // 920\n    });                                                                                                       // 921\n  },                                                                                                          // 922\n  // Retrieves the original versions of all documents modified by the stub for                                // 923\n  // method 'methodId' from all stores and saves them to _serverDocuments (keyed                              // 924\n  // by document) and _documentsWrittenByStub (keyed by method ID).                                           // 925\n  _retrieveAndStoreOriginals: function (methodId) {                                                           // 926\n    var self = this;                                                                                          // 927\n    if (self._documentsWrittenByStub[methodId])                                                               // 928\n      throw new Error(\"Duplicate methodId in _retrieveAndStoreOriginals\");                                    // 929\n                                                                                                              // 930\n    var docsWritten = [];                                                                                     // 931\n    _.each(self._stores, function (s, collection) {                                                           // 932\n      var originals = s.retrieveOriginals();                                                                  // 933\n      // not all stores define retrieveOriginals                                                              // 934\n      if (!originals)                                                                                         // 935\n        return;                                                                                               // 936\n      originals.forEach(function (doc, id) {                                                                  // 937\n        docsWritten.push({collection: collection, id: id});                                                   // 938\n        if (!_.has(self._serverDocuments, collection))                                                        // 939\n          self._serverDocuments[collection] = new MongoIDMap;                                                 // 940\n        var serverDoc = self._serverDocuments[collection].setDefault(id, {});                                 // 941\n        if (serverDoc.writtenByStubs) {                                                                       // 942\n          // We're not the first stub to write this doc. Just add our method ID                               // 943\n          // to the record.                                                                                   // 944\n          serverDoc.writtenByStubs[methodId] = true;                                                          // 945\n        } else {                                                                                              // 946\n          // First stub! Save the original value and our method ID.                                           // 947\n          serverDoc.document = doc;                                                                           // 948\n          serverDoc.flushCallbacks = [];                                                                      // 949\n          serverDoc.writtenByStubs = {};                                                                      // 950\n          serverDoc.writtenByStubs[methodId] = true;                                                          // 951\n        }                                                                                                     // 952\n      });                                                                                                     // 953\n    });                                                                                                       // 954\n    if (!_.isEmpty(docsWritten)) {                                                                            // 955\n      self._documentsWrittenByStub[methodId] = docsWritten;                                                   // 956\n    }                                                                                                         // 957\n  },                                                                                                          // 958\n                                                                                                              // 959\n  // This is very much a private function we use to make the tests                                            // 960\n  // take up fewer server resources after they complete.                                                      // 961\n  _unsubscribeAll: function () {                                                                              // 962\n    var self = this;                                                                                          // 963\n    _.each(_.clone(self._subscriptions), function (sub, id) {                                                 // 964\n      // Avoid killing the autoupdate subscription so that developers                                         // 965\n      // still get hot code pushes when writing tests.                                                        // 966\n      //                                                                                                      // 967\n      // XXX it's a hack to encode knowledge about autoupdate here,                                           // 968\n      // but it doesn't seem worth it yet to have a special API for                                           // 969\n      // subscriptions to preserve after unit tests.                                                          // 970\n      if (sub.name !== 'meteor_autoupdate_clientVersions') {                                                  // 971\n        self._subscriptions[id].stop();                                                                       // 972\n      }                                                                                                       // 973\n    });                                                                                                       // 974\n  },                                                                                                          // 975\n                                                                                                              // 976\n  // Sends the DDP stringification of the given message object                                                // 977\n  _send: function (obj) {                                                                                     // 978\n    var self = this;                                                                                          // 979\n    self._stream.send(DDPCommon.stringifyDDP(obj));                                                           // 980\n  },                                                                                                          // 981\n                                                                                                              // 982\n  // We detected via DDP-level heartbeats that we've lost the                                                 // 983\n  // connection.  Unlike `disconnect` or `close`, a lost connection                                           // 984\n  // will be automatically retried.                                                                           // 985\n  _lostConnection: function (error) {                                                                         // 986\n    var self = this;                                                                                          // 987\n    self._stream._lostConnection(error);                                                                      // 988\n  },                                                                                                          // 989\n                                                                                                              // 990\n  /**                                                                                                         // 991\n   * @summary Get the current connection status. A reactive data source.                                      // 992\n   * @locus Client                                                                                            // 993\n   * @memberOf Meteor                                                                                         // 994\n   */                                                                                                         // 995\n  status: function (/*passthrough args*/) {                                                                   // 996\n    var self = this;                                                                                          // 997\n    return self._stream.status.apply(self._stream, arguments);                                                // 998\n  },                                                                                                          // 999\n                                                                                                              // 1000\n  /**                                                                                                         // 1001\n   * @summary Force an immediate reconnection attempt if the client is not connected to the server.           // 1002\n                                                                                                              // 1003\n  This method does nothing if the client is already connected.                                                // 1004\n   * @locus Client                                                                                            // 1005\n   * @memberOf Meteor                                                                                         // 1006\n   */                                                                                                         // 1007\n  reconnect: function (/*passthrough args*/) {                                                                // 1008\n    var self = this;                                                                                          // 1009\n    return self._stream.reconnect.apply(self._stream, arguments);                                             // 1010\n  },                                                                                                          // 1011\n                                                                                                              // 1012\n  /**                                                                                                         // 1013\n   * @summary Disconnect the client from the server.                                                          // 1014\n   * @locus Client                                                                                            // 1015\n   * @memberOf Meteor                                                                                         // 1016\n   */                                                                                                         // 1017\n  disconnect: function (/*passthrough args*/) {                                                               // 1018\n    var self = this;                                                                                          // 1019\n    return self._stream.disconnect.apply(self._stream, arguments);                                            // 1020\n  },                                                                                                          // 1021\n                                                                                                              // 1022\n  close: function () {                                                                                        // 1023\n    var self = this;                                                                                          // 1024\n    return self._stream.disconnect({_permanent: true});                                                       // 1025\n  },                                                                                                          // 1026\n                                                                                                              // 1027\n  ///                                                                                                         // 1028\n  /// Reactive user system                                                                                    // 1029\n  ///                                                                                                         // 1030\n  userId: function () {                                                                                       // 1031\n    var self = this;                                                                                          // 1032\n    if (self._userIdDeps)                                                                                     // 1033\n      self._userIdDeps.depend();                                                                              // 1034\n    return self._userId;                                                                                      // 1035\n  },                                                                                                          // 1036\n                                                                                                              // 1037\n  setUserId: function (userId) {                                                                              // 1038\n    var self = this;                                                                                          // 1039\n    // Avoid invalidating dependents if setUserId is called with current value.                               // 1040\n    if (self._userId === userId)                                                                              // 1041\n      return;                                                                                                 // 1042\n    self._userId = userId;                                                                                    // 1043\n    if (self._userIdDeps)                                                                                     // 1044\n      self._userIdDeps.changed();                                                                             // 1045\n  },                                                                                                          // 1046\n                                                                                                              // 1047\n  // Returns true if we are in a state after reconnect of waiting for subs to be                              // 1048\n  // revived or early methods to finish their data, or we are waiting for a                                   // 1049\n  // \"wait\" method to finish.                                                                                 // 1050\n  _waitingForQuiescence: function () {                                                                        // 1051\n    var self = this;                                                                                          // 1052\n    return (! _.isEmpty(self._subsBeingRevived) ||                                                            // 1053\n            ! _.isEmpty(self._methodsBlockingQuiescence));                                                    // 1054\n  },                                                                                                          // 1055\n                                                                                                              // 1056\n  // Returns true if any method whose message has been sent to the server has                                 // 1057\n  // not yet invoked its user callback.                                                                       // 1058\n  _anyMethodsAreOutstanding: function () {                                                                    // 1059\n    var self = this;                                                                                          // 1060\n    return _.any(_.pluck(self._methodInvokers, 'sentMessage'));                                               // 1061\n  },                                                                                                          // 1062\n                                                                                                              // 1063\n  _livedata_connected: function (msg) {                                                                       // 1064\n    var self = this;                                                                                          // 1065\n                                                                                                              // 1066\n    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {                                          // 1067\n      self._heartbeat = new DDPCommon.Heartbeat({                                                             // 1068\n        heartbeatInterval: self._heartbeatInterval,                                                           // 1069\n        heartbeatTimeout: self._heartbeatTimeout,                                                             // 1070\n        onTimeout: function () {                                                                              // 1071\n          self._lostConnection(                                                                               // 1072\n            new DDP.ConnectionError(\"DDP heartbeat timed out\"));                                              // 1073\n        },                                                                                                    // 1074\n        sendPing: function () {                                                                               // 1075\n          self._send({msg: 'ping'});                                                                          // 1076\n        }                                                                                                     // 1077\n      });                                                                                                     // 1078\n      self._heartbeat.start();                                                                                // 1079\n    }                                                                                                         // 1080\n                                                                                                              // 1081\n    // If this is a reconnect, we'll have to reset all stores.                                                // 1082\n    if (self._lastSessionId)                                                                                  // 1083\n      self._resetStores = true;                                                                               // 1084\n                                                                                                              // 1085\n    if (typeof (msg.session) === \"string\") {                                                                  // 1086\n      var reconnectedToPreviousSession = (self._lastSessionId === msg.session);                               // 1087\n      self._lastSessionId = msg.session;                                                                      // 1088\n    }                                                                                                         // 1089\n                                                                                                              // 1090\n    if (reconnectedToPreviousSession) {                                                                       // 1091\n      // Successful reconnection -- pick up where we left off.  Note that right                               // 1092\n      // now, this never happens: the server never connects us to a previous                                  // 1093\n      // session, because DDP doesn't provide enough data for the server to know                              // 1094\n      // what messages the client has processed. We need to improve DDP to make                               // 1095\n      // this possible, at which point we'll probably need more code here.                                    // 1096\n      return;                                                                                                 // 1097\n    }                                                                                                         // 1098\n                                                                                                              // 1099\n    // Server doesn't have our data any more. Re-sync a new session.                                          // 1100\n                                                                                                              // 1101\n    // Forget about messages we were buffering for unknown collections. They'll                               // 1102\n    // be resent if still relevant.                                                                           // 1103\n    self._updatesForUnknownStores = {};                                                                       // 1104\n                                                                                                              // 1105\n    if (self._resetStores) {                                                                                  // 1106\n      // Forget about the effects of stubs. We'll be resetting all collections                                // 1107\n      // anyway.                                                                                              // 1108\n      self._documentsWrittenByStub = {};                                                                      // 1109\n      self._serverDocuments = {};                                                                             // 1110\n    }                                                                                                         // 1111\n                                                                                                              // 1112\n    // Clear _afterUpdateCallbacks.                                                                           // 1113\n    self._afterUpdateCallbacks = [];                                                                          // 1114\n                                                                                                              // 1115\n    // Mark all named subscriptions which are ready (ie, we already called the                                // 1116\n    // ready callback) as needing to be revived.                                                              // 1117\n    // XXX We should also block reconnect quiescence until unnamed subscriptions                              // 1118\n    //     (eg, autopublish) are done re-publishing to avoid flicker!                                         // 1119\n    self._subsBeingRevived = {};                                                                              // 1120\n    _.each(self._subscriptions, function (sub, id) {                                                          // 1121\n      if (sub.ready)                                                                                          // 1122\n        self._subsBeingRevived[id] = true;                                                                    // 1123\n    });                                                                                                       // 1124\n                                                                                                              // 1125\n    // Arrange for \"half-finished\" methods to have their callbacks run, and                                   // 1126\n    // track methods that were sent on this connection so that we don't                                       // 1127\n    // quiesce until they are all done.                                                                       // 1128\n    //                                                                                                        // 1129\n    // Start by clearing _methodsBlockingQuiescence: methods sent before                                      // 1130\n    // reconnect don't matter, and any \"wait\" methods sent on the new connection                              // 1131\n    // that we drop here will be restored by the loop below.                                                  // 1132\n    self._methodsBlockingQuiescence = {};                                                                     // 1133\n    if (self._resetStores) {                                                                                  // 1134\n      _.each(self._methodInvokers, function (invoker) {                                                       // 1135\n        if (invoker.gotResult()) {                                                                            // 1136\n          // This method already got its result, but it didn't call its callback                              // 1137\n          // because its data didn't become visible. We did not resend the                                    // 1138\n          // method RPC. We'll call its callback when we get a full quiesce,                                  // 1139\n          // since that's as close as we'll get to \"data must be visible\".                                    // 1140\n          self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));                              // 1141\n        } else if (invoker.sentMessage) {                                                                     // 1142\n          // This method has been sent on this connection (maybe as a resend                                  // 1143\n          // from the last connection, maybe from onReconnect, maybe just very                                // 1144\n          // quickly before processing the connected message).                                                // 1145\n          //                                                                                                  // 1146\n          // We don't need to do anything special to ensure its callbacks get                                 // 1147\n          // called, but we'll count it as a method which is preventing                                       // 1148\n          // reconnect quiescence. (eg, it might be a login method that was run                               // 1149\n          // from onReconnect, and we don't want to see flicker by seeing a                                   // 1150\n          // logged-out state.)                                                                               // 1151\n          self._methodsBlockingQuiescence[invoker.methodId] = true;                                           // 1152\n        }                                                                                                     // 1153\n      });                                                                                                     // 1154\n    }                                                                                                         // 1155\n                                                                                                              // 1156\n    self._messagesBufferedUntilQuiescence = [];                                                               // 1157\n                                                                                                              // 1158\n    // If we're not waiting on any methods or subs, we can reset the stores and                               // 1159\n    // call the callbacks immediately.                                                                        // 1160\n    if (!self._waitingForQuiescence()) {                                                                      // 1161\n      if (self._resetStores) {                                                                                // 1162\n        _.each(self._stores, function (s) {                                                                   // 1163\n          s.beginUpdate(0, true);                                                                             // 1164\n          s.endUpdate();                                                                                      // 1165\n        });                                                                                                   // 1166\n        self._resetStores = false;                                                                            // 1167\n      }                                                                                                       // 1168\n      self._runAfterUpdateCallbacks();                                                                        // 1169\n    }                                                                                                         // 1170\n  },                                                                                                          // 1171\n                                                                                                              // 1172\n                                                                                                              // 1173\n  _processOneDataMessage: function (msg, updates) {                                                           // 1174\n    var self = this;                                                                                          // 1175\n    // Using underscore here so as not to need to capitalize.                                                 // 1176\n    self['_process_' + msg.msg](msg, updates);                                                                // 1177\n  },                                                                                                          // 1178\n                                                                                                              // 1179\n                                                                                                              // 1180\n  _livedata_data: function (msg) {                                                                            // 1181\n    var self = this;                                                                                          // 1182\n                                                                                                              // 1183\n    // collection name -> array of messages                                                                   // 1184\n    var updates = {};                                                                                         // 1185\n                                                                                                              // 1186\n    if (self._waitingForQuiescence()) {                                                                       // 1187\n      self._messagesBufferedUntilQuiescence.push(msg);                                                        // 1188\n                                                                                                              // 1189\n      if (msg.msg === \"nosub\")                                                                                // 1190\n        delete self._subsBeingRevived[msg.id];                                                                // 1191\n                                                                                                              // 1192\n      _.each(msg.subs || [], function (subId) {                                                               // 1193\n        delete self._subsBeingRevived[subId];                                                                 // 1194\n      });                                                                                                     // 1195\n      _.each(msg.methods || [], function (methodId) {                                                         // 1196\n        delete self._methodsBlockingQuiescence[methodId];                                                     // 1197\n      });                                                                                                     // 1198\n                                                                                                              // 1199\n      if (self._waitingForQuiescence())                                                                       // 1200\n        return;                                                                                               // 1201\n                                                                                                              // 1202\n      // No methods or subs are blocking quiescence!                                                          // 1203\n      // We'll now process and all of our buffered messages, reset all stores,                                // 1204\n      // and apply them all at once.                                                                          // 1205\n      _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {                                  // 1206\n        self._processOneDataMessage(bufferedMsg, updates);                                                    // 1207\n      });                                                                                                     // 1208\n      self._messagesBufferedUntilQuiescence = [];                                                             // 1209\n    } else {                                                                                                  // 1210\n      self._processOneDataMessage(msg, updates);                                                              // 1211\n    }                                                                                                         // 1212\n                                                                                                              // 1213\n    if (self._resetStores || !_.isEmpty(updates)) {                                                           // 1214\n      // Begin a transactional update of each store.                                                          // 1215\n      _.each(self._stores, function (s, storeName) {                                                          // 1216\n        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0,                              // 1217\n                      self._resetStores);                                                                     // 1218\n      });                                                                                                     // 1219\n      self._resetStores = false;                                                                              // 1220\n                                                                                                              // 1221\n      _.each(updates, function (updateMessages, storeName) {                                                  // 1222\n        var store = self._stores[storeName];                                                                  // 1223\n        if (store) {                                                                                          // 1224\n          _.each(updateMessages, function (updateMessage) {                                                   // 1225\n            store.update(updateMessage);                                                                      // 1226\n          });                                                                                                 // 1227\n        } else {                                                                                              // 1228\n          // Nobody's listening for this data. Queue it up until                                              // 1229\n          // someone wants it.                                                                                // 1230\n          // XXX memory use will grow without bound if you forget to                                          // 1231\n          // create a collection or just don't care about it... going                                         // 1232\n          // to have to do something about that.                                                              // 1233\n          if (!_.has(self._updatesForUnknownStores, storeName))                                               // 1234\n            self._updatesForUnknownStores[storeName] = [];                                                    // 1235\n          Array.prototype.push.apply(self._updatesForUnknownStores[storeName],                                // 1236\n                                     updateMessages);                                                         // 1237\n        }                                                                                                     // 1238\n      });                                                                                                     // 1239\n                                                                                                              // 1240\n      // End update transaction.                                                                              // 1241\n      _.each(self._stores, function (s) { s.endUpdate(); });                                                  // 1242\n    }                                                                                                         // 1243\n                                                                                                              // 1244\n    self._runAfterUpdateCallbacks();                                                                          // 1245\n  },                                                                                                          // 1246\n                                                                                                              // 1247\n  // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose                                   // 1248\n  // relevant docs have been flushed, as well as dataVisible callbacks at                                     // 1249\n  // reconnect-quiescence time.                                                                               // 1250\n  _runAfterUpdateCallbacks: function () {                                                                     // 1251\n    var self = this;                                                                                          // 1252\n    var callbacks = self._afterUpdateCallbacks;                                                               // 1253\n    self._afterUpdateCallbacks = [];                                                                          // 1254\n    _.each(callbacks, function (c) {                                                                          // 1255\n      c();                                                                                                    // 1256\n    });                                                                                                       // 1257\n  },                                                                                                          // 1258\n                                                                                                              // 1259\n  _pushUpdate: function (updates, collection, msg) {                                                          // 1260\n    var self = this;                                                                                          // 1261\n    if (!_.has(updates, collection)) {                                                                        // 1262\n      updates[collection] = [];                                                                               // 1263\n    }                                                                                                         // 1264\n    updates[collection].push(msg);                                                                            // 1265\n  },                                                                                                          // 1266\n                                                                                                              // 1267\n  _getServerDoc: function (collection, id) {                                                                  // 1268\n    var self = this;                                                                                          // 1269\n    if (!_.has(self._serverDocuments, collection))                                                            // 1270\n      return null;                                                                                            // 1271\n    var serverDocsForCollection = self._serverDocuments[collection];                                          // 1272\n    return serverDocsForCollection.get(id) || null;                                                           // 1273\n  },                                                                                                          // 1274\n                                                                                                              // 1275\n  _process_added: function (msg, updates) {                                                                   // 1276\n    var self = this;                                                                                          // 1277\n    var id = MongoID.idParse(msg.id);                                                                         // 1278\n    var serverDoc = self._getServerDoc(msg.collection, id);                                                   // 1279\n    if (serverDoc) {                                                                                          // 1280\n      // Some outstanding stub wrote here.                                                                    // 1281\n      var isExisting = (serverDoc.document !== undefined);                                                    // 1282\n                                                                                                              // 1283\n      serverDoc.document = msg.fields || {};                                                                  // 1284\n      serverDoc.document._id = id;                                                                            // 1285\n                                                                                                              // 1286\n      if (self._resetStores) {                                                                                // 1287\n        // During reconnect the server is sending adds for existing ids.                                      // 1288\n        // Always push an update so that document stays in the store after                                    // 1289\n        // reset. Use current version of the document for this update, so                                     // 1290\n        // that stub-written values are preserved.                                                            // 1291\n        var currentDoc = self._stores[msg.collection].getDoc(msg.id);                                         // 1292\n        if (currentDoc !== undefined)                                                                         // 1293\n          msg.fields = currentDoc;                                                                            // 1294\n                                                                                                              // 1295\n        self._pushUpdate(updates, msg.collection, msg);                                                       // 1296\n      } else if (isExisting) {                                                                                // 1297\n        throw new Error(\"Server sent add for existing id: \" + msg.id);                                        // 1298\n      }                                                                                                       // 1299\n    } else {                                                                                                  // 1300\n      self._pushUpdate(updates, msg.collection, msg);                                                         // 1301\n    }                                                                                                         // 1302\n  },                                                                                                          // 1303\n                                                                                                              // 1304\n  _process_changed: function (msg, updates) {                                                                 // 1305\n    var self = this;                                                                                          // 1306\n    var serverDoc = self._getServerDoc(                                                                       // 1307\n      msg.collection, MongoID.idParse(msg.id));                                                               // 1308\n    if (serverDoc) {                                                                                          // 1309\n      if (serverDoc.document === undefined)                                                                   // 1310\n        throw new Error(\"Server sent changed for nonexisting id: \" + msg.id);                                 // 1311\n      DiffSequence.applyChanges(serverDoc.document, msg.fields);                                              // 1312\n    } else {                                                                                                  // 1313\n      self._pushUpdate(updates, msg.collection, msg);                                                         // 1314\n    }                                                                                                         // 1315\n  },                                                                                                          // 1316\n                                                                                                              // 1317\n  _process_removed: function (msg, updates) {                                                                 // 1318\n    var self = this;                                                                                          // 1319\n    var serverDoc = self._getServerDoc(                                                                       // 1320\n      msg.collection, MongoID.idParse(msg.id));                                                               // 1321\n    if (serverDoc) {                                                                                          // 1322\n      // Some outstanding stub wrote here.                                                                    // 1323\n      if (serverDoc.document === undefined)                                                                   // 1324\n        throw new Error(\"Server sent removed for nonexisting id:\" + msg.id);                                  // 1325\n      serverDoc.document = undefined;                                                                         // 1326\n    } else {                                                                                                  // 1327\n      self._pushUpdate(updates, msg.collection, {                                                             // 1328\n        msg: 'removed',                                                                                       // 1329\n        collection: msg.collection,                                                                           // 1330\n        id: msg.id                                                                                            // 1331\n      });                                                                                                     // 1332\n    }                                                                                                         // 1333\n  },                                                                                                          // 1334\n                                                                                                              // 1335\n  _process_updated: function (msg, updates) {                                                                 // 1336\n    var self = this;                                                                                          // 1337\n    // Process \"method done\" messages.                                                                        // 1338\n    _.each(msg.methods, function (methodId) {                                                                 // 1339\n      _.each(self._documentsWrittenByStub[methodId], function (written) {                                     // 1340\n        var serverDoc = self._getServerDoc(written.collection, written.id);                                   // 1341\n        if (!serverDoc)                                                                                       // 1342\n          throw new Error(\"Lost serverDoc for \" + JSON.stringify(written));                                   // 1343\n        if (!serverDoc.writtenByStubs[methodId])                                                              // 1344\n          throw new Error(\"Doc \" + JSON.stringify(written) +                                                  // 1345\n                          \" not written by  method \" + methodId);                                             // 1346\n        delete serverDoc.writtenByStubs[methodId];                                                            // 1347\n        if (_.isEmpty(serverDoc.writtenByStubs)) {                                                            // 1348\n          // All methods whose stubs wrote this method have completed! We can                                 // 1349\n          // now copy the saved document to the database (reverting the stub's                                // 1350\n          // change if the server did not write to this object, or applying the                               // 1351\n          // server's writes if it did).                                                                      // 1352\n                                                                                                              // 1353\n          // This is a fake ddp 'replace' message.  It's just for talking                                     // 1354\n          // between livedata connections and minimongo.  (We have to stringify                               // 1355\n          // the ID because it's supposed to look like a wire message.)                                       // 1356\n          self._pushUpdate(updates, written.collection, {                                                     // 1357\n            msg: 'replace',                                                                                   // 1358\n            id: MongoID.idStringify(written.id),                                                              // 1359\n            replace: serverDoc.document                                                                       // 1360\n          });                                                                                                 // 1361\n          // Call all flush callbacks.                                                                        // 1362\n          _.each(serverDoc.flushCallbacks, function (c) {                                                     // 1363\n            c();                                                                                              // 1364\n          });                                                                                                 // 1365\n                                                                                                              // 1366\n          // Delete this completed serverDocument. Don't bother to GC empty                                   // 1367\n          // IdMaps inside self._serverDocuments, since there probably aren't                                 // 1368\n          // many collections and they'll be written repeatedly.                                              // 1369\n          self._serverDocuments[written.collection].remove(written.id);                                       // 1370\n        }                                                                                                     // 1371\n      });                                                                                                     // 1372\n      delete self._documentsWrittenByStub[methodId];                                                          // 1373\n                                                                                                              // 1374\n      // We want to call the data-written callback, but we can't do so until all                              // 1375\n      // currently buffered messages are flushed.                                                             // 1376\n      var callbackInvoker = self._methodInvokers[methodId];                                                   // 1377\n      if (!callbackInvoker)                                                                                   // 1378\n        throw new Error(\"No callback invoker for method \" + methodId);                                        // 1379\n      self._runWhenAllServerDocsAreFlushed(                                                                   // 1380\n        _.bind(callbackInvoker.dataVisible, callbackInvoker));                                                // 1381\n    });                                                                                                       // 1382\n  },                                                                                                          // 1383\n                                                                                                              // 1384\n  _process_ready: function (msg, updates) {                                                                   // 1385\n    var self = this;                                                                                          // 1386\n    // Process \"sub ready\" messages. \"sub ready\" messages don't take effect                                   // 1387\n    // until all current server documents have been flushed to the local                                      // 1388\n    // database. We can use a write fence to implement this.                                                  // 1389\n    _.each(msg.subs, function (subId) {                                                                       // 1390\n      self._runWhenAllServerDocsAreFlushed(function () {                                                      // 1391\n        var subRecord = self._subscriptions[subId];                                                           // 1392\n        // Did we already unsubscribe?                                                                        // 1393\n        if (!subRecord)                                                                                       // 1394\n          return;                                                                                             // 1395\n        // Did we already receive a ready message? (Oops!)                                                    // 1396\n        if (subRecord.ready)                                                                                  // 1397\n          return;                                                                                             // 1398\n        subRecord.ready = true;                                                                               // 1399\n        subRecord.readyCallback && subRecord.readyCallback();                                                 // 1400\n        subRecord.readyDeps.changed();                                                                        // 1401\n      });                                                                                                     // 1402\n    });                                                                                                       // 1403\n  },                                                                                                          // 1404\n                                                                                                              // 1405\n  // Ensures that \"f\" will be called after all documents currently in                                         // 1406\n  // _serverDocuments have been written to the local cache. f will not be called                              // 1407\n  // if the connection is lost before then!                                                                   // 1408\n  _runWhenAllServerDocsAreFlushed: function (f) {                                                             // 1409\n    var self = this;                                                                                          // 1410\n    var runFAfterUpdates = function () {                                                                      // 1411\n      self._afterUpdateCallbacks.push(f);                                                                     // 1412\n    };                                                                                                        // 1413\n    var unflushedServerDocCount = 0;                                                                          // 1414\n    var onServerDocFlush = function () {                                                                      // 1415\n      --unflushedServerDocCount;                                                                              // 1416\n      if (unflushedServerDocCount === 0) {                                                                    // 1417\n        // This was the last doc to flush! Arrange to run f after the updates                                 // 1418\n        // have been applied.                                                                                 // 1419\n        runFAfterUpdates();                                                                                   // 1420\n      }                                                                                                       // 1421\n    };                                                                                                        // 1422\n    _.each(self._serverDocuments, function (collectionDocs) {                                                 // 1423\n      collectionDocs.forEach(function (serverDoc) {                                                           // 1424\n        var writtenByStubForAMethodWithSentMessage = _.any(                                                   // 1425\n          serverDoc.writtenByStubs, function (dummy, methodId) {                                              // 1426\n            var invoker = self._methodInvokers[methodId];                                                     // 1427\n            return invoker && invoker.sentMessage;                                                            // 1428\n          });                                                                                                 // 1429\n        if (writtenByStubForAMethodWithSentMessage) {                                                         // 1430\n          ++unflushedServerDocCount;                                                                          // 1431\n          serverDoc.flushCallbacks.push(onServerDocFlush);                                                    // 1432\n        }                                                                                                     // 1433\n      });                                                                                                     // 1434\n    });                                                                                                       // 1435\n    if (unflushedServerDocCount === 0) {                                                                      // 1436\n      // There aren't any buffered docs --- we can call f as soon as the current                              // 1437\n      // round of updates is applied!                                                                         // 1438\n      runFAfterUpdates();                                                                                     // 1439\n    }                                                                                                         // 1440\n  },                                                                                                          // 1441\n                                                                                                              // 1442\n  _livedata_nosub: function (msg) {                                                                           // 1443\n    var self = this;                                                                                          // 1444\n                                                                                                              // 1445\n    // First pass it through _livedata_data, which only uses it to help get                                   // 1446\n    // towards quiescence.                                                                                    // 1447\n    self._livedata_data(msg);                                                                                 // 1448\n                                                                                                              // 1449\n    // Do the rest of our processing immediately, with no                                                     // 1450\n    // buffering-until-quiescence.                                                                            // 1451\n                                                                                                              // 1452\n    // we weren't subbed anyway, or we initiated the unsub.                                                   // 1453\n    if (!_.has(self._subscriptions, msg.id))                                                                  // 1454\n      return;                                                                                                 // 1455\n                                                                                                              // 1456\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                 // 1457\n    var errorCallback = self._subscriptions[msg.id].errorCallback;                                            // 1458\n    var stopCallback = self._subscriptions[msg.id].stopCallback;                                              // 1459\n                                                                                                              // 1460\n    self._subscriptions[msg.id].remove();                                                                     // 1461\n                                                                                                              // 1462\n    var meteorErrorFromMsg = function (msgArg) {                                                              // 1463\n      return msgArg && msgArg.error && new Meteor.Error(                                                      // 1464\n        msgArg.error.error, msgArg.error.reason, msgArg.error.details);                                       // 1465\n    }                                                                                                         // 1466\n                                                                                                              // 1467\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                 // 1468\n    if (errorCallback && msg.error) {                                                                         // 1469\n      errorCallback(meteorErrorFromMsg(msg));                                                                 // 1470\n    }                                                                                                         // 1471\n                                                                                                              // 1472\n    if (stopCallback) {                                                                                       // 1473\n      stopCallback(meteorErrorFromMsg(msg));                                                                  // 1474\n    }                                                                                                         // 1475\n  },                                                                                                          // 1476\n                                                                                                              // 1477\n  _process_nosub: function () {                                                                               // 1478\n    // This is called as part of the \"buffer until quiescence\" process, but                                   // 1479\n    // nosub's effect is always immediate. It only goes in the buffer at all                                  // 1480\n    // because it's possible for a nosub to be the thing that triggers                                        // 1481\n    // quiescence, if we were waiting for a sub to be revived and it dies                                     // 1482\n    // instead.                                                                                               // 1483\n  },                                                                                                          // 1484\n                                                                                                              // 1485\n  _livedata_result: function (msg) {                                                                          // 1486\n    // id, result or error. error has error (code), reason, details                                           // 1487\n                                                                                                              // 1488\n    var self = this;                                                                                          // 1489\n                                                                                                              // 1490\n    // find the outstanding request                                                                           // 1491\n    // should be O(1) in nearly all realistic use cases                                                       // 1492\n    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                           // 1493\n      Meteor._debug(\"Received method result but no methods outstanding\");                                     // 1494\n      return;                                                                                                 // 1495\n    }                                                                                                         // 1496\n    var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                        // 1497\n    var m;                                                                                                    // 1498\n    for (var i = 0; i < currentMethodBlock.length; i++) {                                                     // 1499\n      m = currentMethodBlock[i];                                                                              // 1500\n      if (m.methodId === msg.id)                                                                              // 1501\n        break;                                                                                                // 1502\n    }                                                                                                         // 1503\n                                                                                                              // 1504\n    if (!m) {                                                                                                 // 1505\n      Meteor._debug(\"Can't match method response to original method call\", msg);                              // 1506\n      return;                                                                                                 // 1507\n    }                                                                                                         // 1508\n                                                                                                              // 1509\n    // Remove from current method block. This may leave the block empty, but we                               // 1510\n    // don't move on to the next block until the callback has been delivered, in                              // 1511\n    // _outstandingMethodFinished.                                                                            // 1512\n    currentMethodBlock.splice(i, 1);                                                                          // 1513\n                                                                                                              // 1514\n    if (_.has(msg, 'error')) {                                                                                // 1515\n      m.receiveResult(new Meteor.Error(                                                                       // 1516\n        msg.error.error, msg.error.reason,                                                                    // 1517\n        msg.error.details));                                                                                  // 1518\n    } else {                                                                                                  // 1519\n      // msg.result may be undefined if the method didn't return a                                            // 1520\n      // value                                                                                                // 1521\n      m.receiveResult(undefined, msg.result);                                                                 // 1522\n    }                                                                                                         // 1523\n  },                                                                                                          // 1524\n                                                                                                              // 1525\n  // Called by MethodInvoker after a method's callback is invoked.  If this was                               // 1526\n  // the last outstanding method in the current block, runs the next block. If                                // 1527\n  // there are no more methods, consider accepting a hot code push.                                           // 1528\n  _outstandingMethodFinished: function () {                                                                   // 1529\n    var self = this;                                                                                          // 1530\n    if (self._anyMethodsAreOutstanding())                                                                     // 1531\n      return;                                                                                                 // 1532\n                                                                                                              // 1533\n    // No methods are outstanding. This should mean that the first block of                                   // 1534\n    // methods is empty. (Or it might not exist, if this was a method that                                    // 1535\n    // half-finished before disconnect/reconnect.)                                                            // 1536\n    if (! _.isEmpty(self._outstandingMethodBlocks)) {                                                         // 1537\n      var firstBlock = self._outstandingMethodBlocks.shift();                                                 // 1538\n      if (! _.isEmpty(firstBlock.methods))                                                                    // 1539\n        throw new Error(\"No methods outstanding but nonempty block: \" +                                       // 1540\n                        JSON.stringify(firstBlock));                                                          // 1541\n                                                                                                              // 1542\n      // Send the outstanding methods now in the first block.                                                 // 1543\n      if (!_.isEmpty(self._outstandingMethodBlocks))                                                          // 1544\n        self._sendOutstandingMethods();                                                                       // 1545\n    }                                                                                                         // 1546\n                                                                                                              // 1547\n    // Maybe accept a hot code push.                                                                          // 1548\n    self._maybeMigrate();                                                                                     // 1549\n  },                                                                                                          // 1550\n                                                                                                              // 1551\n  // Sends messages for all the methods in the first block in                                                 // 1552\n  // _outstandingMethodBlocks.                                                                                // 1553\n  _sendOutstandingMethods: function() {                                                                       // 1554\n    var self = this;                                                                                          // 1555\n    if (_.isEmpty(self._outstandingMethodBlocks))                                                             // 1556\n      return;                                                                                                 // 1557\n    _.each(self._outstandingMethodBlocks[0].methods, function (m) {                                           // 1558\n      m.sendMessage();                                                                                        // 1559\n    });                                                                                                       // 1560\n  },                                                                                                          // 1561\n                                                                                                              // 1562\n  _livedata_error: function (msg) {                                                                           // 1563\n    Meteor._debug(\"Received error from server: \", msg.reason);                                                // 1564\n    if (msg.offendingMessage)                                                                                 // 1565\n      Meteor._debug(\"For: \", msg.offendingMessage);                                                           // 1566\n  },                                                                                                          // 1567\n                                                                                                              // 1568\n  _callOnReconnectAndSendAppropriateOutstandingMethods: function() {                                          // 1569\n    var self = this;                                                                                          // 1570\n    var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;                                           // 1571\n    self._outstandingMethodBlocks = [];                                                                       // 1572\n                                                                                                              // 1573\n    self.onReconnect();                                                                                       // 1574\n                                                                                                              // 1575\n    if (_.isEmpty(oldOutstandingMethodBlocks))                                                                // 1576\n      return;                                                                                                 // 1577\n                                                                                                              // 1578\n    // We have at least one block worth of old outstanding methods to try                                     // 1579\n    // again. First: did onReconnect actually send anything? If not, we just                                  // 1580\n    // restore all outstanding methods and run the first block.                                               // 1581\n    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                           // 1582\n      self._outstandingMethodBlocks = oldOutstandingMethodBlocks;                                             // 1583\n      self._sendOutstandingMethods();                                                                         // 1584\n      return;                                                                                                 // 1585\n    }                                                                                                         // 1586\n                                                                                                              // 1587\n    // OK, there are blocks on both sides. Special case: merge the last block of                              // 1588\n    // the reconnect methods with the first block of the original methods, if                                 // 1589\n    // neither of them are \"wait\" blocks.                                                                     // 1590\n    if (!_.last(self._outstandingMethodBlocks).wait &&                                                        // 1591\n        !oldOutstandingMethodBlocks[0].wait) {                                                                // 1592\n      _.each(oldOutstandingMethodBlocks[0].methods, function (m) {                                            // 1593\n        _.last(self._outstandingMethodBlocks).methods.push(m);                                                // 1594\n                                                                                                              // 1595\n        // If this \"last block\" is also the first block, send the message.                                    // 1596\n        if (self._outstandingMethodBlocks.length === 1)                                                       // 1597\n          m.sendMessage();                                                                                    // 1598\n      });                                                                                                     // 1599\n                                                                                                              // 1600\n      oldOutstandingMethodBlocks.shift();                                                                     // 1601\n    }                                                                                                         // 1602\n                                                                                                              // 1603\n    // Now add the rest of the original blocks on.                                                            // 1604\n    _.each(oldOutstandingMethodBlocks, function (block) {                                                     // 1605\n      self._outstandingMethodBlocks.push(block);                                                              // 1606\n    });                                                                                                       // 1607\n  },                                                                                                          // 1608\n                                                                                                              // 1609\n  // We can accept a hot code push if there are no methods in flight.                                         // 1610\n  _readyToMigrate: function() {                                                                               // 1611\n    var self = this;                                                                                          // 1612\n    return _.isEmpty(self._methodInvokers);                                                                   // 1613\n  },                                                                                                          // 1614\n                                                                                                              // 1615\n  // If we were blocking a migration, see if it's now possible to continue.                                   // 1616\n  // Call whenever the set of outstanding/blocked methods shrinks.                                            // 1617\n  _maybeMigrate: function () {                                                                                // 1618\n    var self = this;                                                                                          // 1619\n    if (self._retryMigrate && self._readyToMigrate()) {                                                       // 1620\n      self._retryMigrate();                                                                                   // 1621\n      self._retryMigrate = null;                                                                              // 1622\n    }                                                                                                         // 1623\n  }                                                                                                           // 1624\n});                                                                                                           // 1625\n                                                                                                              // 1626\nLivedataTest.Connection = Connection;                                                                         // 1627\n                                                                                                              // 1628\n// @param url {String} URL to Meteor app,                                                                     // 1629\n//     e.g.:                                                                                                  // 1630\n//     \"subdomain.meteor.com\",                                                                                // 1631\n//     \"http://subdomain.meteor.com\",                                                                         // 1632\n//     \"/\",                                                                                                   // 1633\n//     \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"                                                         // 1634\n                                                                                                              // 1635\n/**                                                                                                           // 1636\n * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.\n * @locus Anywhere                                                                                            // 1638\n * @param {String} url The URL of another Meteor application.                                                 // 1639\n */                                                                                                           // 1640\nDDP.connect = function (url, options) {                                                                       // 1641\n  var ret = new Connection(url, options);                                                                     // 1642\n  allConnections.push(ret); // hack. see below.                                                               // 1643\n  return ret;                                                                                                 // 1644\n};                                                                                                            // 1645\n                                                                                                              // 1646\n// Hack for `spiderable` package: a way to see if the page is done                                            // 1647\n// loading all the data it needs.                                                                             // 1648\n//                                                                                                            // 1649\nallConnections = [];                                                                                          // 1650\nDDP._allSubscriptionsReady = function () {                                                                    // 1651\n  return _.all(allConnections, function (conn) {                                                              // 1652\n    return _.all(conn._subscriptions, function (sub) {                                                        // 1653\n      return sub.ready;                                                                                       // 1654\n    });                                                                                                       // 1655\n  });                                                                                                         // 1656\n};                                                                                                            // 1657\n                                                                                                              // 1658\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ddp-client'] = {\n  DDP: DDP,\n  LivedataTest: LivedataTest\n};\n\n})();\n","servePath":"/packages/ddp-client.js","sourceMap":{"version":3,"sources":["/packages/ddp-client/namespace.js","/packages/ddp-client/id_map.js","/packages/ddp-client/stream_client_nodejs.js","/packages/ddp-client/stream_client_common.js","/packages/ddp-client/livedata_common.js","/packages/ddp-client/random_stream.js","/packages/ddp-client/livedata_connection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA,koH;;;;;;;;;;;;;;;;;;ACzoH;;;;;;;;;;;;;;;;;;AC1QA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mqH","file":"/packages/ddp-client.js","sourcesContent":["/**\n * @namespace DDP\n * @summary Namespace for DDP-related methods/classes.\n */\nDDP          = {};\nLivedataTest = {};\n","MongoIDMap = function () {\n  var self = this;\n  IdMap.call(self, MongoID.idStringify, MongoID.idParse);\n};\n\nMeteor._inherits(MongoIDMap, IdMap);\n","// @param endpoint {String} URL to Meteor app\n//   \"http://subdomain.meteor.com/\" or \"/\" or\n//   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\n//\n// We do some rewriting of the URL to eventually make it \"ws://\" or \"wss://\",\n// whatever was passed in.  At the very least, what Meteor.absoluteUrl() returns\n// us should work.\n//\n// We don't do any heartbeating. (The logic that did this in sockjs was removed,\n// because it used a built-in sockjs mechanism. We could do it with WebSocket\n// ping frames or with DDP-level messages.)\nLivedataTest.ClientStream = function (endpoint, options) {\n  var self = this;\n  options = options || {};\n\n  self.options = _.extend({\n    retry: true\n  }, options);\n\n  self.client = null;  // created in _launchConnection\n  self.endpoint = endpoint;\n\n  self.headers = self.options.headers || {};\n\n  self._initCommon(self.options);\n\n  //// Kickoff!\n  self._launchConnection();\n};\n\n_.extend(LivedataTest.ClientStream.prototype, {\n\n  // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n  send: function (data) {\n    var self = this;\n    if (self.currentStatus.connected) {\n      self.client.send(data);\n    }\n  },\n\n  // Changes where this connection points\n  _changeUrl: function (url) {\n    var self = this;\n    self.endpoint = url;\n  },\n\n  _onConnect: function (client) {\n    var self = this;\n\n    if (client !== self.client) {\n      // This connection is not from the last call to _launchConnection.\n      // But _launchConnection calls _cleanup which closes previous connections.\n      // It's our belief that this stifles future 'open' events, but maybe\n      // we are wrong?\n      throw new Error(\"Got open from inactive client \" + !!self.client);\n    }\n\n    if (self._forcedToDisconnect) {\n      // We were asked to disconnect between trying to open the connection and\n      // actually opening it. Let's just pretend this never happened.\n      self.client.close();\n      self.client = null;\n      return;\n    }\n\n    if (self.currentStatus.connected) {\n      // We already have a connection. It must have been the case that we\n      // started two parallel connection attempts (because we wanted to\n      // 'reconnect now' on a hanging connection and we had no way to cancel the\n      // connection attempt.) But this shouldn't happen (similarly to the client\n      // !== self.client check above).\n      throw new Error(\"Two parallel connections?\");\n    }\n\n    self._clearConnectionTimer();\n\n    // update status\n    self.currentStatus.status = \"connected\";\n    self.currentStatus.connected = true;\n    self.currentStatus.retryCount = 0;\n    self.statusChanged();\n\n    // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n    _.each(self.eventCallbacks.reset, function (callback) { callback(); });\n  },\n\n  _cleanup: function (maybeError) {\n    var self = this;\n\n    self._clearConnectionTimer();\n    if (self.client) {\n      var client = self.client;\n      self.client = null;\n      client.close();\n\n      _.each(self.eventCallbacks.disconnect, function (callback) {\n        callback(maybeError);\n      });\n    }\n  },\n\n  _clearConnectionTimer: function () {\n    var self = this;\n\n    if (self.connectionTimer) {\n      clearTimeout(self.connectionTimer);\n      self.connectionTimer = null;\n    }\n  },\n\n  _getProxyUrl: function (targetUrl) {\n    var self = this;\n    // Similar to code in tools/http-helpers.js.\n    var proxy = process.env.HTTP_PROXY || process.env.http_proxy || null;\n    // if we're going to a secure url, try the https_proxy env variable first.\n    if (targetUrl.match(/^wss:/)) {\n      proxy = process.env.HTTPS_PROXY || process.env.https_proxy || proxy;\n    }\n    return proxy;\n  },\n\n  _launchConnection: function () {\n    var self = this;\n    self._cleanup(); // cleanup the old socket, if there was one.\n\n    // Since server-to-server DDP is still an experimental feature, we only\n    // require the module if we actually create a server-to-server\n    // connection.\n    var FayeWebSocket = Npm.require('faye-websocket');\n    var deflate = Npm.require('permessage-deflate');\n\n    var targetUrl = toWebsocketUrl(self.endpoint);\n    var fayeOptions = {\n      headers: self.headers,\n      extensions: [deflate]\n    };\n    var proxyUrl = self._getProxyUrl(targetUrl);\n    if (proxyUrl) {\n      fayeOptions.proxy = { origin: proxyUrl };\n    };\n\n    // We would like to specify 'ddp' as the subprotocol here. The npm module we\n    // used to use as a client would fail the handshake if we ask for a\n    // subprotocol and the server doesn't send one back (and sockjs doesn't).\n    // Faye doesn't have that behavior; it's unclear from reading RFC 6455 if\n    // Faye is erroneous or not.  So for now, we don't specify protocols.\n    var subprotocols = [];\n\n    var client = self.client = new FayeWebSocket.Client(\n      targetUrl, subprotocols, fayeOptions);\n\n    self._clearConnectionTimer();\n    self.connectionTimer = Meteor.setTimeout(\n      function () {\n        self._lostConnection(\n          new DDP.ConnectionError(\"DDP connection timed out\"));\n      },\n      self.CONNECT_TIMEOUT);\n\n    self.client.on('open', Meteor.bindEnvironment(function () {\n      return self._onConnect(client);\n    }, \"stream connect callback\"));\n\n    var clientOnIfCurrent = function (event, description, f) {\n      self.client.on(event, Meteor.bindEnvironment(function () {\n        // Ignore events from any connection we've already cleaned up.\n        if (client !== self.client)\n          return;\n        f.apply(this, arguments);\n      }, description));\n    };\n\n    clientOnIfCurrent('error', 'stream error callback', function (error) {\n      if (!self.options._dontPrintErrors)\n        Meteor._debug(\"stream error\", error.message);\n\n      // Faye's 'error' object is not a JS error (and among other things,\n      // doesn't stringify well). Convert it to one.\n      self._lostConnection(new DDP.ConnectionError(error.message));\n    });\n\n\n    clientOnIfCurrent('close', 'stream close callback', function () {\n      self._lostConnection();\n    });\n\n\n    clientOnIfCurrent('message', 'stream message callback', function (message) {\n      // Ignore binary frames, where message.data is a Buffer\n      if (typeof message.data !== \"string\")\n        return;\n\n      _.each(self.eventCallbacks.message, function (callback) {\n        callback(message.data);\n      });\n    });\n  }\n});\n","// XXX from Underscore.String (http://epeli.github.com/underscore.string/)\nvar startsWith = function(str, starts) {\n  return str.length >= starts.length &&\n    str.substring(0, starts.length) === starts;\n};\nvar endsWith = function(str, ends) {\n  return str.length >= ends.length &&\n    str.substring(str.length - ends.length) === ends;\n};\n\n// @param url {String} URL to Meteor app, eg:\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.\n// for scheme \"http\" and subPath \"sockjs\"\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"\nvar translateUrl =  function(url, newSchemeBase, subPath) {\n  if (! newSchemeBase) {\n    newSchemeBase = \"http\";\n  }\n\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);\n  var newScheme;\n  if (ddpUrlMatch) {\n    // Remove scheme and split off the host.\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);\n    newScheme = ddpUrlMatch[1] === \"i\" ? newSchemeBase : newSchemeBase + \"s\";\n    var slashPos = urlAfterDDP.indexOf('/');\n    var host =\n          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);\n\n    // In the host (ONLY!), change '*' characters into random digits. This\n    // allows different stream connections to connect to different hostnames\n    // and avoid browser per-hostname connection limits.\n    host = host.replace(/\\*/g, function () {\n      return Math.floor(Random.fraction()*10);\n    });\n\n    return newScheme + '://' + host + rest;\n  } else if (httpUrlMatch) {\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + \"s\";\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);\n    url = newScheme + \"://\" + urlAfterHttp;\n  }\n\n  // Prefix FQDNs but not relative URLs\n  if (url.indexOf(\"://\") === -1 && !startsWith(url, \"/\")) {\n    url = newSchemeBase + \"://\" + url;\n  }\n\n  // XXX This is not what we should be doing: if I have a site\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")\n  // to connect to \"/foo/bar\").\n  //\n  // We should make this properly honor absolute paths rather than\n  // forcing the path to be relative to the site root. Simultaneously,\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs\n  url = Meteor._relativeToSiteRootUrl(url);\n\n  if (endsWith(url, \"/\"))\n    return url + subPath;\n  else\n    return url + \"/\" + subPath;\n};\n\ntoSockjsUrl = function (url) {\n  return translateUrl(url, \"http\", \"sockjs\");\n};\n\ntoWebsocketUrl = function (url) {\n  var ret = translateUrl(url, \"ws\", \"websocket\");\n  return ret;\n};\n\nLivedataTest.toSockjsUrl = toSockjsUrl;\n\n \n_.extend(LivedataTest.ClientStream.prototype, {\n\n  // Register for callbacks.\n  on: function (name, callback) {\n    var self = this;\n\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error(\"unknown event type: \" + name);\n\n    if (!self.eventCallbacks[name])\n      self.eventCallbacks[name] = [];\n    self.eventCallbacks[name].push(callback);\n  },\n\n\n  _initCommon: function (options) {\n    var self = this;\n    options = options || {};\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    self.eventCallbacks = {}; // name -> [callback]\n\n    self._forcedToDisconnect = false;\n\n    //// Reactive status\n    self.currentStatus = {\n      status: \"connecting\",\n      connected: false,\n      retryCount: 0\n    };\n\n\n    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;\n    self.statusChanged = function () {\n      if (self.statusListeners)\n        self.statusListeners.changed();\n    };\n\n    //// Retry logic\n    self._retry = new Retry;\n    self.connectionTimer = null;\n\n  },\n\n  // Trigger a reconnect.\n  reconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    if (options.url) {\n      self._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      self.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (self.currentStatus.connected) {\n      if (options._force || options.url) {\n        // force reconnect.\n        self._lostConnection(new DDP.ForcedReconnectError);\n      } // else, noop.\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (self.currentStatus.status === \"connecting\") {\n      // Pretend it's a clean close.\n      self._lostConnection();\n    }\n\n    self._retry.clear();\n    self.currentStatus.retryCount -= 1; // don't count manual retries\n    self._retryNow();\n  },\n\n  disconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (self._forcedToDisconnect)\n      return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      self._forcedToDisconnect = true;\n    }\n\n    self._cleanup();\n    self._retry.clear();\n\n    self.currentStatus = {\n      status: (options._permanent ? \"failed\" : \"offline\"),\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      self.currentStatus.reason = options._error;\n\n    self.statusChanged();\n  },\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection: function (maybeError) {\n    var self = this;\n\n    self._cleanup(maybeError);\n    self._retryLater(maybeError); // sets status. no need to do it here.\n  },\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online: function () {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != \"offline\")\n      this.reconnect();\n  },\n\n  _retryLater: function (maybeError) {\n    var self = this;\n\n    var timeout = 0;\n    if (self.options.retry ||\n        (maybeError && maybeError.errorType === \"DDP.ForcedReconnectError\")) {\n      timeout = self._retry.retryLater(\n        self.currentStatus.retryCount,\n        _.bind(self._retryNow, self)\n      );\n      self.currentStatus.status = \"waiting\";\n      self.currentStatus.retryTime = (new Date()).getTime() + timeout;\n    } else {\n      self.currentStatus.status = \"failed\";\n      delete self.currentStatus.retryTime;\n    }\n\n    self.currentStatus.connected = false;\n    self.statusChanged();\n  },\n\n  _retryNow: function () {\n    var self = this;\n\n    if (self._forcedToDisconnect)\n      return;\n\n    self.currentStatus.retryCount += 1;\n    self.currentStatus.status = \"connecting\";\n    self.currentStatus.connected = false;\n    delete self.currentStatus.retryTime;\n    self.statusChanged();\n\n    self._launchConnection();\n  },\n\n\n  // Get current status. Reactive.\n  status: function () {\n    var self = this;\n    if (self.statusListeners)\n      self.statusListeners.depend();\n    return self.currentStatus;\n  }\n});\n\nDDP.ConnectionError = Meteor.makeErrorType(\n  \"DDP.ConnectionError\", function (message) {\n    var self = this;\n    self.message = message;\n});\n\nDDP.ForcedReconnectError = Meteor.makeErrorType(\n  \"DDP.ForcedReconnectError\", function () {});\n","LivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS;\n\n// This is private but it's used in a few places. accounts-base uses\n// it to get the current user. Meteor.setTimeout and friends clear\n// it. We can probably find a better way to factor this.\nDDP._CurrentInvocation = new Meteor.EnvironmentVariable;\n","// Returns the named sequence of pseudo-random values.\n// The scope will be DDP._CurrentInvocation.get(), so the stream will produce\n// consistent values for method calls on the client and server.\nDDP.randomStream = function (name) {\n  var scope = DDP._CurrentInvocation.get();\n  return DDPCommon.RandomStream.get(scope, name);\n};\n\n\n","if (Meteor.isServer) {\n  var path = Npm.require('path');\n  var Fiber = Npm.require('fibers');\n  var Future = Npm.require(path.join('fibers', 'future'));\n}\n\n// @param url {String|Object} URL to Meteor app,\n//   or an object as a test hook (see code)\n// Options:\n//   reloadWithOutstanding: is it OK to reload if there are outstanding methods?\n//   headers: extra headers to send on the websockets connection, for\n//     server-to-server DDP only\n//   _sockjsOptions: Specifies options to pass through to the sockjs client\n//   onDDPNegotiationVersionFailure: callback when version negotiation fails.\n//\n// XXX There should be a way to destroy a DDP connection, causing all\n// outstanding method calls to fail.\n//\n// XXX Our current way of handling failure and reconnection is great\n// for an app (where we want to tolerate being disconnected as an\n// expect state, and keep trying forever to reconnect) but cumbersome\n// for something like a command line tool that wants to make a\n// connection, call a method, and print an error if connection\n// fails. We should have better usability in the latter case (while\n// still transparently reconnecting if it's just a transient failure\n// or the server migrating us).\nvar Connection = function (url, options) {\n  var self = this;\n  options = _.extend({\n    onConnected: function () {},\n    onDDPVersionNegotiationFailure: function (description) {\n      Meteor._debug(description);\n    },\n    heartbeatInterval: 17500,\n    heartbeatTimeout: 15000,\n    // These options are only for testing.\n    reloadWithOutstanding: false,\n    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,\n    retry: true,\n    respondToPings: true\n  }, options);\n\n  // If set, called when we reconnect, queuing method calls _before_ the\n  // existing outstanding ones. This is the only data member that is part of the\n  // public API!\n  self.onReconnect = null;\n\n  // as a test hook, allow passing a stream instead of a url.\n  if (typeof url === \"object\") {\n    self._stream = url;\n  } else {\n    self._stream = new LivedataTest.ClientStream(url, {\n      retry: options.retry,\n      headers: options.headers,\n      _sockjsOptions: options._sockjsOptions,\n      // Used to keep some tests quiet, or for other cases in which\n      // the right thing to do with connection errors is to silently\n      // fail (e.g. sending package usage stats). At some point we\n      // should have a real API for handling client-stream-level\n      // errors.\n      _dontPrintErrors: options._dontPrintErrors,\n      connectTimeoutMs: options.connectTimeoutMs\n    });\n  }\n\n  self._lastSessionId = null;\n  self._versionSuggestion = null;  // The last proposed DDP version.\n  self._version = null;   // The DDP version agreed on by client and server.\n  self._stores = {}; // name -> object with methods\n  self._methodHandlers = {}; // name -> func\n  self._nextMethodId = 1;\n  self._supportedDDPVersions = options.supportedDDPVersions;\n\n  self._heartbeatInterval = options.heartbeatInterval;\n  self._heartbeatTimeout = options.heartbeatTimeout;\n\n  // Tracks methods which the user has tried to call but which have not yet\n  // called their user callback (ie, they are waiting on their result or for all\n  // of their writes to be written to the local cache). Map from method ID to\n  // MethodInvoker object.\n  self._methodInvokers = {};\n\n  // Tracks methods which the user has called but whose result messages have not\n  // arrived yet.\n  //\n  // _outstandingMethodBlocks is an array of blocks of methods. Each block\n  // represents a set of methods that can run at the same time. The first block\n  // represents the methods which are currently in flight; subsequent blocks\n  // must wait for previous blocks to be fully finished before they can be sent\n  // to the server.\n  //\n  // Each block is an object with the following fields:\n  // - methods: a list of MethodInvoker objects\n  // - wait: a boolean; if true, this block had a single method invoked with\n  //         the \"wait\" option\n  //\n  // There will never be adjacent blocks with wait=false, because the only thing\n  // that makes methods need to be serialized is a wait method.\n  //\n  // Methods are removed from the first block when their \"result\" is\n  // received. The entire first block is only removed when all of the in-flight\n  // methods have received their results (so the \"methods\" list is empty) *AND*\n  // all of the data written by those methods are visible in the local cache. So\n  // it is possible for the first block's methods list to be empty, if we are\n  // still waiting for some objects to quiesce.\n  //\n  // Example:\n  //  _outstandingMethodBlocks = [\n  //    {wait: false, methods: []},\n  //    {wait: true, methods: [<MethodInvoker for 'login'>]},\n  //    {wait: false, methods: [<MethodInvoker for 'foo'>,\n  //                            <MethodInvoker for 'bar'>]}]\n  // This means that there were some methods which were sent to the server and\n  // which have returned their results, but some of the data written by\n  // the methods may not be visible in the local cache. Once all that data is\n  // visible, we will send a 'login' method. Once the login method has returned\n  // and all the data is visible (including re-running subs if userId changes),\n  // we will send the 'foo' and 'bar' methods in parallel.\n  self._outstandingMethodBlocks = [];\n\n  // method ID -> array of objects with keys 'collection' and 'id', listing\n  // documents written by a given method's stub. keys are associated with\n  // methods whose stub wrote at least one document, and whose data-done message\n  // has not yet been received.\n  self._documentsWrittenByStub = {};\n  // collection -> IdMap of \"server document\" object. A \"server document\" has:\n  // - \"document\": the version of the document according the\n  //   server (ie, the snapshot before a stub wrote it, amended by any changes\n  //   received from the server)\n  //   It is undefined if we think the document does not exist\n  // - \"writtenByStubs\": a set of method IDs whose stubs wrote to the document\n  //   whose \"data done\" messages have not yet been processed\n  self._serverDocuments = {};\n\n  // Array of callbacks to be called after the next update of the local\n  // cache. Used for:\n  //  - Calling methodInvoker.dataVisible and sub ready callbacks after\n  //    the relevant data is flushed.\n  //  - Invoking the callbacks of \"half-finished\" methods after reconnect\n  //    quiescence. Specifically, methods whose result was received over the old\n  //    connection (so we don't re-send it) but whose data had not been made\n  //    visible.\n  self._afterUpdateCallbacks = [];\n\n  // In two contexts, we buffer all incoming data messages and then process them\n  // all at once in a single update:\n  //   - During reconnect, we buffer all data messages until all subs that had\n  //     been ready before reconnect are ready again, and all methods that are\n  //     active have returned their \"data done message\"; then\n  //   - During the execution of a \"wait\" method, we buffer all data messages\n  //     until the wait method gets its \"data done\" message. (If the wait method\n  //     occurs during reconnect, it doesn't get any special handling.)\n  // all data messages are processed in one update.\n  //\n  // The following fields are used for this \"quiescence\" process.\n\n  // This buffers the messages that aren't being processed yet.\n  self._messagesBufferedUntilQuiescence = [];\n  // Map from method ID -> true. Methods are removed from this when their\n  // \"data done\" message is received, and we will not quiesce until it is\n  // empty.\n  self._methodsBlockingQuiescence = {};\n  // map from sub ID -> true for subs that were ready (ie, called the sub\n  // ready callback) before reconnect but haven't become ready again yet\n  self._subsBeingRevived = {}; // map from sub._id -> true\n  // if true, the next data update should reset all stores. (set during\n  // reconnect.)\n  self._resetStores = false;\n\n  // name -> array of updates for (yet to be created) collections\n  self._updatesForUnknownStores = {};\n  // if we're blocking a migration, the retry func\n  self._retryMigrate = null;\n\n  // metadata for subscriptions.  Map from sub ID to object with keys:\n  //   - id\n  //   - name\n  //   - params\n  //   - inactive (if true, will be cleaned up if not reused in re-run)\n  //   - ready (has the 'ready' message been received?)\n  //   - readyCallback (an optional callback to call when ready)\n  //   - errorCallback (an optional callback to call if the sub terminates with\n  //                    an error, XXX COMPAT WITH 1.0.3.1)\n  //   - stopCallback (an optional callback to call when the sub terminates\n  //     for any reason, with an error argument if an error triggered the stop)\n  self._subscriptions = {};\n\n  // Reactive userId.\n  self._userId = null;\n  self._userIdDeps = new Tracker.Dependency;\n\n  // Block auto-reload while we're waiting for method responses.\n  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {\n    Package.reload.Reload._onMigrate(function (retry) {\n      if (!self._readyToMigrate()) {\n        if (self._retryMigrate)\n          throw new Error(\"Two migrations in progress?\");\n        self._retryMigrate = retry;\n        return false;\n      } else {\n        return [true];\n      }\n    });\n  }\n\n  var onMessage = function (raw_msg) {\n    try {\n      var msg = DDPCommon.parseDDP(raw_msg);\n    } catch (e) {\n      Meteor._debug(\"Exception while parsing DDP\", e);\n      return;\n    }\n\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the server is still alive.\n    if (self._heartbeat) {\n      self._heartbeat.messageReceived();\n    }\n\n    if (msg === null || !msg.msg) {\n      // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back\n      // compat.  Remove this 'if' once the server stops sending welcome\n      // messages (stream_server.js).\n      if (! (msg && msg.server_id))\n        Meteor._debug(\"discarding invalid livedata message\", msg);\n      return;\n    }\n\n    if (msg.msg === 'connected') {\n      self._version = self._versionSuggestion;\n      self._livedata_connected(msg);\n      options.onConnected();\n    }\n    else if (msg.msg === 'failed') {\n      if (_.contains(self._supportedDDPVersions, msg.version)) {\n        self._versionSuggestion = msg.version;\n        self._stream.reconnect({_force: true});\n      } else {\n        var description =\n              \"DDP version negotiation failed; server requested version \" + msg.version;\n        self._stream.disconnect({_permanent: true, _error: description});\n        options.onDDPVersionNegotiationFailure(description);\n      }\n    }\n    else if (msg.msg === 'ping' && options.respondToPings) {\n      self._send({msg: \"pong\", id: msg.id});\n    }\n    else if (msg.msg === 'pong') {\n      // noop, as we assume everything's a pong\n    }\n    else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg))\n      self._livedata_data(msg);\n    else if (msg.msg === 'nosub')\n      self._livedata_nosub(msg);\n    else if (msg.msg === 'result')\n      self._livedata_result(msg);\n    else if (msg.msg === 'error')\n      self._livedata_error(msg);\n    else\n      Meteor._debug(\"discarding unknown livedata message type\", msg);\n  };\n\n  var onReset = function () {\n    // Send a connect message at the beginning of the stream.\n    // NOTE: reset is called even on the first connection, so this is\n    // the only place we send this message.\n    var msg = {msg: 'connect'};\n    if (self._lastSessionId)\n      msg.session = self._lastSessionId;\n    msg.version = self._versionSuggestion || self._supportedDDPVersions[0];\n    self._versionSuggestion = msg.version;\n    msg.support = self._supportedDDPVersions;\n    self._send(msg);\n\n    // Now, to minimize setup latency, go ahead and blast out all of\n    // our pending methods ands subscriptions before we've even taken\n    // the necessary RTT to know if we successfully reconnected. (1)\n    // They're supposed to be idempotent; (2) even if we did\n    // reconnect, we're not sure what messages might have gotten lost\n    // (in either direction) since we were disconnected (TCP being\n    // sloppy about that.)\n\n    // If the current block of methods all got their results (but didn't all get\n    // their data visible), discard the empty block now.\n    if (! _.isEmpty(self._outstandingMethodBlocks) &&\n        _.isEmpty(self._outstandingMethodBlocks[0].methods)) {\n      self._outstandingMethodBlocks.shift();\n    }\n\n    // Mark all messages as unsent, they have not yet been sent on this\n    // connection.\n    _.each(self._methodInvokers, function (m) {\n      m.sentMessage = false;\n    });\n\n    // If an `onReconnect` handler is set, call it first. Go through\n    // some hoops to ensure that methods that are called from within\n    // `onReconnect` get executed _before_ ones that were originally\n    // outstanding (since `onReconnect` is used to re-establish auth\n    // certificates)\n    if (self.onReconnect)\n      self._callOnReconnectAndSendAppropriateOutstandingMethods();\n    else\n      self._sendOutstandingMethods();\n\n    // add new subscriptions at the end. this way they take effect after\n    // the handlers and we don't see flicker.\n    _.each(self._subscriptions, function (sub, id) {\n      self._send({\n        msg: 'sub',\n        id: id,\n        name: sub.name,\n        params: sub.params\n      });\n    });\n  };\n\n  var onDisconnect = function () {\n    if (self._heartbeat) {\n      self._heartbeat.stop();\n      self._heartbeat = null;\n    }\n  };\n\n  if (Meteor.isServer) {\n    self._stream.on('message', Meteor.bindEnvironment(onMessage, \"handling DDP message\"));\n    self._stream.on('reset', Meteor.bindEnvironment(onReset, \"handling DDP reset\"));\n    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, \"handling DDP disconnect\"));\n  } else {\n    self._stream.on('message', onMessage);\n    self._stream.on('reset', onReset);\n    self._stream.on('disconnect', onDisconnect);\n  }\n};\n\n// A MethodInvoker manages sending a method to the server and calling the user's\n// callbacks. On construction, it registers itself in the connection's\n// _methodInvokers map; it removes itself once the method is fully finished and\n// the callback is invoked. This occurs when it has both received a result,\n// and the data written by it is fully visible.\nvar MethodInvoker = function (options) {\n  var self = this;\n\n  // Public (within this file) fields.\n  self.methodId = options.methodId;\n  self.sentMessage = false;\n\n  self._callback = options.callback;\n  self._connection = options.connection;\n  self._message = options.message;\n  self._onResultReceived = options.onResultReceived || function () {};\n  self._wait = options.wait;\n  self._methodResult = null;\n  self._dataVisible = false;\n\n  // Register with the connection.\n  self._connection._methodInvokers[self.methodId] = self;\n};\n_.extend(MethodInvoker.prototype, {\n  // Sends the method message to the server. May be called additional times if\n  // we lose the connection and reconnect before receiving a result.\n  sendMessage: function () {\n    var self = this;\n    // This function is called before sending a method (including resending on\n    // reconnect). We should only (re)send methods where we don't already have a\n    // result!\n    if (self.gotResult())\n      throw new Error(\"sendingMethod is called on method with result\");\n\n    // If we're re-sending it, it doesn't matter if data was written the first\n    // time.\n    self._dataVisible = false;\n\n    self.sentMessage = true;\n\n    // If this is a wait method, make all data messages be buffered until it is\n    // done.\n    if (self._wait)\n      self._connection._methodsBlockingQuiescence[self.methodId] = true;\n\n    // Actually send the message.\n    self._connection._send(self._message);\n  },\n  // Invoke the callback, if we have both a result and know that all data has\n  // been written to the local cache.\n  _maybeInvokeCallback: function () {\n    var self = this;\n    if (self._methodResult && self._dataVisible) {\n      // Call the callback. (This won't throw: the callback was wrapped with\n      // bindEnvironment.)\n      self._callback(self._methodResult[0], self._methodResult[1]);\n\n      // Forget about this method.\n      delete self._connection._methodInvokers[self.methodId];\n\n      // Let the connection know that this method is finished, so it can try to\n      // move on to the next block of methods.\n      self._connection._outstandingMethodFinished();\n    }\n  },\n  // Call with the result of the method from the server. Only may be called\n  // once; once it is called, you should not call sendMessage again.\n  // If the user provided an onResultReceived callback, call it immediately.\n  // Then invoke the main callback if data is also visible.\n  receiveResult: function (err, result) {\n    var self = this;\n    if (self.gotResult())\n      throw new Error(\"Methods should only receive results once\");\n    self._methodResult = [err, result];\n    self._onResultReceived(err, result);\n    self._maybeInvokeCallback();\n  },\n  // Call this when all data written by the method is visible. This means that\n  // the method has returns its \"data is done\" message *AND* all server\n  // documents that are buffered at that time have been written to the local\n  // cache. Invokes the main callback if the result has been received.\n  dataVisible: function () {\n    var self = this;\n    self._dataVisible = true;\n    self._maybeInvokeCallback();\n  },\n  // True if receiveResult has been called.\n  gotResult: function () {\n    var self = this;\n    return !!self._methodResult;\n  }\n});\n\n_.extend(Connection.prototype, {\n  // 'name' is the name of the data on the wire that should go in the\n  // store. 'wrappedStore' should be an object with methods beginUpdate, update,\n  // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.\n  registerStore: function (name, wrappedStore) {\n    var self = this;\n\n    if (name in self._stores)\n      return false;\n\n    // Wrap the input object in an object which makes any store method not\n    // implemented by 'store' into a no-op.\n    var store = {};\n    _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals',\n            'retrieveOriginals', 'getDoc'], function (method) {\n              store[method] = function () {\n                return (wrappedStore[method]\n                        ? wrappedStore[method].apply(wrappedStore, arguments)\n                        : undefined);\n              };\n            });\n\n    self._stores[name] = store;\n\n    var queued = self._updatesForUnknownStores[name];\n    if (queued) {\n      store.beginUpdate(queued.length, false);\n      _.each(queued, function (msg) {\n        store.update(msg);\n      });\n      store.endUpdate();\n      delete self._updatesForUnknownStores[name];\n    }\n\n    return true;\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Subscribe to a record set.  Returns a handle that provides\n   * `stop()` and `ready()` methods.\n   * @locus Client\n   * @param {String} name Name of the subscription.  Matches the name of the\n   * server's `publish()` call.\n   * @param {Any} [arg1,arg2...] Optional arguments passed to publisher\n   * function on server.\n   * @param {Function|Object} [callbacks] Optional. May include `onStop`\n   * and `onReady` callbacks. If there is an error, it is passed as an\n   * argument to `onStop`. If a function is passed instead of an object, it\n   * is interpreted as an `onReady` callback.\n   */\n  subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {\n    var self = this;\n\n    var params = Array.prototype.slice.call(arguments, 1);\n    var callbacks = {};\n    if (params.length) {\n      var lastParam = params[params.length - 1];\n      if (_.isFunction(lastParam)) {\n        callbacks.onReady = params.pop();\n      } else if (lastParam &&\n        // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use\n        // onStop with an error callback instead.\n        _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],\n          _.isFunction)) {\n        callbacks = params.pop();\n      }\n    }\n\n    // Is there an existing sub with the same name and param, run in an\n    // invalidated Computation? This will happen if we are rerunning an\n    // existing computation.\n    //\n    // For example, consider a rerun of:\n    //\n    //     Tracker.autorun(function () {\n    //       Meteor.subscribe(\"foo\", Session.get(\"foo\"));\n    //       Meteor.subscribe(\"bar\", Session.get(\"bar\"));\n    //     });\n    //\n    // If \"foo\" has changed but \"bar\" has not, we will match the \"bar\"\n    // subcribe to an existing inactive subscription in order to not\n    // unsub and resub the subscription unnecessarily.\n    //\n    // We only look for one such sub; if there are N apparently-identical subs\n    // being invalidated, we will require N matching subscribe calls to keep\n    // them all active.\n    var existing = _.find(self._subscriptions, function (sub) {\n      return sub.inactive && sub.name === name &&\n        EJSON.equals(sub.params, params);\n    });\n\n    var id;\n    if (existing) {\n      id = existing.id;\n      existing.inactive = false; // reactivate\n\n      if (callbacks.onReady) {\n        // If the sub is not already ready, replace any ready callback with the\n        // one provided now. (It's not really clear what users would expect for\n        // an onReady callback inside an autorun; the semantics we provide is\n        // that at the time the sub first becomes ready, we call the last\n        // onReady callback provided, if any.)\n        if (!existing.ready)\n          existing.readyCallback = callbacks.onReady;\n      }\n\n      // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call\n      // onStop with an optional error argument\n      if (callbacks.onError) {\n        // Replace existing callback if any, so that errors aren't\n        // double-reported.\n        existing.errorCallback = callbacks.onError;\n      }\n\n      if (callbacks.onStop) {\n        existing.stopCallback = callbacks.onStop;\n      }\n    } else {\n      // New sub! Generate an id, save it locally, and send message.\n      id = Random.id();\n      self._subscriptions[id] = {\n        id: id,\n        name: name,\n        params: EJSON.clone(params),\n        inactive: false,\n        ready: false,\n        readyDeps: new Tracker.Dependency,\n        readyCallback: callbacks.onReady,\n        // XXX COMPAT WITH 1.0.3.1 #errorCallback\n        errorCallback: callbacks.onError,\n        stopCallback: callbacks.onStop,\n        connection: self,\n        remove: function() {\n          delete this.connection._subscriptions[this.id];\n          this.ready && this.readyDeps.changed();\n        },\n        stop: function() {\n          this.connection._send({msg: 'unsub', id: id});\n          this.remove();\n\n          if (callbacks.onStop) {\n            callbacks.onStop();\n          }\n        }\n      };\n      self._send({msg: 'sub', id: id, name: name, params: params});\n    }\n\n    // return a handle to the application.\n    var handle = {\n      stop: function () {\n        if (!_.has(self._subscriptions, id))\n          return;\n\n        self._subscriptions[id].stop();\n      },\n      ready: function () {\n        // return false if we've unsubscribed.\n        if (!_.has(self._subscriptions, id))\n          return false;\n        var record = self._subscriptions[id];\n        record.readyDeps.depend();\n        return record.ready;\n      },\n      subscriptionId: id\n    };\n\n    if (Tracker.active) {\n      // We're in a reactive computation, so we'd like to unsubscribe when the\n      // computation is invalidated... but not if the rerun just re-subscribes\n      // to the same subscription!  When a rerun happens, we use onInvalidate\n      // as a change to mark the subscription \"inactive\" so that it can\n      // be reused from the rerun.  If it isn't reused, it's killed from\n      // an afterFlush.\n      Tracker.onInvalidate(function (c) {\n        if (_.has(self._subscriptions, id))\n          self._subscriptions[id].inactive = true;\n\n        Tracker.afterFlush(function () {\n          if (_.has(self._subscriptions, id) &&\n              self._subscriptions[id].inactive)\n            handle.stop();\n        });\n      });\n    }\n\n    return handle;\n  },\n\n  // options:\n  // - onLateError {Function(error)} called if an error was received after the ready event.\n  //     (errors received before ready cause an error to be thrown)\n  _subscribeAndWait: function (name, args, options) {\n    var self = this;\n    var f = new Future();\n    var ready = false;\n    var handle;\n    args = args || [];\n    args.push({\n      onReady: function () {\n        ready = true;\n        f['return']();\n      },\n      onError: function (e) {\n        if (!ready)\n          f['throw'](e);\n        else\n          options && options.onLateError && options.onLateError(e);\n      }\n    });\n\n    handle = self.subscribe.apply(self, [name].concat(args));\n    f.wait();\n    return handle;\n  },\n\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self._methodHandlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self._methodHandlers[name] = func;\n    });\n  },\n\n  /**\n   * @memberOf Meteor\n   * @summary Invokes a method passing any number of arguments.\n   * @locus Anywhere\n   * @param {String} name Name of method to invoke\n   * @param {EJSONable} [arg1,arg2...] Optional method arguments\n   * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).\n   */\n  call: function (name /* .. [arguments] .. callback */) {\n    // if it's a function, the last argument is the result callback,\n    // not a parameter to the remote method.\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length && typeof args[args.length - 1] === \"function\")\n      var callback = args.pop();\n    return this.apply(name, args, callback);\n  },\n\n  // @param options {Optional Object}\n  //   wait: Boolean - Should we wait to call this until all current methods\n  //                   are fully finished, and block subsequent method calls\n  //                   until this method is fully finished?\n  //                   (does not affect methods called from within this method)\n  //   onResultReceived: Function - a callback to call as soon as the method\n  //                                result is received. the data written by\n  //                                the method may not yet be in the cache!\n  //   returnStubValue: Boolean - If true then in cases where we would have\n  //                              otherwise discarded the stub's return value\n  //                              and returned undefined, instead we go ahead\n  //                              and return it.  Specifically, this is any\n  //                              time other than when (a) we are already\n  //                              inside a stub or (b) we are in Node and no\n  //                              callback was provided.  Currently we require\n  //                              this flag to be explicitly passed to reduce\n  //                              the likelihood that stub return values will\n  //                              be confused with server return values; we\n  //                              may improve this in future.\n  // @param callback {Optional Function}\n\n  /**\n   * @memberOf Meteor\n   * @summary Invoke a method passing an array of arguments.\n   * @locus Anywhere\n   * @param {String} name Name of method to invoke\n   * @param {EJSONable[]} args Method arguments\n   * @param {Object} [options]\n   * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.\n   * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.\n   * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).\n   */\n  apply: function (name, args, options, callback) {\n    var self = this;\n\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    if (callback) {\n      // XXX would it be better form to do the binding in stream.on,\n      // or caller, instead of here?\n      // XXX improve error message (and how we report it)\n      callback = Meteor.bindEnvironment(\n        callback,\n        \"delivering result of invoking '\" + name + \"'\"\n      );\n    }\n\n    // Keep our args safe from mutation (eg if we don't send the message for a\n    // while because of a wait method).\n    args = EJSON.clone(args);\n\n    // Lazily allocate method ID once we know that it'll be needed.\n    var methodId = (function () {\n      var id;\n      return function () {\n        if (id === undefined)\n          id = '' + (self._nextMethodId++);\n        return id;\n      };\n    })();\n\n    var enclosing = DDP._CurrentInvocation.get();\n    var alreadyInSimulation = enclosing && enclosing.isSimulation;\n\n    // Lazily generate a randomSeed, only if it is requested by the stub.\n    // The random streams only have utility if they're used on both the client\n    // and the server; if the client doesn't generate any 'random' values\n    // then we don't expect the server to generate any either.\n    // Less commonly, the server may perform different actions from the client,\n    // and may in fact generate values where the client did not, but we don't\n    // have any client-side values to match, so even here we may as well just\n    // use a random seed on the server.  In that case, we don't pass the\n    // randomSeed to save bandwidth, and we don't even generate it to save a\n    // bit of CPU and to avoid consuming entropy.\n    var randomSeed = null;\n    var randomSeedGenerator = function () {\n      if (randomSeed === null) {\n        randomSeed = DDPCommon.makeRpcSeed(enclosing, name);\n      }\n      return randomSeed;\n    };\n\n    // Run the stub, if we have one. The stub is supposed to make some\n    // temporary writes to the database to give the user a smooth experience\n    // until the actual result of executing the method comes back from the\n    // server (whereupon the temporary writes to the database will be reversed\n    // during the beginUpdate/endUpdate process.)\n    //\n    // Normally, we ignore the return value of the stub (even if it is an\n    // exception), in favor of the real return value from the server. The\n    // exception is if the *caller* is a stub. In that case, we're not going\n    // to do a RPC, so we use the return value of the stub as our return\n    // value.\n\n    var stub = self._methodHandlers[name];\n    if (stub) {\n      var setUserId = function(userId) {\n        self.setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: true,\n        userId: self.userId(),\n        setUserId: setUserId,\n        randomSeed: function () { return randomSeedGenerator(); }\n      });\n\n      if (!alreadyInSimulation)\n        self._saveOriginals();\n\n      try {\n        // Note that unlike in the corresponding server code, we never audit\n        // that stubs check() their arguments.\n        var stubReturnValue = DDP._CurrentInvocation.withValue(invocation, function () {\n          if (Meteor.isServer) {\n            // Because saveOriginals and retrieveOriginals aren't reentrant,\n            // don't allow stubs to yield.\n            return Meteor._noYieldsAllowed(function () {\n              // re-clone, so that the stub can't affect our caller's values\n              return stub.apply(invocation, EJSON.clone(args));\n            });\n          } else {\n            return stub.apply(invocation, EJSON.clone(args));\n          }\n        });\n      }\n      catch (e) {\n        var exception = e;\n      }\n\n      if (!alreadyInSimulation)\n        self._retrieveAndStoreOriginals(methodId());\n    }\n\n    // If we're in a simulation, stop and return the result we have,\n    // rather than going on to do an RPC. If there was no stub,\n    // we'll end up returning undefined.\n    if (alreadyInSimulation) {\n      if (callback) {\n        callback(exception, stubReturnValue);\n        return undefined;\n      }\n      if (exception)\n        throw exception;\n      return stubReturnValue;\n    }\n\n    // If an exception occurred in a stub, and we're ignoring it\n    // because we're doing an RPC and want to use what the server\n    // returns instead, log it so the developer knows\n    // (unless they explicitly ask to see the error).\n    //\n    // Tests can set the 'expected' flag on an exception so it won't\n    // go to log.\n    if (exception) {\n      if (options.throwStubExceptions) {\n        throw exception;\n      } else if (!exception.expected) {\n        Meteor._debug(\"Exception while simulating the effect of invoking '\" +\n          name + \"'\", exception, exception.stack);\n      }\n    }\n\n\n    // At this point we're definitely doing an RPC, and we're going to\n    // return the value of the RPC to the caller.\n\n    // If the caller didn't give a callback, decide what to do.\n    if (!callback) {\n      if (Meteor.isClient) {\n        // On the client, we don't have fibers, so we can't block. The\n        // only thing we can do is to return undefined and discard the\n        // result of the RPC. If an error occurred then print the error\n        // to the console.\n        callback = function (err) {\n          err && Meteor._debug(\"Error invoking Method '\" + name + \"':\",\n                               err.message);\n        };\n      } else {\n        // On the server, make the function synchronous. Throw on\n        // errors, return on success.\n        var future = new Future;\n        callback = future.resolver();\n      }\n    }\n    // Send the RPC. Note that on the client, it is important that the\n    // stub have finished before we send the RPC, so that we know we have\n    // a complete list of which local documents the stub wrote.\n    var message = {\n      msg: 'method',\n      method: name,\n      params: args,\n      id: methodId()\n    };\n\n    // Send the randomSeed only if we used it\n    if (randomSeed !== null) {\n      message.randomSeed = randomSeed;\n    }\n\n    var methodInvoker = new MethodInvoker({\n      methodId: methodId(),\n      callback: callback,\n      connection: self,\n      onResultReceived: options.onResultReceived,\n      wait: !!options.wait,\n      message: message\n    });\n\n    if (options.wait) {\n      // It's a wait method! Wait methods go in their own block.\n      self._outstandingMethodBlocks.push(\n        {wait: true, methods: [methodInvoker]});\n    } else {\n      // Not a wait method. Start a new block if the previous block was a wait\n      // block, and add it to the last block of methods.\n      if (_.isEmpty(self._outstandingMethodBlocks) ||\n          _.last(self._outstandingMethodBlocks).wait)\n        self._outstandingMethodBlocks.push({wait: false, methods: []});\n      _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);\n    }\n\n    // If we added it to the first block, send it out now.\n    if (self._outstandingMethodBlocks.length === 1)\n      methodInvoker.sendMessage();\n\n    // If we're using the default callback on the server,\n    // block waiting for the result.\n    if (future) {\n      return future.wait();\n    }\n    return options.returnStubValue ? stubReturnValue : undefined;\n  },\n\n  // Before calling a method stub, prepare all stores to track changes and allow\n  // _retrieveAndStoreOriginals to get the original versions of changed\n  // documents.\n  _saveOriginals: function () {\n    var self = this;\n    _.each(self._stores, function (s) {\n      s.saveOriginals();\n    });\n  },\n  // Retrieves the original versions of all documents modified by the stub for\n  // method 'methodId' from all stores and saves them to _serverDocuments (keyed\n  // by document) and _documentsWrittenByStub (keyed by method ID).\n  _retrieveAndStoreOriginals: function (methodId) {\n    var self = this;\n    if (self._documentsWrittenByStub[methodId])\n      throw new Error(\"Duplicate methodId in _retrieveAndStoreOriginals\");\n\n    var docsWritten = [];\n    _.each(self._stores, function (s, collection) {\n      var originals = s.retrieveOriginals();\n      // not all stores define retrieveOriginals\n      if (!originals)\n        return;\n      originals.forEach(function (doc, id) {\n        docsWritten.push({collection: collection, id: id});\n        if (!_.has(self._serverDocuments, collection))\n          self._serverDocuments[collection] = new MongoIDMap;\n        var serverDoc = self._serverDocuments[collection].setDefault(id, {});\n        if (serverDoc.writtenByStubs) {\n          // We're not the first stub to write this doc. Just add our method ID\n          // to the record.\n          serverDoc.writtenByStubs[methodId] = true;\n        } else {\n          // First stub! Save the original value and our method ID.\n          serverDoc.document = doc;\n          serverDoc.flushCallbacks = [];\n          serverDoc.writtenByStubs = {};\n          serverDoc.writtenByStubs[methodId] = true;\n        }\n      });\n    });\n    if (!_.isEmpty(docsWritten)) {\n      self._documentsWrittenByStub[methodId] = docsWritten;\n    }\n  },\n\n  // This is very much a private function we use to make the tests\n  // take up fewer server resources after they complete.\n  _unsubscribeAll: function () {\n    var self = this;\n    _.each(_.clone(self._subscriptions), function (sub, id) {\n      // Avoid killing the autoupdate subscription so that developers\n      // still get hot code pushes when writing tests.\n      //\n      // XXX it's a hack to encode knowledge about autoupdate here,\n      // but it doesn't seem worth it yet to have a special API for\n      // subscriptions to preserve after unit tests.\n      if (sub.name !== 'meteor_autoupdate_clientVersions') {\n        self._subscriptions[id].stop();\n      }\n    });\n  },\n\n  // Sends the DDP stringification of the given message object\n  _send: function (obj) {\n    var self = this;\n    self._stream.send(DDPCommon.stringifyDDP(obj));\n  },\n\n  // We detected via DDP-level heartbeats that we've lost the\n  // connection.  Unlike `disconnect` or `close`, a lost connection\n  // will be automatically retried.\n  _lostConnection: function (error) {\n    var self = this;\n    self._stream._lostConnection(error);\n  },\n\n  /**\n   * @summary Get the current connection status. A reactive data source.\n   * @locus Client\n   * @memberOf Meteor\n   */\n  status: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.status.apply(self._stream, arguments);\n  },\n\n  /**\n   * @summary Force an immediate reconnection attempt if the client is not connected to the server.\n\n  This method does nothing if the client is already connected.\n   * @locus Client\n   * @memberOf Meteor\n   */\n  reconnect: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.reconnect.apply(self._stream, arguments);\n  },\n\n  /**\n   * @summary Disconnect the client from the server.\n   * @locus Client\n   * @memberOf Meteor\n   */\n  disconnect: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.disconnect.apply(self._stream, arguments);\n  },\n\n  close: function () {\n    var self = this;\n    return self._stream.disconnect({_permanent: true});\n  },\n\n  ///\n  /// Reactive user system\n  ///\n  userId: function () {\n    var self = this;\n    if (self._userIdDeps)\n      self._userIdDeps.depend();\n    return self._userId;\n  },\n\n  setUserId: function (userId) {\n    var self = this;\n    // Avoid invalidating dependents if setUserId is called with current value.\n    if (self._userId === userId)\n      return;\n    self._userId = userId;\n    if (self._userIdDeps)\n      self._userIdDeps.changed();\n  },\n\n  // Returns true if we are in a state after reconnect of waiting for subs to be\n  // revived or early methods to finish their data, or we are waiting for a\n  // \"wait\" method to finish.\n  _waitingForQuiescence: function () {\n    var self = this;\n    return (! _.isEmpty(self._subsBeingRevived) ||\n            ! _.isEmpty(self._methodsBlockingQuiescence));\n  },\n\n  // Returns true if any method whose message has been sent to the server has\n  // not yet invoked its user callback.\n  _anyMethodsAreOutstanding: function () {\n    var self = this;\n    return _.any(_.pluck(self._methodInvokers, 'sentMessage'));\n  },\n\n  _livedata_connected: function (msg) {\n    var self = this;\n\n    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {\n      self._heartbeat = new DDPCommon.Heartbeat({\n        heartbeatInterval: self._heartbeatInterval,\n        heartbeatTimeout: self._heartbeatTimeout,\n        onTimeout: function () {\n          self._lostConnection(\n            new DDP.ConnectionError(\"DDP heartbeat timed out\"));\n        },\n        sendPing: function () {\n          self._send({msg: 'ping'});\n        }\n      });\n      self._heartbeat.start();\n    }\n\n    // If this is a reconnect, we'll have to reset all stores.\n    if (self._lastSessionId)\n      self._resetStores = true;\n\n    if (typeof (msg.session) === \"string\") {\n      var reconnectedToPreviousSession = (self._lastSessionId === msg.session);\n      self._lastSessionId = msg.session;\n    }\n\n    if (reconnectedToPreviousSession) {\n      // Successful reconnection -- pick up where we left off.  Note that right\n      // now, this never happens: the server never connects us to a previous\n      // session, because DDP doesn't provide enough data for the server to know\n      // what messages the client has processed. We need to improve DDP to make\n      // this possible, at which point we'll probably need more code here.\n      return;\n    }\n\n    // Server doesn't have our data any more. Re-sync a new session.\n\n    // Forget about messages we were buffering for unknown collections. They'll\n    // be resent if still relevant.\n    self._updatesForUnknownStores = {};\n\n    if (self._resetStores) {\n      // Forget about the effects of stubs. We'll be resetting all collections\n      // anyway.\n      self._documentsWrittenByStub = {};\n      self._serverDocuments = {};\n    }\n\n    // Clear _afterUpdateCallbacks.\n    self._afterUpdateCallbacks = [];\n\n    // Mark all named subscriptions which are ready (ie, we already called the\n    // ready callback) as needing to be revived.\n    // XXX We should also block reconnect quiescence until unnamed subscriptions\n    //     (eg, autopublish) are done re-publishing to avoid flicker!\n    self._subsBeingRevived = {};\n    _.each(self._subscriptions, function (sub, id) {\n      if (sub.ready)\n        self._subsBeingRevived[id] = true;\n    });\n\n    // Arrange for \"half-finished\" methods to have their callbacks run, and\n    // track methods that were sent on this connection so that we don't\n    // quiesce until they are all done.\n    //\n    // Start by clearing _methodsBlockingQuiescence: methods sent before\n    // reconnect don't matter, and any \"wait\" methods sent on the new connection\n    // that we drop here will be restored by the loop below.\n    self._methodsBlockingQuiescence = {};\n    if (self._resetStores) {\n      _.each(self._methodInvokers, function (invoker) {\n        if (invoker.gotResult()) {\n          // This method already got its result, but it didn't call its callback\n          // because its data didn't become visible. We did not resend the\n          // method RPC. We'll call its callback when we get a full quiesce,\n          // since that's as close as we'll get to \"data must be visible\".\n          self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));\n        } else if (invoker.sentMessage) {\n          // This method has been sent on this connection (maybe as a resend\n          // from the last connection, maybe from onReconnect, maybe just very\n          // quickly before processing the connected message).\n          //\n          // We don't need to do anything special to ensure its callbacks get\n          // called, but we'll count it as a method which is preventing\n          // reconnect quiescence. (eg, it might be a login method that was run\n          // from onReconnect, and we don't want to see flicker by seeing a\n          // logged-out state.)\n          self._methodsBlockingQuiescence[invoker.methodId] = true;\n        }\n      });\n    }\n\n    self._messagesBufferedUntilQuiescence = [];\n\n    // If we're not waiting on any methods or subs, we can reset the stores and\n    // call the callbacks immediately.\n    if (!self._waitingForQuiescence()) {\n      if (self._resetStores) {\n        _.each(self._stores, function (s) {\n          s.beginUpdate(0, true);\n          s.endUpdate();\n        });\n        self._resetStores = false;\n      }\n      self._runAfterUpdateCallbacks();\n    }\n  },\n\n\n  _processOneDataMessage: function (msg, updates) {\n    var self = this;\n    // Using underscore here so as not to need to capitalize.\n    self['_process_' + msg.msg](msg, updates);\n  },\n\n\n  _livedata_data: function (msg) {\n    var self = this;\n\n    // collection name -> array of messages\n    var updates = {};\n\n    if (self._waitingForQuiescence()) {\n      self._messagesBufferedUntilQuiescence.push(msg);\n\n      if (msg.msg === \"nosub\")\n        delete self._subsBeingRevived[msg.id];\n\n      _.each(msg.subs || [], function (subId) {\n        delete self._subsBeingRevived[subId];\n      });\n      _.each(msg.methods || [], function (methodId) {\n        delete self._methodsBlockingQuiescence[methodId];\n      });\n\n      if (self._waitingForQuiescence())\n        return;\n\n      // No methods or subs are blocking quiescence!\n      // We'll now process and all of our buffered messages, reset all stores,\n      // and apply them all at once.\n      _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {\n        self._processOneDataMessage(bufferedMsg, updates);\n      });\n      self._messagesBufferedUntilQuiescence = [];\n    } else {\n      self._processOneDataMessage(msg, updates);\n    }\n\n    if (self._resetStores || !_.isEmpty(updates)) {\n      // Begin a transactional update of each store.\n      _.each(self._stores, function (s, storeName) {\n        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0,\n                      self._resetStores);\n      });\n      self._resetStores = false;\n\n      _.each(updates, function (updateMessages, storeName) {\n        var store = self._stores[storeName];\n        if (store) {\n          _.each(updateMessages, function (updateMessage) {\n            store.update(updateMessage);\n          });\n        } else {\n          // Nobody's listening for this data. Queue it up until\n          // someone wants it.\n          // XXX memory use will grow without bound if you forget to\n          // create a collection or just don't care about it... going\n          // to have to do something about that.\n          if (!_.has(self._updatesForUnknownStores, storeName))\n            self._updatesForUnknownStores[storeName] = [];\n          Array.prototype.push.apply(self._updatesForUnknownStores[storeName],\n                                     updateMessages);\n        }\n      });\n\n      // End update transaction.\n      _.each(self._stores, function (s) { s.endUpdate(); });\n    }\n\n    self._runAfterUpdateCallbacks();\n  },\n\n  // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose\n  // relevant docs have been flushed, as well as dataVisible callbacks at\n  // reconnect-quiescence time.\n  _runAfterUpdateCallbacks: function () {\n    var self = this;\n    var callbacks = self._afterUpdateCallbacks;\n    self._afterUpdateCallbacks = [];\n    _.each(callbacks, function (c) {\n      c();\n    });\n  },\n\n  _pushUpdate: function (updates, collection, msg) {\n    var self = this;\n    if (!_.has(updates, collection)) {\n      updates[collection] = [];\n    }\n    updates[collection].push(msg);\n  },\n\n  _getServerDoc: function (collection, id) {\n    var self = this;\n    if (!_.has(self._serverDocuments, collection))\n      return null;\n    var serverDocsForCollection = self._serverDocuments[collection];\n    return serverDocsForCollection.get(id) || null;\n  },\n\n  _process_added: function (msg, updates) {\n    var self = this;\n    var id = MongoID.idParse(msg.id);\n    var serverDoc = self._getServerDoc(msg.collection, id);\n    if (serverDoc) {\n      // Some outstanding stub wrote here.\n      var isExisting = (serverDoc.document !== undefined);\n\n      serverDoc.document = msg.fields || {};\n      serverDoc.document._id = id;\n\n      if (self._resetStores) {\n        // During reconnect the server is sending adds for existing ids.\n        // Always push an update so that document stays in the store after\n        // reset. Use current version of the document for this update, so\n        // that stub-written values are preserved.\n        var currentDoc = self._stores[msg.collection].getDoc(msg.id);\n        if (currentDoc !== undefined)\n          msg.fields = currentDoc;\n\n        self._pushUpdate(updates, msg.collection, msg);\n      } else if (isExisting) {\n        throw new Error(\"Server sent add for existing id: \" + msg.id);\n      }\n    } else {\n      self._pushUpdate(updates, msg.collection, msg);\n    }\n  },\n\n  _process_changed: function (msg, updates) {\n    var self = this;\n    var serverDoc = self._getServerDoc(\n      msg.collection, MongoID.idParse(msg.id));\n    if (serverDoc) {\n      if (serverDoc.document === undefined)\n        throw new Error(\"Server sent changed for nonexisting id: \" + msg.id);\n      DiffSequence.applyChanges(serverDoc.document, msg.fields);\n    } else {\n      self._pushUpdate(updates, msg.collection, msg);\n    }\n  },\n\n  _process_removed: function (msg, updates) {\n    var self = this;\n    var serverDoc = self._getServerDoc(\n      msg.collection, MongoID.idParse(msg.id));\n    if (serverDoc) {\n      // Some outstanding stub wrote here.\n      if (serverDoc.document === undefined)\n        throw new Error(\"Server sent removed for nonexisting id:\" + msg.id);\n      serverDoc.document = undefined;\n    } else {\n      self._pushUpdate(updates, msg.collection, {\n        msg: 'removed',\n        collection: msg.collection,\n        id: msg.id\n      });\n    }\n  },\n\n  _process_updated: function (msg, updates) {\n    var self = this;\n    // Process \"method done\" messages.\n    _.each(msg.methods, function (methodId) {\n      _.each(self._documentsWrittenByStub[methodId], function (written) {\n        var serverDoc = self._getServerDoc(written.collection, written.id);\n        if (!serverDoc)\n          throw new Error(\"Lost serverDoc for \" + JSON.stringify(written));\n        if (!serverDoc.writtenByStubs[methodId])\n          throw new Error(\"Doc \" + JSON.stringify(written) +\n                          \" not written by  method \" + methodId);\n        delete serverDoc.writtenByStubs[methodId];\n        if (_.isEmpty(serverDoc.writtenByStubs)) {\n          // All methods whose stubs wrote this method have completed! We can\n          // now copy the saved document to the database (reverting the stub's\n          // change if the server did not write to this object, or applying the\n          // server's writes if it did).\n\n          // This is a fake ddp 'replace' message.  It's just for talking\n          // between livedata connections and minimongo.  (We have to stringify\n          // the ID because it's supposed to look like a wire message.)\n          self._pushUpdate(updates, written.collection, {\n            msg: 'replace',\n            id: MongoID.idStringify(written.id),\n            replace: serverDoc.document\n          });\n          // Call all flush callbacks.\n          _.each(serverDoc.flushCallbacks, function (c) {\n            c();\n          });\n\n          // Delete this completed serverDocument. Don't bother to GC empty\n          // IdMaps inside self._serverDocuments, since there probably aren't\n          // many collections and they'll be written repeatedly.\n          self._serverDocuments[written.collection].remove(written.id);\n        }\n      });\n      delete self._documentsWrittenByStub[methodId];\n\n      // We want to call the data-written callback, but we can't do so until all\n      // currently buffered messages are flushed.\n      var callbackInvoker = self._methodInvokers[methodId];\n      if (!callbackInvoker)\n        throw new Error(\"No callback invoker for method \" + methodId);\n      self._runWhenAllServerDocsAreFlushed(\n        _.bind(callbackInvoker.dataVisible, callbackInvoker));\n    });\n  },\n\n  _process_ready: function (msg, updates) {\n    var self = this;\n    // Process \"sub ready\" messages. \"sub ready\" messages don't take effect\n    // until all current server documents have been flushed to the local\n    // database. We can use a write fence to implement this.\n    _.each(msg.subs, function (subId) {\n      self._runWhenAllServerDocsAreFlushed(function () {\n        var subRecord = self._subscriptions[subId];\n        // Did we already unsubscribe?\n        if (!subRecord)\n          return;\n        // Did we already receive a ready message? (Oops!)\n        if (subRecord.ready)\n          return;\n        subRecord.ready = true;\n        subRecord.readyCallback && subRecord.readyCallback();\n        subRecord.readyDeps.changed();\n      });\n    });\n  },\n\n  // Ensures that \"f\" will be called after all documents currently in\n  // _serverDocuments have been written to the local cache. f will not be called\n  // if the connection is lost before then!\n  _runWhenAllServerDocsAreFlushed: function (f) {\n    var self = this;\n    var runFAfterUpdates = function () {\n      self._afterUpdateCallbacks.push(f);\n    };\n    var unflushedServerDocCount = 0;\n    var onServerDocFlush = function () {\n      --unflushedServerDocCount;\n      if (unflushedServerDocCount === 0) {\n        // This was the last doc to flush! Arrange to run f after the updates\n        // have been applied.\n        runFAfterUpdates();\n      }\n    };\n    _.each(self._serverDocuments, function (collectionDocs) {\n      collectionDocs.forEach(function (serverDoc) {\n        var writtenByStubForAMethodWithSentMessage = _.any(\n          serverDoc.writtenByStubs, function (dummy, methodId) {\n            var invoker = self._methodInvokers[methodId];\n            return invoker && invoker.sentMessage;\n          });\n        if (writtenByStubForAMethodWithSentMessage) {\n          ++unflushedServerDocCount;\n          serverDoc.flushCallbacks.push(onServerDocFlush);\n        }\n      });\n    });\n    if (unflushedServerDocCount === 0) {\n      // There aren't any buffered docs --- we can call f as soon as the current\n      // round of updates is applied!\n      runFAfterUpdates();\n    }\n  },\n\n  _livedata_nosub: function (msg) {\n    var self = this;\n\n    // First pass it through _livedata_data, which only uses it to help get\n    // towards quiescence.\n    self._livedata_data(msg);\n\n    // Do the rest of our processing immediately, with no\n    // buffering-until-quiescence.\n\n    // we weren't subbed anyway, or we initiated the unsub.\n    if (!_.has(self._subscriptions, msg.id))\n      return;\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    var errorCallback = self._subscriptions[msg.id].errorCallback;\n    var stopCallback = self._subscriptions[msg.id].stopCallback;\n\n    self._subscriptions[msg.id].remove();\n\n    var meteorErrorFromMsg = function (msgArg) {\n      return msgArg && msgArg.error && new Meteor.Error(\n        msgArg.error.error, msgArg.error.reason, msgArg.error.details);\n    }\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    if (errorCallback && msg.error) {\n      errorCallback(meteorErrorFromMsg(msg));\n    }\n\n    if (stopCallback) {\n      stopCallback(meteorErrorFromMsg(msg));\n    }\n  },\n\n  _process_nosub: function () {\n    // This is called as part of the \"buffer until quiescence\" process, but\n    // nosub's effect is always immediate. It only goes in the buffer at all\n    // because it's possible for a nosub to be the thing that triggers\n    // quiescence, if we were waiting for a sub to be revived and it dies\n    // instead.\n  },\n\n  _livedata_result: function (msg) {\n    // id, result or error. error has error (code), reason, details\n\n    var self = this;\n\n    // find the outstanding request\n    // should be O(1) in nearly all realistic use cases\n    if (_.isEmpty(self._outstandingMethodBlocks)) {\n      Meteor._debug(\"Received method result but no methods outstanding\");\n      return;\n    }\n    var currentMethodBlock = self._outstandingMethodBlocks[0].methods;\n    var m;\n    for (var i = 0; i < currentMethodBlock.length; i++) {\n      m = currentMethodBlock[i];\n      if (m.methodId === msg.id)\n        break;\n    }\n\n    if (!m) {\n      Meteor._debug(\"Can't match method response to original method call\", msg);\n      return;\n    }\n\n    // Remove from current method block. This may leave the block empty, but we\n    // don't move on to the next block until the callback has been delivered, in\n    // _outstandingMethodFinished.\n    currentMethodBlock.splice(i, 1);\n\n    if (_.has(msg, 'error')) {\n      m.receiveResult(new Meteor.Error(\n        msg.error.error, msg.error.reason,\n        msg.error.details));\n    } else {\n      // msg.result may be undefined if the method didn't return a\n      // value\n      m.receiveResult(undefined, msg.result);\n    }\n  },\n\n  // Called by MethodInvoker after a method's callback is invoked.  If this was\n  // the last outstanding method in the current block, runs the next block. If\n  // there are no more methods, consider accepting a hot code push.\n  _outstandingMethodFinished: function () {\n    var self = this;\n    if (self._anyMethodsAreOutstanding())\n      return;\n\n    // No methods are outstanding. This should mean that the first block of\n    // methods is empty. (Or it might not exist, if this was a method that\n    // half-finished before disconnect/reconnect.)\n    if (! _.isEmpty(self._outstandingMethodBlocks)) {\n      var firstBlock = self._outstandingMethodBlocks.shift();\n      if (! _.isEmpty(firstBlock.methods))\n        throw new Error(\"No methods outstanding but nonempty block: \" +\n                        JSON.stringify(firstBlock));\n\n      // Send the outstanding methods now in the first block.\n      if (!_.isEmpty(self._outstandingMethodBlocks))\n        self._sendOutstandingMethods();\n    }\n\n    // Maybe accept a hot code push.\n    self._maybeMigrate();\n  },\n\n  // Sends messages for all the methods in the first block in\n  // _outstandingMethodBlocks.\n  _sendOutstandingMethods: function() {\n    var self = this;\n    if (_.isEmpty(self._outstandingMethodBlocks))\n      return;\n    _.each(self._outstandingMethodBlocks[0].methods, function (m) {\n      m.sendMessage();\n    });\n  },\n\n  _livedata_error: function (msg) {\n    Meteor._debug(\"Received error from server: \", msg.reason);\n    if (msg.offendingMessage)\n      Meteor._debug(\"For: \", msg.offendingMessage);\n  },\n\n  _callOnReconnectAndSendAppropriateOutstandingMethods: function() {\n    var self = this;\n    var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;\n    self._outstandingMethodBlocks = [];\n\n    self.onReconnect();\n\n    if (_.isEmpty(oldOutstandingMethodBlocks))\n      return;\n\n    // We have at least one block worth of old outstanding methods to try\n    // again. First: did onReconnect actually send anything? If not, we just\n    // restore all outstanding methods and run the first block.\n    if (_.isEmpty(self._outstandingMethodBlocks)) {\n      self._outstandingMethodBlocks = oldOutstandingMethodBlocks;\n      self._sendOutstandingMethods();\n      return;\n    }\n\n    // OK, there are blocks on both sides. Special case: merge the last block of\n    // the reconnect methods with the first block of the original methods, if\n    // neither of them are \"wait\" blocks.\n    if (!_.last(self._outstandingMethodBlocks).wait &&\n        !oldOutstandingMethodBlocks[0].wait) {\n      _.each(oldOutstandingMethodBlocks[0].methods, function (m) {\n        _.last(self._outstandingMethodBlocks).methods.push(m);\n\n        // If this \"last block\" is also the first block, send the message.\n        if (self._outstandingMethodBlocks.length === 1)\n          m.sendMessage();\n      });\n\n      oldOutstandingMethodBlocks.shift();\n    }\n\n    // Now add the rest of the original blocks on.\n    _.each(oldOutstandingMethodBlocks, function (block) {\n      self._outstandingMethodBlocks.push(block);\n    });\n  },\n\n  // We can accept a hot code push if there are no methods in flight.\n  _readyToMigrate: function() {\n    var self = this;\n    return _.isEmpty(self._methodInvokers);\n  },\n\n  // If we were blocking a migration, see if it's now possible to continue.\n  // Call whenever the set of outstanding/blocked methods shrinks.\n  _maybeMigrate: function () {\n    var self = this;\n    if (self._retryMigrate && self._readyToMigrate()) {\n      self._retryMigrate();\n      self._retryMigrate = null;\n    }\n  }\n});\n\nLivedataTest.Connection = Connection;\n\n// @param url {String} URL to Meteor app,\n//     e.g.:\n//     \"subdomain.meteor.com\",\n//     \"http://subdomain.meteor.com\",\n//     \"/\",\n//     \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n\n/**\n * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.\n * @locus Anywhere\n * @param {String} url The URL of another Meteor application.\n */\nDDP.connect = function (url, options) {\n  var ret = new Connection(url, options);\n  allConnections.push(ret); // hack. see below.\n  return ret;\n};\n\n// Hack for `spiderable` package: a way to see if the page is done\n// loading all the data it needs.\n//\nallConnections = [];\nDDP._allSubscriptionsReady = function () {\n  return _.all(allConnections, function (conn) {\n    return _.all(conn._subscriptions, function (sub) {\n      return sub.ready;\n    });\n  });\n};\n"]}}]