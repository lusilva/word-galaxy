[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar HTMLTools, Scanner, makeRegexMatcher, getCharacterReference, getComment, getDoctype, getHTMLToken, getTagToken, TEMPLATE_TAG_POSITION, isLookingAtEndTag, codePointToString, getContent, getRCData;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/html-tools/utils.js                                                                                //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n                                                                                                               // 1\nHTMLTools = {};                                                                                                // 2\nHTMLTools.Parse = {};                                                                                          // 3\n                                                                                                               // 4\nvar asciiLowerCase = HTMLTools.asciiLowerCase = function (str) {                                               // 5\n  return str.replace(/[A-Z]/g, function (c) {                                                                  // 6\n    return String.fromCharCode(c.charCodeAt(0) + 32);                                                          // 7\n  });                                                                                                          // 8\n};                                                                                                             // 9\n                                                                                                               // 10\nvar svgCamelCaseAttributes = 'attributeName attributeType baseFrequency baseProfile calcMode clipPathUnits contentScriptType contentStyleType diffuseConstant edgeMode externalResourcesRequired filterRes filterUnits glyphRef glyphRef gradientTransform gradientTransform gradientUnits gradientUnits kernelMatrix kernelUnitLength kernelUnitLength kernelUnitLength keyPoints keySplines keyTimes lengthAdjust limitingConeAngle markerHeight markerUnits markerWidth maskContentUnits maskUnits numOctaves pathLength patternContentUnits patternTransform patternUnits pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits refX refY repeatCount repeatDur requiredExtensions requiredFeatures specularConstant specularExponent specularExponent spreadMethod spreadMethod startOffset stdDeviation stitchTiles surfaceScale surfaceScale systemLanguage tableValues targetX targetY textLength textLength viewBox viewTarget xChannelSelector yChannelSelector zoomAndPan'.split(' ');\n                                                                                                               // 12\nvar properAttributeCaseMap = (function (map) {                                                                 // 13\n  for (var i = 0; i < svgCamelCaseAttributes.length; i++) {                                                    // 14\n    var a = svgCamelCaseAttributes[i];                                                                         // 15\n    map[asciiLowerCase(a)] = a;                                                                                // 16\n  }                                                                                                            // 17\n  return map;                                                                                                  // 18\n})({});                                                                                                        // 19\n                                                                                                               // 20\nvar properTagCaseMap = (function (map) {                                                                       // 21\n  var knownElements = HTML.knownElementNames;                                                                  // 22\n  for (var i = 0; i < knownElements.length; i++) {                                                             // 23\n    var a = knownElements[i];                                                                                  // 24\n    map[asciiLowerCase(a)] = a;                                                                                // 25\n  }                                                                                                            // 26\n  return map;                                                                                                  // 27\n})({});                                                                                                        // 28\n                                                                                                               // 29\n// Take a tag name in any case and make it the proper case for HTML.                                           // 30\n//                                                                                                             // 31\n// Modern browsers let you embed SVG in HTML, but SVG elements are special                                     // 32\n// in that they have a case-sensitive DOM API (nodeName, getAttribute,                                         // 33\n// setAttribute).  For example, it has to be `setAttribute(\"viewBox\")`,                                        // 34\n// not `\"viewbox\"`.  However, the browser's HTML parser is NOT case sensitive                                  // 35\n// and will fix the case for you, so if you write `<svg viewbox=\"...\">`                                        // 36\n// you actually get a `\"viewBox\"` attribute.  Any HTML-parsing toolchain                                       // 37\n// must do the same.                                                                                           // 38\nHTMLTools.properCaseTagName = function (name) {                                                                // 39\n  var lowered = asciiLowerCase(name);                                                                          // 40\n  return properTagCaseMap.hasOwnProperty(lowered) ?                                                            // 41\n    properTagCaseMap[lowered] : lowered;                                                                       // 42\n};                                                                                                             // 43\n                                                                                                               // 44\n// See docs for properCaseTagName.                                                                             // 45\nHTMLTools.properCaseAttributeName = function (name) {                                                          // 46\n  var lowered = asciiLowerCase(name);                                                                          // 47\n  return properAttributeCaseMap.hasOwnProperty(lowered) ?                                                      // 48\n    properAttributeCaseMap[lowered] : lowered;                                                                 // 49\n};                                                                                                             // 50\n                                                                                                               // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/html-tools/scanner.js                                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// This is a Scanner class suitable for any parser/lexer/tokenizer.                                            // 1\n//                                                                                                             // 2\n// A Scanner has an immutable source document (string) `input` and a current                                   // 3\n// position `pos`, an index into the string, which can be set at will.                                         // 4\n//                                                                                                             // 5\n// * `new Scanner(input)` - constructs a Scanner with source string `input`                                    // 6\n// * `scanner.rest()` - returns the rest of the input after `pos`                                              // 7\n// * `scanner.peek()` - returns the character at `pos`                                                         // 8\n// * `scanner.isEOF()` - true if `pos` is at or beyond the end of `input`                                      // 9\n// * `scanner.fatal(msg)` - throw an error indicating a problem at `pos`                                       // 10\n                                                                                                               // 11\nScanner = HTMLTools.Scanner = function (input) {                                                               // 12\n  this.input = input; // public, read-only                                                                     // 13\n  this.pos = 0; // public, read-write                                                                          // 14\n};                                                                                                             // 15\n                                                                                                               // 16\nScanner.prototype.rest = function () {                                                                         // 17\n  // Slicing a string is O(1) in modern JavaScript VMs (including old IE).                                     // 18\n  return this.input.slice(this.pos);                                                                           // 19\n};                                                                                                             // 20\n                                                                                                               // 21\nScanner.prototype.isEOF = function () {                                                                        // 22\n  return this.pos >= this.input.length;                                                                        // 23\n};                                                                                                             // 24\n                                                                                                               // 25\nScanner.prototype.fatal = function (msg) {                                                                     // 26\n  // despite this default, you should always provide a message!                                                // 27\n  msg = (msg || \"Parse error\");                                                                                // 28\n                                                                                                               // 29\n  var CONTEXT_AMOUNT = 20;                                                                                     // 30\n                                                                                                               // 31\n  var input = this.input;                                                                                      // 32\n  var pos = this.pos;                                                                                          // 33\n  var pastInput = input.substring(pos - CONTEXT_AMOUNT - 1, pos);                                              // 34\n  if (pastInput.length > CONTEXT_AMOUNT)                                                                       // 35\n    pastInput = '...' + pastInput.substring(-CONTEXT_AMOUNT);                                                  // 36\n                                                                                                               // 37\n  var upcomingInput = input.substring(pos, pos + CONTEXT_AMOUNT + 1);                                          // 38\n  if (upcomingInput.length > CONTEXT_AMOUNT)                                                                   // 39\n    upcomingInput = upcomingInput.substring(0, CONTEXT_AMOUNT) + '...';                                        // 40\n                                                                                                               // 41\n  var positionDisplay = ((pastInput + upcomingInput).replace(/\\n/g, ' ') + '\\n' +                              // 42\n                         (new Array(pastInput.length + 1).join(' ')) + \"^\");                                   // 43\n                                                                                                               // 44\n  var e = new Error(msg + \"\\n\" + positionDisplay);                                                             // 45\n                                                                                                               // 46\n  e.offset = pos;                                                                                              // 47\n  var allPastInput = input.substring(0, pos);                                                                  // 48\n  e.line = (1 + (allPastInput.match(/\\n/g) || []).length);                                                     // 49\n  e.col = (1 + pos - allPastInput.lastIndexOf('\\n'));                                                          // 50\n  e.scanner = this;                                                                                            // 51\n                                                                                                               // 52\n  throw e;                                                                                                     // 53\n};                                                                                                             // 54\n                                                                                                               // 55\n// Peek at the next character.                                                                                 // 56\n//                                                                                                             // 57\n// If `isEOF`, returns an empty string.                                                                        // 58\nScanner.prototype.peek = function () {                                                                         // 59\n  return this.input.charAt(this.pos);                                                                          // 60\n};                                                                                                             // 61\n                                                                                                               // 62\n// Constructs a `getFoo` function where `foo` is specified with a regex.                                       // 63\n// The regex should start with `^`.  The constructed function will return                                      // 64\n// match group 1, if it exists and matches a non-empty string, or else                                         // 65\n// the entire matched string (or null if there is no match).                                                   // 66\n//                                                                                                             // 67\n// A `getFoo` function tries to match and consume a foo.  If it succeeds,                                      // 68\n// the current position of the scanner is advanced.  If it fails, the                                          // 69\n// current position is not advanced and a falsy value (typically null)                                         // 70\n// is returned.                                                                                                // 71\nmakeRegexMatcher = function (regex) {                                                                          // 72\n  return function (scanner) {                                                                                  // 73\n    var match = regex.exec(scanner.rest());                                                                    // 74\n                                                                                                               // 75\n    if (! match)                                                                                               // 76\n      return null;                                                                                             // 77\n                                                                                                               // 78\n    scanner.pos += match[0].length;                                                                            // 79\n    return match[1] || match[0];                                                                               // 80\n  };                                                                                                           // 81\n};                                                                                                             // 82\n                                                                                                               // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/html-tools/charref.js                                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n                                                                                                               // 1\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/entities.json                                   // 2\n                                                                                                               // 3\n                                                                                                               // 4\n// Note that some entities don't have a final semicolon!  These are used to                                    // 5\n// make `&lt` (for example) with no semicolon a parse error but `&abcde` not.                                  // 6\n                                                                                                               // 7\nvar ENTITIES = {                                                                                               // 8\n  \"&Aacute;\": { \"codepoints\": [193], \"characters\": \"\\u00C1\" },                                                 // 9\n  \"&Aacute\": { \"codepoints\": [193], \"characters\": \"\\u00C1\" },                                                  // 10\n  \"&aacute;\": { \"codepoints\": [225], \"characters\": \"\\u00E1\" },                                                 // 11\n  \"&aacute\": { \"codepoints\": [225], \"characters\": \"\\u00E1\" },                                                  // 12\n  \"&Abreve;\": { \"codepoints\": [258], \"characters\": \"\\u0102\" },                                                 // 13\n  \"&abreve;\": { \"codepoints\": [259], \"characters\": \"\\u0103\" },                                                 // 14\n  \"&ac;\": { \"codepoints\": [8766], \"characters\": \"\\u223E\" },                                                    // 15\n  \"&acd;\": { \"codepoints\": [8767], \"characters\": \"\\u223F\" },                                                   // 16\n  \"&acE;\": { \"codepoints\": [8766, 819], \"characters\": \"\\u223E\\u0333\" },                                        // 17\n  \"&Acirc;\": { \"codepoints\": [194], \"characters\": \"\\u00C2\" },                                                  // 18\n  \"&Acirc\": { \"codepoints\": [194], \"characters\": \"\\u00C2\" },                                                   // 19\n  \"&acirc;\": { \"codepoints\": [226], \"characters\": \"\\u00E2\" },                                                  // 20\n  \"&acirc\": { \"codepoints\": [226], \"characters\": \"\\u00E2\" },                                                   // 21\n  \"&acute;\": { \"codepoints\": [180], \"characters\": \"\\u00B4\" },                                                  // 22\n  \"&acute\": { \"codepoints\": [180], \"characters\": \"\\u00B4\" },                                                   // 23\n  \"&Acy;\": { \"codepoints\": [1040], \"characters\": \"\\u0410\" },                                                   // 24\n  \"&acy;\": { \"codepoints\": [1072], \"characters\": \"\\u0430\" },                                                   // 25\n  \"&AElig;\": { \"codepoints\": [198], \"characters\": \"\\u00C6\" },                                                  // 26\n  \"&AElig\": { \"codepoints\": [198], \"characters\": \"\\u00C6\" },                                                   // 27\n  \"&aelig;\": { \"codepoints\": [230], \"characters\": \"\\u00E6\" },                                                  // 28\n  \"&aelig\": { \"codepoints\": [230], \"characters\": \"\\u00E6\" },                                                   // 29\n  \"&af;\": { \"codepoints\": [8289], \"characters\": \"\\u2061\" },                                                    // 30\n  \"&Afr;\": { \"codepoints\": [120068], \"characters\": \"\\uD835\\uDD04\" },                                           // 31\n  \"&afr;\": { \"codepoints\": [120094], \"characters\": \"\\uD835\\uDD1E\" },                                           // 32\n  \"&Agrave;\": { \"codepoints\": [192], \"characters\": \"\\u00C0\" },                                                 // 33\n  \"&Agrave\": { \"codepoints\": [192], \"characters\": \"\\u00C0\" },                                                  // 34\n  \"&agrave;\": { \"codepoints\": [224], \"characters\": \"\\u00E0\" },                                                 // 35\n  \"&agrave\": { \"codepoints\": [224], \"characters\": \"\\u00E0\" },                                                  // 36\n  \"&alefsym;\": { \"codepoints\": [8501], \"characters\": \"\\u2135\" },                                               // 37\n  \"&aleph;\": { \"codepoints\": [8501], \"characters\": \"\\u2135\" },                                                 // 38\n  \"&Alpha;\": { \"codepoints\": [913], \"characters\": \"\\u0391\" },                                                  // 39\n  \"&alpha;\": { \"codepoints\": [945], \"characters\": \"\\u03B1\" },                                                  // 40\n  \"&Amacr;\": { \"codepoints\": [256], \"characters\": \"\\u0100\" },                                                  // 41\n  \"&amacr;\": { \"codepoints\": [257], \"characters\": \"\\u0101\" },                                                  // 42\n  \"&amalg;\": { \"codepoints\": [10815], \"characters\": \"\\u2A3F\" },                                                // 43\n  \"&amp;\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },                                                     // 44\n  \"&amp\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },                                                      // 45\n  \"&AMP;\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },                                                     // 46\n  \"&AMP\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },                                                      // 47\n  \"&andand;\": { \"codepoints\": [10837], \"characters\": \"\\u2A55\" },                                               // 48\n  \"&And;\": { \"codepoints\": [10835], \"characters\": \"\\u2A53\" },                                                  // 49\n  \"&and;\": { \"codepoints\": [8743], \"characters\": \"\\u2227\" },                                                   // 50\n  \"&andd;\": { \"codepoints\": [10844], \"characters\": \"\\u2A5C\" },                                                 // 51\n  \"&andslope;\": { \"codepoints\": [10840], \"characters\": \"\\u2A58\" },                                             // 52\n  \"&andv;\": { \"codepoints\": [10842], \"characters\": \"\\u2A5A\" },                                                 // 53\n  \"&ang;\": { \"codepoints\": [8736], \"characters\": \"\\u2220\" },                                                   // 54\n  \"&ange;\": { \"codepoints\": [10660], \"characters\": \"\\u29A4\" },                                                 // 55\n  \"&angle;\": { \"codepoints\": [8736], \"characters\": \"\\u2220\" },                                                 // 56\n  \"&angmsdaa;\": { \"codepoints\": [10664], \"characters\": \"\\u29A8\" },                                             // 57\n  \"&angmsdab;\": { \"codepoints\": [10665], \"characters\": \"\\u29A9\" },                                             // 58\n  \"&angmsdac;\": { \"codepoints\": [10666], \"characters\": \"\\u29AA\" },                                             // 59\n  \"&angmsdad;\": { \"codepoints\": [10667], \"characters\": \"\\u29AB\" },                                             // 60\n  \"&angmsdae;\": { \"codepoints\": [10668], \"characters\": \"\\u29AC\" },                                             // 61\n  \"&angmsdaf;\": { \"codepoints\": [10669], \"characters\": \"\\u29AD\" },                                             // 62\n  \"&angmsdag;\": { \"codepoints\": [10670], \"characters\": \"\\u29AE\" },                                             // 63\n  \"&angmsdah;\": { \"codepoints\": [10671], \"characters\": \"\\u29AF\" },                                             // 64\n  \"&angmsd;\": { \"codepoints\": [8737], \"characters\": \"\\u2221\" },                                                // 65\n  \"&angrt;\": { \"codepoints\": [8735], \"characters\": \"\\u221F\" },                                                 // 66\n  \"&angrtvb;\": { \"codepoints\": [8894], \"characters\": \"\\u22BE\" },                                               // 67\n  \"&angrtvbd;\": { \"codepoints\": [10653], \"characters\": \"\\u299D\" },                                             // 68\n  \"&angsph;\": { \"codepoints\": [8738], \"characters\": \"\\u2222\" },                                                // 69\n  \"&angst;\": { \"codepoints\": [197], \"characters\": \"\\u00C5\" },                                                  // 70\n  \"&angzarr;\": { \"codepoints\": [9084], \"characters\": \"\\u237C\" },                                               // 71\n  \"&Aogon;\": { \"codepoints\": [260], \"characters\": \"\\u0104\" },                                                  // 72\n  \"&aogon;\": { \"codepoints\": [261], \"characters\": \"\\u0105\" },                                                  // 73\n  \"&Aopf;\": { \"codepoints\": [120120], \"characters\": \"\\uD835\\uDD38\" },                                          // 74\n  \"&aopf;\": { \"codepoints\": [120146], \"characters\": \"\\uD835\\uDD52\" },                                          // 75\n  \"&apacir;\": { \"codepoints\": [10863], \"characters\": \"\\u2A6F\" },                                               // 76\n  \"&ap;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },                                                    // 77\n  \"&apE;\": { \"codepoints\": [10864], \"characters\": \"\\u2A70\" },                                                  // 78\n  \"&ape;\": { \"codepoints\": [8778], \"characters\": \"\\u224A\" },                                                   // 79\n  \"&apid;\": { \"codepoints\": [8779], \"characters\": \"\\u224B\" },                                                  // 80\n  \"&apos;\": { \"codepoints\": [39], \"characters\": \"\\u0027\" },                                                    // 81\n  \"&ApplyFunction;\": { \"codepoints\": [8289], \"characters\": \"\\u2061\" },                                         // 82\n  \"&approx;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },                                                // 83\n  \"&approxeq;\": { \"codepoints\": [8778], \"characters\": \"\\u224A\" },                                              // 84\n  \"&Aring;\": { \"codepoints\": [197], \"characters\": \"\\u00C5\" },                                                  // 85\n  \"&Aring\": { \"codepoints\": [197], \"characters\": \"\\u00C5\" },                                                   // 86\n  \"&aring;\": { \"codepoints\": [229], \"characters\": \"\\u00E5\" },                                                  // 87\n  \"&aring\": { \"codepoints\": [229], \"characters\": \"\\u00E5\" },                                                   // 88\n  \"&Ascr;\": { \"codepoints\": [119964], \"characters\": \"\\uD835\\uDC9C\" },                                          // 89\n  \"&ascr;\": { \"codepoints\": [119990], \"characters\": \"\\uD835\\uDCB6\" },                                          // 90\n  \"&Assign;\": { \"codepoints\": [8788], \"characters\": \"\\u2254\" },                                                // 91\n  \"&ast;\": { \"codepoints\": [42], \"characters\": \"\\u002A\" },                                                     // 92\n  \"&asymp;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },                                                 // 93\n  \"&asympeq;\": { \"codepoints\": [8781], \"characters\": \"\\u224D\" },                                               // 94\n  \"&Atilde;\": { \"codepoints\": [195], \"characters\": \"\\u00C3\" },                                                 // 95\n  \"&Atilde\": { \"codepoints\": [195], \"characters\": \"\\u00C3\" },                                                  // 96\n  \"&atilde;\": { \"codepoints\": [227], \"characters\": \"\\u00E3\" },                                                 // 97\n  \"&atilde\": { \"codepoints\": [227], \"characters\": \"\\u00E3\" },                                                  // 98\n  \"&Auml;\": { \"codepoints\": [196], \"characters\": \"\\u00C4\" },                                                   // 99\n  \"&Auml\": { \"codepoints\": [196], \"characters\": \"\\u00C4\" },                                                    // 100\n  \"&auml;\": { \"codepoints\": [228], \"characters\": \"\\u00E4\" },                                                   // 101\n  \"&auml\": { \"codepoints\": [228], \"characters\": \"\\u00E4\" },                                                    // 102\n  \"&awconint;\": { \"codepoints\": [8755], \"characters\": \"\\u2233\" },                                              // 103\n  \"&awint;\": { \"codepoints\": [10769], \"characters\": \"\\u2A11\" },                                                // 104\n  \"&backcong;\": { \"codepoints\": [8780], \"characters\": \"\\u224C\" },                                              // 105\n  \"&backepsilon;\": { \"codepoints\": [1014], \"characters\": \"\\u03F6\" },                                           // 106\n  \"&backprime;\": { \"codepoints\": [8245], \"characters\": \"\\u2035\" },                                             // 107\n  \"&backsim;\": { \"codepoints\": [8765], \"characters\": \"\\u223D\" },                                               // 108\n  \"&backsimeq;\": { \"codepoints\": [8909], \"characters\": \"\\u22CD\" },                                             // 109\n  \"&Backslash;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },                                             // 110\n  \"&Barv;\": { \"codepoints\": [10983], \"characters\": \"\\u2AE7\" },                                                 // 111\n  \"&barvee;\": { \"codepoints\": [8893], \"characters\": \"\\u22BD\" },                                                // 112\n  \"&barwed;\": { \"codepoints\": [8965], \"characters\": \"\\u2305\" },                                                // 113\n  \"&Barwed;\": { \"codepoints\": [8966], \"characters\": \"\\u2306\" },                                                // 114\n  \"&barwedge;\": { \"codepoints\": [8965], \"characters\": \"\\u2305\" },                                              // 115\n  \"&bbrk;\": { \"codepoints\": [9141], \"characters\": \"\\u23B5\" },                                                  // 116\n  \"&bbrktbrk;\": { \"codepoints\": [9142], \"characters\": \"\\u23B6\" },                                              // 117\n  \"&bcong;\": { \"codepoints\": [8780], \"characters\": \"\\u224C\" },                                                 // 118\n  \"&Bcy;\": { \"codepoints\": [1041], \"characters\": \"\\u0411\" },                                                   // 119\n  \"&bcy;\": { \"codepoints\": [1073], \"characters\": \"\\u0431\" },                                                   // 120\n  \"&bdquo;\": { \"codepoints\": [8222], \"characters\": \"\\u201E\" },                                                 // 121\n  \"&becaus;\": { \"codepoints\": [8757], \"characters\": \"\\u2235\" },                                                // 122\n  \"&because;\": { \"codepoints\": [8757], \"characters\": \"\\u2235\" },                                               // 123\n  \"&Because;\": { \"codepoints\": [8757], \"characters\": \"\\u2235\" },                                               // 124\n  \"&bemptyv;\": { \"codepoints\": [10672], \"characters\": \"\\u29B0\" },                                              // 125\n  \"&bepsi;\": { \"codepoints\": [1014], \"characters\": \"\\u03F6\" },                                                 // 126\n  \"&bernou;\": { \"codepoints\": [8492], \"characters\": \"\\u212C\" },                                                // 127\n  \"&Bernoullis;\": { \"codepoints\": [8492], \"characters\": \"\\u212C\" },                                            // 128\n  \"&Beta;\": { \"codepoints\": [914], \"characters\": \"\\u0392\" },                                                   // 129\n  \"&beta;\": { \"codepoints\": [946], \"characters\": \"\\u03B2\" },                                                   // 130\n  \"&beth;\": { \"codepoints\": [8502], \"characters\": \"\\u2136\" },                                                  // 131\n  \"&between;\": { \"codepoints\": [8812], \"characters\": \"\\u226C\" },                                               // 132\n  \"&Bfr;\": { \"codepoints\": [120069], \"characters\": \"\\uD835\\uDD05\" },                                           // 133\n  \"&bfr;\": { \"codepoints\": [120095], \"characters\": \"\\uD835\\uDD1F\" },                                           // 134\n  \"&bigcap;\": { \"codepoints\": [8898], \"characters\": \"\\u22C2\" },                                                // 135\n  \"&bigcirc;\": { \"codepoints\": [9711], \"characters\": \"\\u25EF\" },                                               // 136\n  \"&bigcup;\": { \"codepoints\": [8899], \"characters\": \"\\u22C3\" },                                                // 137\n  \"&bigodot;\": { \"codepoints\": [10752], \"characters\": \"\\u2A00\" },                                              // 138\n  \"&bigoplus;\": { \"codepoints\": [10753], \"characters\": \"\\u2A01\" },                                             // 139\n  \"&bigotimes;\": { \"codepoints\": [10754], \"characters\": \"\\u2A02\" },                                            // 140\n  \"&bigsqcup;\": { \"codepoints\": [10758], \"characters\": \"\\u2A06\" },                                             // 141\n  \"&bigstar;\": { \"codepoints\": [9733], \"characters\": \"\\u2605\" },                                               // 142\n  \"&bigtriangledown;\": { \"codepoints\": [9661], \"characters\": \"\\u25BD\" },                                       // 143\n  \"&bigtriangleup;\": { \"codepoints\": [9651], \"characters\": \"\\u25B3\" },                                         // 144\n  \"&biguplus;\": { \"codepoints\": [10756], \"characters\": \"\\u2A04\" },                                             // 145\n  \"&bigvee;\": { \"codepoints\": [8897], \"characters\": \"\\u22C1\" },                                                // 146\n  \"&bigwedge;\": { \"codepoints\": [8896], \"characters\": \"\\u22C0\" },                                              // 147\n  \"&bkarow;\": { \"codepoints\": [10509], \"characters\": \"\\u290D\" },                                               // 148\n  \"&blacklozenge;\": { \"codepoints\": [10731], \"characters\": \"\\u29EB\" },                                         // 149\n  \"&blacksquare;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },                                           // 150\n  \"&blacktriangle;\": { \"codepoints\": [9652], \"characters\": \"\\u25B4\" },                                         // 151\n  \"&blacktriangledown;\": { \"codepoints\": [9662], \"characters\": \"\\u25BE\" },                                     // 152\n  \"&blacktriangleleft;\": { \"codepoints\": [9666], \"characters\": \"\\u25C2\" },                                     // 153\n  \"&blacktriangleright;\": { \"codepoints\": [9656], \"characters\": \"\\u25B8\" },                                    // 154\n  \"&blank;\": { \"codepoints\": [9251], \"characters\": \"\\u2423\" },                                                 // 155\n  \"&blk12;\": { \"codepoints\": [9618], \"characters\": \"\\u2592\" },                                                 // 156\n  \"&blk14;\": { \"codepoints\": [9617], \"characters\": \"\\u2591\" },                                                 // 157\n  \"&blk34;\": { \"codepoints\": [9619], \"characters\": \"\\u2593\" },                                                 // 158\n  \"&block;\": { \"codepoints\": [9608], \"characters\": \"\\u2588\" },                                                 // 159\n  \"&bne;\": { \"codepoints\": [61, 8421], \"characters\": \"\\u003D\\u20E5\" },                                         // 160\n  \"&bnequiv;\": { \"codepoints\": [8801, 8421], \"characters\": \"\\u2261\\u20E5\" },                                   // 161\n  \"&bNot;\": { \"codepoints\": [10989], \"characters\": \"\\u2AED\" },                                                 // 162\n  \"&bnot;\": { \"codepoints\": [8976], \"characters\": \"\\u2310\" },                                                  // 163\n  \"&Bopf;\": { \"codepoints\": [120121], \"characters\": \"\\uD835\\uDD39\" },                                          // 164\n  \"&bopf;\": { \"codepoints\": [120147], \"characters\": \"\\uD835\\uDD53\" },                                          // 165\n  \"&bot;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },                                                   // 166\n  \"&bottom;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },                                                // 167\n  \"&bowtie;\": { \"codepoints\": [8904], \"characters\": \"\\u22C8\" },                                                // 168\n  \"&boxbox;\": { \"codepoints\": [10697], \"characters\": \"\\u29C9\" },                                               // 169\n  \"&boxdl;\": { \"codepoints\": [9488], \"characters\": \"\\u2510\" },                                                 // 170\n  \"&boxdL;\": { \"codepoints\": [9557], \"characters\": \"\\u2555\" },                                                 // 171\n  \"&boxDl;\": { \"codepoints\": [9558], \"characters\": \"\\u2556\" },                                                 // 172\n  \"&boxDL;\": { \"codepoints\": [9559], \"characters\": \"\\u2557\" },                                                 // 173\n  \"&boxdr;\": { \"codepoints\": [9484], \"characters\": \"\\u250C\" },                                                 // 174\n  \"&boxdR;\": { \"codepoints\": [9554], \"characters\": \"\\u2552\" },                                                 // 175\n  \"&boxDr;\": { \"codepoints\": [9555], \"characters\": \"\\u2553\" },                                                 // 176\n  \"&boxDR;\": { \"codepoints\": [9556], \"characters\": \"\\u2554\" },                                                 // 177\n  \"&boxh;\": { \"codepoints\": [9472], \"characters\": \"\\u2500\" },                                                  // 178\n  \"&boxH;\": { \"codepoints\": [9552], \"characters\": \"\\u2550\" },                                                  // 179\n  \"&boxhd;\": { \"codepoints\": [9516], \"characters\": \"\\u252C\" },                                                 // 180\n  \"&boxHd;\": { \"codepoints\": [9572], \"characters\": \"\\u2564\" },                                                 // 181\n  \"&boxhD;\": { \"codepoints\": [9573], \"characters\": \"\\u2565\" },                                                 // 182\n  \"&boxHD;\": { \"codepoints\": [9574], \"characters\": \"\\u2566\" },                                                 // 183\n  \"&boxhu;\": { \"codepoints\": [9524], \"characters\": \"\\u2534\" },                                                 // 184\n  \"&boxHu;\": { \"codepoints\": [9575], \"characters\": \"\\u2567\" },                                                 // 185\n  \"&boxhU;\": { \"codepoints\": [9576], \"characters\": \"\\u2568\" },                                                 // 186\n  \"&boxHU;\": { \"codepoints\": [9577], \"characters\": \"\\u2569\" },                                                 // 187\n  \"&boxminus;\": { \"codepoints\": [8863], \"characters\": \"\\u229F\" },                                              // 188\n  \"&boxplus;\": { \"codepoints\": [8862], \"characters\": \"\\u229E\" },                                               // 189\n  \"&boxtimes;\": { \"codepoints\": [8864], \"characters\": \"\\u22A0\" },                                              // 190\n  \"&boxul;\": { \"codepoints\": [9496], \"characters\": \"\\u2518\" },                                                 // 191\n  \"&boxuL;\": { \"codepoints\": [9563], \"characters\": \"\\u255B\" },                                                 // 192\n  \"&boxUl;\": { \"codepoints\": [9564], \"characters\": \"\\u255C\" },                                                 // 193\n  \"&boxUL;\": { \"codepoints\": [9565], \"characters\": \"\\u255D\" },                                                 // 194\n  \"&boxur;\": { \"codepoints\": [9492], \"characters\": \"\\u2514\" },                                                 // 195\n  \"&boxuR;\": { \"codepoints\": [9560], \"characters\": \"\\u2558\" },                                                 // 196\n  \"&boxUr;\": { \"codepoints\": [9561], \"characters\": \"\\u2559\" },                                                 // 197\n  \"&boxUR;\": { \"codepoints\": [9562], \"characters\": \"\\u255A\" },                                                 // 198\n  \"&boxv;\": { \"codepoints\": [9474], \"characters\": \"\\u2502\" },                                                  // 199\n  \"&boxV;\": { \"codepoints\": [9553], \"characters\": \"\\u2551\" },                                                  // 200\n  \"&boxvh;\": { \"codepoints\": [9532], \"characters\": \"\\u253C\" },                                                 // 201\n  \"&boxvH;\": { \"codepoints\": [9578], \"characters\": \"\\u256A\" },                                                 // 202\n  \"&boxVh;\": { \"codepoints\": [9579], \"characters\": \"\\u256B\" },                                                 // 203\n  \"&boxVH;\": { \"codepoints\": [9580], \"characters\": \"\\u256C\" },                                                 // 204\n  \"&boxvl;\": { \"codepoints\": [9508], \"characters\": \"\\u2524\" },                                                 // 205\n  \"&boxvL;\": { \"codepoints\": [9569], \"characters\": \"\\u2561\" },                                                 // 206\n  \"&boxVl;\": { \"codepoints\": [9570], \"characters\": \"\\u2562\" },                                                 // 207\n  \"&boxVL;\": { \"codepoints\": [9571], \"characters\": \"\\u2563\" },                                                 // 208\n  \"&boxvr;\": { \"codepoints\": [9500], \"characters\": \"\\u251C\" },                                                 // 209\n  \"&boxvR;\": { \"codepoints\": [9566], \"characters\": \"\\u255E\" },                                                 // 210\n  \"&boxVr;\": { \"codepoints\": [9567], \"characters\": \"\\u255F\" },                                                 // 211\n  \"&boxVR;\": { \"codepoints\": [9568], \"characters\": \"\\u2560\" },                                                 // 212\n  \"&bprime;\": { \"codepoints\": [8245], \"characters\": \"\\u2035\" },                                                // 213\n  \"&breve;\": { \"codepoints\": [728], \"characters\": \"\\u02D8\" },                                                  // 214\n  \"&Breve;\": { \"codepoints\": [728], \"characters\": \"\\u02D8\" },                                                  // 215\n  \"&brvbar;\": { \"codepoints\": [166], \"characters\": \"\\u00A6\" },                                                 // 216\n  \"&brvbar\": { \"codepoints\": [166], \"characters\": \"\\u00A6\" },                                                  // 217\n  \"&bscr;\": { \"codepoints\": [119991], \"characters\": \"\\uD835\\uDCB7\" },                                          // 218\n  \"&Bscr;\": { \"codepoints\": [8492], \"characters\": \"\\u212C\" },                                                  // 219\n  \"&bsemi;\": { \"codepoints\": [8271], \"characters\": \"\\u204F\" },                                                 // 220\n  \"&bsim;\": { \"codepoints\": [8765], \"characters\": \"\\u223D\" },                                                  // 221\n  \"&bsime;\": { \"codepoints\": [8909], \"characters\": \"\\u22CD\" },                                                 // 222\n  \"&bsolb;\": { \"codepoints\": [10693], \"characters\": \"\\u29C5\" },                                                // 223\n  \"&bsol;\": { \"codepoints\": [92], \"characters\": \"\\u005C\" },                                                    // 224\n  \"&bsolhsub;\": { \"codepoints\": [10184], \"characters\": \"\\u27C8\" },                                             // 225\n  \"&bull;\": { \"codepoints\": [8226], \"characters\": \"\\u2022\" },                                                  // 226\n  \"&bullet;\": { \"codepoints\": [8226], \"characters\": \"\\u2022\" },                                                // 227\n  \"&bump;\": { \"codepoints\": [8782], \"characters\": \"\\u224E\" },                                                  // 228\n  \"&bumpE;\": { \"codepoints\": [10926], \"characters\": \"\\u2AAE\" },                                                // 229\n  \"&bumpe;\": { \"codepoints\": [8783], \"characters\": \"\\u224F\" },                                                 // 230\n  \"&Bumpeq;\": { \"codepoints\": [8782], \"characters\": \"\\u224E\" },                                                // 231\n  \"&bumpeq;\": { \"codepoints\": [8783], \"characters\": \"\\u224F\" },                                                // 232\n  \"&Cacute;\": { \"codepoints\": [262], \"characters\": \"\\u0106\" },                                                 // 233\n  \"&cacute;\": { \"codepoints\": [263], \"characters\": \"\\u0107\" },                                                 // 234\n  \"&capand;\": { \"codepoints\": [10820], \"characters\": \"\\u2A44\" },                                               // 235\n  \"&capbrcup;\": { \"codepoints\": [10825], \"characters\": \"\\u2A49\" },                                             // 236\n  \"&capcap;\": { \"codepoints\": [10827], \"characters\": \"\\u2A4B\" },                                               // 237\n  \"&cap;\": { \"codepoints\": [8745], \"characters\": \"\\u2229\" },                                                   // 238\n  \"&Cap;\": { \"codepoints\": [8914], \"characters\": \"\\u22D2\" },                                                   // 239\n  \"&capcup;\": { \"codepoints\": [10823], \"characters\": \"\\u2A47\" },                                               // 240\n  \"&capdot;\": { \"codepoints\": [10816], \"characters\": \"\\u2A40\" },                                               // 241\n  \"&CapitalDifferentialD;\": { \"codepoints\": [8517], \"characters\": \"\\u2145\" },                                  // 242\n  \"&caps;\": { \"codepoints\": [8745, 65024], \"characters\": \"\\u2229\\uFE00\" },                                     // 243\n  \"&caret;\": { \"codepoints\": [8257], \"characters\": \"\\u2041\" },                                                 // 244\n  \"&caron;\": { \"codepoints\": [711], \"characters\": \"\\u02C7\" },                                                  // 245\n  \"&Cayleys;\": { \"codepoints\": [8493], \"characters\": \"\\u212D\" },                                               // 246\n  \"&ccaps;\": { \"codepoints\": [10829], \"characters\": \"\\u2A4D\" },                                                // 247\n  \"&Ccaron;\": { \"codepoints\": [268], \"characters\": \"\\u010C\" },                                                 // 248\n  \"&ccaron;\": { \"codepoints\": [269], \"characters\": \"\\u010D\" },                                                 // 249\n  \"&Ccedil;\": { \"codepoints\": [199], \"characters\": \"\\u00C7\" },                                                 // 250\n  \"&Ccedil\": { \"codepoints\": [199], \"characters\": \"\\u00C7\" },                                                  // 251\n  \"&ccedil;\": { \"codepoints\": [231], \"characters\": \"\\u00E7\" },                                                 // 252\n  \"&ccedil\": { \"codepoints\": [231], \"characters\": \"\\u00E7\" },                                                  // 253\n  \"&Ccirc;\": { \"codepoints\": [264], \"characters\": \"\\u0108\" },                                                  // 254\n  \"&ccirc;\": { \"codepoints\": [265], \"characters\": \"\\u0109\" },                                                  // 255\n  \"&Cconint;\": { \"codepoints\": [8752], \"characters\": \"\\u2230\" },                                               // 256\n  \"&ccups;\": { \"codepoints\": [10828], \"characters\": \"\\u2A4C\" },                                                // 257\n  \"&ccupssm;\": { \"codepoints\": [10832], \"characters\": \"\\u2A50\" },                                              // 258\n  \"&Cdot;\": { \"codepoints\": [266], \"characters\": \"\\u010A\" },                                                   // 259\n  \"&cdot;\": { \"codepoints\": [267], \"characters\": \"\\u010B\" },                                                   // 260\n  \"&cedil;\": { \"codepoints\": [184], \"characters\": \"\\u00B8\" },                                                  // 261\n  \"&cedil\": { \"codepoints\": [184], \"characters\": \"\\u00B8\" },                                                   // 262\n  \"&Cedilla;\": { \"codepoints\": [184], \"characters\": \"\\u00B8\" },                                                // 263\n  \"&cemptyv;\": { \"codepoints\": [10674], \"characters\": \"\\u29B2\" },                                              // 264\n  \"&cent;\": { \"codepoints\": [162], \"characters\": \"\\u00A2\" },                                                   // 265\n  \"&cent\": { \"codepoints\": [162], \"characters\": \"\\u00A2\" },                                                    // 266\n  \"&centerdot;\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },                                              // 267\n  \"&CenterDot;\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },                                              // 268\n  \"&cfr;\": { \"codepoints\": [120096], \"characters\": \"\\uD835\\uDD20\" },                                           // 269\n  \"&Cfr;\": { \"codepoints\": [8493], \"characters\": \"\\u212D\" },                                                   // 270\n  \"&CHcy;\": { \"codepoints\": [1063], \"characters\": \"\\u0427\" },                                                  // 271\n  \"&chcy;\": { \"codepoints\": [1095], \"characters\": \"\\u0447\" },                                                  // 272\n  \"&check;\": { \"codepoints\": [10003], \"characters\": \"\\u2713\" },                                                // 273\n  \"&checkmark;\": { \"codepoints\": [10003], \"characters\": \"\\u2713\" },                                            // 274\n  \"&Chi;\": { \"codepoints\": [935], \"characters\": \"\\u03A7\" },                                                    // 275\n  \"&chi;\": { \"codepoints\": [967], \"characters\": \"\\u03C7\" },                                                    // 276\n  \"&circ;\": { \"codepoints\": [710], \"characters\": \"\\u02C6\" },                                                   // 277\n  \"&circeq;\": { \"codepoints\": [8791], \"characters\": \"\\u2257\" },                                                // 278\n  \"&circlearrowleft;\": { \"codepoints\": [8634], \"characters\": \"\\u21BA\" },                                       // 279\n  \"&circlearrowright;\": { \"codepoints\": [8635], \"characters\": \"\\u21BB\" },                                      // 280\n  \"&circledast;\": { \"codepoints\": [8859], \"characters\": \"\\u229B\" },                                            // 281\n  \"&circledcirc;\": { \"codepoints\": [8858], \"characters\": \"\\u229A\" },                                           // 282\n  \"&circleddash;\": { \"codepoints\": [8861], \"characters\": \"\\u229D\" },                                           // 283\n  \"&CircleDot;\": { \"codepoints\": [8857], \"characters\": \"\\u2299\" },                                             // 284\n  \"&circledR;\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },                                               // 285\n  \"&circledS;\": { \"codepoints\": [9416], \"characters\": \"\\u24C8\" },                                              // 286\n  \"&CircleMinus;\": { \"codepoints\": [8854], \"characters\": \"\\u2296\" },                                           // 287\n  \"&CirclePlus;\": { \"codepoints\": [8853], \"characters\": \"\\u2295\" },                                            // 288\n  \"&CircleTimes;\": { \"codepoints\": [8855], \"characters\": \"\\u2297\" },                                           // 289\n  \"&cir;\": { \"codepoints\": [9675], \"characters\": \"\\u25CB\" },                                                   // 290\n  \"&cirE;\": { \"codepoints\": [10691], \"characters\": \"\\u29C3\" },                                                 // 291\n  \"&cire;\": { \"codepoints\": [8791], \"characters\": \"\\u2257\" },                                                  // 292\n  \"&cirfnint;\": { \"codepoints\": [10768], \"characters\": \"\\u2A10\" },                                             // 293\n  \"&cirmid;\": { \"codepoints\": [10991], \"characters\": \"\\u2AEF\" },                                               // 294\n  \"&cirscir;\": { \"codepoints\": [10690], \"characters\": \"\\u29C2\" },                                              // 295\n  \"&ClockwiseContourIntegral;\": { \"codepoints\": [8754], \"characters\": \"\\u2232\" },                              // 296\n  \"&CloseCurlyDoubleQuote;\": { \"codepoints\": [8221], \"characters\": \"\\u201D\" },                                 // 297\n  \"&CloseCurlyQuote;\": { \"codepoints\": [8217], \"characters\": \"\\u2019\" },                                       // 298\n  \"&clubs;\": { \"codepoints\": [9827], \"characters\": \"\\u2663\" },                                                 // 299\n  \"&clubsuit;\": { \"codepoints\": [9827], \"characters\": \"\\u2663\" },                                              // 300\n  \"&colon;\": { \"codepoints\": [58], \"characters\": \"\\u003A\" },                                                   // 301\n  \"&Colon;\": { \"codepoints\": [8759], \"characters\": \"\\u2237\" },                                                 // 302\n  \"&Colone;\": { \"codepoints\": [10868], \"characters\": \"\\u2A74\" },                                               // 303\n  \"&colone;\": { \"codepoints\": [8788], \"characters\": \"\\u2254\" },                                                // 304\n  \"&coloneq;\": { \"codepoints\": [8788], \"characters\": \"\\u2254\" },                                               // 305\n  \"&comma;\": { \"codepoints\": [44], \"characters\": \"\\u002C\" },                                                   // 306\n  \"&commat;\": { \"codepoints\": [64], \"characters\": \"\\u0040\" },                                                  // 307\n  \"&comp;\": { \"codepoints\": [8705], \"characters\": \"\\u2201\" },                                                  // 308\n  \"&compfn;\": { \"codepoints\": [8728], \"characters\": \"\\u2218\" },                                                // 309\n  \"&complement;\": { \"codepoints\": [8705], \"characters\": \"\\u2201\" },                                            // 310\n  \"&complexes;\": { \"codepoints\": [8450], \"characters\": \"\\u2102\" },                                             // 311\n  \"&cong;\": { \"codepoints\": [8773], \"characters\": \"\\u2245\" },                                                  // 312\n  \"&congdot;\": { \"codepoints\": [10861], \"characters\": \"\\u2A6D\" },                                              // 313\n  \"&Congruent;\": { \"codepoints\": [8801], \"characters\": \"\\u2261\" },                                             // 314\n  \"&conint;\": { \"codepoints\": [8750], \"characters\": \"\\u222E\" },                                                // 315\n  \"&Conint;\": { \"codepoints\": [8751], \"characters\": \"\\u222F\" },                                                // 316\n  \"&ContourIntegral;\": { \"codepoints\": [8750], \"characters\": \"\\u222E\" },                                       // 317\n  \"&copf;\": { \"codepoints\": [120148], \"characters\": \"\\uD835\\uDD54\" },                                          // 318\n  \"&Copf;\": { \"codepoints\": [8450], \"characters\": \"\\u2102\" },                                                  // 319\n  \"&coprod;\": { \"codepoints\": [8720], \"characters\": \"\\u2210\" },                                                // 320\n  \"&Coproduct;\": { \"codepoints\": [8720], \"characters\": \"\\u2210\" },                                             // 321\n  \"&copy;\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },                                                   // 322\n  \"&copy\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },                                                    // 323\n  \"&COPY;\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },                                                   // 324\n  \"&COPY\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },                                                    // 325\n  \"&copysr;\": { \"codepoints\": [8471], \"characters\": \"\\u2117\" },                                                // 326\n  \"&CounterClockwiseContourIntegral;\": { \"codepoints\": [8755], \"characters\": \"\\u2233\" },                       // 327\n  \"&crarr;\": { \"codepoints\": [8629], \"characters\": \"\\u21B5\" },                                                 // 328\n  \"&cross;\": { \"codepoints\": [10007], \"characters\": \"\\u2717\" },                                                // 329\n  \"&Cross;\": { \"codepoints\": [10799], \"characters\": \"\\u2A2F\" },                                                // 330\n  \"&Cscr;\": { \"codepoints\": [119966], \"characters\": \"\\uD835\\uDC9E\" },                                          // 331\n  \"&cscr;\": { \"codepoints\": [119992], \"characters\": \"\\uD835\\uDCB8\" },                                          // 332\n  \"&csub;\": { \"codepoints\": [10959], \"characters\": \"\\u2ACF\" },                                                 // 333\n  \"&csube;\": { \"codepoints\": [10961], \"characters\": \"\\u2AD1\" },                                                // 334\n  \"&csup;\": { \"codepoints\": [10960], \"characters\": \"\\u2AD0\" },                                                 // 335\n  \"&csupe;\": { \"codepoints\": [10962], \"characters\": \"\\u2AD2\" },                                                // 336\n  \"&ctdot;\": { \"codepoints\": [8943], \"characters\": \"\\u22EF\" },                                                 // 337\n  \"&cudarrl;\": { \"codepoints\": [10552], \"characters\": \"\\u2938\" },                                              // 338\n  \"&cudarrr;\": { \"codepoints\": [10549], \"characters\": \"\\u2935\" },                                              // 339\n  \"&cuepr;\": { \"codepoints\": [8926], \"characters\": \"\\u22DE\" },                                                 // 340\n  \"&cuesc;\": { \"codepoints\": [8927], \"characters\": \"\\u22DF\" },                                                 // 341\n  \"&cularr;\": { \"codepoints\": [8630], \"characters\": \"\\u21B6\" },                                                // 342\n  \"&cularrp;\": { \"codepoints\": [10557], \"characters\": \"\\u293D\" },                                              // 343\n  \"&cupbrcap;\": { \"codepoints\": [10824], \"characters\": \"\\u2A48\" },                                             // 344\n  \"&cupcap;\": { \"codepoints\": [10822], \"characters\": \"\\u2A46\" },                                               // 345\n  \"&CupCap;\": { \"codepoints\": [8781], \"characters\": \"\\u224D\" },                                                // 346\n  \"&cup;\": { \"codepoints\": [8746], \"characters\": \"\\u222A\" },                                                   // 347\n  \"&Cup;\": { \"codepoints\": [8915], \"characters\": \"\\u22D3\" },                                                   // 348\n  \"&cupcup;\": { \"codepoints\": [10826], \"characters\": \"\\u2A4A\" },                                               // 349\n  \"&cupdot;\": { \"codepoints\": [8845], \"characters\": \"\\u228D\" },                                                // 350\n  \"&cupor;\": { \"codepoints\": [10821], \"characters\": \"\\u2A45\" },                                                // 351\n  \"&cups;\": { \"codepoints\": [8746, 65024], \"characters\": \"\\u222A\\uFE00\" },                                     // 352\n  \"&curarr;\": { \"codepoints\": [8631], \"characters\": \"\\u21B7\" },                                                // 353\n  \"&curarrm;\": { \"codepoints\": [10556], \"characters\": \"\\u293C\" },                                              // 354\n  \"&curlyeqprec;\": { \"codepoints\": [8926], \"characters\": \"\\u22DE\" },                                           // 355\n  \"&curlyeqsucc;\": { \"codepoints\": [8927], \"characters\": \"\\u22DF\" },                                           // 356\n  \"&curlyvee;\": { \"codepoints\": [8910], \"characters\": \"\\u22CE\" },                                              // 357\n  \"&curlywedge;\": { \"codepoints\": [8911], \"characters\": \"\\u22CF\" },                                            // 358\n  \"&curren;\": { \"codepoints\": [164], \"characters\": \"\\u00A4\" },                                                 // 359\n  \"&curren\": { \"codepoints\": [164], \"characters\": \"\\u00A4\" },                                                  // 360\n  \"&curvearrowleft;\": { \"codepoints\": [8630], \"characters\": \"\\u21B6\" },                                        // 361\n  \"&curvearrowright;\": { \"codepoints\": [8631], \"characters\": \"\\u21B7\" },                                       // 362\n  \"&cuvee;\": { \"codepoints\": [8910], \"characters\": \"\\u22CE\" },                                                 // 363\n  \"&cuwed;\": { \"codepoints\": [8911], \"characters\": \"\\u22CF\" },                                                 // 364\n  \"&cwconint;\": { \"codepoints\": [8754], \"characters\": \"\\u2232\" },                                              // 365\n  \"&cwint;\": { \"codepoints\": [8753], \"characters\": \"\\u2231\" },                                                 // 366\n  \"&cylcty;\": { \"codepoints\": [9005], \"characters\": \"\\u232D\" },                                                // 367\n  \"&dagger;\": { \"codepoints\": [8224], \"characters\": \"\\u2020\" },                                                // 368\n  \"&Dagger;\": { \"codepoints\": [8225], \"characters\": \"\\u2021\" },                                                // 369\n  \"&daleth;\": { \"codepoints\": [8504], \"characters\": \"\\u2138\" },                                                // 370\n  \"&darr;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },                                                  // 371\n  \"&Darr;\": { \"codepoints\": [8609], \"characters\": \"\\u21A1\" },                                                  // 372\n  \"&dArr;\": { \"codepoints\": [8659], \"characters\": \"\\u21D3\" },                                                  // 373\n  \"&dash;\": { \"codepoints\": [8208], \"characters\": \"\\u2010\" },                                                  // 374\n  \"&Dashv;\": { \"codepoints\": [10980], \"characters\": \"\\u2AE4\" },                                                // 375\n  \"&dashv;\": { \"codepoints\": [8867], \"characters\": \"\\u22A3\" },                                                 // 376\n  \"&dbkarow;\": { \"codepoints\": [10511], \"characters\": \"\\u290F\" },                                              // 377\n  \"&dblac;\": { \"codepoints\": [733], \"characters\": \"\\u02DD\" },                                                  // 378\n  \"&Dcaron;\": { \"codepoints\": [270], \"characters\": \"\\u010E\" },                                                 // 379\n  \"&dcaron;\": { \"codepoints\": [271], \"characters\": \"\\u010F\" },                                                 // 380\n  \"&Dcy;\": { \"codepoints\": [1044], \"characters\": \"\\u0414\" },                                                   // 381\n  \"&dcy;\": { \"codepoints\": [1076], \"characters\": \"\\u0434\" },                                                   // 382\n  \"&ddagger;\": { \"codepoints\": [8225], \"characters\": \"\\u2021\" },                                               // 383\n  \"&ddarr;\": { \"codepoints\": [8650], \"characters\": \"\\u21CA\" },                                                 // 384\n  \"&DD;\": { \"codepoints\": [8517], \"characters\": \"\\u2145\" },                                                    // 385\n  \"&dd;\": { \"codepoints\": [8518], \"characters\": \"\\u2146\" },                                                    // 386\n  \"&DDotrahd;\": { \"codepoints\": [10513], \"characters\": \"\\u2911\" },                                             // 387\n  \"&ddotseq;\": { \"codepoints\": [10871], \"characters\": \"\\u2A77\" },                                              // 388\n  \"&deg;\": { \"codepoints\": [176], \"characters\": \"\\u00B0\" },                                                    // 389\n  \"&deg\": { \"codepoints\": [176], \"characters\": \"\\u00B0\" },                                                     // 390\n  \"&Del;\": { \"codepoints\": [8711], \"characters\": \"\\u2207\" },                                                   // 391\n  \"&Delta;\": { \"codepoints\": [916], \"characters\": \"\\u0394\" },                                                  // 392\n  \"&delta;\": { \"codepoints\": [948], \"characters\": \"\\u03B4\" },                                                  // 393\n  \"&demptyv;\": { \"codepoints\": [10673], \"characters\": \"\\u29B1\" },                                              // 394\n  \"&dfisht;\": { \"codepoints\": [10623], \"characters\": \"\\u297F\" },                                               // 395\n  \"&Dfr;\": { \"codepoints\": [120071], \"characters\": \"\\uD835\\uDD07\" },                                           // 396\n  \"&dfr;\": { \"codepoints\": [120097], \"characters\": \"\\uD835\\uDD21\" },                                           // 397\n  \"&dHar;\": { \"codepoints\": [10597], \"characters\": \"\\u2965\" },                                                 // 398\n  \"&dharl;\": { \"codepoints\": [8643], \"characters\": \"\\u21C3\" },                                                 // 399\n  \"&dharr;\": { \"codepoints\": [8642], \"characters\": \"\\u21C2\" },                                                 // 400\n  \"&DiacriticalAcute;\": { \"codepoints\": [180], \"characters\": \"\\u00B4\" },                                       // 401\n  \"&DiacriticalDot;\": { \"codepoints\": [729], \"characters\": \"\\u02D9\" },                                         // 402\n  \"&DiacriticalDoubleAcute;\": { \"codepoints\": [733], \"characters\": \"\\u02DD\" },                                 // 403\n  \"&DiacriticalGrave;\": { \"codepoints\": [96], \"characters\": \"\\u0060\" },                                        // 404\n  \"&DiacriticalTilde;\": { \"codepoints\": [732], \"characters\": \"\\u02DC\" },                                       // 405\n  \"&diam;\": { \"codepoints\": [8900], \"characters\": \"\\u22C4\" },                                                  // 406\n  \"&diamond;\": { \"codepoints\": [8900], \"characters\": \"\\u22C4\" },                                               // 407\n  \"&Diamond;\": { \"codepoints\": [8900], \"characters\": \"\\u22C4\" },                                               // 408\n  \"&diamondsuit;\": { \"codepoints\": [9830], \"characters\": \"\\u2666\" },                                           // 409\n  \"&diams;\": { \"codepoints\": [9830], \"characters\": \"\\u2666\" },                                                 // 410\n  \"&die;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },                                                    // 411\n  \"&DifferentialD;\": { \"codepoints\": [8518], \"characters\": \"\\u2146\" },                                         // 412\n  \"&digamma;\": { \"codepoints\": [989], \"characters\": \"\\u03DD\" },                                                // 413\n  \"&disin;\": { \"codepoints\": [8946], \"characters\": \"\\u22F2\" },                                                 // 414\n  \"&div;\": { \"codepoints\": [247], \"characters\": \"\\u00F7\" },                                                    // 415\n  \"&divide;\": { \"codepoints\": [247], \"characters\": \"\\u00F7\" },                                                 // 416\n  \"&divide\": { \"codepoints\": [247], \"characters\": \"\\u00F7\" },                                                  // 417\n  \"&divideontimes;\": { \"codepoints\": [8903], \"characters\": \"\\u22C7\" },                                         // 418\n  \"&divonx;\": { \"codepoints\": [8903], \"characters\": \"\\u22C7\" },                                                // 419\n  \"&DJcy;\": { \"codepoints\": [1026], \"characters\": \"\\u0402\" },                                                  // 420\n  \"&djcy;\": { \"codepoints\": [1106], \"characters\": \"\\u0452\" },                                                  // 421\n  \"&dlcorn;\": { \"codepoints\": [8990], \"characters\": \"\\u231E\" },                                                // 422\n  \"&dlcrop;\": { \"codepoints\": [8973], \"characters\": \"\\u230D\" },                                                // 423\n  \"&dollar;\": { \"codepoints\": [36], \"characters\": \"\\u0024\" },                                                  // 424\n  \"&Dopf;\": { \"codepoints\": [120123], \"characters\": \"\\uD835\\uDD3B\" },                                          // 425\n  \"&dopf;\": { \"codepoints\": [120149], \"characters\": \"\\uD835\\uDD55\" },                                          // 426\n  \"&Dot;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },                                                    // 427\n  \"&dot;\": { \"codepoints\": [729], \"characters\": \"\\u02D9\" },                                                    // 428\n  \"&DotDot;\": { \"codepoints\": [8412], \"characters\": \"\\u20DC\" },                                                // 429\n  \"&doteq;\": { \"codepoints\": [8784], \"characters\": \"\\u2250\" },                                                 // 430\n  \"&doteqdot;\": { \"codepoints\": [8785], \"characters\": \"\\u2251\" },                                              // 431\n  \"&DotEqual;\": { \"codepoints\": [8784], \"characters\": \"\\u2250\" },                                              // 432\n  \"&dotminus;\": { \"codepoints\": [8760], \"characters\": \"\\u2238\" },                                              // 433\n  \"&dotplus;\": { \"codepoints\": [8724], \"characters\": \"\\u2214\" },                                               // 434\n  \"&dotsquare;\": { \"codepoints\": [8865], \"characters\": \"\\u22A1\" },                                             // 435\n  \"&doublebarwedge;\": { \"codepoints\": [8966], \"characters\": \"\\u2306\" },                                        // 436\n  \"&DoubleContourIntegral;\": { \"codepoints\": [8751], \"characters\": \"\\u222F\" },                                 // 437\n  \"&DoubleDot;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },                                              // 438\n  \"&DoubleDownArrow;\": { \"codepoints\": [8659], \"characters\": \"\\u21D3\" },                                       // 439\n  \"&DoubleLeftArrow;\": { \"codepoints\": [8656], \"characters\": \"\\u21D0\" },                                       // 440\n  \"&DoubleLeftRightArrow;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },                                  // 441\n  \"&DoubleLeftTee;\": { \"codepoints\": [10980], \"characters\": \"\\u2AE4\" },                                        // 442\n  \"&DoubleLongLeftArrow;\": { \"codepoints\": [10232], \"characters\": \"\\u27F8\" },                                  // 443\n  \"&DoubleLongLeftRightArrow;\": { \"codepoints\": [10234], \"characters\": \"\\u27FA\" },                             // 444\n  \"&DoubleLongRightArrow;\": { \"codepoints\": [10233], \"characters\": \"\\u27F9\" },                                 // 445\n  \"&DoubleRightArrow;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },                                      // 446\n  \"&DoubleRightTee;\": { \"codepoints\": [8872], \"characters\": \"\\u22A8\" },                                        // 447\n  \"&DoubleUpArrow;\": { \"codepoints\": [8657], \"characters\": \"\\u21D1\" },                                         // 448\n  \"&DoubleUpDownArrow;\": { \"codepoints\": [8661], \"characters\": \"\\u21D5\" },                                     // 449\n  \"&DoubleVerticalBar;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },                                     // 450\n  \"&DownArrowBar;\": { \"codepoints\": [10515], \"characters\": \"\\u2913\" },                                         // 451\n  \"&downarrow;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },                                             // 452\n  \"&DownArrow;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },                                             // 453\n  \"&Downarrow;\": { \"codepoints\": [8659], \"characters\": \"\\u21D3\" },                                             // 454\n  \"&DownArrowUpArrow;\": { \"codepoints\": [8693], \"characters\": \"\\u21F5\" },                                      // 455\n  \"&DownBreve;\": { \"codepoints\": [785], \"characters\": \"\\u0311\" },                                              // 456\n  \"&downdownarrows;\": { \"codepoints\": [8650], \"characters\": \"\\u21CA\" },                                        // 457\n  \"&downharpoonleft;\": { \"codepoints\": [8643], \"characters\": \"\\u21C3\" },                                       // 458\n  \"&downharpoonright;\": { \"codepoints\": [8642], \"characters\": \"\\u21C2\" },                                      // 459\n  \"&DownLeftRightVector;\": { \"codepoints\": [10576], \"characters\": \"\\u2950\" },                                  // 460\n  \"&DownLeftTeeVector;\": { \"codepoints\": [10590], \"characters\": \"\\u295E\" },                                    // 461\n  \"&DownLeftVectorBar;\": { \"codepoints\": [10582], \"characters\": \"\\u2956\" },                                    // 462\n  \"&DownLeftVector;\": { \"codepoints\": [8637], \"characters\": \"\\u21BD\" },                                        // 463\n  \"&DownRightTeeVector;\": { \"codepoints\": [10591], \"characters\": \"\\u295F\" },                                   // 464\n  \"&DownRightVectorBar;\": { \"codepoints\": [10583], \"characters\": \"\\u2957\" },                                   // 465\n  \"&DownRightVector;\": { \"codepoints\": [8641], \"characters\": \"\\u21C1\" },                                       // 466\n  \"&DownTeeArrow;\": { \"codepoints\": [8615], \"characters\": \"\\u21A7\" },                                          // 467\n  \"&DownTee;\": { \"codepoints\": [8868], \"characters\": \"\\u22A4\" },                                               // 468\n  \"&drbkarow;\": { \"codepoints\": [10512], \"characters\": \"\\u2910\" },                                             // 469\n  \"&drcorn;\": { \"codepoints\": [8991], \"characters\": \"\\u231F\" },                                                // 470\n  \"&drcrop;\": { \"codepoints\": [8972], \"characters\": \"\\u230C\" },                                                // 471\n  \"&Dscr;\": { \"codepoints\": [119967], \"characters\": \"\\uD835\\uDC9F\" },                                          // 472\n  \"&dscr;\": { \"codepoints\": [119993], \"characters\": \"\\uD835\\uDCB9\" },                                          // 473\n  \"&DScy;\": { \"codepoints\": [1029], \"characters\": \"\\u0405\" },                                                  // 474\n  \"&dscy;\": { \"codepoints\": [1109], \"characters\": \"\\u0455\" },                                                  // 475\n  \"&dsol;\": { \"codepoints\": [10742], \"characters\": \"\\u29F6\" },                                                 // 476\n  \"&Dstrok;\": { \"codepoints\": [272], \"characters\": \"\\u0110\" },                                                 // 477\n  \"&dstrok;\": { \"codepoints\": [273], \"characters\": \"\\u0111\" },                                                 // 478\n  \"&dtdot;\": { \"codepoints\": [8945], \"characters\": \"\\u22F1\" },                                                 // 479\n  \"&dtri;\": { \"codepoints\": [9663], \"characters\": \"\\u25BF\" },                                                  // 480\n  \"&dtrif;\": { \"codepoints\": [9662], \"characters\": \"\\u25BE\" },                                                 // 481\n  \"&duarr;\": { \"codepoints\": [8693], \"characters\": \"\\u21F5\" },                                                 // 482\n  \"&duhar;\": { \"codepoints\": [10607], \"characters\": \"\\u296F\" },                                                // 483\n  \"&dwangle;\": { \"codepoints\": [10662], \"characters\": \"\\u29A6\" },                                              // 484\n  \"&DZcy;\": { \"codepoints\": [1039], \"characters\": \"\\u040F\" },                                                  // 485\n  \"&dzcy;\": { \"codepoints\": [1119], \"characters\": \"\\u045F\" },                                                  // 486\n  \"&dzigrarr;\": { \"codepoints\": [10239], \"characters\": \"\\u27FF\" },                                             // 487\n  \"&Eacute;\": { \"codepoints\": [201], \"characters\": \"\\u00C9\" },                                                 // 488\n  \"&Eacute\": { \"codepoints\": [201], \"characters\": \"\\u00C9\" },                                                  // 489\n  \"&eacute;\": { \"codepoints\": [233], \"characters\": \"\\u00E9\" },                                                 // 490\n  \"&eacute\": { \"codepoints\": [233], \"characters\": \"\\u00E9\" },                                                  // 491\n  \"&easter;\": { \"codepoints\": [10862], \"characters\": \"\\u2A6E\" },                                               // 492\n  \"&Ecaron;\": { \"codepoints\": [282], \"characters\": \"\\u011A\" },                                                 // 493\n  \"&ecaron;\": { \"codepoints\": [283], \"characters\": \"\\u011B\" },                                                 // 494\n  \"&Ecirc;\": { \"codepoints\": [202], \"characters\": \"\\u00CA\" },                                                  // 495\n  \"&Ecirc\": { \"codepoints\": [202], \"characters\": \"\\u00CA\" },                                                   // 496\n  \"&ecirc;\": { \"codepoints\": [234], \"characters\": \"\\u00EA\" },                                                  // 497\n  \"&ecirc\": { \"codepoints\": [234], \"characters\": \"\\u00EA\" },                                                   // 498\n  \"&ecir;\": { \"codepoints\": [8790], \"characters\": \"\\u2256\" },                                                  // 499\n  \"&ecolon;\": { \"codepoints\": [8789], \"characters\": \"\\u2255\" },                                                // 500\n  \"&Ecy;\": { \"codepoints\": [1069], \"characters\": \"\\u042D\" },                                                   // 501\n  \"&ecy;\": { \"codepoints\": [1101], \"characters\": \"\\u044D\" },                                                   // 502\n  \"&eDDot;\": { \"codepoints\": [10871], \"characters\": \"\\u2A77\" },                                                // 503\n  \"&Edot;\": { \"codepoints\": [278], \"characters\": \"\\u0116\" },                                                   // 504\n  \"&edot;\": { \"codepoints\": [279], \"characters\": \"\\u0117\" },                                                   // 505\n  \"&eDot;\": { \"codepoints\": [8785], \"characters\": \"\\u2251\" },                                                  // 506\n  \"&ee;\": { \"codepoints\": [8519], \"characters\": \"\\u2147\" },                                                    // 507\n  \"&efDot;\": { \"codepoints\": [8786], \"characters\": \"\\u2252\" },                                                 // 508\n  \"&Efr;\": { \"codepoints\": [120072], \"characters\": \"\\uD835\\uDD08\" },                                           // 509\n  \"&efr;\": { \"codepoints\": [120098], \"characters\": \"\\uD835\\uDD22\" },                                           // 510\n  \"&eg;\": { \"codepoints\": [10906], \"characters\": \"\\u2A9A\" },                                                   // 511\n  \"&Egrave;\": { \"codepoints\": [200], \"characters\": \"\\u00C8\" },                                                 // 512\n  \"&Egrave\": { \"codepoints\": [200], \"characters\": \"\\u00C8\" },                                                  // 513\n  \"&egrave;\": { \"codepoints\": [232], \"characters\": \"\\u00E8\" },                                                 // 514\n  \"&egrave\": { \"codepoints\": [232], \"characters\": \"\\u00E8\" },                                                  // 515\n  \"&egs;\": { \"codepoints\": [10902], \"characters\": \"\\u2A96\" },                                                  // 516\n  \"&egsdot;\": { \"codepoints\": [10904], \"characters\": \"\\u2A98\" },                                               // 517\n  \"&el;\": { \"codepoints\": [10905], \"characters\": \"\\u2A99\" },                                                   // 518\n  \"&Element;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },                                               // 519\n  \"&elinters;\": { \"codepoints\": [9191], \"characters\": \"\\u23E7\" },                                              // 520\n  \"&ell;\": { \"codepoints\": [8467], \"characters\": \"\\u2113\" },                                                   // 521\n  \"&els;\": { \"codepoints\": [10901], \"characters\": \"\\u2A95\" },                                                  // 522\n  \"&elsdot;\": { \"codepoints\": [10903], \"characters\": \"\\u2A97\" },                                               // 523\n  \"&Emacr;\": { \"codepoints\": [274], \"characters\": \"\\u0112\" },                                                  // 524\n  \"&emacr;\": { \"codepoints\": [275], \"characters\": \"\\u0113\" },                                                  // 525\n  \"&empty;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },                                                 // 526\n  \"&emptyset;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },                                              // 527\n  \"&EmptySmallSquare;\": { \"codepoints\": [9723], \"characters\": \"\\u25FB\" },                                      // 528\n  \"&emptyv;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },                                                // 529\n  \"&EmptyVerySmallSquare;\": { \"codepoints\": [9643], \"characters\": \"\\u25AB\" },                                  // 530\n  \"&emsp13;\": { \"codepoints\": [8196], \"characters\": \"\\u2004\" },                                                // 531\n  \"&emsp14;\": { \"codepoints\": [8197], \"characters\": \"\\u2005\" },                                                // 532\n  \"&emsp;\": { \"codepoints\": [8195], \"characters\": \"\\u2003\" },                                                  // 533\n  \"&ENG;\": { \"codepoints\": [330], \"characters\": \"\\u014A\" },                                                    // 534\n  \"&eng;\": { \"codepoints\": [331], \"characters\": \"\\u014B\" },                                                    // 535\n  \"&ensp;\": { \"codepoints\": [8194], \"characters\": \"\\u2002\" },                                                  // 536\n  \"&Eogon;\": { \"codepoints\": [280], \"characters\": \"\\u0118\" },                                                  // 537\n  \"&eogon;\": { \"codepoints\": [281], \"characters\": \"\\u0119\" },                                                  // 538\n  \"&Eopf;\": { \"codepoints\": [120124], \"characters\": \"\\uD835\\uDD3C\" },                                          // 539\n  \"&eopf;\": { \"codepoints\": [120150], \"characters\": \"\\uD835\\uDD56\" },                                          // 540\n  \"&epar;\": { \"codepoints\": [8917], \"characters\": \"\\u22D5\" },                                                  // 541\n  \"&eparsl;\": { \"codepoints\": [10723], \"characters\": \"\\u29E3\" },                                               // 542\n  \"&eplus;\": { \"codepoints\": [10865], \"characters\": \"\\u2A71\" },                                                // 543\n  \"&epsi;\": { \"codepoints\": [949], \"characters\": \"\\u03B5\" },                                                   // 544\n  \"&Epsilon;\": { \"codepoints\": [917], \"characters\": \"\\u0395\" },                                                // 545\n  \"&epsilon;\": { \"codepoints\": [949], \"characters\": \"\\u03B5\" },                                                // 546\n  \"&epsiv;\": { \"codepoints\": [1013], \"characters\": \"\\u03F5\" },                                                 // 547\n  \"&eqcirc;\": { \"codepoints\": [8790], \"characters\": \"\\u2256\" },                                                // 548\n  \"&eqcolon;\": { \"codepoints\": [8789], \"characters\": \"\\u2255\" },                                               // 549\n  \"&eqsim;\": { \"codepoints\": [8770], \"characters\": \"\\u2242\" },                                                 // 550\n  \"&eqslantgtr;\": { \"codepoints\": [10902], \"characters\": \"\\u2A96\" },                                           // 551\n  \"&eqslantless;\": { \"codepoints\": [10901], \"characters\": \"\\u2A95\" },                                          // 552\n  \"&Equal;\": { \"codepoints\": [10869], \"characters\": \"\\u2A75\" },                                                // 553\n  \"&equals;\": { \"codepoints\": [61], \"characters\": \"\\u003D\" },                                                  // 554\n  \"&EqualTilde;\": { \"codepoints\": [8770], \"characters\": \"\\u2242\" },                                            // 555\n  \"&equest;\": { \"codepoints\": [8799], \"characters\": \"\\u225F\" },                                                // 556\n  \"&Equilibrium;\": { \"codepoints\": [8652], \"characters\": \"\\u21CC\" },                                           // 557\n  \"&equiv;\": { \"codepoints\": [8801], \"characters\": \"\\u2261\" },                                                 // 558\n  \"&equivDD;\": { \"codepoints\": [10872], \"characters\": \"\\u2A78\" },                                              // 559\n  \"&eqvparsl;\": { \"codepoints\": [10725], \"characters\": \"\\u29E5\" },                                             // 560\n  \"&erarr;\": { \"codepoints\": [10609], \"characters\": \"\\u2971\" },                                                // 561\n  \"&erDot;\": { \"codepoints\": [8787], \"characters\": \"\\u2253\" },                                                 // 562\n  \"&escr;\": { \"codepoints\": [8495], \"characters\": \"\\u212F\" },                                                  // 563\n  \"&Escr;\": { \"codepoints\": [8496], \"characters\": \"\\u2130\" },                                                  // 564\n  \"&esdot;\": { \"codepoints\": [8784], \"characters\": \"\\u2250\" },                                                 // 565\n  \"&Esim;\": { \"codepoints\": [10867], \"characters\": \"\\u2A73\" },                                                 // 566\n  \"&esim;\": { \"codepoints\": [8770], \"characters\": \"\\u2242\" },                                                  // 567\n  \"&Eta;\": { \"codepoints\": [919], \"characters\": \"\\u0397\" },                                                    // 568\n  \"&eta;\": { \"codepoints\": [951], \"characters\": \"\\u03B7\" },                                                    // 569\n  \"&ETH;\": { \"codepoints\": [208], \"characters\": \"\\u00D0\" },                                                    // 570\n  \"&ETH\": { \"codepoints\": [208], \"characters\": \"\\u00D0\" },                                                     // 571\n  \"&eth;\": { \"codepoints\": [240], \"characters\": \"\\u00F0\" },                                                    // 572\n  \"&eth\": { \"codepoints\": [240], \"characters\": \"\\u00F0\" },                                                     // 573\n  \"&Euml;\": { \"codepoints\": [203], \"characters\": \"\\u00CB\" },                                                   // 574\n  \"&Euml\": { \"codepoints\": [203], \"characters\": \"\\u00CB\" },                                                    // 575\n  \"&euml;\": { \"codepoints\": [235], \"characters\": \"\\u00EB\" },                                                   // 576\n  \"&euml\": { \"codepoints\": [235], \"characters\": \"\\u00EB\" },                                                    // 577\n  \"&euro;\": { \"codepoints\": [8364], \"characters\": \"\\u20AC\" },                                                  // 578\n  \"&excl;\": { \"codepoints\": [33], \"characters\": \"\\u0021\" },                                                    // 579\n  \"&exist;\": { \"codepoints\": [8707], \"characters\": \"\\u2203\" },                                                 // 580\n  \"&Exists;\": { \"codepoints\": [8707], \"characters\": \"\\u2203\" },                                                // 581\n  \"&expectation;\": { \"codepoints\": [8496], \"characters\": \"\\u2130\" },                                           // 582\n  \"&exponentiale;\": { \"codepoints\": [8519], \"characters\": \"\\u2147\" },                                          // 583\n  \"&ExponentialE;\": { \"codepoints\": [8519], \"characters\": \"\\u2147\" },                                          // 584\n  \"&fallingdotseq;\": { \"codepoints\": [8786], \"characters\": \"\\u2252\" },                                         // 585\n  \"&Fcy;\": { \"codepoints\": [1060], \"characters\": \"\\u0424\" },                                                   // 586\n  \"&fcy;\": { \"codepoints\": [1092], \"characters\": \"\\u0444\" },                                                   // 587\n  \"&female;\": { \"codepoints\": [9792], \"characters\": \"\\u2640\" },                                                // 588\n  \"&ffilig;\": { \"codepoints\": [64259], \"characters\": \"\\uFB03\" },                                               // 589\n  \"&fflig;\": { \"codepoints\": [64256], \"characters\": \"\\uFB00\" },                                                // 590\n  \"&ffllig;\": { \"codepoints\": [64260], \"characters\": \"\\uFB04\" },                                               // 591\n  \"&Ffr;\": { \"codepoints\": [120073], \"characters\": \"\\uD835\\uDD09\" },                                           // 592\n  \"&ffr;\": { \"codepoints\": [120099], \"characters\": \"\\uD835\\uDD23\" },                                           // 593\n  \"&filig;\": { \"codepoints\": [64257], \"characters\": \"\\uFB01\" },                                                // 594\n  \"&FilledSmallSquare;\": { \"codepoints\": [9724], \"characters\": \"\\u25FC\" },                                     // 595\n  \"&FilledVerySmallSquare;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },                                 // 596\n  \"&fjlig;\": { \"codepoints\": [102, 106], \"characters\": \"\\u0066\\u006A\" },                                       // 597\n  \"&flat;\": { \"codepoints\": [9837], \"characters\": \"\\u266D\" },                                                  // 598\n  \"&fllig;\": { \"codepoints\": [64258], \"characters\": \"\\uFB02\" },                                                // 599\n  \"&fltns;\": { \"codepoints\": [9649], \"characters\": \"\\u25B1\" },                                                 // 600\n  \"&fnof;\": { \"codepoints\": [402], \"characters\": \"\\u0192\" },                                                   // 601\n  \"&Fopf;\": { \"codepoints\": [120125], \"characters\": \"\\uD835\\uDD3D\" },                                          // 602\n  \"&fopf;\": { \"codepoints\": [120151], \"characters\": \"\\uD835\\uDD57\" },                                          // 603\n  \"&forall;\": { \"codepoints\": [8704], \"characters\": \"\\u2200\" },                                                // 604\n  \"&ForAll;\": { \"codepoints\": [8704], \"characters\": \"\\u2200\" },                                                // 605\n  \"&fork;\": { \"codepoints\": [8916], \"characters\": \"\\u22D4\" },                                                  // 606\n  \"&forkv;\": { \"codepoints\": [10969], \"characters\": \"\\u2AD9\" },                                                // 607\n  \"&Fouriertrf;\": { \"codepoints\": [8497], \"characters\": \"\\u2131\" },                                            // 608\n  \"&fpartint;\": { \"codepoints\": [10765], \"characters\": \"\\u2A0D\" },                                             // 609\n  \"&frac12;\": { \"codepoints\": [189], \"characters\": \"\\u00BD\" },                                                 // 610\n  \"&frac12\": { \"codepoints\": [189], \"characters\": \"\\u00BD\" },                                                  // 611\n  \"&frac13;\": { \"codepoints\": [8531], \"characters\": \"\\u2153\" },                                                // 612\n  \"&frac14;\": { \"codepoints\": [188], \"characters\": \"\\u00BC\" },                                                 // 613\n  \"&frac14\": { \"codepoints\": [188], \"characters\": \"\\u00BC\" },                                                  // 614\n  \"&frac15;\": { \"codepoints\": [8533], \"characters\": \"\\u2155\" },                                                // 615\n  \"&frac16;\": { \"codepoints\": [8537], \"characters\": \"\\u2159\" },                                                // 616\n  \"&frac18;\": { \"codepoints\": [8539], \"characters\": \"\\u215B\" },                                                // 617\n  \"&frac23;\": { \"codepoints\": [8532], \"characters\": \"\\u2154\" },                                                // 618\n  \"&frac25;\": { \"codepoints\": [8534], \"characters\": \"\\u2156\" },                                                // 619\n  \"&frac34;\": { \"codepoints\": [190], \"characters\": \"\\u00BE\" },                                                 // 620\n  \"&frac34\": { \"codepoints\": [190], \"characters\": \"\\u00BE\" },                                                  // 621\n  \"&frac35;\": { \"codepoints\": [8535], \"characters\": \"\\u2157\" },                                                // 622\n  \"&frac38;\": { \"codepoints\": [8540], \"characters\": \"\\u215C\" },                                                // 623\n  \"&frac45;\": { \"codepoints\": [8536], \"characters\": \"\\u2158\" },                                                // 624\n  \"&frac56;\": { \"codepoints\": [8538], \"characters\": \"\\u215A\" },                                                // 625\n  \"&frac58;\": { \"codepoints\": [8541], \"characters\": \"\\u215D\" },                                                // 626\n  \"&frac78;\": { \"codepoints\": [8542], \"characters\": \"\\u215E\" },                                                // 627\n  \"&frasl;\": { \"codepoints\": [8260], \"characters\": \"\\u2044\" },                                                 // 628\n  \"&frown;\": { \"codepoints\": [8994], \"characters\": \"\\u2322\" },                                                 // 629\n  \"&fscr;\": { \"codepoints\": [119995], \"characters\": \"\\uD835\\uDCBB\" },                                          // 630\n  \"&Fscr;\": { \"codepoints\": [8497], \"characters\": \"\\u2131\" },                                                  // 631\n  \"&gacute;\": { \"codepoints\": [501], \"characters\": \"\\u01F5\" },                                                 // 632\n  \"&Gamma;\": { \"codepoints\": [915], \"characters\": \"\\u0393\" },                                                  // 633\n  \"&gamma;\": { \"codepoints\": [947], \"characters\": \"\\u03B3\" },                                                  // 634\n  \"&Gammad;\": { \"codepoints\": [988], \"characters\": \"\\u03DC\" },                                                 // 635\n  \"&gammad;\": { \"codepoints\": [989], \"characters\": \"\\u03DD\" },                                                 // 636\n  \"&gap;\": { \"codepoints\": [10886], \"characters\": \"\\u2A86\" },                                                  // 637\n  \"&Gbreve;\": { \"codepoints\": [286], \"characters\": \"\\u011E\" },                                                 // 638\n  \"&gbreve;\": { \"codepoints\": [287], \"characters\": \"\\u011F\" },                                                 // 639\n  \"&Gcedil;\": { \"codepoints\": [290], \"characters\": \"\\u0122\" },                                                 // 640\n  \"&Gcirc;\": { \"codepoints\": [284], \"characters\": \"\\u011C\" },                                                  // 641\n  \"&gcirc;\": { \"codepoints\": [285], \"characters\": \"\\u011D\" },                                                  // 642\n  \"&Gcy;\": { \"codepoints\": [1043], \"characters\": \"\\u0413\" },                                                   // 643\n  \"&gcy;\": { \"codepoints\": [1075], \"characters\": \"\\u0433\" },                                                   // 644\n  \"&Gdot;\": { \"codepoints\": [288], \"characters\": \"\\u0120\" },                                                   // 645\n  \"&gdot;\": { \"codepoints\": [289], \"characters\": \"\\u0121\" },                                                   // 646\n  \"&ge;\": { \"codepoints\": [8805], \"characters\": \"\\u2265\" },                                                    // 647\n  \"&gE;\": { \"codepoints\": [8807], \"characters\": \"\\u2267\" },                                                    // 648\n  \"&gEl;\": { \"codepoints\": [10892], \"characters\": \"\\u2A8C\" },                                                  // 649\n  \"&gel;\": { \"codepoints\": [8923], \"characters\": \"\\u22DB\" },                                                   // 650\n  \"&geq;\": { \"codepoints\": [8805], \"characters\": \"\\u2265\" },                                                   // 651\n  \"&geqq;\": { \"codepoints\": [8807], \"characters\": \"\\u2267\" },                                                  // 652\n  \"&geqslant;\": { \"codepoints\": [10878], \"characters\": \"\\u2A7E\" },                                             // 653\n  \"&gescc;\": { \"codepoints\": [10921], \"characters\": \"\\u2AA9\" },                                                // 654\n  \"&ges;\": { \"codepoints\": [10878], \"characters\": \"\\u2A7E\" },                                                  // 655\n  \"&gesdot;\": { \"codepoints\": [10880], \"characters\": \"\\u2A80\" },                                               // 656\n  \"&gesdoto;\": { \"codepoints\": [10882], \"characters\": \"\\u2A82\" },                                              // 657\n  \"&gesdotol;\": { \"codepoints\": [10884], \"characters\": \"\\u2A84\" },                                             // 658\n  \"&gesl;\": { \"codepoints\": [8923, 65024], \"characters\": \"\\u22DB\\uFE00\" },                                     // 659\n  \"&gesles;\": { \"codepoints\": [10900], \"characters\": \"\\u2A94\" },                                               // 660\n  \"&Gfr;\": { \"codepoints\": [120074], \"characters\": \"\\uD835\\uDD0A\" },                                           // 661\n  \"&gfr;\": { \"codepoints\": [120100], \"characters\": \"\\uD835\\uDD24\" },                                           // 662\n  \"&gg;\": { \"codepoints\": [8811], \"characters\": \"\\u226B\" },                                                    // 663\n  \"&Gg;\": { \"codepoints\": [8921], \"characters\": \"\\u22D9\" },                                                    // 664\n  \"&ggg;\": { \"codepoints\": [8921], \"characters\": \"\\u22D9\" },                                                   // 665\n  \"&gimel;\": { \"codepoints\": [8503], \"characters\": \"\\u2137\" },                                                 // 666\n  \"&GJcy;\": { \"codepoints\": [1027], \"characters\": \"\\u0403\" },                                                  // 667\n  \"&gjcy;\": { \"codepoints\": [1107], \"characters\": \"\\u0453\" },                                                  // 668\n  \"&gla;\": { \"codepoints\": [10917], \"characters\": \"\\u2AA5\" },                                                  // 669\n  \"&gl;\": { \"codepoints\": [8823], \"characters\": \"\\u2277\" },                                                    // 670\n  \"&glE;\": { \"codepoints\": [10898], \"characters\": \"\\u2A92\" },                                                  // 671\n  \"&glj;\": { \"codepoints\": [10916], \"characters\": \"\\u2AA4\" },                                                  // 672\n  \"&gnap;\": { \"codepoints\": [10890], \"characters\": \"\\u2A8A\" },                                                 // 673\n  \"&gnapprox;\": { \"codepoints\": [10890], \"characters\": \"\\u2A8A\" },                                             // 674\n  \"&gne;\": { \"codepoints\": [10888], \"characters\": \"\\u2A88\" },                                                  // 675\n  \"&gnE;\": { \"codepoints\": [8809], \"characters\": \"\\u2269\" },                                                   // 676\n  \"&gneq;\": { \"codepoints\": [10888], \"characters\": \"\\u2A88\" },                                                 // 677\n  \"&gneqq;\": { \"codepoints\": [8809], \"characters\": \"\\u2269\" },                                                 // 678\n  \"&gnsim;\": { \"codepoints\": [8935], \"characters\": \"\\u22E7\" },                                                 // 679\n  \"&Gopf;\": { \"codepoints\": [120126], \"characters\": \"\\uD835\\uDD3E\" },                                          // 680\n  \"&gopf;\": { \"codepoints\": [120152], \"characters\": \"\\uD835\\uDD58\" },                                          // 681\n  \"&grave;\": { \"codepoints\": [96], \"characters\": \"\\u0060\" },                                                   // 682\n  \"&GreaterEqual;\": { \"codepoints\": [8805], \"characters\": \"\\u2265\" },                                          // 683\n  \"&GreaterEqualLess;\": { \"codepoints\": [8923], \"characters\": \"\\u22DB\" },                                      // 684\n  \"&GreaterFullEqual;\": { \"codepoints\": [8807], \"characters\": \"\\u2267\" },                                      // 685\n  \"&GreaterGreater;\": { \"codepoints\": [10914], \"characters\": \"\\u2AA2\" },                                       // 686\n  \"&GreaterLess;\": { \"codepoints\": [8823], \"characters\": \"\\u2277\" },                                           // 687\n  \"&GreaterSlantEqual;\": { \"codepoints\": [10878], \"characters\": \"\\u2A7E\" },                                    // 688\n  \"&GreaterTilde;\": { \"codepoints\": [8819], \"characters\": \"\\u2273\" },                                          // 689\n  \"&Gscr;\": { \"codepoints\": [119970], \"characters\": \"\\uD835\\uDCA2\" },                                          // 690\n  \"&gscr;\": { \"codepoints\": [8458], \"characters\": \"\\u210A\" },                                                  // 691\n  \"&gsim;\": { \"codepoints\": [8819], \"characters\": \"\\u2273\" },                                                  // 692\n  \"&gsime;\": { \"codepoints\": [10894], \"characters\": \"\\u2A8E\" },                                                // 693\n  \"&gsiml;\": { \"codepoints\": [10896], \"characters\": \"\\u2A90\" },                                                // 694\n  \"&gtcc;\": { \"codepoints\": [10919], \"characters\": \"\\u2AA7\" },                                                 // 695\n  \"&gtcir;\": { \"codepoints\": [10874], \"characters\": \"\\u2A7A\" },                                                // 696\n  \"&gt;\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },                                                      // 697\n  \"&gt\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },                                                       // 698\n  \"&GT;\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },                                                      // 699\n  \"&GT\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },                                                       // 700\n  \"&Gt;\": { \"codepoints\": [8811], \"characters\": \"\\u226B\" },                                                    // 701\n  \"&gtdot;\": { \"codepoints\": [8919], \"characters\": \"\\u22D7\" },                                                 // 702\n  \"&gtlPar;\": { \"codepoints\": [10645], \"characters\": \"\\u2995\" },                                               // 703\n  \"&gtquest;\": { \"codepoints\": [10876], \"characters\": \"\\u2A7C\" },                                              // 704\n  \"&gtrapprox;\": { \"codepoints\": [10886], \"characters\": \"\\u2A86\" },                                            // 705\n  \"&gtrarr;\": { \"codepoints\": [10616], \"characters\": \"\\u2978\" },                                               // 706\n  \"&gtrdot;\": { \"codepoints\": [8919], \"characters\": \"\\u22D7\" },                                                // 707\n  \"&gtreqless;\": { \"codepoints\": [8923], \"characters\": \"\\u22DB\" },                                             // 708\n  \"&gtreqqless;\": { \"codepoints\": [10892], \"characters\": \"\\u2A8C\" },                                           // 709\n  \"&gtrless;\": { \"codepoints\": [8823], \"characters\": \"\\u2277\" },                                               // 710\n  \"&gtrsim;\": { \"codepoints\": [8819], \"characters\": \"\\u2273\" },                                                // 711\n  \"&gvertneqq;\": { \"codepoints\": [8809, 65024], \"characters\": \"\\u2269\\uFE00\" },                                // 712\n  \"&gvnE;\": { \"codepoints\": [8809, 65024], \"characters\": \"\\u2269\\uFE00\" },                                     // 713\n  \"&Hacek;\": { \"codepoints\": [711], \"characters\": \"\\u02C7\" },                                                  // 714\n  \"&hairsp;\": { \"codepoints\": [8202], \"characters\": \"\\u200A\" },                                                // 715\n  \"&half;\": { \"codepoints\": [189], \"characters\": \"\\u00BD\" },                                                   // 716\n  \"&hamilt;\": { \"codepoints\": [8459], \"characters\": \"\\u210B\" },                                                // 717\n  \"&HARDcy;\": { \"codepoints\": [1066], \"characters\": \"\\u042A\" },                                                // 718\n  \"&hardcy;\": { \"codepoints\": [1098], \"characters\": \"\\u044A\" },                                                // 719\n  \"&harrcir;\": { \"codepoints\": [10568], \"characters\": \"\\u2948\" },                                              // 720\n  \"&harr;\": { \"codepoints\": [8596], \"characters\": \"\\u2194\" },                                                  // 721\n  \"&hArr;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },                                                  // 722\n  \"&harrw;\": { \"codepoints\": [8621], \"characters\": \"\\u21AD\" },                                                 // 723\n  \"&Hat;\": { \"codepoints\": [94], \"characters\": \"\\u005E\" },                                                     // 724\n  \"&hbar;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },                                                  // 725\n  \"&Hcirc;\": { \"codepoints\": [292], \"characters\": \"\\u0124\" },                                                  // 726\n  \"&hcirc;\": { \"codepoints\": [293], \"characters\": \"\\u0125\" },                                                  // 727\n  \"&hearts;\": { \"codepoints\": [9829], \"characters\": \"\\u2665\" },                                                // 728\n  \"&heartsuit;\": { \"codepoints\": [9829], \"characters\": \"\\u2665\" },                                             // 729\n  \"&hellip;\": { \"codepoints\": [8230], \"characters\": \"\\u2026\" },                                                // 730\n  \"&hercon;\": { \"codepoints\": [8889], \"characters\": \"\\u22B9\" },                                                // 731\n  \"&hfr;\": { \"codepoints\": [120101], \"characters\": \"\\uD835\\uDD25\" },                                           // 732\n  \"&Hfr;\": { \"codepoints\": [8460], \"characters\": \"\\u210C\" },                                                   // 733\n  \"&HilbertSpace;\": { \"codepoints\": [8459], \"characters\": \"\\u210B\" },                                          // 734\n  \"&hksearow;\": { \"codepoints\": [10533], \"characters\": \"\\u2925\" },                                             // 735\n  \"&hkswarow;\": { \"codepoints\": [10534], \"characters\": \"\\u2926\" },                                             // 736\n  \"&hoarr;\": { \"codepoints\": [8703], \"characters\": \"\\u21FF\" },                                                 // 737\n  \"&homtht;\": { \"codepoints\": [8763], \"characters\": \"\\u223B\" },                                                // 738\n  \"&hookleftarrow;\": { \"codepoints\": [8617], \"characters\": \"\\u21A9\" },                                         // 739\n  \"&hookrightarrow;\": { \"codepoints\": [8618], \"characters\": \"\\u21AA\" },                                        // 740\n  \"&hopf;\": { \"codepoints\": [120153], \"characters\": \"\\uD835\\uDD59\" },                                          // 741\n  \"&Hopf;\": { \"codepoints\": [8461], \"characters\": \"\\u210D\" },                                                  // 742\n  \"&horbar;\": { \"codepoints\": [8213], \"characters\": \"\\u2015\" },                                                // 743\n  \"&HorizontalLine;\": { \"codepoints\": [9472], \"characters\": \"\\u2500\" },                                        // 744\n  \"&hscr;\": { \"codepoints\": [119997], \"characters\": \"\\uD835\\uDCBD\" },                                          // 745\n  \"&Hscr;\": { \"codepoints\": [8459], \"characters\": \"\\u210B\" },                                                  // 746\n  \"&hslash;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },                                                // 747\n  \"&Hstrok;\": { \"codepoints\": [294], \"characters\": \"\\u0126\" },                                                 // 748\n  \"&hstrok;\": { \"codepoints\": [295], \"characters\": \"\\u0127\" },                                                 // 749\n  \"&HumpDownHump;\": { \"codepoints\": [8782], \"characters\": \"\\u224E\" },                                          // 750\n  \"&HumpEqual;\": { \"codepoints\": [8783], \"characters\": \"\\u224F\" },                                             // 751\n  \"&hybull;\": { \"codepoints\": [8259], \"characters\": \"\\u2043\" },                                                // 752\n  \"&hyphen;\": { \"codepoints\": [8208], \"characters\": \"\\u2010\" },                                                // 753\n  \"&Iacute;\": { \"codepoints\": [205], \"characters\": \"\\u00CD\" },                                                 // 754\n  \"&Iacute\": { \"codepoints\": [205], \"characters\": \"\\u00CD\" },                                                  // 755\n  \"&iacute;\": { \"codepoints\": [237], \"characters\": \"\\u00ED\" },                                                 // 756\n  \"&iacute\": { \"codepoints\": [237], \"characters\": \"\\u00ED\" },                                                  // 757\n  \"&ic;\": { \"codepoints\": [8291], \"characters\": \"\\u2063\" },                                                    // 758\n  \"&Icirc;\": { \"codepoints\": [206], \"characters\": \"\\u00CE\" },                                                  // 759\n  \"&Icirc\": { \"codepoints\": [206], \"characters\": \"\\u00CE\" },                                                   // 760\n  \"&icirc;\": { \"codepoints\": [238], \"characters\": \"\\u00EE\" },                                                  // 761\n  \"&icirc\": { \"codepoints\": [238], \"characters\": \"\\u00EE\" },                                                   // 762\n  \"&Icy;\": { \"codepoints\": [1048], \"characters\": \"\\u0418\" },                                                   // 763\n  \"&icy;\": { \"codepoints\": [1080], \"characters\": \"\\u0438\" },                                                   // 764\n  \"&Idot;\": { \"codepoints\": [304], \"characters\": \"\\u0130\" },                                                   // 765\n  \"&IEcy;\": { \"codepoints\": [1045], \"characters\": \"\\u0415\" },                                                  // 766\n  \"&iecy;\": { \"codepoints\": [1077], \"characters\": \"\\u0435\" },                                                  // 767\n  \"&iexcl;\": { \"codepoints\": [161], \"characters\": \"\\u00A1\" },                                                  // 768\n  \"&iexcl\": { \"codepoints\": [161], \"characters\": \"\\u00A1\" },                                                   // 769\n  \"&iff;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },                                                   // 770\n  \"&ifr;\": { \"codepoints\": [120102], \"characters\": \"\\uD835\\uDD26\" },                                           // 771\n  \"&Ifr;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },                                                   // 772\n  \"&Igrave;\": { \"codepoints\": [204], \"characters\": \"\\u00CC\" },                                                 // 773\n  \"&Igrave\": { \"codepoints\": [204], \"characters\": \"\\u00CC\" },                                                  // 774\n  \"&igrave;\": { \"codepoints\": [236], \"characters\": \"\\u00EC\" },                                                 // 775\n  \"&igrave\": { \"codepoints\": [236], \"characters\": \"\\u00EC\" },                                                  // 776\n  \"&ii;\": { \"codepoints\": [8520], \"characters\": \"\\u2148\" },                                                    // 777\n  \"&iiiint;\": { \"codepoints\": [10764], \"characters\": \"\\u2A0C\" },                                               // 778\n  \"&iiint;\": { \"codepoints\": [8749], \"characters\": \"\\u222D\" },                                                 // 779\n  \"&iinfin;\": { \"codepoints\": [10716], \"characters\": \"\\u29DC\" },                                               // 780\n  \"&iiota;\": { \"codepoints\": [8489], \"characters\": \"\\u2129\" },                                                 // 781\n  \"&IJlig;\": { \"codepoints\": [306], \"characters\": \"\\u0132\" },                                                  // 782\n  \"&ijlig;\": { \"codepoints\": [307], \"characters\": \"\\u0133\" },                                                  // 783\n  \"&Imacr;\": { \"codepoints\": [298], \"characters\": \"\\u012A\" },                                                  // 784\n  \"&imacr;\": { \"codepoints\": [299], \"characters\": \"\\u012B\" },                                                  // 785\n  \"&image;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },                                                 // 786\n  \"&ImaginaryI;\": { \"codepoints\": [8520], \"characters\": \"\\u2148\" },                                            // 787\n  \"&imagline;\": { \"codepoints\": [8464], \"characters\": \"\\u2110\" },                                              // 788\n  \"&imagpart;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },                                              // 789\n  \"&imath;\": { \"codepoints\": [305], \"characters\": \"\\u0131\" },                                                  // 790\n  \"&Im;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },                                                    // 791\n  \"&imof;\": { \"codepoints\": [8887], \"characters\": \"\\u22B7\" },                                                  // 792\n  \"&imped;\": { \"codepoints\": [437], \"characters\": \"\\u01B5\" },                                                  // 793\n  \"&Implies;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },                                               // 794\n  \"&incare;\": { \"codepoints\": [8453], \"characters\": \"\\u2105\" },                                                // 795\n  \"&in;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },                                                    // 796\n  \"&infin;\": { \"codepoints\": [8734], \"characters\": \"\\u221E\" },                                                 // 797\n  \"&infintie;\": { \"codepoints\": [10717], \"characters\": \"\\u29DD\" },                                             // 798\n  \"&inodot;\": { \"codepoints\": [305], \"characters\": \"\\u0131\" },                                                 // 799\n  \"&intcal;\": { \"codepoints\": [8890], \"characters\": \"\\u22BA\" },                                                // 800\n  \"&int;\": { \"codepoints\": [8747], \"characters\": \"\\u222B\" },                                                   // 801\n  \"&Int;\": { \"codepoints\": [8748], \"characters\": \"\\u222C\" },                                                   // 802\n  \"&integers;\": { \"codepoints\": [8484], \"characters\": \"\\u2124\" },                                              // 803\n  \"&Integral;\": { \"codepoints\": [8747], \"characters\": \"\\u222B\" },                                              // 804\n  \"&intercal;\": { \"codepoints\": [8890], \"characters\": \"\\u22BA\" },                                              // 805\n  \"&Intersection;\": { \"codepoints\": [8898], \"characters\": \"\\u22C2\" },                                          // 806\n  \"&intlarhk;\": { \"codepoints\": [10775], \"characters\": \"\\u2A17\" },                                             // 807\n  \"&intprod;\": { \"codepoints\": [10812], \"characters\": \"\\u2A3C\" },                                              // 808\n  \"&InvisibleComma;\": { \"codepoints\": [8291], \"characters\": \"\\u2063\" },                                        // 809\n  \"&InvisibleTimes;\": { \"codepoints\": [8290], \"characters\": \"\\u2062\" },                                        // 810\n  \"&IOcy;\": { \"codepoints\": [1025], \"characters\": \"\\u0401\" },                                                  // 811\n  \"&iocy;\": { \"codepoints\": [1105], \"characters\": \"\\u0451\" },                                                  // 812\n  \"&Iogon;\": { \"codepoints\": [302], \"characters\": \"\\u012E\" },                                                  // 813\n  \"&iogon;\": { \"codepoints\": [303], \"characters\": \"\\u012F\" },                                                  // 814\n  \"&Iopf;\": { \"codepoints\": [120128], \"characters\": \"\\uD835\\uDD40\" },                                          // 815\n  \"&iopf;\": { \"codepoints\": [120154], \"characters\": \"\\uD835\\uDD5A\" },                                          // 816\n  \"&Iota;\": { \"codepoints\": [921], \"characters\": \"\\u0399\" },                                                   // 817\n  \"&iota;\": { \"codepoints\": [953], \"characters\": \"\\u03B9\" },                                                   // 818\n  \"&iprod;\": { \"codepoints\": [10812], \"characters\": \"\\u2A3C\" },                                                // 819\n  \"&iquest;\": { \"codepoints\": [191], \"characters\": \"\\u00BF\" },                                                 // 820\n  \"&iquest\": { \"codepoints\": [191], \"characters\": \"\\u00BF\" },                                                  // 821\n  \"&iscr;\": { \"codepoints\": [119998], \"characters\": \"\\uD835\\uDCBE\" },                                          // 822\n  \"&Iscr;\": { \"codepoints\": [8464], \"characters\": \"\\u2110\" },                                                  // 823\n  \"&isin;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },                                                  // 824\n  \"&isindot;\": { \"codepoints\": [8949], \"characters\": \"\\u22F5\" },                                               // 825\n  \"&isinE;\": { \"codepoints\": [8953], \"characters\": \"\\u22F9\" },                                                 // 826\n  \"&isins;\": { \"codepoints\": [8948], \"characters\": \"\\u22F4\" },                                                 // 827\n  \"&isinsv;\": { \"codepoints\": [8947], \"characters\": \"\\u22F3\" },                                                // 828\n  \"&isinv;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },                                                 // 829\n  \"&it;\": { \"codepoints\": [8290], \"characters\": \"\\u2062\" },                                                    // 830\n  \"&Itilde;\": { \"codepoints\": [296], \"characters\": \"\\u0128\" },                                                 // 831\n  \"&itilde;\": { \"codepoints\": [297], \"characters\": \"\\u0129\" },                                                 // 832\n  \"&Iukcy;\": { \"codepoints\": [1030], \"characters\": \"\\u0406\" },                                                 // 833\n  \"&iukcy;\": { \"codepoints\": [1110], \"characters\": \"\\u0456\" },                                                 // 834\n  \"&Iuml;\": { \"codepoints\": [207], \"characters\": \"\\u00CF\" },                                                   // 835\n  \"&Iuml\": { \"codepoints\": [207], \"characters\": \"\\u00CF\" },                                                    // 836\n  \"&iuml;\": { \"codepoints\": [239], \"characters\": \"\\u00EF\" },                                                   // 837\n  \"&iuml\": { \"codepoints\": [239], \"characters\": \"\\u00EF\" },                                                    // 838\n  \"&Jcirc;\": { \"codepoints\": [308], \"characters\": \"\\u0134\" },                                                  // 839\n  \"&jcirc;\": { \"codepoints\": [309], \"characters\": \"\\u0135\" },                                                  // 840\n  \"&Jcy;\": { \"codepoints\": [1049], \"characters\": \"\\u0419\" },                                                   // 841\n  \"&jcy;\": { \"codepoints\": [1081], \"characters\": \"\\u0439\" },                                                   // 842\n  \"&Jfr;\": { \"codepoints\": [120077], \"characters\": \"\\uD835\\uDD0D\" },                                           // 843\n  \"&jfr;\": { \"codepoints\": [120103], \"characters\": \"\\uD835\\uDD27\" },                                           // 844\n  \"&jmath;\": { \"codepoints\": [567], \"characters\": \"\\u0237\" },                                                  // 845\n  \"&Jopf;\": { \"codepoints\": [120129], \"characters\": \"\\uD835\\uDD41\" },                                          // 846\n  \"&jopf;\": { \"codepoints\": [120155], \"characters\": \"\\uD835\\uDD5B\" },                                          // 847\n  \"&Jscr;\": { \"codepoints\": [119973], \"characters\": \"\\uD835\\uDCA5\" },                                          // 848\n  \"&jscr;\": { \"codepoints\": [119999], \"characters\": \"\\uD835\\uDCBF\" },                                          // 849\n  \"&Jsercy;\": { \"codepoints\": [1032], \"characters\": \"\\u0408\" },                                                // 850\n  \"&jsercy;\": { \"codepoints\": [1112], \"characters\": \"\\u0458\" },                                                // 851\n  \"&Jukcy;\": { \"codepoints\": [1028], \"characters\": \"\\u0404\" },                                                 // 852\n  \"&jukcy;\": { \"codepoints\": [1108], \"characters\": \"\\u0454\" },                                                 // 853\n  \"&Kappa;\": { \"codepoints\": [922], \"characters\": \"\\u039A\" },                                                  // 854\n  \"&kappa;\": { \"codepoints\": [954], \"characters\": \"\\u03BA\" },                                                  // 855\n  \"&kappav;\": { \"codepoints\": [1008], \"characters\": \"\\u03F0\" },                                                // 856\n  \"&Kcedil;\": { \"codepoints\": [310], \"characters\": \"\\u0136\" },                                                 // 857\n  \"&kcedil;\": { \"codepoints\": [311], \"characters\": \"\\u0137\" },                                                 // 858\n  \"&Kcy;\": { \"codepoints\": [1050], \"characters\": \"\\u041A\" },                                                   // 859\n  \"&kcy;\": { \"codepoints\": [1082], \"characters\": \"\\u043A\" },                                                   // 860\n  \"&Kfr;\": { \"codepoints\": [120078], \"characters\": \"\\uD835\\uDD0E\" },                                           // 861\n  \"&kfr;\": { \"codepoints\": [120104], \"characters\": \"\\uD835\\uDD28\" },                                           // 862\n  \"&kgreen;\": { \"codepoints\": [312], \"characters\": \"\\u0138\" },                                                 // 863\n  \"&KHcy;\": { \"codepoints\": [1061], \"characters\": \"\\u0425\" },                                                  // 864\n  \"&khcy;\": { \"codepoints\": [1093], \"characters\": \"\\u0445\" },                                                  // 865\n  \"&KJcy;\": { \"codepoints\": [1036], \"characters\": \"\\u040C\" },                                                  // 866\n  \"&kjcy;\": { \"codepoints\": [1116], \"characters\": \"\\u045C\" },                                                  // 867\n  \"&Kopf;\": { \"codepoints\": [120130], \"characters\": \"\\uD835\\uDD42\" },                                          // 868\n  \"&kopf;\": { \"codepoints\": [120156], \"characters\": \"\\uD835\\uDD5C\" },                                          // 869\n  \"&Kscr;\": { \"codepoints\": [119974], \"characters\": \"\\uD835\\uDCA6\" },                                          // 870\n  \"&kscr;\": { \"codepoints\": [120000], \"characters\": \"\\uD835\\uDCC0\" },                                          // 871\n  \"&lAarr;\": { \"codepoints\": [8666], \"characters\": \"\\u21DA\" },                                                 // 872\n  \"&Lacute;\": { \"codepoints\": [313], \"characters\": \"\\u0139\" },                                                 // 873\n  \"&lacute;\": { \"codepoints\": [314], \"characters\": \"\\u013A\" },                                                 // 874\n  \"&laemptyv;\": { \"codepoints\": [10676], \"characters\": \"\\u29B4\" },                                             // 875\n  \"&lagran;\": { \"codepoints\": [8466], \"characters\": \"\\u2112\" },                                                // 876\n  \"&Lambda;\": { \"codepoints\": [923], \"characters\": \"\\u039B\" },                                                 // 877\n  \"&lambda;\": { \"codepoints\": [955], \"characters\": \"\\u03BB\" },                                                 // 878\n  \"&lang;\": { \"codepoints\": [10216], \"characters\": \"\\u27E8\" },                                                 // 879\n  \"&Lang;\": { \"codepoints\": [10218], \"characters\": \"\\u27EA\" },                                                 // 880\n  \"&langd;\": { \"codepoints\": [10641], \"characters\": \"\\u2991\" },                                                // 881\n  \"&langle;\": { \"codepoints\": [10216], \"characters\": \"\\u27E8\" },                                               // 882\n  \"&lap;\": { \"codepoints\": [10885], \"characters\": \"\\u2A85\" },                                                  // 883\n  \"&Laplacetrf;\": { \"codepoints\": [8466], \"characters\": \"\\u2112\" },                                            // 884\n  \"&laquo;\": { \"codepoints\": [171], \"characters\": \"\\u00AB\" },                                                  // 885\n  \"&laquo\": { \"codepoints\": [171], \"characters\": \"\\u00AB\" },                                                   // 886\n  \"&larrb;\": { \"codepoints\": [8676], \"characters\": \"\\u21E4\" },                                                 // 887\n  \"&larrbfs;\": { \"codepoints\": [10527], \"characters\": \"\\u291F\" },                                              // 888\n  \"&larr;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },                                                  // 889\n  \"&Larr;\": { \"codepoints\": [8606], \"characters\": \"\\u219E\" },                                                  // 890\n  \"&lArr;\": { \"codepoints\": [8656], \"characters\": \"\\u21D0\" },                                                  // 891\n  \"&larrfs;\": { \"codepoints\": [10525], \"characters\": \"\\u291D\" },                                               // 892\n  \"&larrhk;\": { \"codepoints\": [8617], \"characters\": \"\\u21A9\" },                                                // 893\n  \"&larrlp;\": { \"codepoints\": [8619], \"characters\": \"\\u21AB\" },                                                // 894\n  \"&larrpl;\": { \"codepoints\": [10553], \"characters\": \"\\u2939\" },                                               // 895\n  \"&larrsim;\": { \"codepoints\": [10611], \"characters\": \"\\u2973\" },                                              // 896\n  \"&larrtl;\": { \"codepoints\": [8610], \"characters\": \"\\u21A2\" },                                                // 897\n  \"&latail;\": { \"codepoints\": [10521], \"characters\": \"\\u2919\" },                                               // 898\n  \"&lAtail;\": { \"codepoints\": [10523], \"characters\": \"\\u291B\" },                                               // 899\n  \"&lat;\": { \"codepoints\": [10923], \"characters\": \"\\u2AAB\" },                                                  // 900\n  \"&late;\": { \"codepoints\": [10925], \"characters\": \"\\u2AAD\" },                                                 // 901\n  \"&lates;\": { \"codepoints\": [10925, 65024], \"characters\": \"\\u2AAD\\uFE00\" },                                   // 902\n  \"&lbarr;\": { \"codepoints\": [10508], \"characters\": \"\\u290C\" },                                                // 903\n  \"&lBarr;\": { \"codepoints\": [10510], \"characters\": \"\\u290E\" },                                                // 904\n  \"&lbbrk;\": { \"codepoints\": [10098], \"characters\": \"\\u2772\" },                                                // 905\n  \"&lbrace;\": { \"codepoints\": [123], \"characters\": \"\\u007B\" },                                                 // 906\n  \"&lbrack;\": { \"codepoints\": [91], \"characters\": \"\\u005B\" },                                                  // 907\n  \"&lbrke;\": { \"codepoints\": [10635], \"characters\": \"\\u298B\" },                                                // 908\n  \"&lbrksld;\": { \"codepoints\": [10639], \"characters\": \"\\u298F\" },                                              // 909\n  \"&lbrkslu;\": { \"codepoints\": [10637], \"characters\": \"\\u298D\" },                                              // 910\n  \"&Lcaron;\": { \"codepoints\": [317], \"characters\": \"\\u013D\" },                                                 // 911\n  \"&lcaron;\": { \"codepoints\": [318], \"characters\": \"\\u013E\" },                                                 // 912\n  \"&Lcedil;\": { \"codepoints\": [315], \"characters\": \"\\u013B\" },                                                 // 913\n  \"&lcedil;\": { \"codepoints\": [316], \"characters\": \"\\u013C\" },                                                 // 914\n  \"&lceil;\": { \"codepoints\": [8968], \"characters\": \"\\u2308\" },                                                 // 915\n  \"&lcub;\": { \"codepoints\": [123], \"characters\": \"\\u007B\" },                                                   // 916\n  \"&Lcy;\": { \"codepoints\": [1051], \"characters\": \"\\u041B\" },                                                   // 917\n  \"&lcy;\": { \"codepoints\": [1083], \"characters\": \"\\u043B\" },                                                   // 918\n  \"&ldca;\": { \"codepoints\": [10550], \"characters\": \"\\u2936\" },                                                 // 919\n  \"&ldquo;\": { \"codepoints\": [8220], \"characters\": \"\\u201C\" },                                                 // 920\n  \"&ldquor;\": { \"codepoints\": [8222], \"characters\": \"\\u201E\" },                                                // 921\n  \"&ldrdhar;\": { \"codepoints\": [10599], \"characters\": \"\\u2967\" },                                              // 922\n  \"&ldrushar;\": { \"codepoints\": [10571], \"characters\": \"\\u294B\" },                                             // 923\n  \"&ldsh;\": { \"codepoints\": [8626], \"characters\": \"\\u21B2\" },                                                  // 924\n  \"&le;\": { \"codepoints\": [8804], \"characters\": \"\\u2264\" },                                                    // 925\n  \"&lE;\": { \"codepoints\": [8806], \"characters\": \"\\u2266\" },                                                    // 926\n  \"&LeftAngleBracket;\": { \"codepoints\": [10216], \"characters\": \"\\u27E8\" },                                     // 927\n  \"&LeftArrowBar;\": { \"codepoints\": [8676], \"characters\": \"\\u21E4\" },                                          // 928\n  \"&leftarrow;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },                                             // 929\n  \"&LeftArrow;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },                                             // 930\n  \"&Leftarrow;\": { \"codepoints\": [8656], \"characters\": \"\\u21D0\" },                                             // 931\n  \"&LeftArrowRightArrow;\": { \"codepoints\": [8646], \"characters\": \"\\u21C6\" },                                   // 932\n  \"&leftarrowtail;\": { \"codepoints\": [8610], \"characters\": \"\\u21A2\" },                                         // 933\n  \"&LeftCeiling;\": { \"codepoints\": [8968], \"characters\": \"\\u2308\" },                                           // 934\n  \"&LeftDoubleBracket;\": { \"codepoints\": [10214], \"characters\": \"\\u27E6\" },                                    // 935\n  \"&LeftDownTeeVector;\": { \"codepoints\": [10593], \"characters\": \"\\u2961\" },                                    // 936\n  \"&LeftDownVectorBar;\": { \"codepoints\": [10585], \"characters\": \"\\u2959\" },                                    // 937\n  \"&LeftDownVector;\": { \"codepoints\": [8643], \"characters\": \"\\u21C3\" },                                        // 938\n  \"&LeftFloor;\": { \"codepoints\": [8970], \"characters\": \"\\u230A\" },                                             // 939\n  \"&leftharpoondown;\": { \"codepoints\": [8637], \"characters\": \"\\u21BD\" },                                       // 940\n  \"&leftharpoonup;\": { \"codepoints\": [8636], \"characters\": \"\\u21BC\" },                                         // 941\n  \"&leftleftarrows;\": { \"codepoints\": [8647], \"characters\": \"\\u21C7\" },                                        // 942\n  \"&leftrightarrow;\": { \"codepoints\": [8596], \"characters\": \"\\u2194\" },                                        // 943\n  \"&LeftRightArrow;\": { \"codepoints\": [8596], \"characters\": \"\\u2194\" },                                        // 944\n  \"&Leftrightarrow;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },                                        // 945\n  \"&leftrightarrows;\": { \"codepoints\": [8646], \"characters\": \"\\u21C6\" },                                       // 946\n  \"&leftrightharpoons;\": { \"codepoints\": [8651], \"characters\": \"\\u21CB\" },                                     // 947\n  \"&leftrightsquigarrow;\": { \"codepoints\": [8621], \"characters\": \"\\u21AD\" },                                   // 948\n  \"&LeftRightVector;\": { \"codepoints\": [10574], \"characters\": \"\\u294E\" },                                      // 949\n  \"&LeftTeeArrow;\": { \"codepoints\": [8612], \"characters\": \"\\u21A4\" },                                          // 950\n  \"&LeftTee;\": { \"codepoints\": [8867], \"characters\": \"\\u22A3\" },                                               // 951\n  \"&LeftTeeVector;\": { \"codepoints\": [10586], \"characters\": \"\\u295A\" },                                        // 952\n  \"&leftthreetimes;\": { \"codepoints\": [8907], \"characters\": \"\\u22CB\" },                                        // 953\n  \"&LeftTriangleBar;\": { \"codepoints\": [10703], \"characters\": \"\\u29CF\" },                                      // 954\n  \"&LeftTriangle;\": { \"codepoints\": [8882], \"characters\": \"\\u22B2\" },                                          // 955\n  \"&LeftTriangleEqual;\": { \"codepoints\": [8884], \"characters\": \"\\u22B4\" },                                     // 956\n  \"&LeftUpDownVector;\": { \"codepoints\": [10577], \"characters\": \"\\u2951\" },                                     // 957\n  \"&LeftUpTeeVector;\": { \"codepoints\": [10592], \"characters\": \"\\u2960\" },                                      // 958\n  \"&LeftUpVectorBar;\": { \"codepoints\": [10584], \"characters\": \"\\u2958\" },                                      // 959\n  \"&LeftUpVector;\": { \"codepoints\": [8639], \"characters\": \"\\u21BF\" },                                          // 960\n  \"&LeftVectorBar;\": { \"codepoints\": [10578], \"characters\": \"\\u2952\" },                                        // 961\n  \"&LeftVector;\": { \"codepoints\": [8636], \"characters\": \"\\u21BC\" },                                            // 962\n  \"&lEg;\": { \"codepoints\": [10891], \"characters\": \"\\u2A8B\" },                                                  // 963\n  \"&leg;\": { \"codepoints\": [8922], \"characters\": \"\\u22DA\" },                                                   // 964\n  \"&leq;\": { \"codepoints\": [8804], \"characters\": \"\\u2264\" },                                                   // 965\n  \"&leqq;\": { \"codepoints\": [8806], \"characters\": \"\\u2266\" },                                                  // 966\n  \"&leqslant;\": { \"codepoints\": [10877], \"characters\": \"\\u2A7D\" },                                             // 967\n  \"&lescc;\": { \"codepoints\": [10920], \"characters\": \"\\u2AA8\" },                                                // 968\n  \"&les;\": { \"codepoints\": [10877], \"characters\": \"\\u2A7D\" },                                                  // 969\n  \"&lesdot;\": { \"codepoints\": [10879], \"characters\": \"\\u2A7F\" },                                               // 970\n  \"&lesdoto;\": { \"codepoints\": [10881], \"characters\": \"\\u2A81\" },                                              // 971\n  \"&lesdotor;\": { \"codepoints\": [10883], \"characters\": \"\\u2A83\" },                                             // 972\n  \"&lesg;\": { \"codepoints\": [8922, 65024], \"characters\": \"\\u22DA\\uFE00\" },                                     // 973\n  \"&lesges;\": { \"codepoints\": [10899], \"characters\": \"\\u2A93\" },                                               // 974\n  \"&lessapprox;\": { \"codepoints\": [10885], \"characters\": \"\\u2A85\" },                                           // 975\n  \"&lessdot;\": { \"codepoints\": [8918], \"characters\": \"\\u22D6\" },                                               // 976\n  \"&lesseqgtr;\": { \"codepoints\": [8922], \"characters\": \"\\u22DA\" },                                             // 977\n  \"&lesseqqgtr;\": { \"codepoints\": [10891], \"characters\": \"\\u2A8B\" },                                           // 978\n  \"&LessEqualGreater;\": { \"codepoints\": [8922], \"characters\": \"\\u22DA\" },                                      // 979\n  \"&LessFullEqual;\": { \"codepoints\": [8806], \"characters\": \"\\u2266\" },                                         // 980\n  \"&LessGreater;\": { \"codepoints\": [8822], \"characters\": \"\\u2276\" },                                           // 981\n  \"&lessgtr;\": { \"codepoints\": [8822], \"characters\": \"\\u2276\" },                                               // 982\n  \"&LessLess;\": { \"codepoints\": [10913], \"characters\": \"\\u2AA1\" },                                             // 983\n  \"&lesssim;\": { \"codepoints\": [8818], \"characters\": \"\\u2272\" },                                               // 984\n  \"&LessSlantEqual;\": { \"codepoints\": [10877], \"characters\": \"\\u2A7D\" },                                       // 985\n  \"&LessTilde;\": { \"codepoints\": [8818], \"characters\": \"\\u2272\" },                                             // 986\n  \"&lfisht;\": { \"codepoints\": [10620], \"characters\": \"\\u297C\" },                                               // 987\n  \"&lfloor;\": { \"codepoints\": [8970], \"characters\": \"\\u230A\" },                                                // 988\n  \"&Lfr;\": { \"codepoints\": [120079], \"characters\": \"\\uD835\\uDD0F\" },                                           // 989\n  \"&lfr;\": { \"codepoints\": [120105], \"characters\": \"\\uD835\\uDD29\" },                                           // 990\n  \"&lg;\": { \"codepoints\": [8822], \"characters\": \"\\u2276\" },                                                    // 991\n  \"&lgE;\": { \"codepoints\": [10897], \"characters\": \"\\u2A91\" },                                                  // 992\n  \"&lHar;\": { \"codepoints\": [10594], \"characters\": \"\\u2962\" },                                                 // 993\n  \"&lhard;\": { \"codepoints\": [8637], \"characters\": \"\\u21BD\" },                                                 // 994\n  \"&lharu;\": { \"codepoints\": [8636], \"characters\": \"\\u21BC\" },                                                 // 995\n  \"&lharul;\": { \"codepoints\": [10602], \"characters\": \"\\u296A\" },                                               // 996\n  \"&lhblk;\": { \"codepoints\": [9604], \"characters\": \"\\u2584\" },                                                 // 997\n  \"&LJcy;\": { \"codepoints\": [1033], \"characters\": \"\\u0409\" },                                                  // 998\n  \"&ljcy;\": { \"codepoints\": [1113], \"characters\": \"\\u0459\" },                                                  // 999\n  \"&llarr;\": { \"codepoints\": [8647], \"characters\": \"\\u21C7\" },                                                 // 1000\n  \"&ll;\": { \"codepoints\": [8810], \"characters\": \"\\u226A\" },                                                    // 1001\n  \"&Ll;\": { \"codepoints\": [8920], \"characters\": \"\\u22D8\" },                                                    // 1002\n  \"&llcorner;\": { \"codepoints\": [8990], \"characters\": \"\\u231E\" },                                              // 1003\n  \"&Lleftarrow;\": { \"codepoints\": [8666], \"characters\": \"\\u21DA\" },                                            // 1004\n  \"&llhard;\": { \"codepoints\": [10603], \"characters\": \"\\u296B\" },                                               // 1005\n  \"&lltri;\": { \"codepoints\": [9722], \"characters\": \"\\u25FA\" },                                                 // 1006\n  \"&Lmidot;\": { \"codepoints\": [319], \"characters\": \"\\u013F\" },                                                 // 1007\n  \"&lmidot;\": { \"codepoints\": [320], \"characters\": \"\\u0140\" },                                                 // 1008\n  \"&lmoustache;\": { \"codepoints\": [9136], \"characters\": \"\\u23B0\" },                                            // 1009\n  \"&lmoust;\": { \"codepoints\": [9136], \"characters\": \"\\u23B0\" },                                                // 1010\n  \"&lnap;\": { \"codepoints\": [10889], \"characters\": \"\\u2A89\" },                                                 // 1011\n  \"&lnapprox;\": { \"codepoints\": [10889], \"characters\": \"\\u2A89\" },                                             // 1012\n  \"&lne;\": { \"codepoints\": [10887], \"characters\": \"\\u2A87\" },                                                  // 1013\n  \"&lnE;\": { \"codepoints\": [8808], \"characters\": \"\\u2268\" },                                                   // 1014\n  \"&lneq;\": { \"codepoints\": [10887], \"characters\": \"\\u2A87\" },                                                 // 1015\n  \"&lneqq;\": { \"codepoints\": [8808], \"characters\": \"\\u2268\" },                                                 // 1016\n  \"&lnsim;\": { \"codepoints\": [8934], \"characters\": \"\\u22E6\" },                                                 // 1017\n  \"&loang;\": { \"codepoints\": [10220], \"characters\": \"\\u27EC\" },                                                // 1018\n  \"&loarr;\": { \"codepoints\": [8701], \"characters\": \"\\u21FD\" },                                                 // 1019\n  \"&lobrk;\": { \"codepoints\": [10214], \"characters\": \"\\u27E6\" },                                                // 1020\n  \"&longleftarrow;\": { \"codepoints\": [10229], \"characters\": \"\\u27F5\" },                                        // 1021\n  \"&LongLeftArrow;\": { \"codepoints\": [10229], \"characters\": \"\\u27F5\" },                                        // 1022\n  \"&Longleftarrow;\": { \"codepoints\": [10232], \"characters\": \"\\u27F8\" },                                        // 1023\n  \"&longleftrightarrow;\": { \"codepoints\": [10231], \"characters\": \"\\u27F7\" },                                   // 1024\n  \"&LongLeftRightArrow;\": { \"codepoints\": [10231], \"characters\": \"\\u27F7\" },                                   // 1025\n  \"&Longleftrightarrow;\": { \"codepoints\": [10234], \"characters\": \"\\u27FA\" },                                   // 1026\n  \"&longmapsto;\": { \"codepoints\": [10236], \"characters\": \"\\u27FC\" },                                           // 1027\n  \"&longrightarrow;\": { \"codepoints\": [10230], \"characters\": \"\\u27F6\" },                                       // 1028\n  \"&LongRightArrow;\": { \"codepoints\": [10230], \"characters\": \"\\u27F6\" },                                       // 1029\n  \"&Longrightarrow;\": { \"codepoints\": [10233], \"characters\": \"\\u27F9\" },                                       // 1030\n  \"&looparrowleft;\": { \"codepoints\": [8619], \"characters\": \"\\u21AB\" },                                         // 1031\n  \"&looparrowright;\": { \"codepoints\": [8620], \"characters\": \"\\u21AC\" },                                        // 1032\n  \"&lopar;\": { \"codepoints\": [10629], \"characters\": \"\\u2985\" },                                                // 1033\n  \"&Lopf;\": { \"codepoints\": [120131], \"characters\": \"\\uD835\\uDD43\" },                                          // 1034\n  \"&lopf;\": { \"codepoints\": [120157], \"characters\": \"\\uD835\\uDD5D\" },                                          // 1035\n  \"&loplus;\": { \"codepoints\": [10797], \"characters\": \"\\u2A2D\" },                                               // 1036\n  \"&lotimes;\": { \"codepoints\": [10804], \"characters\": \"\\u2A34\" },                                              // 1037\n  \"&lowast;\": { \"codepoints\": [8727], \"characters\": \"\\u2217\" },                                                // 1038\n  \"&lowbar;\": { \"codepoints\": [95], \"characters\": \"\\u005F\" },                                                  // 1039\n  \"&LowerLeftArrow;\": { \"codepoints\": [8601], \"characters\": \"\\u2199\" },                                        // 1040\n  \"&LowerRightArrow;\": { \"codepoints\": [8600], \"characters\": \"\\u2198\" },                                       // 1041\n  \"&loz;\": { \"codepoints\": [9674], \"characters\": \"\\u25CA\" },                                                   // 1042\n  \"&lozenge;\": { \"codepoints\": [9674], \"characters\": \"\\u25CA\" },                                               // 1043\n  \"&lozf;\": { \"codepoints\": [10731], \"characters\": \"\\u29EB\" },                                                 // 1044\n  \"&lpar;\": { \"codepoints\": [40], \"characters\": \"\\u0028\" },                                                    // 1045\n  \"&lparlt;\": { \"codepoints\": [10643], \"characters\": \"\\u2993\" },                                               // 1046\n  \"&lrarr;\": { \"codepoints\": [8646], \"characters\": \"\\u21C6\" },                                                 // 1047\n  \"&lrcorner;\": { \"codepoints\": [8991], \"characters\": \"\\u231F\" },                                              // 1048\n  \"&lrhar;\": { \"codepoints\": [8651], \"characters\": \"\\u21CB\" },                                                 // 1049\n  \"&lrhard;\": { \"codepoints\": [10605], \"characters\": \"\\u296D\" },                                               // 1050\n  \"&lrm;\": { \"codepoints\": [8206], \"characters\": \"\\u200E\" },                                                   // 1051\n  \"&lrtri;\": { \"codepoints\": [8895], \"characters\": \"\\u22BF\" },                                                 // 1052\n  \"&lsaquo;\": { \"codepoints\": [8249], \"characters\": \"\\u2039\" },                                                // 1053\n  \"&lscr;\": { \"codepoints\": [120001], \"characters\": \"\\uD835\\uDCC1\" },                                          // 1054\n  \"&Lscr;\": { \"codepoints\": [8466], \"characters\": \"\\u2112\" },                                                  // 1055\n  \"&lsh;\": { \"codepoints\": [8624], \"characters\": \"\\u21B0\" },                                                   // 1056\n  \"&Lsh;\": { \"codepoints\": [8624], \"characters\": \"\\u21B0\" },                                                   // 1057\n  \"&lsim;\": { \"codepoints\": [8818], \"characters\": \"\\u2272\" },                                                  // 1058\n  \"&lsime;\": { \"codepoints\": [10893], \"characters\": \"\\u2A8D\" },                                                // 1059\n  \"&lsimg;\": { \"codepoints\": [10895], \"characters\": \"\\u2A8F\" },                                                // 1060\n  \"&lsqb;\": { \"codepoints\": [91], \"characters\": \"\\u005B\" },                                                    // 1061\n  \"&lsquo;\": { \"codepoints\": [8216], \"characters\": \"\\u2018\" },                                                 // 1062\n  \"&lsquor;\": { \"codepoints\": [8218], \"characters\": \"\\u201A\" },                                                // 1063\n  \"&Lstrok;\": { \"codepoints\": [321], \"characters\": \"\\u0141\" },                                                 // 1064\n  \"&lstrok;\": { \"codepoints\": [322], \"characters\": \"\\u0142\" },                                                 // 1065\n  \"&ltcc;\": { \"codepoints\": [10918], \"characters\": \"\\u2AA6\" },                                                 // 1066\n  \"&ltcir;\": { \"codepoints\": [10873], \"characters\": \"\\u2A79\" },                                                // 1067\n  \"&lt;\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },                                                      // 1068\n  \"&lt\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },                                                       // 1069\n  \"&LT;\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },                                                      // 1070\n  \"&LT\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },                                                       // 1071\n  \"&Lt;\": { \"codepoints\": [8810], \"characters\": \"\\u226A\" },                                                    // 1072\n  \"&ltdot;\": { \"codepoints\": [8918], \"characters\": \"\\u22D6\" },                                                 // 1073\n  \"&lthree;\": { \"codepoints\": [8907], \"characters\": \"\\u22CB\" },                                                // 1074\n  \"&ltimes;\": { \"codepoints\": [8905], \"characters\": \"\\u22C9\" },                                                // 1075\n  \"&ltlarr;\": { \"codepoints\": [10614], \"characters\": \"\\u2976\" },                                               // 1076\n  \"&ltquest;\": { \"codepoints\": [10875], \"characters\": \"\\u2A7B\" },                                              // 1077\n  \"&ltri;\": { \"codepoints\": [9667], \"characters\": \"\\u25C3\" },                                                  // 1078\n  \"&ltrie;\": { \"codepoints\": [8884], \"characters\": \"\\u22B4\" },                                                 // 1079\n  \"&ltrif;\": { \"codepoints\": [9666], \"characters\": \"\\u25C2\" },                                                 // 1080\n  \"&ltrPar;\": { \"codepoints\": [10646], \"characters\": \"\\u2996\" },                                               // 1081\n  \"&lurdshar;\": { \"codepoints\": [10570], \"characters\": \"\\u294A\" },                                             // 1082\n  \"&luruhar;\": { \"codepoints\": [10598], \"characters\": \"\\u2966\" },                                              // 1083\n  \"&lvertneqq;\": { \"codepoints\": [8808, 65024], \"characters\": \"\\u2268\\uFE00\" },                                // 1084\n  \"&lvnE;\": { \"codepoints\": [8808, 65024], \"characters\": \"\\u2268\\uFE00\" },                                     // 1085\n  \"&macr;\": { \"codepoints\": [175], \"characters\": \"\\u00AF\" },                                                   // 1086\n  \"&macr\": { \"codepoints\": [175], \"characters\": \"\\u00AF\" },                                                    // 1087\n  \"&male;\": { \"codepoints\": [9794], \"characters\": \"\\u2642\" },                                                  // 1088\n  \"&malt;\": { \"codepoints\": [10016], \"characters\": \"\\u2720\" },                                                 // 1089\n  \"&maltese;\": { \"codepoints\": [10016], \"characters\": \"\\u2720\" },                                              // 1090\n  \"&Map;\": { \"codepoints\": [10501], \"characters\": \"\\u2905\" },                                                  // 1091\n  \"&map;\": { \"codepoints\": [8614], \"characters\": \"\\u21A6\" },                                                   // 1092\n  \"&mapsto;\": { \"codepoints\": [8614], \"characters\": \"\\u21A6\" },                                                // 1093\n  \"&mapstodown;\": { \"codepoints\": [8615], \"characters\": \"\\u21A7\" },                                            // 1094\n  \"&mapstoleft;\": { \"codepoints\": [8612], \"characters\": \"\\u21A4\" },                                            // 1095\n  \"&mapstoup;\": { \"codepoints\": [8613], \"characters\": \"\\u21A5\" },                                              // 1096\n  \"&marker;\": { \"codepoints\": [9646], \"characters\": \"\\u25AE\" },                                                // 1097\n  \"&mcomma;\": { \"codepoints\": [10793], \"characters\": \"\\u2A29\" },                                               // 1098\n  \"&Mcy;\": { \"codepoints\": [1052], \"characters\": \"\\u041C\" },                                                   // 1099\n  \"&mcy;\": { \"codepoints\": [1084], \"characters\": \"\\u043C\" },                                                   // 1100\n  \"&mdash;\": { \"codepoints\": [8212], \"characters\": \"\\u2014\" },                                                 // 1101\n  \"&mDDot;\": { \"codepoints\": [8762], \"characters\": \"\\u223A\" },                                                 // 1102\n  \"&measuredangle;\": { \"codepoints\": [8737], \"characters\": \"\\u2221\" },                                         // 1103\n  \"&MediumSpace;\": { \"codepoints\": [8287], \"characters\": \"\\u205F\" },                                           // 1104\n  \"&Mellintrf;\": { \"codepoints\": [8499], \"characters\": \"\\u2133\" },                                             // 1105\n  \"&Mfr;\": { \"codepoints\": [120080], \"characters\": \"\\uD835\\uDD10\" },                                           // 1106\n  \"&mfr;\": { \"codepoints\": [120106], \"characters\": \"\\uD835\\uDD2A\" },                                           // 1107\n  \"&mho;\": { \"codepoints\": [8487], \"characters\": \"\\u2127\" },                                                   // 1108\n  \"&micro;\": { \"codepoints\": [181], \"characters\": \"\\u00B5\" },                                                  // 1109\n  \"&micro\": { \"codepoints\": [181], \"characters\": \"\\u00B5\" },                                                   // 1110\n  \"&midast;\": { \"codepoints\": [42], \"characters\": \"\\u002A\" },                                                  // 1111\n  \"&midcir;\": { \"codepoints\": [10992], \"characters\": \"\\u2AF0\" },                                               // 1112\n  \"&mid;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },                                                   // 1113\n  \"&middot;\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },                                                 // 1114\n  \"&middot\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },                                                  // 1115\n  \"&minusb;\": { \"codepoints\": [8863], \"characters\": \"\\u229F\" },                                                // 1116\n  \"&minus;\": { \"codepoints\": [8722], \"characters\": \"\\u2212\" },                                                 // 1117\n  \"&minusd;\": { \"codepoints\": [8760], \"characters\": \"\\u2238\" },                                                // 1118\n  \"&minusdu;\": { \"codepoints\": [10794], \"characters\": \"\\u2A2A\" },                                              // 1119\n  \"&MinusPlus;\": { \"codepoints\": [8723], \"characters\": \"\\u2213\" },                                             // 1120\n  \"&mlcp;\": { \"codepoints\": [10971], \"characters\": \"\\u2ADB\" },                                                 // 1121\n  \"&mldr;\": { \"codepoints\": [8230], \"characters\": \"\\u2026\" },                                                  // 1122\n  \"&mnplus;\": { \"codepoints\": [8723], \"characters\": \"\\u2213\" },                                                // 1123\n  \"&models;\": { \"codepoints\": [8871], \"characters\": \"\\u22A7\" },                                                // 1124\n  \"&Mopf;\": { \"codepoints\": [120132], \"characters\": \"\\uD835\\uDD44\" },                                          // 1125\n  \"&mopf;\": { \"codepoints\": [120158], \"characters\": \"\\uD835\\uDD5E\" },                                          // 1126\n  \"&mp;\": { \"codepoints\": [8723], \"characters\": \"\\u2213\" },                                                    // 1127\n  \"&mscr;\": { \"codepoints\": [120002], \"characters\": \"\\uD835\\uDCC2\" },                                          // 1128\n  \"&Mscr;\": { \"codepoints\": [8499], \"characters\": \"\\u2133\" },                                                  // 1129\n  \"&mstpos;\": { \"codepoints\": [8766], \"characters\": \"\\u223E\" },                                                // 1130\n  \"&Mu;\": { \"codepoints\": [924], \"characters\": \"\\u039C\" },                                                     // 1131\n  \"&mu;\": { \"codepoints\": [956], \"characters\": \"\\u03BC\" },                                                     // 1132\n  \"&multimap;\": { \"codepoints\": [8888], \"characters\": \"\\u22B8\" },                                              // 1133\n  \"&mumap;\": { \"codepoints\": [8888], \"characters\": \"\\u22B8\" },                                                 // 1134\n  \"&nabla;\": { \"codepoints\": [8711], \"characters\": \"\\u2207\" },                                                 // 1135\n  \"&Nacute;\": { \"codepoints\": [323], \"characters\": \"\\u0143\" },                                                 // 1136\n  \"&nacute;\": { \"codepoints\": [324], \"characters\": \"\\u0144\" },                                                 // 1137\n  \"&nang;\": { \"codepoints\": [8736, 8402], \"characters\": \"\\u2220\\u20D2\" },                                      // 1138\n  \"&nap;\": { \"codepoints\": [8777], \"characters\": \"\\u2249\" },                                                   // 1139\n  \"&napE;\": { \"codepoints\": [10864, 824], \"characters\": \"\\u2A70\\u0338\" },                                      // 1140\n  \"&napid;\": { \"codepoints\": [8779, 824], \"characters\": \"\\u224B\\u0338\" },                                      // 1141\n  \"&napos;\": { \"codepoints\": [329], \"characters\": \"\\u0149\" },                                                  // 1142\n  \"&napprox;\": { \"codepoints\": [8777], \"characters\": \"\\u2249\" },                                               // 1143\n  \"&natural;\": { \"codepoints\": [9838], \"characters\": \"\\u266E\" },                                               // 1144\n  \"&naturals;\": { \"codepoints\": [8469], \"characters\": \"\\u2115\" },                                              // 1145\n  \"&natur;\": { \"codepoints\": [9838], \"characters\": \"\\u266E\" },                                                 // 1146\n  \"&nbsp;\": { \"codepoints\": [160], \"characters\": \"\\u00A0\" },                                                   // 1147\n  \"&nbsp\": { \"codepoints\": [160], \"characters\": \"\\u00A0\" },                                                    // 1148\n  \"&nbump;\": { \"codepoints\": [8782, 824], \"characters\": \"\\u224E\\u0338\" },                                      // 1149\n  \"&nbumpe;\": { \"codepoints\": [8783, 824], \"characters\": \"\\u224F\\u0338\" },                                     // 1150\n  \"&ncap;\": { \"codepoints\": [10819], \"characters\": \"\\u2A43\" },                                                 // 1151\n  \"&Ncaron;\": { \"codepoints\": [327], \"characters\": \"\\u0147\" },                                                 // 1152\n  \"&ncaron;\": { \"codepoints\": [328], \"characters\": \"\\u0148\" },                                                 // 1153\n  \"&Ncedil;\": { \"codepoints\": [325], \"characters\": \"\\u0145\" },                                                 // 1154\n  \"&ncedil;\": { \"codepoints\": [326], \"characters\": \"\\u0146\" },                                                 // 1155\n  \"&ncong;\": { \"codepoints\": [8775], \"characters\": \"\\u2247\" },                                                 // 1156\n  \"&ncongdot;\": { \"codepoints\": [10861, 824], \"characters\": \"\\u2A6D\\u0338\" },                                  // 1157\n  \"&ncup;\": { \"codepoints\": [10818], \"characters\": \"\\u2A42\" },                                                 // 1158\n  \"&Ncy;\": { \"codepoints\": [1053], \"characters\": \"\\u041D\" },                                                   // 1159\n  \"&ncy;\": { \"codepoints\": [1085], \"characters\": \"\\u043D\" },                                                   // 1160\n  \"&ndash;\": { \"codepoints\": [8211], \"characters\": \"\\u2013\" },                                                 // 1161\n  \"&nearhk;\": { \"codepoints\": [10532], \"characters\": \"\\u2924\" },                                               // 1162\n  \"&nearr;\": { \"codepoints\": [8599], \"characters\": \"\\u2197\" },                                                 // 1163\n  \"&neArr;\": { \"codepoints\": [8663], \"characters\": \"\\u21D7\" },                                                 // 1164\n  \"&nearrow;\": { \"codepoints\": [8599], \"characters\": \"\\u2197\" },                                               // 1165\n  \"&ne;\": { \"codepoints\": [8800], \"characters\": \"\\u2260\" },                                                    // 1166\n  \"&nedot;\": { \"codepoints\": [8784, 824], \"characters\": \"\\u2250\\u0338\" },                                      // 1167\n  \"&NegativeMediumSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },                                   // 1168\n  \"&NegativeThickSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },                                    // 1169\n  \"&NegativeThinSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },                                     // 1170\n  \"&NegativeVeryThinSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },                                 // 1171\n  \"&nequiv;\": { \"codepoints\": [8802], \"characters\": \"\\u2262\" },                                                // 1172\n  \"&nesear;\": { \"codepoints\": [10536], \"characters\": \"\\u2928\" },                                               // 1173\n  \"&nesim;\": { \"codepoints\": [8770, 824], \"characters\": \"\\u2242\\u0338\" },                                      // 1174\n  \"&NestedGreaterGreater;\": { \"codepoints\": [8811], \"characters\": \"\\u226B\" },                                  // 1175\n  \"&NestedLessLess;\": { \"codepoints\": [8810], \"characters\": \"\\u226A\" },                                        // 1176\n  \"&NewLine;\": { \"codepoints\": [10], \"characters\": \"\\u000A\" },                                                 // 1177\n  \"&nexist;\": { \"codepoints\": [8708], \"characters\": \"\\u2204\" },                                                // 1178\n  \"&nexists;\": { \"codepoints\": [8708], \"characters\": \"\\u2204\" },                                               // 1179\n  \"&Nfr;\": { \"codepoints\": [120081], \"characters\": \"\\uD835\\uDD11\" },                                           // 1180\n  \"&nfr;\": { \"codepoints\": [120107], \"characters\": \"\\uD835\\uDD2B\" },                                           // 1181\n  \"&ngE;\": { \"codepoints\": [8807, 824], \"characters\": \"\\u2267\\u0338\" },                                        // 1182\n  \"&nge;\": { \"codepoints\": [8817], \"characters\": \"\\u2271\" },                                                   // 1183\n  \"&ngeq;\": { \"codepoints\": [8817], \"characters\": \"\\u2271\" },                                                  // 1184\n  \"&ngeqq;\": { \"codepoints\": [8807, 824], \"characters\": \"\\u2267\\u0338\" },                                      // 1185\n  \"&ngeqslant;\": { \"codepoints\": [10878, 824], \"characters\": \"\\u2A7E\\u0338\" },                                 // 1186\n  \"&nges;\": { \"codepoints\": [10878, 824], \"characters\": \"\\u2A7E\\u0338\" },                                      // 1187\n  \"&nGg;\": { \"codepoints\": [8921, 824], \"characters\": \"\\u22D9\\u0338\" },                                        // 1188\n  \"&ngsim;\": { \"codepoints\": [8821], \"characters\": \"\\u2275\" },                                                 // 1189\n  \"&nGt;\": { \"codepoints\": [8811, 8402], \"characters\": \"\\u226B\\u20D2\" },                                       // 1190\n  \"&ngt;\": { \"codepoints\": [8815], \"characters\": \"\\u226F\" },                                                   // 1191\n  \"&ngtr;\": { \"codepoints\": [8815], \"characters\": \"\\u226F\" },                                                  // 1192\n  \"&nGtv;\": { \"codepoints\": [8811, 824], \"characters\": \"\\u226B\\u0338\" },                                       // 1193\n  \"&nharr;\": { \"codepoints\": [8622], \"characters\": \"\\u21AE\" },                                                 // 1194\n  \"&nhArr;\": { \"codepoints\": [8654], \"characters\": \"\\u21CE\" },                                                 // 1195\n  \"&nhpar;\": { \"codepoints\": [10994], \"characters\": \"\\u2AF2\" },                                                // 1196\n  \"&ni;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },                                                    // 1197\n  \"&nis;\": { \"codepoints\": [8956], \"characters\": \"\\u22FC\" },                                                   // 1198\n  \"&nisd;\": { \"codepoints\": [8954], \"characters\": \"\\u22FA\" },                                                  // 1199\n  \"&niv;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },                                                   // 1200\n  \"&NJcy;\": { \"codepoints\": [1034], \"characters\": \"\\u040A\" },                                                  // 1201\n  \"&njcy;\": { \"codepoints\": [1114], \"characters\": \"\\u045A\" },                                                  // 1202\n  \"&nlarr;\": { \"codepoints\": [8602], \"characters\": \"\\u219A\" },                                                 // 1203\n  \"&nlArr;\": { \"codepoints\": [8653], \"characters\": \"\\u21CD\" },                                                 // 1204\n  \"&nldr;\": { \"codepoints\": [8229], \"characters\": \"\\u2025\" },                                                  // 1205\n  \"&nlE;\": { \"codepoints\": [8806, 824], \"characters\": \"\\u2266\\u0338\" },                                        // 1206\n  \"&nle;\": { \"codepoints\": [8816], \"characters\": \"\\u2270\" },                                                   // 1207\n  \"&nleftarrow;\": { \"codepoints\": [8602], \"characters\": \"\\u219A\" },                                            // 1208\n  \"&nLeftarrow;\": { \"codepoints\": [8653], \"characters\": \"\\u21CD\" },                                            // 1209\n  \"&nleftrightarrow;\": { \"codepoints\": [8622], \"characters\": \"\\u21AE\" },                                       // 1210\n  \"&nLeftrightarrow;\": { \"codepoints\": [8654], \"characters\": \"\\u21CE\" },                                       // 1211\n  \"&nleq;\": { \"codepoints\": [8816], \"characters\": \"\\u2270\" },                                                  // 1212\n  \"&nleqq;\": { \"codepoints\": [8806, 824], \"characters\": \"\\u2266\\u0338\" },                                      // 1213\n  \"&nleqslant;\": { \"codepoints\": [10877, 824], \"characters\": \"\\u2A7D\\u0338\" },                                 // 1214\n  \"&nles;\": { \"codepoints\": [10877, 824], \"characters\": \"\\u2A7D\\u0338\" },                                      // 1215\n  \"&nless;\": { \"codepoints\": [8814], \"characters\": \"\\u226E\" },                                                 // 1216\n  \"&nLl;\": { \"codepoints\": [8920, 824], \"characters\": \"\\u22D8\\u0338\" },                                        // 1217\n  \"&nlsim;\": { \"codepoints\": [8820], \"characters\": \"\\u2274\" },                                                 // 1218\n  \"&nLt;\": { \"codepoints\": [8810, 8402], \"characters\": \"\\u226A\\u20D2\" },                                       // 1219\n  \"&nlt;\": { \"codepoints\": [8814], \"characters\": \"\\u226E\" },                                                   // 1220\n  \"&nltri;\": { \"codepoints\": [8938], \"characters\": \"\\u22EA\" },                                                 // 1221\n  \"&nltrie;\": { \"codepoints\": [8940], \"characters\": \"\\u22EC\" },                                                // 1222\n  \"&nLtv;\": { \"codepoints\": [8810, 824], \"characters\": \"\\u226A\\u0338\" },                                       // 1223\n  \"&nmid;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },                                                  // 1224\n  \"&NoBreak;\": { \"codepoints\": [8288], \"characters\": \"\\u2060\" },                                               // 1225\n  \"&NonBreakingSpace;\": { \"codepoints\": [160], \"characters\": \"\\u00A0\" },                                       // 1226\n  \"&nopf;\": { \"codepoints\": [120159], \"characters\": \"\\uD835\\uDD5F\" },                                          // 1227\n  \"&Nopf;\": { \"codepoints\": [8469], \"characters\": \"\\u2115\" },                                                  // 1228\n  \"&Not;\": { \"codepoints\": [10988], \"characters\": \"\\u2AEC\" },                                                  // 1229\n  \"&not;\": { \"codepoints\": [172], \"characters\": \"\\u00AC\" },                                                    // 1230\n  \"&not\": { \"codepoints\": [172], \"characters\": \"\\u00AC\" },                                                     // 1231\n  \"&NotCongruent;\": { \"codepoints\": [8802], \"characters\": \"\\u2262\" },                                          // 1232\n  \"&NotCupCap;\": { \"codepoints\": [8813], \"characters\": \"\\u226D\" },                                             // 1233\n  \"&NotDoubleVerticalBar;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },                                  // 1234\n  \"&NotElement;\": { \"codepoints\": [8713], \"characters\": \"\\u2209\" },                                            // 1235\n  \"&NotEqual;\": { \"codepoints\": [8800], \"characters\": \"\\u2260\" },                                              // 1236\n  \"&NotEqualTilde;\": { \"codepoints\": [8770, 824], \"characters\": \"\\u2242\\u0338\" },                              // 1237\n  \"&NotExists;\": { \"codepoints\": [8708], \"characters\": \"\\u2204\" },                                             // 1238\n  \"&NotGreater;\": { \"codepoints\": [8815], \"characters\": \"\\u226F\" },                                            // 1239\n  \"&NotGreaterEqual;\": { \"codepoints\": [8817], \"characters\": \"\\u2271\" },                                       // 1240\n  \"&NotGreaterFullEqual;\": { \"codepoints\": [8807, 824], \"characters\": \"\\u2267\\u0338\" },                        // 1241\n  \"&NotGreaterGreater;\": { \"codepoints\": [8811, 824], \"characters\": \"\\u226B\\u0338\" },                          // 1242\n  \"&NotGreaterLess;\": { \"codepoints\": [8825], \"characters\": \"\\u2279\" },                                        // 1243\n  \"&NotGreaterSlantEqual;\": { \"codepoints\": [10878, 824], \"characters\": \"\\u2A7E\\u0338\" },                      // 1244\n  \"&NotGreaterTilde;\": { \"codepoints\": [8821], \"characters\": \"\\u2275\" },                                       // 1245\n  \"&NotHumpDownHump;\": { \"codepoints\": [8782, 824], \"characters\": \"\\u224E\\u0338\" },                            // 1246\n  \"&NotHumpEqual;\": { \"codepoints\": [8783, 824], \"characters\": \"\\u224F\\u0338\" },                               // 1247\n  \"&notin;\": { \"codepoints\": [8713], \"characters\": \"\\u2209\" },                                                 // 1248\n  \"&notindot;\": { \"codepoints\": [8949, 824], \"characters\": \"\\u22F5\\u0338\" },                                   // 1249\n  \"&notinE;\": { \"codepoints\": [8953, 824], \"characters\": \"\\u22F9\\u0338\" },                                     // 1250\n  \"&notinva;\": { \"codepoints\": [8713], \"characters\": \"\\u2209\" },                                               // 1251\n  \"&notinvb;\": { \"codepoints\": [8951], \"characters\": \"\\u22F7\" },                                               // 1252\n  \"&notinvc;\": { \"codepoints\": [8950], \"characters\": \"\\u22F6\" },                                               // 1253\n  \"&NotLeftTriangleBar;\": { \"codepoints\": [10703, 824], \"characters\": \"\\u29CF\\u0338\" },                        // 1254\n  \"&NotLeftTriangle;\": { \"codepoints\": [8938], \"characters\": \"\\u22EA\" },                                       // 1255\n  \"&NotLeftTriangleEqual;\": { \"codepoints\": [8940], \"characters\": \"\\u22EC\" },                                  // 1256\n  \"&NotLess;\": { \"codepoints\": [8814], \"characters\": \"\\u226E\" },                                               // 1257\n  \"&NotLessEqual;\": { \"codepoints\": [8816], \"characters\": \"\\u2270\" },                                          // 1258\n  \"&NotLessGreater;\": { \"codepoints\": [8824], \"characters\": \"\\u2278\" },                                        // 1259\n  \"&NotLessLess;\": { \"codepoints\": [8810, 824], \"characters\": \"\\u226A\\u0338\" },                                // 1260\n  \"&NotLessSlantEqual;\": { \"codepoints\": [10877, 824], \"characters\": \"\\u2A7D\\u0338\" },                         // 1261\n  \"&NotLessTilde;\": { \"codepoints\": [8820], \"characters\": \"\\u2274\" },                                          // 1262\n  \"&NotNestedGreaterGreater;\": { \"codepoints\": [10914, 824], \"characters\": \"\\u2AA2\\u0338\" },                   // 1263\n  \"&NotNestedLessLess;\": { \"codepoints\": [10913, 824], \"characters\": \"\\u2AA1\\u0338\" },                         // 1264\n  \"&notni;\": { \"codepoints\": [8716], \"characters\": \"\\u220C\" },                                                 // 1265\n  \"&notniva;\": { \"codepoints\": [8716], \"characters\": \"\\u220C\" },                                               // 1266\n  \"&notnivb;\": { \"codepoints\": [8958], \"characters\": \"\\u22FE\" },                                               // 1267\n  \"&notnivc;\": { \"codepoints\": [8957], \"characters\": \"\\u22FD\" },                                               // 1268\n  \"&NotPrecedes;\": { \"codepoints\": [8832], \"characters\": \"\\u2280\" },                                           // 1269\n  \"&NotPrecedesEqual;\": { \"codepoints\": [10927, 824], \"characters\": \"\\u2AAF\\u0338\" },                          // 1270\n  \"&NotPrecedesSlantEqual;\": { \"codepoints\": [8928], \"characters\": \"\\u22E0\" },                                 // 1271\n  \"&NotReverseElement;\": { \"codepoints\": [8716], \"characters\": \"\\u220C\" },                                     // 1272\n  \"&NotRightTriangleBar;\": { \"codepoints\": [10704, 824], \"characters\": \"\\u29D0\\u0338\" },                       // 1273\n  \"&NotRightTriangle;\": { \"codepoints\": [8939], \"characters\": \"\\u22EB\" },                                      // 1274\n  \"&NotRightTriangleEqual;\": { \"codepoints\": [8941], \"characters\": \"\\u22ED\" },                                 // 1275\n  \"&NotSquareSubset;\": { \"codepoints\": [8847, 824], \"characters\": \"\\u228F\\u0338\" },                            // 1276\n  \"&NotSquareSubsetEqual;\": { \"codepoints\": [8930], \"characters\": \"\\u22E2\" },                                  // 1277\n  \"&NotSquareSuperset;\": { \"codepoints\": [8848, 824], \"characters\": \"\\u2290\\u0338\" },                          // 1278\n  \"&NotSquareSupersetEqual;\": { \"codepoints\": [8931], \"characters\": \"\\u22E3\" },                                // 1279\n  \"&NotSubset;\": { \"codepoints\": [8834, 8402], \"characters\": \"\\u2282\\u20D2\" },                                 // 1280\n  \"&NotSubsetEqual;\": { \"codepoints\": [8840], \"characters\": \"\\u2288\" },                                        // 1281\n  \"&NotSucceeds;\": { \"codepoints\": [8833], \"characters\": \"\\u2281\" },                                           // 1282\n  \"&NotSucceedsEqual;\": { \"codepoints\": [10928, 824], \"characters\": \"\\u2AB0\\u0338\" },                          // 1283\n  \"&NotSucceedsSlantEqual;\": { \"codepoints\": [8929], \"characters\": \"\\u22E1\" },                                 // 1284\n  \"&NotSucceedsTilde;\": { \"codepoints\": [8831, 824], \"characters\": \"\\u227F\\u0338\" },                           // 1285\n  \"&NotSuperset;\": { \"codepoints\": [8835, 8402], \"characters\": \"\\u2283\\u20D2\" },                               // 1286\n  \"&NotSupersetEqual;\": { \"codepoints\": [8841], \"characters\": \"\\u2289\" },                                      // 1287\n  \"&NotTilde;\": { \"codepoints\": [8769], \"characters\": \"\\u2241\" },                                              // 1288\n  \"&NotTildeEqual;\": { \"codepoints\": [8772], \"characters\": \"\\u2244\" },                                         // 1289\n  \"&NotTildeFullEqual;\": { \"codepoints\": [8775], \"characters\": \"\\u2247\" },                                     // 1290\n  \"&NotTildeTilde;\": { \"codepoints\": [8777], \"characters\": \"\\u2249\" },                                         // 1291\n  \"&NotVerticalBar;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },                                        // 1292\n  \"&nparallel;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },                                             // 1293\n  \"&npar;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },                                                  // 1294\n  \"&nparsl;\": { \"codepoints\": [11005, 8421], \"characters\": \"\\u2AFD\\u20E5\" },                                   // 1295\n  \"&npart;\": { \"codepoints\": [8706, 824], \"characters\": \"\\u2202\\u0338\" },                                      // 1296\n  \"&npolint;\": { \"codepoints\": [10772], \"characters\": \"\\u2A14\" },                                              // 1297\n  \"&npr;\": { \"codepoints\": [8832], \"characters\": \"\\u2280\" },                                                   // 1298\n  \"&nprcue;\": { \"codepoints\": [8928], \"characters\": \"\\u22E0\" },                                                // 1299\n  \"&nprec;\": { \"codepoints\": [8832], \"characters\": \"\\u2280\" },                                                 // 1300\n  \"&npreceq;\": { \"codepoints\": [10927, 824], \"characters\": \"\\u2AAF\\u0338\" },                                   // 1301\n  \"&npre;\": { \"codepoints\": [10927, 824], \"characters\": \"\\u2AAF\\u0338\" },                                      // 1302\n  \"&nrarrc;\": { \"codepoints\": [10547, 824], \"characters\": \"\\u2933\\u0338\" },                                    // 1303\n  \"&nrarr;\": { \"codepoints\": [8603], \"characters\": \"\\u219B\" },                                                 // 1304\n  \"&nrArr;\": { \"codepoints\": [8655], \"characters\": \"\\u21CF\" },                                                 // 1305\n  \"&nrarrw;\": { \"codepoints\": [8605, 824], \"characters\": \"\\u219D\\u0338\" },                                     // 1306\n  \"&nrightarrow;\": { \"codepoints\": [8603], \"characters\": \"\\u219B\" },                                           // 1307\n  \"&nRightarrow;\": { \"codepoints\": [8655], \"characters\": \"\\u21CF\" },                                           // 1308\n  \"&nrtri;\": { \"codepoints\": [8939], \"characters\": \"\\u22EB\" },                                                 // 1309\n  \"&nrtrie;\": { \"codepoints\": [8941], \"characters\": \"\\u22ED\" },                                                // 1310\n  \"&nsc;\": { \"codepoints\": [8833], \"characters\": \"\\u2281\" },                                                   // 1311\n  \"&nsccue;\": { \"codepoints\": [8929], \"characters\": \"\\u22E1\" },                                                // 1312\n  \"&nsce;\": { \"codepoints\": [10928, 824], \"characters\": \"\\u2AB0\\u0338\" },                                      // 1313\n  \"&Nscr;\": { \"codepoints\": [119977], \"characters\": \"\\uD835\\uDCA9\" },                                          // 1314\n  \"&nscr;\": { \"codepoints\": [120003], \"characters\": \"\\uD835\\uDCC3\" },                                          // 1315\n  \"&nshortmid;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },                                             // 1316\n  \"&nshortparallel;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },                                        // 1317\n  \"&nsim;\": { \"codepoints\": [8769], \"characters\": \"\\u2241\" },                                                  // 1318\n  \"&nsime;\": { \"codepoints\": [8772], \"characters\": \"\\u2244\" },                                                 // 1319\n  \"&nsimeq;\": { \"codepoints\": [8772], \"characters\": \"\\u2244\" },                                                // 1320\n  \"&nsmid;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },                                                 // 1321\n  \"&nspar;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },                                                 // 1322\n  \"&nsqsube;\": { \"codepoints\": [8930], \"characters\": \"\\u22E2\" },                                               // 1323\n  \"&nsqsupe;\": { \"codepoints\": [8931], \"characters\": \"\\u22E3\" },                                               // 1324\n  \"&nsub;\": { \"codepoints\": [8836], \"characters\": \"\\u2284\" },                                                  // 1325\n  \"&nsubE;\": { \"codepoints\": [10949, 824], \"characters\": \"\\u2AC5\\u0338\" },                                     // 1326\n  \"&nsube;\": { \"codepoints\": [8840], \"characters\": \"\\u2288\" },                                                 // 1327\n  \"&nsubset;\": { \"codepoints\": [8834, 8402], \"characters\": \"\\u2282\\u20D2\" },                                   // 1328\n  \"&nsubseteq;\": { \"codepoints\": [8840], \"characters\": \"\\u2288\" },                                             // 1329\n  \"&nsubseteqq;\": { \"codepoints\": [10949, 824], \"characters\": \"\\u2AC5\\u0338\" },                                // 1330\n  \"&nsucc;\": { \"codepoints\": [8833], \"characters\": \"\\u2281\" },                                                 // 1331\n  \"&nsucceq;\": { \"codepoints\": [10928, 824], \"characters\": \"\\u2AB0\\u0338\" },                                   // 1332\n  \"&nsup;\": { \"codepoints\": [8837], \"characters\": \"\\u2285\" },                                                  // 1333\n  \"&nsupE;\": { \"codepoints\": [10950, 824], \"characters\": \"\\u2AC6\\u0338\" },                                     // 1334\n  \"&nsupe;\": { \"codepoints\": [8841], \"characters\": \"\\u2289\" },                                                 // 1335\n  \"&nsupset;\": { \"codepoints\": [8835, 8402], \"characters\": \"\\u2283\\u20D2\" },                                   // 1336\n  \"&nsupseteq;\": { \"codepoints\": [8841], \"characters\": \"\\u2289\" },                                             // 1337\n  \"&nsupseteqq;\": { \"codepoints\": [10950, 824], \"characters\": \"\\u2AC6\\u0338\" },                                // 1338\n  \"&ntgl;\": { \"codepoints\": [8825], \"characters\": \"\\u2279\" },                                                  // 1339\n  \"&Ntilde;\": { \"codepoints\": [209], \"characters\": \"\\u00D1\" },                                                 // 1340\n  \"&Ntilde\": { \"codepoints\": [209], \"characters\": \"\\u00D1\" },                                                  // 1341\n  \"&ntilde;\": { \"codepoints\": [241], \"characters\": \"\\u00F1\" },                                                 // 1342\n  \"&ntilde\": { \"codepoints\": [241], \"characters\": \"\\u00F1\" },                                                  // 1343\n  \"&ntlg;\": { \"codepoints\": [8824], \"characters\": \"\\u2278\" },                                                  // 1344\n  \"&ntriangleleft;\": { \"codepoints\": [8938], \"characters\": \"\\u22EA\" },                                         // 1345\n  \"&ntrianglelefteq;\": { \"codepoints\": [8940], \"characters\": \"\\u22EC\" },                                       // 1346\n  \"&ntriangleright;\": { \"codepoints\": [8939], \"characters\": \"\\u22EB\" },                                        // 1347\n  \"&ntrianglerighteq;\": { \"codepoints\": [8941], \"characters\": \"\\u22ED\" },                                      // 1348\n  \"&Nu;\": { \"codepoints\": [925], \"characters\": \"\\u039D\" },                                                     // 1349\n  \"&nu;\": { \"codepoints\": [957], \"characters\": \"\\u03BD\" },                                                     // 1350\n  \"&num;\": { \"codepoints\": [35], \"characters\": \"\\u0023\" },                                                     // 1351\n  \"&numero;\": { \"codepoints\": [8470], \"characters\": \"\\u2116\" },                                                // 1352\n  \"&numsp;\": { \"codepoints\": [8199], \"characters\": \"\\u2007\" },                                                 // 1353\n  \"&nvap;\": { \"codepoints\": [8781, 8402], \"characters\": \"\\u224D\\u20D2\" },                                      // 1354\n  \"&nvdash;\": { \"codepoints\": [8876], \"characters\": \"\\u22AC\" },                                                // 1355\n  \"&nvDash;\": { \"codepoints\": [8877], \"characters\": \"\\u22AD\" },                                                // 1356\n  \"&nVdash;\": { \"codepoints\": [8878], \"characters\": \"\\u22AE\" },                                                // 1357\n  \"&nVDash;\": { \"codepoints\": [8879], \"characters\": \"\\u22AF\" },                                                // 1358\n  \"&nvge;\": { \"codepoints\": [8805, 8402], \"characters\": \"\\u2265\\u20D2\" },                                      // 1359\n  \"&nvgt;\": { \"codepoints\": [62, 8402], \"characters\": \"\\u003E\\u20D2\" },                                        // 1360\n  \"&nvHarr;\": { \"codepoints\": [10500], \"characters\": \"\\u2904\" },                                               // 1361\n  \"&nvinfin;\": { \"codepoints\": [10718], \"characters\": \"\\u29DE\" },                                              // 1362\n  \"&nvlArr;\": { \"codepoints\": [10498], \"characters\": \"\\u2902\" },                                               // 1363\n  \"&nvle;\": { \"codepoints\": [8804, 8402], \"characters\": \"\\u2264\\u20D2\" },                                      // 1364\n  \"&nvlt;\": { \"codepoints\": [60, 8402], \"characters\": \"\\u003C\\u20D2\" },                                        // 1365\n  \"&nvltrie;\": { \"codepoints\": [8884, 8402], \"characters\": \"\\u22B4\\u20D2\" },                                   // 1366\n  \"&nvrArr;\": { \"codepoints\": [10499], \"characters\": \"\\u2903\" },                                               // 1367\n  \"&nvrtrie;\": { \"codepoints\": [8885, 8402], \"characters\": \"\\u22B5\\u20D2\" },                                   // 1368\n  \"&nvsim;\": { \"codepoints\": [8764, 8402], \"characters\": \"\\u223C\\u20D2\" },                                     // 1369\n  \"&nwarhk;\": { \"codepoints\": [10531], \"characters\": \"\\u2923\" },                                               // 1370\n  \"&nwarr;\": { \"codepoints\": [8598], \"characters\": \"\\u2196\" },                                                 // 1371\n  \"&nwArr;\": { \"codepoints\": [8662], \"characters\": \"\\u21D6\" },                                                 // 1372\n  \"&nwarrow;\": { \"codepoints\": [8598], \"characters\": \"\\u2196\" },                                               // 1373\n  \"&nwnear;\": { \"codepoints\": [10535], \"characters\": \"\\u2927\" },                                               // 1374\n  \"&Oacute;\": { \"codepoints\": [211], \"characters\": \"\\u00D3\" },                                                 // 1375\n  \"&Oacute\": { \"codepoints\": [211], \"characters\": \"\\u00D3\" },                                                  // 1376\n  \"&oacute;\": { \"codepoints\": [243], \"characters\": \"\\u00F3\" },                                                 // 1377\n  \"&oacute\": { \"codepoints\": [243], \"characters\": \"\\u00F3\" },                                                  // 1378\n  \"&oast;\": { \"codepoints\": [8859], \"characters\": \"\\u229B\" },                                                  // 1379\n  \"&Ocirc;\": { \"codepoints\": [212], \"characters\": \"\\u00D4\" },                                                  // 1380\n  \"&Ocirc\": { \"codepoints\": [212], \"characters\": \"\\u00D4\" },                                                   // 1381\n  \"&ocirc;\": { \"codepoints\": [244], \"characters\": \"\\u00F4\" },                                                  // 1382\n  \"&ocirc\": { \"codepoints\": [244], \"characters\": \"\\u00F4\" },                                                   // 1383\n  \"&ocir;\": { \"codepoints\": [8858], \"characters\": \"\\u229A\" },                                                  // 1384\n  \"&Ocy;\": { \"codepoints\": [1054], \"characters\": \"\\u041E\" },                                                   // 1385\n  \"&ocy;\": { \"codepoints\": [1086], \"characters\": \"\\u043E\" },                                                   // 1386\n  \"&odash;\": { \"codepoints\": [8861], \"characters\": \"\\u229D\" },                                                 // 1387\n  \"&Odblac;\": { \"codepoints\": [336], \"characters\": \"\\u0150\" },                                                 // 1388\n  \"&odblac;\": { \"codepoints\": [337], \"characters\": \"\\u0151\" },                                                 // 1389\n  \"&odiv;\": { \"codepoints\": [10808], \"characters\": \"\\u2A38\" },                                                 // 1390\n  \"&odot;\": { \"codepoints\": [8857], \"characters\": \"\\u2299\" },                                                  // 1391\n  \"&odsold;\": { \"codepoints\": [10684], \"characters\": \"\\u29BC\" },                                               // 1392\n  \"&OElig;\": { \"codepoints\": [338], \"characters\": \"\\u0152\" },                                                  // 1393\n  \"&oelig;\": { \"codepoints\": [339], \"characters\": \"\\u0153\" },                                                  // 1394\n  \"&ofcir;\": { \"codepoints\": [10687], \"characters\": \"\\u29BF\" },                                                // 1395\n  \"&Ofr;\": { \"codepoints\": [120082], \"characters\": \"\\uD835\\uDD12\" },                                           // 1396\n  \"&ofr;\": { \"codepoints\": [120108], \"characters\": \"\\uD835\\uDD2C\" },                                           // 1397\n  \"&ogon;\": { \"codepoints\": [731], \"characters\": \"\\u02DB\" },                                                   // 1398\n  \"&Ograve;\": { \"codepoints\": [210], \"characters\": \"\\u00D2\" },                                                 // 1399\n  \"&Ograve\": { \"codepoints\": [210], \"characters\": \"\\u00D2\" },                                                  // 1400\n  \"&ograve;\": { \"codepoints\": [242], \"characters\": \"\\u00F2\" },                                                 // 1401\n  \"&ograve\": { \"codepoints\": [242], \"characters\": \"\\u00F2\" },                                                  // 1402\n  \"&ogt;\": { \"codepoints\": [10689], \"characters\": \"\\u29C1\" },                                                  // 1403\n  \"&ohbar;\": { \"codepoints\": [10677], \"characters\": \"\\u29B5\" },                                                // 1404\n  \"&ohm;\": { \"codepoints\": [937], \"characters\": \"\\u03A9\" },                                                    // 1405\n  \"&oint;\": { \"codepoints\": [8750], \"characters\": \"\\u222E\" },                                                  // 1406\n  \"&olarr;\": { \"codepoints\": [8634], \"characters\": \"\\u21BA\" },                                                 // 1407\n  \"&olcir;\": { \"codepoints\": [10686], \"characters\": \"\\u29BE\" },                                                // 1408\n  \"&olcross;\": { \"codepoints\": [10683], \"characters\": \"\\u29BB\" },                                              // 1409\n  \"&oline;\": { \"codepoints\": [8254], \"characters\": \"\\u203E\" },                                                 // 1410\n  \"&olt;\": { \"codepoints\": [10688], \"characters\": \"\\u29C0\" },                                                  // 1411\n  \"&Omacr;\": { \"codepoints\": [332], \"characters\": \"\\u014C\" },                                                  // 1412\n  \"&omacr;\": { \"codepoints\": [333], \"characters\": \"\\u014D\" },                                                  // 1413\n  \"&Omega;\": { \"codepoints\": [937], \"characters\": \"\\u03A9\" },                                                  // 1414\n  \"&omega;\": { \"codepoints\": [969], \"characters\": \"\\u03C9\" },                                                  // 1415\n  \"&Omicron;\": { \"codepoints\": [927], \"characters\": \"\\u039F\" },                                                // 1416\n  \"&omicron;\": { \"codepoints\": [959], \"characters\": \"\\u03BF\" },                                                // 1417\n  \"&omid;\": { \"codepoints\": [10678], \"characters\": \"\\u29B6\" },                                                 // 1418\n  \"&ominus;\": { \"codepoints\": [8854], \"characters\": \"\\u2296\" },                                                // 1419\n  \"&Oopf;\": { \"codepoints\": [120134], \"characters\": \"\\uD835\\uDD46\" },                                          // 1420\n  \"&oopf;\": { \"codepoints\": [120160], \"characters\": \"\\uD835\\uDD60\" },                                          // 1421\n  \"&opar;\": { \"codepoints\": [10679], \"characters\": \"\\u29B7\" },                                                 // 1422\n  \"&OpenCurlyDoubleQuote;\": { \"codepoints\": [8220], \"characters\": \"\\u201C\" },                                  // 1423\n  \"&OpenCurlyQuote;\": { \"codepoints\": [8216], \"characters\": \"\\u2018\" },                                        // 1424\n  \"&operp;\": { \"codepoints\": [10681], \"characters\": \"\\u29B9\" },                                                // 1425\n  \"&oplus;\": { \"codepoints\": [8853], \"characters\": \"\\u2295\" },                                                 // 1426\n  \"&orarr;\": { \"codepoints\": [8635], \"characters\": \"\\u21BB\" },                                                 // 1427\n  \"&Or;\": { \"codepoints\": [10836], \"characters\": \"\\u2A54\" },                                                   // 1428\n  \"&or;\": { \"codepoints\": [8744], \"characters\": \"\\u2228\" },                                                    // 1429\n  \"&ord;\": { \"codepoints\": [10845], \"characters\": \"\\u2A5D\" },                                                  // 1430\n  \"&order;\": { \"codepoints\": [8500], \"characters\": \"\\u2134\" },                                                 // 1431\n  \"&orderof;\": { \"codepoints\": [8500], \"characters\": \"\\u2134\" },                                               // 1432\n  \"&ordf;\": { \"codepoints\": [170], \"characters\": \"\\u00AA\" },                                                   // 1433\n  \"&ordf\": { \"codepoints\": [170], \"characters\": \"\\u00AA\" },                                                    // 1434\n  \"&ordm;\": { \"codepoints\": [186], \"characters\": \"\\u00BA\" },                                                   // 1435\n  \"&ordm\": { \"codepoints\": [186], \"characters\": \"\\u00BA\" },                                                    // 1436\n  \"&origof;\": { \"codepoints\": [8886], \"characters\": \"\\u22B6\" },                                                // 1437\n  \"&oror;\": { \"codepoints\": [10838], \"characters\": \"\\u2A56\" },                                                 // 1438\n  \"&orslope;\": { \"codepoints\": [10839], \"characters\": \"\\u2A57\" },                                              // 1439\n  \"&orv;\": { \"codepoints\": [10843], \"characters\": \"\\u2A5B\" },                                                  // 1440\n  \"&oS;\": { \"codepoints\": [9416], \"characters\": \"\\u24C8\" },                                                    // 1441\n  \"&Oscr;\": { \"codepoints\": [119978], \"characters\": \"\\uD835\\uDCAA\" },                                          // 1442\n  \"&oscr;\": { \"codepoints\": [8500], \"characters\": \"\\u2134\" },                                                  // 1443\n  \"&Oslash;\": { \"codepoints\": [216], \"characters\": \"\\u00D8\" },                                                 // 1444\n  \"&Oslash\": { \"codepoints\": [216], \"characters\": \"\\u00D8\" },                                                  // 1445\n  \"&oslash;\": { \"codepoints\": [248], \"characters\": \"\\u00F8\" },                                                 // 1446\n  \"&oslash\": { \"codepoints\": [248], \"characters\": \"\\u00F8\" },                                                  // 1447\n  \"&osol;\": { \"codepoints\": [8856], \"characters\": \"\\u2298\" },                                                  // 1448\n  \"&Otilde;\": { \"codepoints\": [213], \"characters\": \"\\u00D5\" },                                                 // 1449\n  \"&Otilde\": { \"codepoints\": [213], \"characters\": \"\\u00D5\" },                                                  // 1450\n  \"&otilde;\": { \"codepoints\": [245], \"characters\": \"\\u00F5\" },                                                 // 1451\n  \"&otilde\": { \"codepoints\": [245], \"characters\": \"\\u00F5\" },                                                  // 1452\n  \"&otimesas;\": { \"codepoints\": [10806], \"characters\": \"\\u2A36\" },                                             // 1453\n  \"&Otimes;\": { \"codepoints\": [10807], \"characters\": \"\\u2A37\" },                                               // 1454\n  \"&otimes;\": { \"codepoints\": [8855], \"characters\": \"\\u2297\" },                                                // 1455\n  \"&Ouml;\": { \"codepoints\": [214], \"characters\": \"\\u00D6\" },                                                   // 1456\n  \"&Ouml\": { \"codepoints\": [214], \"characters\": \"\\u00D6\" },                                                    // 1457\n  \"&ouml;\": { \"codepoints\": [246], \"characters\": \"\\u00F6\" },                                                   // 1458\n  \"&ouml\": { \"codepoints\": [246], \"characters\": \"\\u00F6\" },                                                    // 1459\n  \"&ovbar;\": { \"codepoints\": [9021], \"characters\": \"\\u233D\" },                                                 // 1460\n  \"&OverBar;\": { \"codepoints\": [8254], \"characters\": \"\\u203E\" },                                               // 1461\n  \"&OverBrace;\": { \"codepoints\": [9182], \"characters\": \"\\u23DE\" },                                             // 1462\n  \"&OverBracket;\": { \"codepoints\": [9140], \"characters\": \"\\u23B4\" },                                           // 1463\n  \"&OverParenthesis;\": { \"codepoints\": [9180], \"characters\": \"\\u23DC\" },                                       // 1464\n  \"&para;\": { \"codepoints\": [182], \"characters\": \"\\u00B6\" },                                                   // 1465\n  \"&para\": { \"codepoints\": [182], \"characters\": \"\\u00B6\" },                                                    // 1466\n  \"&parallel;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },                                              // 1467\n  \"&par;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },                                                   // 1468\n  \"&parsim;\": { \"codepoints\": [10995], \"characters\": \"\\u2AF3\" },                                               // 1469\n  \"&parsl;\": { \"codepoints\": [11005], \"characters\": \"\\u2AFD\" },                                                // 1470\n  \"&part;\": { \"codepoints\": [8706], \"characters\": \"\\u2202\" },                                                  // 1471\n  \"&PartialD;\": { \"codepoints\": [8706], \"characters\": \"\\u2202\" },                                              // 1472\n  \"&Pcy;\": { \"codepoints\": [1055], \"characters\": \"\\u041F\" },                                                   // 1473\n  \"&pcy;\": { \"codepoints\": [1087], \"characters\": \"\\u043F\" },                                                   // 1474\n  \"&percnt;\": { \"codepoints\": [37], \"characters\": \"\\u0025\" },                                                  // 1475\n  \"&period;\": { \"codepoints\": [46], \"characters\": \"\\u002E\" },                                                  // 1476\n  \"&permil;\": { \"codepoints\": [8240], \"characters\": \"\\u2030\" },                                                // 1477\n  \"&perp;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },                                                  // 1478\n  \"&pertenk;\": { \"codepoints\": [8241], \"characters\": \"\\u2031\" },                                               // 1479\n  \"&Pfr;\": { \"codepoints\": [120083], \"characters\": \"\\uD835\\uDD13\" },                                           // 1480\n  \"&pfr;\": { \"codepoints\": [120109], \"characters\": \"\\uD835\\uDD2D\" },                                           // 1481\n  \"&Phi;\": { \"codepoints\": [934], \"characters\": \"\\u03A6\" },                                                    // 1482\n  \"&phi;\": { \"codepoints\": [966], \"characters\": \"\\u03C6\" },                                                    // 1483\n  \"&phiv;\": { \"codepoints\": [981], \"characters\": \"\\u03D5\" },                                                   // 1484\n  \"&phmmat;\": { \"codepoints\": [8499], \"characters\": \"\\u2133\" },                                                // 1485\n  \"&phone;\": { \"codepoints\": [9742], \"characters\": \"\\u260E\" },                                                 // 1486\n  \"&Pi;\": { \"codepoints\": [928], \"characters\": \"\\u03A0\" },                                                     // 1487\n  \"&pi;\": { \"codepoints\": [960], \"characters\": \"\\u03C0\" },                                                     // 1488\n  \"&pitchfork;\": { \"codepoints\": [8916], \"characters\": \"\\u22D4\" },                                             // 1489\n  \"&piv;\": { \"codepoints\": [982], \"characters\": \"\\u03D6\" },                                                    // 1490\n  \"&planck;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },                                                // 1491\n  \"&planckh;\": { \"codepoints\": [8462], \"characters\": \"\\u210E\" },                                               // 1492\n  \"&plankv;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },                                                // 1493\n  \"&plusacir;\": { \"codepoints\": [10787], \"characters\": \"\\u2A23\" },                                             // 1494\n  \"&plusb;\": { \"codepoints\": [8862], \"characters\": \"\\u229E\" },                                                 // 1495\n  \"&pluscir;\": { \"codepoints\": [10786], \"characters\": \"\\u2A22\" },                                              // 1496\n  \"&plus;\": { \"codepoints\": [43], \"characters\": \"\\u002B\" },                                                    // 1497\n  \"&plusdo;\": { \"codepoints\": [8724], \"characters\": \"\\u2214\" },                                                // 1498\n  \"&plusdu;\": { \"codepoints\": [10789], \"characters\": \"\\u2A25\" },                                               // 1499\n  \"&pluse;\": { \"codepoints\": [10866], \"characters\": \"\\u2A72\" },                                                // 1500\n  \"&PlusMinus;\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },                                              // 1501\n  \"&plusmn;\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },                                                 // 1502\n  \"&plusmn\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },                                                  // 1503\n  \"&plussim;\": { \"codepoints\": [10790], \"characters\": \"\\u2A26\" },                                              // 1504\n  \"&plustwo;\": { \"codepoints\": [10791], \"characters\": \"\\u2A27\" },                                              // 1505\n  \"&pm;\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },                                                     // 1506\n  \"&Poincareplane;\": { \"codepoints\": [8460], \"characters\": \"\\u210C\" },                                         // 1507\n  \"&pointint;\": { \"codepoints\": [10773], \"characters\": \"\\u2A15\" },                                             // 1508\n  \"&popf;\": { \"codepoints\": [120161], \"characters\": \"\\uD835\\uDD61\" },                                          // 1509\n  \"&Popf;\": { \"codepoints\": [8473], \"characters\": \"\\u2119\" },                                                  // 1510\n  \"&pound;\": { \"codepoints\": [163], \"characters\": \"\\u00A3\" },                                                  // 1511\n  \"&pound\": { \"codepoints\": [163], \"characters\": \"\\u00A3\" },                                                   // 1512\n  \"&prap;\": { \"codepoints\": [10935], \"characters\": \"\\u2AB7\" },                                                 // 1513\n  \"&Pr;\": { \"codepoints\": [10939], \"characters\": \"\\u2ABB\" },                                                   // 1514\n  \"&pr;\": { \"codepoints\": [8826], \"characters\": \"\\u227A\" },                                                    // 1515\n  \"&prcue;\": { \"codepoints\": [8828], \"characters\": \"\\u227C\" },                                                 // 1516\n  \"&precapprox;\": { \"codepoints\": [10935], \"characters\": \"\\u2AB7\" },                                           // 1517\n  \"&prec;\": { \"codepoints\": [8826], \"characters\": \"\\u227A\" },                                                  // 1518\n  \"&preccurlyeq;\": { \"codepoints\": [8828], \"characters\": \"\\u227C\" },                                           // 1519\n  \"&Precedes;\": { \"codepoints\": [8826], \"characters\": \"\\u227A\" },                                              // 1520\n  \"&PrecedesEqual;\": { \"codepoints\": [10927], \"characters\": \"\\u2AAF\" },                                        // 1521\n  \"&PrecedesSlantEqual;\": { \"codepoints\": [8828], \"characters\": \"\\u227C\" },                                    // 1522\n  \"&PrecedesTilde;\": { \"codepoints\": [8830], \"characters\": \"\\u227E\" },                                         // 1523\n  \"&preceq;\": { \"codepoints\": [10927], \"characters\": \"\\u2AAF\" },                                               // 1524\n  \"&precnapprox;\": { \"codepoints\": [10937], \"characters\": \"\\u2AB9\" },                                          // 1525\n  \"&precneqq;\": { \"codepoints\": [10933], \"characters\": \"\\u2AB5\" },                                             // 1526\n  \"&precnsim;\": { \"codepoints\": [8936], \"characters\": \"\\u22E8\" },                                              // 1527\n  \"&pre;\": { \"codepoints\": [10927], \"characters\": \"\\u2AAF\" },                                                  // 1528\n  \"&prE;\": { \"codepoints\": [10931], \"characters\": \"\\u2AB3\" },                                                  // 1529\n  \"&precsim;\": { \"codepoints\": [8830], \"characters\": \"\\u227E\" },                                               // 1530\n  \"&prime;\": { \"codepoints\": [8242], \"characters\": \"\\u2032\" },                                                 // 1531\n  \"&Prime;\": { \"codepoints\": [8243], \"characters\": \"\\u2033\" },                                                 // 1532\n  \"&primes;\": { \"codepoints\": [8473], \"characters\": \"\\u2119\" },                                                // 1533\n  \"&prnap;\": { \"codepoints\": [10937], \"characters\": \"\\u2AB9\" },                                                // 1534\n  \"&prnE;\": { \"codepoints\": [10933], \"characters\": \"\\u2AB5\" },                                                 // 1535\n  \"&prnsim;\": { \"codepoints\": [8936], \"characters\": \"\\u22E8\" },                                                // 1536\n  \"&prod;\": { \"codepoints\": [8719], \"characters\": \"\\u220F\" },                                                  // 1537\n  \"&Product;\": { \"codepoints\": [8719], \"characters\": \"\\u220F\" },                                               // 1538\n  \"&profalar;\": { \"codepoints\": [9006], \"characters\": \"\\u232E\" },                                              // 1539\n  \"&profline;\": { \"codepoints\": [8978], \"characters\": \"\\u2312\" },                                              // 1540\n  \"&profsurf;\": { \"codepoints\": [8979], \"characters\": \"\\u2313\" },                                              // 1541\n  \"&prop;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },                                                  // 1542\n  \"&Proportional;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },                                          // 1543\n  \"&Proportion;\": { \"codepoints\": [8759], \"characters\": \"\\u2237\" },                                            // 1544\n  \"&propto;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },                                                // 1545\n  \"&prsim;\": { \"codepoints\": [8830], \"characters\": \"\\u227E\" },                                                 // 1546\n  \"&prurel;\": { \"codepoints\": [8880], \"characters\": \"\\u22B0\" },                                                // 1547\n  \"&Pscr;\": { \"codepoints\": [119979], \"characters\": \"\\uD835\\uDCAB\" },                                          // 1548\n  \"&pscr;\": { \"codepoints\": [120005], \"characters\": \"\\uD835\\uDCC5\" },                                          // 1549\n  \"&Psi;\": { \"codepoints\": [936], \"characters\": \"\\u03A8\" },                                                    // 1550\n  \"&psi;\": { \"codepoints\": [968], \"characters\": \"\\u03C8\" },                                                    // 1551\n  \"&puncsp;\": { \"codepoints\": [8200], \"characters\": \"\\u2008\" },                                                // 1552\n  \"&Qfr;\": { \"codepoints\": [120084], \"characters\": \"\\uD835\\uDD14\" },                                           // 1553\n  \"&qfr;\": { \"codepoints\": [120110], \"characters\": \"\\uD835\\uDD2E\" },                                           // 1554\n  \"&qint;\": { \"codepoints\": [10764], \"characters\": \"\\u2A0C\" },                                                 // 1555\n  \"&qopf;\": { \"codepoints\": [120162], \"characters\": \"\\uD835\\uDD62\" },                                          // 1556\n  \"&Qopf;\": { \"codepoints\": [8474], \"characters\": \"\\u211A\" },                                                  // 1557\n  \"&qprime;\": { \"codepoints\": [8279], \"characters\": \"\\u2057\" },                                                // 1558\n  \"&Qscr;\": { \"codepoints\": [119980], \"characters\": \"\\uD835\\uDCAC\" },                                          // 1559\n  \"&qscr;\": { \"codepoints\": [120006], \"characters\": \"\\uD835\\uDCC6\" },                                          // 1560\n  \"&quaternions;\": { \"codepoints\": [8461], \"characters\": \"\\u210D\" },                                           // 1561\n  \"&quatint;\": { \"codepoints\": [10774], \"characters\": \"\\u2A16\" },                                              // 1562\n  \"&quest;\": { \"codepoints\": [63], \"characters\": \"\\u003F\" },                                                   // 1563\n  \"&questeq;\": { \"codepoints\": [8799], \"characters\": \"\\u225F\" },                                               // 1564\n  \"&quot;\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },                                                    // 1565\n  \"&quot\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },                                                     // 1566\n  \"&QUOT;\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },                                                    // 1567\n  \"&QUOT\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },                                                     // 1568\n  \"&rAarr;\": { \"codepoints\": [8667], \"characters\": \"\\u21DB\" },                                                 // 1569\n  \"&race;\": { \"codepoints\": [8765, 817], \"characters\": \"\\u223D\\u0331\" },                                       // 1570\n  \"&Racute;\": { \"codepoints\": [340], \"characters\": \"\\u0154\" },                                                 // 1571\n  \"&racute;\": { \"codepoints\": [341], \"characters\": \"\\u0155\" },                                                 // 1572\n  \"&radic;\": { \"codepoints\": [8730], \"characters\": \"\\u221A\" },                                                 // 1573\n  \"&raemptyv;\": { \"codepoints\": [10675], \"characters\": \"\\u29B3\" },                                             // 1574\n  \"&rang;\": { \"codepoints\": [10217], \"characters\": \"\\u27E9\" },                                                 // 1575\n  \"&Rang;\": { \"codepoints\": [10219], \"characters\": \"\\u27EB\" },                                                 // 1576\n  \"&rangd;\": { \"codepoints\": [10642], \"characters\": \"\\u2992\" },                                                // 1577\n  \"&range;\": { \"codepoints\": [10661], \"characters\": \"\\u29A5\" },                                                // 1578\n  \"&rangle;\": { \"codepoints\": [10217], \"characters\": \"\\u27E9\" },                                               // 1579\n  \"&raquo;\": { \"codepoints\": [187], \"characters\": \"\\u00BB\" },                                                  // 1580\n  \"&raquo\": { \"codepoints\": [187], \"characters\": \"\\u00BB\" },                                                   // 1581\n  \"&rarrap;\": { \"codepoints\": [10613], \"characters\": \"\\u2975\" },                                               // 1582\n  \"&rarrb;\": { \"codepoints\": [8677], \"characters\": \"\\u21E5\" },                                                 // 1583\n  \"&rarrbfs;\": { \"codepoints\": [10528], \"characters\": \"\\u2920\" },                                              // 1584\n  \"&rarrc;\": { \"codepoints\": [10547], \"characters\": \"\\u2933\" },                                                // 1585\n  \"&rarr;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },                                                  // 1586\n  \"&Rarr;\": { \"codepoints\": [8608], \"characters\": \"\\u21A0\" },                                                  // 1587\n  \"&rArr;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },                                                  // 1588\n  \"&rarrfs;\": { \"codepoints\": [10526], \"characters\": \"\\u291E\" },                                               // 1589\n  \"&rarrhk;\": { \"codepoints\": [8618], \"characters\": \"\\u21AA\" },                                                // 1590\n  \"&rarrlp;\": { \"codepoints\": [8620], \"characters\": \"\\u21AC\" },                                                // 1591\n  \"&rarrpl;\": { \"codepoints\": [10565], \"characters\": \"\\u2945\" },                                               // 1592\n  \"&rarrsim;\": { \"codepoints\": [10612], \"characters\": \"\\u2974\" },                                              // 1593\n  \"&Rarrtl;\": { \"codepoints\": [10518], \"characters\": \"\\u2916\" },                                               // 1594\n  \"&rarrtl;\": { \"codepoints\": [8611], \"characters\": \"\\u21A3\" },                                                // 1595\n  \"&rarrw;\": { \"codepoints\": [8605], \"characters\": \"\\u219D\" },                                                 // 1596\n  \"&ratail;\": { \"codepoints\": [10522], \"characters\": \"\\u291A\" },                                               // 1597\n  \"&rAtail;\": { \"codepoints\": [10524], \"characters\": \"\\u291C\" },                                               // 1598\n  \"&ratio;\": { \"codepoints\": [8758], \"characters\": \"\\u2236\" },                                                 // 1599\n  \"&rationals;\": { \"codepoints\": [8474], \"characters\": \"\\u211A\" },                                             // 1600\n  \"&rbarr;\": { \"codepoints\": [10509], \"characters\": \"\\u290D\" },                                                // 1601\n  \"&rBarr;\": { \"codepoints\": [10511], \"characters\": \"\\u290F\" },                                                // 1602\n  \"&RBarr;\": { \"codepoints\": [10512], \"characters\": \"\\u2910\" },                                                // 1603\n  \"&rbbrk;\": { \"codepoints\": [10099], \"characters\": \"\\u2773\" },                                                // 1604\n  \"&rbrace;\": { \"codepoints\": [125], \"characters\": \"\\u007D\" },                                                 // 1605\n  \"&rbrack;\": { \"codepoints\": [93], \"characters\": \"\\u005D\" },                                                  // 1606\n  \"&rbrke;\": { \"codepoints\": [10636], \"characters\": \"\\u298C\" },                                                // 1607\n  \"&rbrksld;\": { \"codepoints\": [10638], \"characters\": \"\\u298E\" },                                              // 1608\n  \"&rbrkslu;\": { \"codepoints\": [10640], \"characters\": \"\\u2990\" },                                              // 1609\n  \"&Rcaron;\": { \"codepoints\": [344], \"characters\": \"\\u0158\" },                                                 // 1610\n  \"&rcaron;\": { \"codepoints\": [345], \"characters\": \"\\u0159\" },                                                 // 1611\n  \"&Rcedil;\": { \"codepoints\": [342], \"characters\": \"\\u0156\" },                                                 // 1612\n  \"&rcedil;\": { \"codepoints\": [343], \"characters\": \"\\u0157\" },                                                 // 1613\n  \"&rceil;\": { \"codepoints\": [8969], \"characters\": \"\\u2309\" },                                                 // 1614\n  \"&rcub;\": { \"codepoints\": [125], \"characters\": \"\\u007D\" },                                                   // 1615\n  \"&Rcy;\": { \"codepoints\": [1056], \"characters\": \"\\u0420\" },                                                   // 1616\n  \"&rcy;\": { \"codepoints\": [1088], \"characters\": \"\\u0440\" },                                                   // 1617\n  \"&rdca;\": { \"codepoints\": [10551], \"characters\": \"\\u2937\" },                                                 // 1618\n  \"&rdldhar;\": { \"codepoints\": [10601], \"characters\": \"\\u2969\" },                                              // 1619\n  \"&rdquo;\": { \"codepoints\": [8221], \"characters\": \"\\u201D\" },                                                 // 1620\n  \"&rdquor;\": { \"codepoints\": [8221], \"characters\": \"\\u201D\" },                                                // 1621\n  \"&rdsh;\": { \"codepoints\": [8627], \"characters\": \"\\u21B3\" },                                                  // 1622\n  \"&real;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },                                                  // 1623\n  \"&realine;\": { \"codepoints\": [8475], \"characters\": \"\\u211B\" },                                               // 1624\n  \"&realpart;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },                                              // 1625\n  \"&reals;\": { \"codepoints\": [8477], \"characters\": \"\\u211D\" },                                                 // 1626\n  \"&Re;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },                                                    // 1627\n  \"&rect;\": { \"codepoints\": [9645], \"characters\": \"\\u25AD\" },                                                  // 1628\n  \"&reg;\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },                                                    // 1629\n  \"&reg\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },                                                     // 1630\n  \"&REG;\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },                                                    // 1631\n  \"&REG\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },                                                     // 1632\n  \"&ReverseElement;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },                                        // 1633\n  \"&ReverseEquilibrium;\": { \"codepoints\": [8651], \"characters\": \"\\u21CB\" },                                    // 1634\n  \"&ReverseUpEquilibrium;\": { \"codepoints\": [10607], \"characters\": \"\\u296F\" },                                 // 1635\n  \"&rfisht;\": { \"codepoints\": [10621], \"characters\": \"\\u297D\" },                                               // 1636\n  \"&rfloor;\": { \"codepoints\": [8971], \"characters\": \"\\u230B\" },                                                // 1637\n  \"&rfr;\": { \"codepoints\": [120111], \"characters\": \"\\uD835\\uDD2F\" },                                           // 1638\n  \"&Rfr;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },                                                   // 1639\n  \"&rHar;\": { \"codepoints\": [10596], \"characters\": \"\\u2964\" },                                                 // 1640\n  \"&rhard;\": { \"codepoints\": [8641], \"characters\": \"\\u21C1\" },                                                 // 1641\n  \"&rharu;\": { \"codepoints\": [8640], \"characters\": \"\\u21C0\" },                                                 // 1642\n  \"&rharul;\": { \"codepoints\": [10604], \"characters\": \"\\u296C\" },                                               // 1643\n  \"&Rho;\": { \"codepoints\": [929], \"characters\": \"\\u03A1\" },                                                    // 1644\n  \"&rho;\": { \"codepoints\": [961], \"characters\": \"\\u03C1\" },                                                    // 1645\n  \"&rhov;\": { \"codepoints\": [1009], \"characters\": \"\\u03F1\" },                                                  // 1646\n  \"&RightAngleBracket;\": { \"codepoints\": [10217], \"characters\": \"\\u27E9\" },                                    // 1647\n  \"&RightArrowBar;\": { \"codepoints\": [8677], \"characters\": \"\\u21E5\" },                                         // 1648\n  \"&rightarrow;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },                                            // 1649\n  \"&RightArrow;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },                                            // 1650\n  \"&Rightarrow;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },                                            // 1651\n  \"&RightArrowLeftArrow;\": { \"codepoints\": [8644], \"characters\": \"\\u21C4\" },                                   // 1652\n  \"&rightarrowtail;\": { \"codepoints\": [8611], \"characters\": \"\\u21A3\" },                                        // 1653\n  \"&RightCeiling;\": { \"codepoints\": [8969], \"characters\": \"\\u2309\" },                                          // 1654\n  \"&RightDoubleBracket;\": { \"codepoints\": [10215], \"characters\": \"\\u27E7\" },                                   // 1655\n  \"&RightDownTeeVector;\": { \"codepoints\": [10589], \"characters\": \"\\u295D\" },                                   // 1656\n  \"&RightDownVectorBar;\": { \"codepoints\": [10581], \"characters\": \"\\u2955\" },                                   // 1657\n  \"&RightDownVector;\": { \"codepoints\": [8642], \"characters\": \"\\u21C2\" },                                       // 1658\n  \"&RightFloor;\": { \"codepoints\": [8971], \"characters\": \"\\u230B\" },                                            // 1659\n  \"&rightharpoondown;\": { \"codepoints\": [8641], \"characters\": \"\\u21C1\" },                                      // 1660\n  \"&rightharpoonup;\": { \"codepoints\": [8640], \"characters\": \"\\u21C0\" },                                        // 1661\n  \"&rightleftarrows;\": { \"codepoints\": [8644], \"characters\": \"\\u21C4\" },                                       // 1662\n  \"&rightleftharpoons;\": { \"codepoints\": [8652], \"characters\": \"\\u21CC\" },                                     // 1663\n  \"&rightrightarrows;\": { \"codepoints\": [8649], \"characters\": \"\\u21C9\" },                                      // 1664\n  \"&rightsquigarrow;\": { \"codepoints\": [8605], \"characters\": \"\\u219D\" },                                       // 1665\n  \"&RightTeeArrow;\": { \"codepoints\": [8614], \"characters\": \"\\u21A6\" },                                         // 1666\n  \"&RightTee;\": { \"codepoints\": [8866], \"characters\": \"\\u22A2\" },                                              // 1667\n  \"&RightTeeVector;\": { \"codepoints\": [10587], \"characters\": \"\\u295B\" },                                       // 1668\n  \"&rightthreetimes;\": { \"codepoints\": [8908], \"characters\": \"\\u22CC\" },                                       // 1669\n  \"&RightTriangleBar;\": { \"codepoints\": [10704], \"characters\": \"\\u29D0\" },                                     // 1670\n  \"&RightTriangle;\": { \"codepoints\": [8883], \"characters\": \"\\u22B3\" },                                         // 1671\n  \"&RightTriangleEqual;\": { \"codepoints\": [8885], \"characters\": \"\\u22B5\" },                                    // 1672\n  \"&RightUpDownVector;\": { \"codepoints\": [10575], \"characters\": \"\\u294F\" },                                    // 1673\n  \"&RightUpTeeVector;\": { \"codepoints\": [10588], \"characters\": \"\\u295C\" },                                     // 1674\n  \"&RightUpVectorBar;\": { \"codepoints\": [10580], \"characters\": \"\\u2954\" },                                     // 1675\n  \"&RightUpVector;\": { \"codepoints\": [8638], \"characters\": \"\\u21BE\" },                                         // 1676\n  \"&RightVectorBar;\": { \"codepoints\": [10579], \"characters\": \"\\u2953\" },                                       // 1677\n  \"&RightVector;\": { \"codepoints\": [8640], \"characters\": \"\\u21C0\" },                                           // 1678\n  \"&ring;\": { \"codepoints\": [730], \"characters\": \"\\u02DA\" },                                                   // 1679\n  \"&risingdotseq;\": { \"codepoints\": [8787], \"characters\": \"\\u2253\" },                                          // 1680\n  \"&rlarr;\": { \"codepoints\": [8644], \"characters\": \"\\u21C4\" },                                                 // 1681\n  \"&rlhar;\": { \"codepoints\": [8652], \"characters\": \"\\u21CC\" },                                                 // 1682\n  \"&rlm;\": { \"codepoints\": [8207], \"characters\": \"\\u200F\" },                                                   // 1683\n  \"&rmoustache;\": { \"codepoints\": [9137], \"characters\": \"\\u23B1\" },                                            // 1684\n  \"&rmoust;\": { \"codepoints\": [9137], \"characters\": \"\\u23B1\" },                                                // 1685\n  \"&rnmid;\": { \"codepoints\": [10990], \"characters\": \"\\u2AEE\" },                                                // 1686\n  \"&roang;\": { \"codepoints\": [10221], \"characters\": \"\\u27ED\" },                                                // 1687\n  \"&roarr;\": { \"codepoints\": [8702], \"characters\": \"\\u21FE\" },                                                 // 1688\n  \"&robrk;\": { \"codepoints\": [10215], \"characters\": \"\\u27E7\" },                                                // 1689\n  \"&ropar;\": { \"codepoints\": [10630], \"characters\": \"\\u2986\" },                                                // 1690\n  \"&ropf;\": { \"codepoints\": [120163], \"characters\": \"\\uD835\\uDD63\" },                                          // 1691\n  \"&Ropf;\": { \"codepoints\": [8477], \"characters\": \"\\u211D\" },                                                  // 1692\n  \"&roplus;\": { \"codepoints\": [10798], \"characters\": \"\\u2A2E\" },                                               // 1693\n  \"&rotimes;\": { \"codepoints\": [10805], \"characters\": \"\\u2A35\" },                                              // 1694\n  \"&RoundImplies;\": { \"codepoints\": [10608], \"characters\": \"\\u2970\" },                                         // 1695\n  \"&rpar;\": { \"codepoints\": [41], \"characters\": \"\\u0029\" },                                                    // 1696\n  \"&rpargt;\": { \"codepoints\": [10644], \"characters\": \"\\u2994\" },                                               // 1697\n  \"&rppolint;\": { \"codepoints\": [10770], \"characters\": \"\\u2A12\" },                                             // 1698\n  \"&rrarr;\": { \"codepoints\": [8649], \"characters\": \"\\u21C9\" },                                                 // 1699\n  \"&Rrightarrow;\": { \"codepoints\": [8667], \"characters\": \"\\u21DB\" },                                           // 1700\n  \"&rsaquo;\": { \"codepoints\": [8250], \"characters\": \"\\u203A\" },                                                // 1701\n  \"&rscr;\": { \"codepoints\": [120007], \"characters\": \"\\uD835\\uDCC7\" },                                          // 1702\n  \"&Rscr;\": { \"codepoints\": [8475], \"characters\": \"\\u211B\" },                                                  // 1703\n  \"&rsh;\": { \"codepoints\": [8625], \"characters\": \"\\u21B1\" },                                                   // 1704\n  \"&Rsh;\": { \"codepoints\": [8625], \"characters\": \"\\u21B1\" },                                                   // 1705\n  \"&rsqb;\": { \"codepoints\": [93], \"characters\": \"\\u005D\" },                                                    // 1706\n  \"&rsquo;\": { \"codepoints\": [8217], \"characters\": \"\\u2019\" },                                                 // 1707\n  \"&rsquor;\": { \"codepoints\": [8217], \"characters\": \"\\u2019\" },                                                // 1708\n  \"&rthree;\": { \"codepoints\": [8908], \"characters\": \"\\u22CC\" },                                                // 1709\n  \"&rtimes;\": { \"codepoints\": [8906], \"characters\": \"\\u22CA\" },                                                // 1710\n  \"&rtri;\": { \"codepoints\": [9657], \"characters\": \"\\u25B9\" },                                                  // 1711\n  \"&rtrie;\": { \"codepoints\": [8885], \"characters\": \"\\u22B5\" },                                                 // 1712\n  \"&rtrif;\": { \"codepoints\": [9656], \"characters\": \"\\u25B8\" },                                                 // 1713\n  \"&rtriltri;\": { \"codepoints\": [10702], \"characters\": \"\\u29CE\" },                                             // 1714\n  \"&RuleDelayed;\": { \"codepoints\": [10740], \"characters\": \"\\u29F4\" },                                          // 1715\n  \"&ruluhar;\": { \"codepoints\": [10600], \"characters\": \"\\u2968\" },                                              // 1716\n  \"&rx;\": { \"codepoints\": [8478], \"characters\": \"\\u211E\" },                                                    // 1717\n  \"&Sacute;\": { \"codepoints\": [346], \"characters\": \"\\u015A\" },                                                 // 1718\n  \"&sacute;\": { \"codepoints\": [347], \"characters\": \"\\u015B\" },                                                 // 1719\n  \"&sbquo;\": { \"codepoints\": [8218], \"characters\": \"\\u201A\" },                                                 // 1720\n  \"&scap;\": { \"codepoints\": [10936], \"characters\": \"\\u2AB8\" },                                                 // 1721\n  \"&Scaron;\": { \"codepoints\": [352], \"characters\": \"\\u0160\" },                                                 // 1722\n  \"&scaron;\": { \"codepoints\": [353], \"characters\": \"\\u0161\" },                                                 // 1723\n  \"&Sc;\": { \"codepoints\": [10940], \"characters\": \"\\u2ABC\" },                                                   // 1724\n  \"&sc;\": { \"codepoints\": [8827], \"characters\": \"\\u227B\" },                                                    // 1725\n  \"&sccue;\": { \"codepoints\": [8829], \"characters\": \"\\u227D\" },                                                 // 1726\n  \"&sce;\": { \"codepoints\": [10928], \"characters\": \"\\u2AB0\" },                                                  // 1727\n  \"&scE;\": { \"codepoints\": [10932], \"characters\": \"\\u2AB4\" },                                                  // 1728\n  \"&Scedil;\": { \"codepoints\": [350], \"characters\": \"\\u015E\" },                                                 // 1729\n  \"&scedil;\": { \"codepoints\": [351], \"characters\": \"\\u015F\" },                                                 // 1730\n  \"&Scirc;\": { \"codepoints\": [348], \"characters\": \"\\u015C\" },                                                  // 1731\n  \"&scirc;\": { \"codepoints\": [349], \"characters\": \"\\u015D\" },                                                  // 1732\n  \"&scnap;\": { \"codepoints\": [10938], \"characters\": \"\\u2ABA\" },                                                // 1733\n  \"&scnE;\": { \"codepoints\": [10934], \"characters\": \"\\u2AB6\" },                                                 // 1734\n  \"&scnsim;\": { \"codepoints\": [8937], \"characters\": \"\\u22E9\" },                                                // 1735\n  \"&scpolint;\": { \"codepoints\": [10771], \"characters\": \"\\u2A13\" },                                             // 1736\n  \"&scsim;\": { \"codepoints\": [8831], \"characters\": \"\\u227F\" },                                                 // 1737\n  \"&Scy;\": { \"codepoints\": [1057], \"characters\": \"\\u0421\" },                                                   // 1738\n  \"&scy;\": { \"codepoints\": [1089], \"characters\": \"\\u0441\" },                                                   // 1739\n  \"&sdotb;\": { \"codepoints\": [8865], \"characters\": \"\\u22A1\" },                                                 // 1740\n  \"&sdot;\": { \"codepoints\": [8901], \"characters\": \"\\u22C5\" },                                                  // 1741\n  \"&sdote;\": { \"codepoints\": [10854], \"characters\": \"\\u2A66\" },                                                // 1742\n  \"&searhk;\": { \"codepoints\": [10533], \"characters\": \"\\u2925\" },                                               // 1743\n  \"&searr;\": { \"codepoints\": [8600], \"characters\": \"\\u2198\" },                                                 // 1744\n  \"&seArr;\": { \"codepoints\": [8664], \"characters\": \"\\u21D8\" },                                                 // 1745\n  \"&searrow;\": { \"codepoints\": [8600], \"characters\": \"\\u2198\" },                                               // 1746\n  \"&sect;\": { \"codepoints\": [167], \"characters\": \"\\u00A7\" },                                                   // 1747\n  \"&sect\": { \"codepoints\": [167], \"characters\": \"\\u00A7\" },                                                    // 1748\n  \"&semi;\": { \"codepoints\": [59], \"characters\": \"\\u003B\" },                                                    // 1749\n  \"&seswar;\": { \"codepoints\": [10537], \"characters\": \"\\u2929\" },                                               // 1750\n  \"&setminus;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },                                              // 1751\n  \"&setmn;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },                                                 // 1752\n  \"&sext;\": { \"codepoints\": [10038], \"characters\": \"\\u2736\" },                                                 // 1753\n  \"&Sfr;\": { \"codepoints\": [120086], \"characters\": \"\\uD835\\uDD16\" },                                           // 1754\n  \"&sfr;\": { \"codepoints\": [120112], \"characters\": \"\\uD835\\uDD30\" },                                           // 1755\n  \"&sfrown;\": { \"codepoints\": [8994], \"characters\": \"\\u2322\" },                                                // 1756\n  \"&sharp;\": { \"codepoints\": [9839], \"characters\": \"\\u266F\" },                                                 // 1757\n  \"&SHCHcy;\": { \"codepoints\": [1065], \"characters\": \"\\u0429\" },                                                // 1758\n  \"&shchcy;\": { \"codepoints\": [1097], \"characters\": \"\\u0449\" },                                                // 1759\n  \"&SHcy;\": { \"codepoints\": [1064], \"characters\": \"\\u0428\" },                                                  // 1760\n  \"&shcy;\": { \"codepoints\": [1096], \"characters\": \"\\u0448\" },                                                  // 1761\n  \"&ShortDownArrow;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },                                        // 1762\n  \"&ShortLeftArrow;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },                                        // 1763\n  \"&shortmid;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },                                              // 1764\n  \"&shortparallel;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },                                         // 1765\n  \"&ShortRightArrow;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },                                       // 1766\n  \"&ShortUpArrow;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },                                          // 1767\n  \"&shy;\": { \"codepoints\": [173], \"characters\": \"\\u00AD\" },                                                    // 1768\n  \"&shy\": { \"codepoints\": [173], \"characters\": \"\\u00AD\" },                                                     // 1769\n  \"&Sigma;\": { \"codepoints\": [931], \"characters\": \"\\u03A3\" },                                                  // 1770\n  \"&sigma;\": { \"codepoints\": [963], \"characters\": \"\\u03C3\" },                                                  // 1771\n  \"&sigmaf;\": { \"codepoints\": [962], \"characters\": \"\\u03C2\" },                                                 // 1772\n  \"&sigmav;\": { \"codepoints\": [962], \"characters\": \"\\u03C2\" },                                                 // 1773\n  \"&sim;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },                                                   // 1774\n  \"&simdot;\": { \"codepoints\": [10858], \"characters\": \"\\u2A6A\" },                                               // 1775\n  \"&sime;\": { \"codepoints\": [8771], \"characters\": \"\\u2243\" },                                                  // 1776\n  \"&simeq;\": { \"codepoints\": [8771], \"characters\": \"\\u2243\" },                                                 // 1777\n  \"&simg;\": { \"codepoints\": [10910], \"characters\": \"\\u2A9E\" },                                                 // 1778\n  \"&simgE;\": { \"codepoints\": [10912], \"characters\": \"\\u2AA0\" },                                                // 1779\n  \"&siml;\": { \"codepoints\": [10909], \"characters\": \"\\u2A9D\" },                                                 // 1780\n  \"&simlE;\": { \"codepoints\": [10911], \"characters\": \"\\u2A9F\" },                                                // 1781\n  \"&simne;\": { \"codepoints\": [8774], \"characters\": \"\\u2246\" },                                                 // 1782\n  \"&simplus;\": { \"codepoints\": [10788], \"characters\": \"\\u2A24\" },                                              // 1783\n  \"&simrarr;\": { \"codepoints\": [10610], \"characters\": \"\\u2972\" },                                              // 1784\n  \"&slarr;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },                                                 // 1785\n  \"&SmallCircle;\": { \"codepoints\": [8728], \"characters\": \"\\u2218\" },                                           // 1786\n  \"&smallsetminus;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },                                         // 1787\n  \"&smashp;\": { \"codepoints\": [10803], \"characters\": \"\\u2A33\" },                                               // 1788\n  \"&smeparsl;\": { \"codepoints\": [10724], \"characters\": \"\\u29E4\" },                                             // 1789\n  \"&smid;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },                                                  // 1790\n  \"&smile;\": { \"codepoints\": [8995], \"characters\": \"\\u2323\" },                                                 // 1791\n  \"&smt;\": { \"codepoints\": [10922], \"characters\": \"\\u2AAA\" },                                                  // 1792\n  \"&smte;\": { \"codepoints\": [10924], \"characters\": \"\\u2AAC\" },                                                 // 1793\n  \"&smtes;\": { \"codepoints\": [10924, 65024], \"characters\": \"\\u2AAC\\uFE00\" },                                   // 1794\n  \"&SOFTcy;\": { \"codepoints\": [1068], \"characters\": \"\\u042C\" },                                                // 1795\n  \"&softcy;\": { \"codepoints\": [1100], \"characters\": \"\\u044C\" },                                                // 1796\n  \"&solbar;\": { \"codepoints\": [9023], \"characters\": \"\\u233F\" },                                                // 1797\n  \"&solb;\": { \"codepoints\": [10692], \"characters\": \"\\u29C4\" },                                                 // 1798\n  \"&sol;\": { \"codepoints\": [47], \"characters\": \"\\u002F\" },                                                     // 1799\n  \"&Sopf;\": { \"codepoints\": [120138], \"characters\": \"\\uD835\\uDD4A\" },                                          // 1800\n  \"&sopf;\": { \"codepoints\": [120164], \"characters\": \"\\uD835\\uDD64\" },                                          // 1801\n  \"&spades;\": { \"codepoints\": [9824], \"characters\": \"\\u2660\" },                                                // 1802\n  \"&spadesuit;\": { \"codepoints\": [9824], \"characters\": \"\\u2660\" },                                             // 1803\n  \"&spar;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },                                                  // 1804\n  \"&sqcap;\": { \"codepoints\": [8851], \"characters\": \"\\u2293\" },                                                 // 1805\n  \"&sqcaps;\": { \"codepoints\": [8851, 65024], \"characters\": \"\\u2293\\uFE00\" },                                   // 1806\n  \"&sqcup;\": { \"codepoints\": [8852], \"characters\": \"\\u2294\" },                                                 // 1807\n  \"&sqcups;\": { \"codepoints\": [8852, 65024], \"characters\": \"\\u2294\\uFE00\" },                                   // 1808\n  \"&Sqrt;\": { \"codepoints\": [8730], \"characters\": \"\\u221A\" },                                                  // 1809\n  \"&sqsub;\": { \"codepoints\": [8847], \"characters\": \"\\u228F\" },                                                 // 1810\n  \"&sqsube;\": { \"codepoints\": [8849], \"characters\": \"\\u2291\" },                                                // 1811\n  \"&sqsubset;\": { \"codepoints\": [8847], \"characters\": \"\\u228F\" },                                              // 1812\n  \"&sqsubseteq;\": { \"codepoints\": [8849], \"characters\": \"\\u2291\" },                                            // 1813\n  \"&sqsup;\": { \"codepoints\": [8848], \"characters\": \"\\u2290\" },                                                 // 1814\n  \"&sqsupe;\": { \"codepoints\": [8850], \"characters\": \"\\u2292\" },                                                // 1815\n  \"&sqsupset;\": { \"codepoints\": [8848], \"characters\": \"\\u2290\" },                                              // 1816\n  \"&sqsupseteq;\": { \"codepoints\": [8850], \"characters\": \"\\u2292\" },                                            // 1817\n  \"&square;\": { \"codepoints\": [9633], \"characters\": \"\\u25A1\" },                                                // 1818\n  \"&Square;\": { \"codepoints\": [9633], \"characters\": \"\\u25A1\" },                                                // 1819\n  \"&SquareIntersection;\": { \"codepoints\": [8851], \"characters\": \"\\u2293\" },                                    // 1820\n  \"&SquareSubset;\": { \"codepoints\": [8847], \"characters\": \"\\u228F\" },                                          // 1821\n  \"&SquareSubsetEqual;\": { \"codepoints\": [8849], \"characters\": \"\\u2291\" },                                     // 1822\n  \"&SquareSuperset;\": { \"codepoints\": [8848], \"characters\": \"\\u2290\" },                                        // 1823\n  \"&SquareSupersetEqual;\": { \"codepoints\": [8850], \"characters\": \"\\u2292\" },                                   // 1824\n  \"&SquareUnion;\": { \"codepoints\": [8852], \"characters\": \"\\u2294\" },                                           // 1825\n  \"&squarf;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },                                                // 1826\n  \"&squ;\": { \"codepoints\": [9633], \"characters\": \"\\u25A1\" },                                                   // 1827\n  \"&squf;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },                                                  // 1828\n  \"&srarr;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },                                                 // 1829\n  \"&Sscr;\": { \"codepoints\": [119982], \"characters\": \"\\uD835\\uDCAE\" },                                          // 1830\n  \"&sscr;\": { \"codepoints\": [120008], \"characters\": \"\\uD835\\uDCC8\" },                                          // 1831\n  \"&ssetmn;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },                                                // 1832\n  \"&ssmile;\": { \"codepoints\": [8995], \"characters\": \"\\u2323\" },                                                // 1833\n  \"&sstarf;\": { \"codepoints\": [8902], \"characters\": \"\\u22C6\" },                                                // 1834\n  \"&Star;\": { \"codepoints\": [8902], \"characters\": \"\\u22C6\" },                                                  // 1835\n  \"&star;\": { \"codepoints\": [9734], \"characters\": \"\\u2606\" },                                                  // 1836\n  \"&starf;\": { \"codepoints\": [9733], \"characters\": \"\\u2605\" },                                                 // 1837\n  \"&straightepsilon;\": { \"codepoints\": [1013], \"characters\": \"\\u03F5\" },                                       // 1838\n  \"&straightphi;\": { \"codepoints\": [981], \"characters\": \"\\u03D5\" },                                            // 1839\n  \"&strns;\": { \"codepoints\": [175], \"characters\": \"\\u00AF\" },                                                  // 1840\n  \"&sub;\": { \"codepoints\": [8834], \"characters\": \"\\u2282\" },                                                   // 1841\n  \"&Sub;\": { \"codepoints\": [8912], \"characters\": \"\\u22D0\" },                                                   // 1842\n  \"&subdot;\": { \"codepoints\": [10941], \"characters\": \"\\u2ABD\" },                                               // 1843\n  \"&subE;\": { \"codepoints\": [10949], \"characters\": \"\\u2AC5\" },                                                 // 1844\n  \"&sube;\": { \"codepoints\": [8838], \"characters\": \"\\u2286\" },                                                  // 1845\n  \"&subedot;\": { \"codepoints\": [10947], \"characters\": \"\\u2AC3\" },                                              // 1846\n  \"&submult;\": { \"codepoints\": [10945], \"characters\": \"\\u2AC1\" },                                              // 1847\n  \"&subnE;\": { \"codepoints\": [10955], \"characters\": \"\\u2ACB\" },                                                // 1848\n  \"&subne;\": { \"codepoints\": [8842], \"characters\": \"\\u228A\" },                                                 // 1849\n  \"&subplus;\": { \"codepoints\": [10943], \"characters\": \"\\u2ABF\" },                                              // 1850\n  \"&subrarr;\": { \"codepoints\": [10617], \"characters\": \"\\u2979\" },                                              // 1851\n  \"&subset;\": { \"codepoints\": [8834], \"characters\": \"\\u2282\" },                                                // 1852\n  \"&Subset;\": { \"codepoints\": [8912], \"characters\": \"\\u22D0\" },                                                // 1853\n  \"&subseteq;\": { \"codepoints\": [8838], \"characters\": \"\\u2286\" },                                              // 1854\n  \"&subseteqq;\": { \"codepoints\": [10949], \"characters\": \"\\u2AC5\" },                                            // 1855\n  \"&SubsetEqual;\": { \"codepoints\": [8838], \"characters\": \"\\u2286\" },                                           // 1856\n  \"&subsetneq;\": { \"codepoints\": [8842], \"characters\": \"\\u228A\" },                                             // 1857\n  \"&subsetneqq;\": { \"codepoints\": [10955], \"characters\": \"\\u2ACB\" },                                           // 1858\n  \"&subsim;\": { \"codepoints\": [10951], \"characters\": \"\\u2AC7\" },                                               // 1859\n  \"&subsub;\": { \"codepoints\": [10965], \"characters\": \"\\u2AD5\" },                                               // 1860\n  \"&subsup;\": { \"codepoints\": [10963], \"characters\": \"\\u2AD3\" },                                               // 1861\n  \"&succapprox;\": { \"codepoints\": [10936], \"characters\": \"\\u2AB8\" },                                           // 1862\n  \"&succ;\": { \"codepoints\": [8827], \"characters\": \"\\u227B\" },                                                  // 1863\n  \"&succcurlyeq;\": { \"codepoints\": [8829], \"characters\": \"\\u227D\" },                                           // 1864\n  \"&Succeeds;\": { \"codepoints\": [8827], \"characters\": \"\\u227B\" },                                              // 1865\n  \"&SucceedsEqual;\": { \"codepoints\": [10928], \"characters\": \"\\u2AB0\" },                                        // 1866\n  \"&SucceedsSlantEqual;\": { \"codepoints\": [8829], \"characters\": \"\\u227D\" },                                    // 1867\n  \"&SucceedsTilde;\": { \"codepoints\": [8831], \"characters\": \"\\u227F\" },                                         // 1868\n  \"&succeq;\": { \"codepoints\": [10928], \"characters\": \"\\u2AB0\" },                                               // 1869\n  \"&succnapprox;\": { \"codepoints\": [10938], \"characters\": \"\\u2ABA\" },                                          // 1870\n  \"&succneqq;\": { \"codepoints\": [10934], \"characters\": \"\\u2AB6\" },                                             // 1871\n  \"&succnsim;\": { \"codepoints\": [8937], \"characters\": \"\\u22E9\" },                                              // 1872\n  \"&succsim;\": { \"codepoints\": [8831], \"characters\": \"\\u227F\" },                                               // 1873\n  \"&SuchThat;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },                                              // 1874\n  \"&sum;\": { \"codepoints\": [8721], \"characters\": \"\\u2211\" },                                                   // 1875\n  \"&Sum;\": { \"codepoints\": [8721], \"characters\": \"\\u2211\" },                                                   // 1876\n  \"&sung;\": { \"codepoints\": [9834], \"characters\": \"\\u266A\" },                                                  // 1877\n  \"&sup1;\": { \"codepoints\": [185], \"characters\": \"\\u00B9\" },                                                   // 1878\n  \"&sup1\": { \"codepoints\": [185], \"characters\": \"\\u00B9\" },                                                    // 1879\n  \"&sup2;\": { \"codepoints\": [178], \"characters\": \"\\u00B2\" },                                                   // 1880\n  \"&sup2\": { \"codepoints\": [178], \"characters\": \"\\u00B2\" },                                                    // 1881\n  \"&sup3;\": { \"codepoints\": [179], \"characters\": \"\\u00B3\" },                                                   // 1882\n  \"&sup3\": { \"codepoints\": [179], \"characters\": \"\\u00B3\" },                                                    // 1883\n  \"&sup;\": { \"codepoints\": [8835], \"characters\": \"\\u2283\" },                                                   // 1884\n  \"&Sup;\": { \"codepoints\": [8913], \"characters\": \"\\u22D1\" },                                                   // 1885\n  \"&supdot;\": { \"codepoints\": [10942], \"characters\": \"\\u2ABE\" },                                               // 1886\n  \"&supdsub;\": { \"codepoints\": [10968], \"characters\": \"\\u2AD8\" },                                              // 1887\n  \"&supE;\": { \"codepoints\": [10950], \"characters\": \"\\u2AC6\" },                                                 // 1888\n  \"&supe;\": { \"codepoints\": [8839], \"characters\": \"\\u2287\" },                                                  // 1889\n  \"&supedot;\": { \"codepoints\": [10948], \"characters\": \"\\u2AC4\" },                                              // 1890\n  \"&Superset;\": { \"codepoints\": [8835], \"characters\": \"\\u2283\" },                                              // 1891\n  \"&SupersetEqual;\": { \"codepoints\": [8839], \"characters\": \"\\u2287\" },                                         // 1892\n  \"&suphsol;\": { \"codepoints\": [10185], \"characters\": \"\\u27C9\" },                                              // 1893\n  \"&suphsub;\": { \"codepoints\": [10967], \"characters\": \"\\u2AD7\" },                                              // 1894\n  \"&suplarr;\": { \"codepoints\": [10619], \"characters\": \"\\u297B\" },                                              // 1895\n  \"&supmult;\": { \"codepoints\": [10946], \"characters\": \"\\u2AC2\" },                                              // 1896\n  \"&supnE;\": { \"codepoints\": [10956], \"characters\": \"\\u2ACC\" },                                                // 1897\n  \"&supne;\": { \"codepoints\": [8843], \"characters\": \"\\u228B\" },                                                 // 1898\n  \"&supplus;\": { \"codepoints\": [10944], \"characters\": \"\\u2AC0\" },                                              // 1899\n  \"&supset;\": { \"codepoints\": [8835], \"characters\": \"\\u2283\" },                                                // 1900\n  \"&Supset;\": { \"codepoints\": [8913], \"characters\": \"\\u22D1\" },                                                // 1901\n  \"&supseteq;\": { \"codepoints\": [8839], \"characters\": \"\\u2287\" },                                              // 1902\n  \"&supseteqq;\": { \"codepoints\": [10950], \"characters\": \"\\u2AC6\" },                                            // 1903\n  \"&supsetneq;\": { \"codepoints\": [8843], \"characters\": \"\\u228B\" },                                             // 1904\n  \"&supsetneqq;\": { \"codepoints\": [10956], \"characters\": \"\\u2ACC\" },                                           // 1905\n  \"&supsim;\": { \"codepoints\": [10952], \"characters\": \"\\u2AC8\" },                                               // 1906\n  \"&supsub;\": { \"codepoints\": [10964], \"characters\": \"\\u2AD4\" },                                               // 1907\n  \"&supsup;\": { \"codepoints\": [10966], \"characters\": \"\\u2AD6\" },                                               // 1908\n  \"&swarhk;\": { \"codepoints\": [10534], \"characters\": \"\\u2926\" },                                               // 1909\n  \"&swarr;\": { \"codepoints\": [8601], \"characters\": \"\\u2199\" },                                                 // 1910\n  \"&swArr;\": { \"codepoints\": [8665], \"characters\": \"\\u21D9\" },                                                 // 1911\n  \"&swarrow;\": { \"codepoints\": [8601], \"characters\": \"\\u2199\" },                                               // 1912\n  \"&swnwar;\": { \"codepoints\": [10538], \"characters\": \"\\u292A\" },                                               // 1913\n  \"&szlig;\": { \"codepoints\": [223], \"characters\": \"\\u00DF\" },                                                  // 1914\n  \"&szlig\": { \"codepoints\": [223], \"characters\": \"\\u00DF\" },                                                   // 1915\n  \"&Tab;\": { \"codepoints\": [9], \"characters\": \"\\u0009\" },                                                      // 1916\n  \"&target;\": { \"codepoints\": [8982], \"characters\": \"\\u2316\" },                                                // 1917\n  \"&Tau;\": { \"codepoints\": [932], \"characters\": \"\\u03A4\" },                                                    // 1918\n  \"&tau;\": { \"codepoints\": [964], \"characters\": \"\\u03C4\" },                                                    // 1919\n  \"&tbrk;\": { \"codepoints\": [9140], \"characters\": \"\\u23B4\" },                                                  // 1920\n  \"&Tcaron;\": { \"codepoints\": [356], \"characters\": \"\\u0164\" },                                                 // 1921\n  \"&tcaron;\": { \"codepoints\": [357], \"characters\": \"\\u0165\" },                                                 // 1922\n  \"&Tcedil;\": { \"codepoints\": [354], \"characters\": \"\\u0162\" },                                                 // 1923\n  \"&tcedil;\": { \"codepoints\": [355], \"characters\": \"\\u0163\" },                                                 // 1924\n  \"&Tcy;\": { \"codepoints\": [1058], \"characters\": \"\\u0422\" },                                                   // 1925\n  \"&tcy;\": { \"codepoints\": [1090], \"characters\": \"\\u0442\" },                                                   // 1926\n  \"&tdot;\": { \"codepoints\": [8411], \"characters\": \"\\u20DB\" },                                                  // 1927\n  \"&telrec;\": { \"codepoints\": [8981], \"characters\": \"\\u2315\" },                                                // 1928\n  \"&Tfr;\": { \"codepoints\": [120087], \"characters\": \"\\uD835\\uDD17\" },                                           // 1929\n  \"&tfr;\": { \"codepoints\": [120113], \"characters\": \"\\uD835\\uDD31\" },                                           // 1930\n  \"&there4;\": { \"codepoints\": [8756], \"characters\": \"\\u2234\" },                                                // 1931\n  \"&therefore;\": { \"codepoints\": [8756], \"characters\": \"\\u2234\" },                                             // 1932\n  \"&Therefore;\": { \"codepoints\": [8756], \"characters\": \"\\u2234\" },                                             // 1933\n  \"&Theta;\": { \"codepoints\": [920], \"characters\": \"\\u0398\" },                                                  // 1934\n  \"&theta;\": { \"codepoints\": [952], \"characters\": \"\\u03B8\" },                                                  // 1935\n  \"&thetasym;\": { \"codepoints\": [977], \"characters\": \"\\u03D1\" },                                               // 1936\n  \"&thetav;\": { \"codepoints\": [977], \"characters\": \"\\u03D1\" },                                                 // 1937\n  \"&thickapprox;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },                                           // 1938\n  \"&thicksim;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },                                              // 1939\n  \"&ThickSpace;\": { \"codepoints\": [8287, 8202], \"characters\": \"\\u205F\\u200A\" },                                // 1940\n  \"&ThinSpace;\": { \"codepoints\": [8201], \"characters\": \"\\u2009\" },                                             // 1941\n  \"&thinsp;\": { \"codepoints\": [8201], \"characters\": \"\\u2009\" },                                                // 1942\n  \"&thkap;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },                                                 // 1943\n  \"&thksim;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },                                                // 1944\n  \"&THORN;\": { \"codepoints\": [222], \"characters\": \"\\u00DE\" },                                                  // 1945\n  \"&THORN\": { \"codepoints\": [222], \"characters\": \"\\u00DE\" },                                                   // 1946\n  \"&thorn;\": { \"codepoints\": [254], \"characters\": \"\\u00FE\" },                                                  // 1947\n  \"&thorn\": { \"codepoints\": [254], \"characters\": \"\\u00FE\" },                                                   // 1948\n  \"&tilde;\": { \"codepoints\": [732], \"characters\": \"\\u02DC\" },                                                  // 1949\n  \"&Tilde;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },                                                 // 1950\n  \"&TildeEqual;\": { \"codepoints\": [8771], \"characters\": \"\\u2243\" },                                            // 1951\n  \"&TildeFullEqual;\": { \"codepoints\": [8773], \"characters\": \"\\u2245\" },                                        // 1952\n  \"&TildeTilde;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },                                            // 1953\n  \"&timesbar;\": { \"codepoints\": [10801], \"characters\": \"\\u2A31\" },                                             // 1954\n  \"&timesb;\": { \"codepoints\": [8864], \"characters\": \"\\u22A0\" },                                                // 1955\n  \"&times;\": { \"codepoints\": [215], \"characters\": \"\\u00D7\" },                                                  // 1956\n  \"&times\": { \"codepoints\": [215], \"characters\": \"\\u00D7\" },                                                   // 1957\n  \"&timesd;\": { \"codepoints\": [10800], \"characters\": \"\\u2A30\" },                                               // 1958\n  \"&tint;\": { \"codepoints\": [8749], \"characters\": \"\\u222D\" },                                                  // 1959\n  \"&toea;\": { \"codepoints\": [10536], \"characters\": \"\\u2928\" },                                                 // 1960\n  \"&topbot;\": { \"codepoints\": [9014], \"characters\": \"\\u2336\" },                                                // 1961\n  \"&topcir;\": { \"codepoints\": [10993], \"characters\": \"\\u2AF1\" },                                               // 1962\n  \"&top;\": { \"codepoints\": [8868], \"characters\": \"\\u22A4\" },                                                   // 1963\n  \"&Topf;\": { \"codepoints\": [120139], \"characters\": \"\\uD835\\uDD4B\" },                                          // 1964\n  \"&topf;\": { \"codepoints\": [120165], \"characters\": \"\\uD835\\uDD65\" },                                          // 1965\n  \"&topfork;\": { \"codepoints\": [10970], \"characters\": \"\\u2ADA\" },                                              // 1966\n  \"&tosa;\": { \"codepoints\": [10537], \"characters\": \"\\u2929\" },                                                 // 1967\n  \"&tprime;\": { \"codepoints\": [8244], \"characters\": \"\\u2034\" },                                                // 1968\n  \"&trade;\": { \"codepoints\": [8482], \"characters\": \"\\u2122\" },                                                 // 1969\n  \"&TRADE;\": { \"codepoints\": [8482], \"characters\": \"\\u2122\" },                                                 // 1970\n  \"&triangle;\": { \"codepoints\": [9653], \"characters\": \"\\u25B5\" },                                              // 1971\n  \"&triangledown;\": { \"codepoints\": [9663], \"characters\": \"\\u25BF\" },                                          // 1972\n  \"&triangleleft;\": { \"codepoints\": [9667], \"characters\": \"\\u25C3\" },                                          // 1973\n  \"&trianglelefteq;\": { \"codepoints\": [8884], \"characters\": \"\\u22B4\" },                                        // 1974\n  \"&triangleq;\": { \"codepoints\": [8796], \"characters\": \"\\u225C\" },                                             // 1975\n  \"&triangleright;\": { \"codepoints\": [9657], \"characters\": \"\\u25B9\" },                                         // 1976\n  \"&trianglerighteq;\": { \"codepoints\": [8885], \"characters\": \"\\u22B5\" },                                       // 1977\n  \"&tridot;\": { \"codepoints\": [9708], \"characters\": \"\\u25EC\" },                                                // 1978\n  \"&trie;\": { \"codepoints\": [8796], \"characters\": \"\\u225C\" },                                                  // 1979\n  \"&triminus;\": { \"codepoints\": [10810], \"characters\": \"\\u2A3A\" },                                             // 1980\n  \"&TripleDot;\": { \"codepoints\": [8411], \"characters\": \"\\u20DB\" },                                             // 1981\n  \"&triplus;\": { \"codepoints\": [10809], \"characters\": \"\\u2A39\" },                                              // 1982\n  \"&trisb;\": { \"codepoints\": [10701], \"characters\": \"\\u29CD\" },                                                // 1983\n  \"&tritime;\": { \"codepoints\": [10811], \"characters\": \"\\u2A3B\" },                                              // 1984\n  \"&trpezium;\": { \"codepoints\": [9186], \"characters\": \"\\u23E2\" },                                              // 1985\n  \"&Tscr;\": { \"codepoints\": [119983], \"characters\": \"\\uD835\\uDCAF\" },                                          // 1986\n  \"&tscr;\": { \"codepoints\": [120009], \"characters\": \"\\uD835\\uDCC9\" },                                          // 1987\n  \"&TScy;\": { \"codepoints\": [1062], \"characters\": \"\\u0426\" },                                                  // 1988\n  \"&tscy;\": { \"codepoints\": [1094], \"characters\": \"\\u0446\" },                                                  // 1989\n  \"&TSHcy;\": { \"codepoints\": [1035], \"characters\": \"\\u040B\" },                                                 // 1990\n  \"&tshcy;\": { \"codepoints\": [1115], \"characters\": \"\\u045B\" },                                                 // 1991\n  \"&Tstrok;\": { \"codepoints\": [358], \"characters\": \"\\u0166\" },                                                 // 1992\n  \"&tstrok;\": { \"codepoints\": [359], \"characters\": \"\\u0167\" },                                                 // 1993\n  \"&twixt;\": { \"codepoints\": [8812], \"characters\": \"\\u226C\" },                                                 // 1994\n  \"&twoheadleftarrow;\": { \"codepoints\": [8606], \"characters\": \"\\u219E\" },                                      // 1995\n  \"&twoheadrightarrow;\": { \"codepoints\": [8608], \"characters\": \"\\u21A0\" },                                     // 1996\n  \"&Uacute;\": { \"codepoints\": [218], \"characters\": \"\\u00DA\" },                                                 // 1997\n  \"&Uacute\": { \"codepoints\": [218], \"characters\": \"\\u00DA\" },                                                  // 1998\n  \"&uacute;\": { \"codepoints\": [250], \"characters\": \"\\u00FA\" },                                                 // 1999\n  \"&uacute\": { \"codepoints\": [250], \"characters\": \"\\u00FA\" },                                                  // 2000\n  \"&uarr;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },                                                  // 2001\n  \"&Uarr;\": { \"codepoints\": [8607], \"characters\": \"\\u219F\" },                                                  // 2002\n  \"&uArr;\": { \"codepoints\": [8657], \"characters\": \"\\u21D1\" },                                                  // 2003\n  \"&Uarrocir;\": { \"codepoints\": [10569], \"characters\": \"\\u2949\" },                                             // 2004\n  \"&Ubrcy;\": { \"codepoints\": [1038], \"characters\": \"\\u040E\" },                                                 // 2005\n  \"&ubrcy;\": { \"codepoints\": [1118], \"characters\": \"\\u045E\" },                                                 // 2006\n  \"&Ubreve;\": { \"codepoints\": [364], \"characters\": \"\\u016C\" },                                                 // 2007\n  \"&ubreve;\": { \"codepoints\": [365], \"characters\": \"\\u016D\" },                                                 // 2008\n  \"&Ucirc;\": { \"codepoints\": [219], \"characters\": \"\\u00DB\" },                                                  // 2009\n  \"&Ucirc\": { \"codepoints\": [219], \"characters\": \"\\u00DB\" },                                                   // 2010\n  \"&ucirc;\": { \"codepoints\": [251], \"characters\": \"\\u00FB\" },                                                  // 2011\n  \"&ucirc\": { \"codepoints\": [251], \"characters\": \"\\u00FB\" },                                                   // 2012\n  \"&Ucy;\": { \"codepoints\": [1059], \"characters\": \"\\u0423\" },                                                   // 2013\n  \"&ucy;\": { \"codepoints\": [1091], \"characters\": \"\\u0443\" },                                                   // 2014\n  \"&udarr;\": { \"codepoints\": [8645], \"characters\": \"\\u21C5\" },                                                 // 2015\n  \"&Udblac;\": { \"codepoints\": [368], \"characters\": \"\\u0170\" },                                                 // 2016\n  \"&udblac;\": { \"codepoints\": [369], \"characters\": \"\\u0171\" },                                                 // 2017\n  \"&udhar;\": { \"codepoints\": [10606], \"characters\": \"\\u296E\" },                                                // 2018\n  \"&ufisht;\": { \"codepoints\": [10622], \"characters\": \"\\u297E\" },                                               // 2019\n  \"&Ufr;\": { \"codepoints\": [120088], \"characters\": \"\\uD835\\uDD18\" },                                           // 2020\n  \"&ufr;\": { \"codepoints\": [120114], \"characters\": \"\\uD835\\uDD32\" },                                           // 2021\n  \"&Ugrave;\": { \"codepoints\": [217], \"characters\": \"\\u00D9\" },                                                 // 2022\n  \"&Ugrave\": { \"codepoints\": [217], \"characters\": \"\\u00D9\" },                                                  // 2023\n  \"&ugrave;\": { \"codepoints\": [249], \"characters\": \"\\u00F9\" },                                                 // 2024\n  \"&ugrave\": { \"codepoints\": [249], \"characters\": \"\\u00F9\" },                                                  // 2025\n  \"&uHar;\": { \"codepoints\": [10595], \"characters\": \"\\u2963\" },                                                 // 2026\n  \"&uharl;\": { \"codepoints\": [8639], \"characters\": \"\\u21BF\" },                                                 // 2027\n  \"&uharr;\": { \"codepoints\": [8638], \"characters\": \"\\u21BE\" },                                                 // 2028\n  \"&uhblk;\": { \"codepoints\": [9600], \"characters\": \"\\u2580\" },                                                 // 2029\n  \"&ulcorn;\": { \"codepoints\": [8988], \"characters\": \"\\u231C\" },                                                // 2030\n  \"&ulcorner;\": { \"codepoints\": [8988], \"characters\": \"\\u231C\" },                                              // 2031\n  \"&ulcrop;\": { \"codepoints\": [8975], \"characters\": \"\\u230F\" },                                                // 2032\n  \"&ultri;\": { \"codepoints\": [9720], \"characters\": \"\\u25F8\" },                                                 // 2033\n  \"&Umacr;\": { \"codepoints\": [362], \"characters\": \"\\u016A\" },                                                  // 2034\n  \"&umacr;\": { \"codepoints\": [363], \"characters\": \"\\u016B\" },                                                  // 2035\n  \"&uml;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },                                                    // 2036\n  \"&uml\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },                                                     // 2037\n  \"&UnderBar;\": { \"codepoints\": [95], \"characters\": \"\\u005F\" },                                                // 2038\n  \"&UnderBrace;\": { \"codepoints\": [9183], \"characters\": \"\\u23DF\" },                                            // 2039\n  \"&UnderBracket;\": { \"codepoints\": [9141], \"characters\": \"\\u23B5\" },                                          // 2040\n  \"&UnderParenthesis;\": { \"codepoints\": [9181], \"characters\": \"\\u23DD\" },                                      // 2041\n  \"&Union;\": { \"codepoints\": [8899], \"characters\": \"\\u22C3\" },                                                 // 2042\n  \"&UnionPlus;\": { \"codepoints\": [8846], \"characters\": \"\\u228E\" },                                             // 2043\n  \"&Uogon;\": { \"codepoints\": [370], \"characters\": \"\\u0172\" },                                                  // 2044\n  \"&uogon;\": { \"codepoints\": [371], \"characters\": \"\\u0173\" },                                                  // 2045\n  \"&Uopf;\": { \"codepoints\": [120140], \"characters\": \"\\uD835\\uDD4C\" },                                          // 2046\n  \"&uopf;\": { \"codepoints\": [120166], \"characters\": \"\\uD835\\uDD66\" },                                          // 2047\n  \"&UpArrowBar;\": { \"codepoints\": [10514], \"characters\": \"\\u2912\" },                                           // 2048\n  \"&uparrow;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },                                               // 2049\n  \"&UpArrow;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },                                               // 2050\n  \"&Uparrow;\": { \"codepoints\": [8657], \"characters\": \"\\u21D1\" },                                               // 2051\n  \"&UpArrowDownArrow;\": { \"codepoints\": [8645], \"characters\": \"\\u21C5\" },                                      // 2052\n  \"&updownarrow;\": { \"codepoints\": [8597], \"characters\": \"\\u2195\" },                                           // 2053\n  \"&UpDownArrow;\": { \"codepoints\": [8597], \"characters\": \"\\u2195\" },                                           // 2054\n  \"&Updownarrow;\": { \"codepoints\": [8661], \"characters\": \"\\u21D5\" },                                           // 2055\n  \"&UpEquilibrium;\": { \"codepoints\": [10606], \"characters\": \"\\u296E\" },                                        // 2056\n  \"&upharpoonleft;\": { \"codepoints\": [8639], \"characters\": \"\\u21BF\" },                                         // 2057\n  \"&upharpoonright;\": { \"codepoints\": [8638], \"characters\": \"\\u21BE\" },                                        // 2058\n  \"&uplus;\": { \"codepoints\": [8846], \"characters\": \"\\u228E\" },                                                 // 2059\n  \"&UpperLeftArrow;\": { \"codepoints\": [8598], \"characters\": \"\\u2196\" },                                        // 2060\n  \"&UpperRightArrow;\": { \"codepoints\": [8599], \"characters\": \"\\u2197\" },                                       // 2061\n  \"&upsi;\": { \"codepoints\": [965], \"characters\": \"\\u03C5\" },                                                   // 2062\n  \"&Upsi;\": { \"codepoints\": [978], \"characters\": \"\\u03D2\" },                                                   // 2063\n  \"&upsih;\": { \"codepoints\": [978], \"characters\": \"\\u03D2\" },                                                  // 2064\n  \"&Upsilon;\": { \"codepoints\": [933], \"characters\": \"\\u03A5\" },                                                // 2065\n  \"&upsilon;\": { \"codepoints\": [965], \"characters\": \"\\u03C5\" },                                                // 2066\n  \"&UpTeeArrow;\": { \"codepoints\": [8613], \"characters\": \"\\u21A5\" },                                            // 2067\n  \"&UpTee;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },                                                 // 2068\n  \"&upuparrows;\": { \"codepoints\": [8648], \"characters\": \"\\u21C8\" },                                            // 2069\n  \"&urcorn;\": { \"codepoints\": [8989], \"characters\": \"\\u231D\" },                                                // 2070\n  \"&urcorner;\": { \"codepoints\": [8989], \"characters\": \"\\u231D\" },                                              // 2071\n  \"&urcrop;\": { \"codepoints\": [8974], \"characters\": \"\\u230E\" },                                                // 2072\n  \"&Uring;\": { \"codepoints\": [366], \"characters\": \"\\u016E\" },                                                  // 2073\n  \"&uring;\": { \"codepoints\": [367], \"characters\": \"\\u016F\" },                                                  // 2074\n  \"&urtri;\": { \"codepoints\": [9721], \"characters\": \"\\u25F9\" },                                                 // 2075\n  \"&Uscr;\": { \"codepoints\": [119984], \"characters\": \"\\uD835\\uDCB0\" },                                          // 2076\n  \"&uscr;\": { \"codepoints\": [120010], \"characters\": \"\\uD835\\uDCCA\" },                                          // 2077\n  \"&utdot;\": { \"codepoints\": [8944], \"characters\": \"\\u22F0\" },                                                 // 2078\n  \"&Utilde;\": { \"codepoints\": [360], \"characters\": \"\\u0168\" },                                                 // 2079\n  \"&utilde;\": { \"codepoints\": [361], \"characters\": \"\\u0169\" },                                                 // 2080\n  \"&utri;\": { \"codepoints\": [9653], \"characters\": \"\\u25B5\" },                                                  // 2081\n  \"&utrif;\": { \"codepoints\": [9652], \"characters\": \"\\u25B4\" },                                                 // 2082\n  \"&uuarr;\": { \"codepoints\": [8648], \"characters\": \"\\u21C8\" },                                                 // 2083\n  \"&Uuml;\": { \"codepoints\": [220], \"characters\": \"\\u00DC\" },                                                   // 2084\n  \"&Uuml\": { \"codepoints\": [220], \"characters\": \"\\u00DC\" },                                                    // 2085\n  \"&uuml;\": { \"codepoints\": [252], \"characters\": \"\\u00FC\" },                                                   // 2086\n  \"&uuml\": { \"codepoints\": [252], \"characters\": \"\\u00FC\" },                                                    // 2087\n  \"&uwangle;\": { \"codepoints\": [10663], \"characters\": \"\\u29A7\" },                                              // 2088\n  \"&vangrt;\": { \"codepoints\": [10652], \"characters\": \"\\u299C\" },                                               // 2089\n  \"&varepsilon;\": { \"codepoints\": [1013], \"characters\": \"\\u03F5\" },                                            // 2090\n  \"&varkappa;\": { \"codepoints\": [1008], \"characters\": \"\\u03F0\" },                                              // 2091\n  \"&varnothing;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },                                            // 2092\n  \"&varphi;\": { \"codepoints\": [981], \"characters\": \"\\u03D5\" },                                                 // 2093\n  \"&varpi;\": { \"codepoints\": [982], \"characters\": \"\\u03D6\" },                                                  // 2094\n  \"&varpropto;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },                                             // 2095\n  \"&varr;\": { \"codepoints\": [8597], \"characters\": \"\\u2195\" },                                                  // 2096\n  \"&vArr;\": { \"codepoints\": [8661], \"characters\": \"\\u21D5\" },                                                  // 2097\n  \"&varrho;\": { \"codepoints\": [1009], \"characters\": \"\\u03F1\" },                                                // 2098\n  \"&varsigma;\": { \"codepoints\": [962], \"characters\": \"\\u03C2\" },                                               // 2099\n  \"&varsubsetneq;\": { \"codepoints\": [8842, 65024], \"characters\": \"\\u228A\\uFE00\" },                             // 2100\n  \"&varsubsetneqq;\": { \"codepoints\": [10955, 65024], \"characters\": \"\\u2ACB\\uFE00\" },                           // 2101\n  \"&varsupsetneq;\": { \"codepoints\": [8843, 65024], \"characters\": \"\\u228B\\uFE00\" },                             // 2102\n  \"&varsupsetneqq;\": { \"codepoints\": [10956, 65024], \"characters\": \"\\u2ACC\\uFE00\" },                           // 2103\n  \"&vartheta;\": { \"codepoints\": [977], \"characters\": \"\\u03D1\" },                                               // 2104\n  \"&vartriangleleft;\": { \"codepoints\": [8882], \"characters\": \"\\u22B2\" },                                       // 2105\n  \"&vartriangleright;\": { \"codepoints\": [8883], \"characters\": \"\\u22B3\" },                                      // 2106\n  \"&vBar;\": { \"codepoints\": [10984], \"characters\": \"\\u2AE8\" },                                                 // 2107\n  \"&Vbar;\": { \"codepoints\": [10987], \"characters\": \"\\u2AEB\" },                                                 // 2108\n  \"&vBarv;\": { \"codepoints\": [10985], \"characters\": \"\\u2AE9\" },                                                // 2109\n  \"&Vcy;\": { \"codepoints\": [1042], \"characters\": \"\\u0412\" },                                                   // 2110\n  \"&vcy;\": { \"codepoints\": [1074], \"characters\": \"\\u0432\" },                                                   // 2111\n  \"&vdash;\": { \"codepoints\": [8866], \"characters\": \"\\u22A2\" },                                                 // 2112\n  \"&vDash;\": { \"codepoints\": [8872], \"characters\": \"\\u22A8\" },                                                 // 2113\n  \"&Vdash;\": { \"codepoints\": [8873], \"characters\": \"\\u22A9\" },                                                 // 2114\n  \"&VDash;\": { \"codepoints\": [8875], \"characters\": \"\\u22AB\" },                                                 // 2115\n  \"&Vdashl;\": { \"codepoints\": [10982], \"characters\": \"\\u2AE6\" },                                               // 2116\n  \"&veebar;\": { \"codepoints\": [8891], \"characters\": \"\\u22BB\" },                                                // 2117\n  \"&vee;\": { \"codepoints\": [8744], \"characters\": \"\\u2228\" },                                                   // 2118\n  \"&Vee;\": { \"codepoints\": [8897], \"characters\": \"\\u22C1\" },                                                   // 2119\n  \"&veeeq;\": { \"codepoints\": [8794], \"characters\": \"\\u225A\" },                                                 // 2120\n  \"&vellip;\": { \"codepoints\": [8942], \"characters\": \"\\u22EE\" },                                                // 2121\n  \"&verbar;\": { \"codepoints\": [124], \"characters\": \"\\u007C\" },                                                 // 2122\n  \"&Verbar;\": { \"codepoints\": [8214], \"characters\": \"\\u2016\" },                                                // 2123\n  \"&vert;\": { \"codepoints\": [124], \"characters\": \"\\u007C\" },                                                   // 2124\n  \"&Vert;\": { \"codepoints\": [8214], \"characters\": \"\\u2016\" },                                                  // 2125\n  \"&VerticalBar;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },                                           // 2126\n  \"&VerticalLine;\": { \"codepoints\": [124], \"characters\": \"\\u007C\" },                                           // 2127\n  \"&VerticalSeparator;\": { \"codepoints\": [10072], \"characters\": \"\\u2758\" },                                    // 2128\n  \"&VerticalTilde;\": { \"codepoints\": [8768], \"characters\": \"\\u2240\" },                                         // 2129\n  \"&VeryThinSpace;\": { \"codepoints\": [8202], \"characters\": \"\\u200A\" },                                         // 2130\n  \"&Vfr;\": { \"codepoints\": [120089], \"characters\": \"\\uD835\\uDD19\" },                                           // 2131\n  \"&vfr;\": { \"codepoints\": [120115], \"characters\": \"\\uD835\\uDD33\" },                                           // 2132\n  \"&vltri;\": { \"codepoints\": [8882], \"characters\": \"\\u22B2\" },                                                 // 2133\n  \"&vnsub;\": { \"codepoints\": [8834, 8402], \"characters\": \"\\u2282\\u20D2\" },                                     // 2134\n  \"&vnsup;\": { \"codepoints\": [8835, 8402], \"characters\": \"\\u2283\\u20D2\" },                                     // 2135\n  \"&Vopf;\": { \"codepoints\": [120141], \"characters\": \"\\uD835\\uDD4D\" },                                          // 2136\n  \"&vopf;\": { \"codepoints\": [120167], \"characters\": \"\\uD835\\uDD67\" },                                          // 2137\n  \"&vprop;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },                                                 // 2138\n  \"&vrtri;\": { \"codepoints\": [8883], \"characters\": \"\\u22B3\" },                                                 // 2139\n  \"&Vscr;\": { \"codepoints\": [119985], \"characters\": \"\\uD835\\uDCB1\" },                                          // 2140\n  \"&vscr;\": { \"codepoints\": [120011], \"characters\": \"\\uD835\\uDCCB\" },                                          // 2141\n  \"&vsubnE;\": { \"codepoints\": [10955, 65024], \"characters\": \"\\u2ACB\\uFE00\" },                                  // 2142\n  \"&vsubne;\": { \"codepoints\": [8842, 65024], \"characters\": \"\\u228A\\uFE00\" },                                   // 2143\n  \"&vsupnE;\": { \"codepoints\": [10956, 65024], \"characters\": \"\\u2ACC\\uFE00\" },                                  // 2144\n  \"&vsupne;\": { \"codepoints\": [8843, 65024], \"characters\": \"\\u228B\\uFE00\" },                                   // 2145\n  \"&Vvdash;\": { \"codepoints\": [8874], \"characters\": \"\\u22AA\" },                                                // 2146\n  \"&vzigzag;\": { \"codepoints\": [10650], \"characters\": \"\\u299A\" },                                              // 2147\n  \"&Wcirc;\": { \"codepoints\": [372], \"characters\": \"\\u0174\" },                                                  // 2148\n  \"&wcirc;\": { \"codepoints\": [373], \"characters\": \"\\u0175\" },                                                  // 2149\n  \"&wedbar;\": { \"codepoints\": [10847], \"characters\": \"\\u2A5F\" },                                               // 2150\n  \"&wedge;\": { \"codepoints\": [8743], \"characters\": \"\\u2227\" },                                                 // 2151\n  \"&Wedge;\": { \"codepoints\": [8896], \"characters\": \"\\u22C0\" },                                                 // 2152\n  \"&wedgeq;\": { \"codepoints\": [8793], \"characters\": \"\\u2259\" },                                                // 2153\n  \"&weierp;\": { \"codepoints\": [8472], \"characters\": \"\\u2118\" },                                                // 2154\n  \"&Wfr;\": { \"codepoints\": [120090], \"characters\": \"\\uD835\\uDD1A\" },                                           // 2155\n  \"&wfr;\": { \"codepoints\": [120116], \"characters\": \"\\uD835\\uDD34\" },                                           // 2156\n  \"&Wopf;\": { \"codepoints\": [120142], \"characters\": \"\\uD835\\uDD4E\" },                                          // 2157\n  \"&wopf;\": { \"codepoints\": [120168], \"characters\": \"\\uD835\\uDD68\" },                                          // 2158\n  \"&wp;\": { \"codepoints\": [8472], \"characters\": \"\\u2118\" },                                                    // 2159\n  \"&wr;\": { \"codepoints\": [8768], \"characters\": \"\\u2240\" },                                                    // 2160\n  \"&wreath;\": { \"codepoints\": [8768], \"characters\": \"\\u2240\" },                                                // 2161\n  \"&Wscr;\": { \"codepoints\": [119986], \"characters\": \"\\uD835\\uDCB2\" },                                          // 2162\n  \"&wscr;\": { \"codepoints\": [120012], \"characters\": \"\\uD835\\uDCCC\" },                                          // 2163\n  \"&xcap;\": { \"codepoints\": [8898], \"characters\": \"\\u22C2\" },                                                  // 2164\n  \"&xcirc;\": { \"codepoints\": [9711], \"characters\": \"\\u25EF\" },                                                 // 2165\n  \"&xcup;\": { \"codepoints\": [8899], \"characters\": \"\\u22C3\" },                                                  // 2166\n  \"&xdtri;\": { \"codepoints\": [9661], \"characters\": \"\\u25BD\" },                                                 // 2167\n  \"&Xfr;\": { \"codepoints\": [120091], \"characters\": \"\\uD835\\uDD1B\" },                                           // 2168\n  \"&xfr;\": { \"codepoints\": [120117], \"characters\": \"\\uD835\\uDD35\" },                                           // 2169\n  \"&xharr;\": { \"codepoints\": [10231], \"characters\": \"\\u27F7\" },                                                // 2170\n  \"&xhArr;\": { \"codepoints\": [10234], \"characters\": \"\\u27FA\" },                                                // 2171\n  \"&Xi;\": { \"codepoints\": [926], \"characters\": \"\\u039E\" },                                                     // 2172\n  \"&xi;\": { \"codepoints\": [958], \"characters\": \"\\u03BE\" },                                                     // 2173\n  \"&xlarr;\": { \"codepoints\": [10229], \"characters\": \"\\u27F5\" },                                                // 2174\n  \"&xlArr;\": { \"codepoints\": [10232], \"characters\": \"\\u27F8\" },                                                // 2175\n  \"&xmap;\": { \"codepoints\": [10236], \"characters\": \"\\u27FC\" },                                                 // 2176\n  \"&xnis;\": { \"codepoints\": [8955], \"characters\": \"\\u22FB\" },                                                  // 2177\n  \"&xodot;\": { \"codepoints\": [10752], \"characters\": \"\\u2A00\" },                                                // 2178\n  \"&Xopf;\": { \"codepoints\": [120143], \"characters\": \"\\uD835\\uDD4F\" },                                          // 2179\n  \"&xopf;\": { \"codepoints\": [120169], \"characters\": \"\\uD835\\uDD69\" },                                          // 2180\n  \"&xoplus;\": { \"codepoints\": [10753], \"characters\": \"\\u2A01\" },                                               // 2181\n  \"&xotime;\": { \"codepoints\": [10754], \"characters\": \"\\u2A02\" },                                               // 2182\n  \"&xrarr;\": { \"codepoints\": [10230], \"characters\": \"\\u27F6\" },                                                // 2183\n  \"&xrArr;\": { \"codepoints\": [10233], \"characters\": \"\\u27F9\" },                                                // 2184\n  \"&Xscr;\": { \"codepoints\": [119987], \"characters\": \"\\uD835\\uDCB3\" },                                          // 2185\n  \"&xscr;\": { \"codepoints\": [120013], \"characters\": \"\\uD835\\uDCCD\" },                                          // 2186\n  \"&xsqcup;\": { \"codepoints\": [10758], \"characters\": \"\\u2A06\" },                                               // 2187\n  \"&xuplus;\": { \"codepoints\": [10756], \"characters\": \"\\u2A04\" },                                               // 2188\n  \"&xutri;\": { \"codepoints\": [9651], \"characters\": \"\\u25B3\" },                                                 // 2189\n  \"&xvee;\": { \"codepoints\": [8897], \"characters\": \"\\u22C1\" },                                                  // 2190\n  \"&xwedge;\": { \"codepoints\": [8896], \"characters\": \"\\u22C0\" },                                                // 2191\n  \"&Yacute;\": { \"codepoints\": [221], \"characters\": \"\\u00DD\" },                                                 // 2192\n  \"&Yacute\": { \"codepoints\": [221], \"characters\": \"\\u00DD\" },                                                  // 2193\n  \"&yacute;\": { \"codepoints\": [253], \"characters\": \"\\u00FD\" },                                                 // 2194\n  \"&yacute\": { \"codepoints\": [253], \"characters\": \"\\u00FD\" },                                                  // 2195\n  \"&YAcy;\": { \"codepoints\": [1071], \"characters\": \"\\u042F\" },                                                  // 2196\n  \"&yacy;\": { \"codepoints\": [1103], \"characters\": \"\\u044F\" },                                                  // 2197\n  \"&Ycirc;\": { \"codepoints\": [374], \"characters\": \"\\u0176\" },                                                  // 2198\n  \"&ycirc;\": { \"codepoints\": [375], \"characters\": \"\\u0177\" },                                                  // 2199\n  \"&Ycy;\": { \"codepoints\": [1067], \"characters\": \"\\u042B\" },                                                   // 2200\n  \"&ycy;\": { \"codepoints\": [1099], \"characters\": \"\\u044B\" },                                                   // 2201\n  \"&yen;\": { \"codepoints\": [165], \"characters\": \"\\u00A5\" },                                                    // 2202\n  \"&yen\": { \"codepoints\": [165], \"characters\": \"\\u00A5\" },                                                     // 2203\n  \"&Yfr;\": { \"codepoints\": [120092], \"characters\": \"\\uD835\\uDD1C\" },                                           // 2204\n  \"&yfr;\": { \"codepoints\": [120118], \"characters\": \"\\uD835\\uDD36\" },                                           // 2205\n  \"&YIcy;\": { \"codepoints\": [1031], \"characters\": \"\\u0407\" },                                                  // 2206\n  \"&yicy;\": { \"codepoints\": [1111], \"characters\": \"\\u0457\" },                                                  // 2207\n  \"&Yopf;\": { \"codepoints\": [120144], \"characters\": \"\\uD835\\uDD50\" },                                          // 2208\n  \"&yopf;\": { \"codepoints\": [120170], \"characters\": \"\\uD835\\uDD6A\" },                                          // 2209\n  \"&Yscr;\": { \"codepoints\": [119988], \"characters\": \"\\uD835\\uDCB4\" },                                          // 2210\n  \"&yscr;\": { \"codepoints\": [120014], \"characters\": \"\\uD835\\uDCCE\" },                                          // 2211\n  \"&YUcy;\": { \"codepoints\": [1070], \"characters\": \"\\u042E\" },                                                  // 2212\n  \"&yucy;\": { \"codepoints\": [1102], \"characters\": \"\\u044E\" },                                                  // 2213\n  \"&yuml;\": { \"codepoints\": [255], \"characters\": \"\\u00FF\" },                                                   // 2214\n  \"&yuml\": { \"codepoints\": [255], \"characters\": \"\\u00FF\" },                                                    // 2215\n  \"&Yuml;\": { \"codepoints\": [376], \"characters\": \"\\u0178\" },                                                   // 2216\n  \"&Zacute;\": { \"codepoints\": [377], \"characters\": \"\\u0179\" },                                                 // 2217\n  \"&zacute;\": { \"codepoints\": [378], \"characters\": \"\\u017A\" },                                                 // 2218\n  \"&Zcaron;\": { \"codepoints\": [381], \"characters\": \"\\u017D\" },                                                 // 2219\n  \"&zcaron;\": { \"codepoints\": [382], \"characters\": \"\\u017E\" },                                                 // 2220\n  \"&Zcy;\": { \"codepoints\": [1047], \"characters\": \"\\u0417\" },                                                   // 2221\n  \"&zcy;\": { \"codepoints\": [1079], \"characters\": \"\\u0437\" },                                                   // 2222\n  \"&Zdot;\": { \"codepoints\": [379], \"characters\": \"\\u017B\" },                                                   // 2223\n  \"&zdot;\": { \"codepoints\": [380], \"characters\": \"\\u017C\" },                                                   // 2224\n  \"&zeetrf;\": { \"codepoints\": [8488], \"characters\": \"\\u2128\" },                                                // 2225\n  \"&ZeroWidthSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },                                        // 2226\n  \"&Zeta;\": { \"codepoints\": [918], \"characters\": \"\\u0396\" },                                                   // 2227\n  \"&zeta;\": { \"codepoints\": [950], \"characters\": \"\\u03B6\" },                                                   // 2228\n  \"&zfr;\": { \"codepoints\": [120119], \"characters\": \"\\uD835\\uDD37\" },                                           // 2229\n  \"&Zfr;\": { \"codepoints\": [8488], \"characters\": \"\\u2128\" },                                                   // 2230\n  \"&ZHcy;\": { \"codepoints\": [1046], \"characters\": \"\\u0416\" },                                                  // 2231\n  \"&zhcy;\": { \"codepoints\": [1078], \"characters\": \"\\u0436\" },                                                  // 2232\n  \"&zigrarr;\": { \"codepoints\": [8669], \"characters\": \"\\u21DD\" },                                               // 2233\n  \"&zopf;\": { \"codepoints\": [120171], \"characters\": \"\\uD835\\uDD6B\" },                                          // 2234\n  \"&Zopf;\": { \"codepoints\": [8484], \"characters\": \"\\u2124\" },                                                  // 2235\n  \"&Zscr;\": { \"codepoints\": [119989], \"characters\": \"\\uD835\\uDCB5\" },                                          // 2236\n  \"&zscr;\": { \"codepoints\": [120015], \"characters\": \"\\uD835\\uDCCF\" },                                          // 2237\n  \"&zwj;\": { \"codepoints\": [8205], \"characters\": \"\\u200D\" },                                                   // 2238\n  \"&zwnj;\": { \"codepoints\": [8204], \"characters\": \"\\u200C\" }                                                   // 2239\n};                                                                                                             // 2240\n                                                                                                               // 2241\nvar ALPHANUMERIC = /^[a-zA-Z0-9]/;                                                                             // 2242\nvar getPossibleNamedEntityStart = makeRegexMatcher(/^&[a-zA-Z0-9]/);                                           // 2243\nvar getApparentNamedEntity = makeRegexMatcher(/^&[a-zA-Z0-9]+;/);                                              // 2244\n                                                                                                               // 2245\nvar getNamedEntityByFirstChar = {};                                                                            // 2246\n(function () {                                                                                                 // 2247\n  var namedEntitiesByFirstChar = {};                                                                           // 2248\n  for (var ent in ENTITIES) {                                                                                  // 2249\n    var chr = ent.charAt(1);                                                                                   // 2250\n    namedEntitiesByFirstChar[chr] = (namedEntitiesByFirstChar[chr] || []);                                     // 2251\n    namedEntitiesByFirstChar[chr].push(ent.slice(2));                                                          // 2252\n  }                                                                                                            // 2253\n  for (var chr in namedEntitiesByFirstChar) {                                                                  // 2254\n    getNamedEntityByFirstChar[chr] = makeRegexMatcher(                                                         // 2255\n      new RegExp('^&' + chr + '(?:' +                                                                          // 2256\n                 namedEntitiesByFirstChar[chr].join('|') + ')'));                                              // 2257\n  }                                                                                                            // 2258\n})();                                                                                                          // 2259\n                                                                                                               // 2260\n// Run a provided \"matcher\" function but reset the current position afterwards.                                // 2261\n// Fatal failure of the matcher is not suppressed.                                                             // 2262\nvar peekMatcher = function (scanner, matcher) {                                                                // 2263\n  var start = scanner.pos;                                                                                     // 2264\n  var result = matcher(scanner);                                                                               // 2265\n  scanner.pos = start;                                                                                         // 2266\n  return result;                                                                                               // 2267\n};                                                                                                             // 2268\n                                                                                                               // 2269\n// Returns a string like \"&amp;\" or a falsy value if no match.  Fails fatally                                  // 2270\n// if something looks like a named entity but isn't.                                                           // 2271\nvar getNamedCharRef = function (scanner, inAttribute) {                                                        // 2272\n  // look for `&` followed by alphanumeric                                                                     // 2273\n  if (! peekMatcher(scanner, getPossibleNamedEntityStart))                                                     // 2274\n    return null;                                                                                               // 2275\n                                                                                                               // 2276\n  var matcher = getNamedEntityByFirstChar[scanner.rest().charAt(1)];                                           // 2277\n  var entity = null;                                                                                           // 2278\n  if (matcher)                                                                                                 // 2279\n    entity = peekMatcher(scanner, matcher);                                                                    // 2280\n                                                                                                               // 2281\n  if (entity) {                                                                                                // 2282\n    if (entity.slice(-1) !== ';') {                                                                            // 2283\n      // Certain character references with no semi are an error, like `&lt`.                                   // 2284\n      // In attribute values, however, this is not fatal if the next character                                 // 2285\n      // is alphanumeric.                                                                                      // 2286\n      //                                                                                                       // 2287\n      // This rule affects href attributes, for example, deeming \"/?foo=bar&ltc=abc\"                           // 2288\n      // to be ok but \"/?foo=bar&lt=abc\" to not be.                                                            // 2289\n      if (inAttribute && ALPHANUMERIC.test(scanner.rest().charAt(entity.length)))                              // 2290\n        return null;                                                                                           // 2291\n      scanner.fatal(\"Character reference requires semicolon: \" + entity);                                      // 2292\n    } else {                                                                                                   // 2293\n      scanner.pos += entity.length;                                                                            // 2294\n      return entity;                                                                                           // 2295\n    }                                                                                                          // 2296\n  } else {                                                                                                     // 2297\n    // we couldn't match any real entity, so see if this is a bad entity                                       // 2298\n    // or something we can overlook.                                                                           // 2299\n    var badEntity = peekMatcher(scanner, getApparentNamedEntity);                                              // 2300\n    if (badEntity)                                                                                             // 2301\n      scanner.fatal(\"Invalid character reference: \" + badEntity);                                              // 2302\n    // `&aaaa` is ok with no semicolon                                                                         // 2303\n    return null;                                                                                               // 2304\n  }                                                                                                            // 2305\n};                                                                                                             // 2306\n                                                                                                               // 2307\n// Returns the sequence of one or two codepoints making up an entity as an array.                              // 2308\n// Codepoints in the array are integers and may be out of the single-char JavaScript                           // 2309\n// range.                                                                                                      // 2310\nvar getCodePoints = function (namedEntity) {                                                                   // 2311\n  return ENTITIES[namedEntity].codepoints;                                                                     // 2312\n};                                                                                                             // 2313\n                                                                                                               // 2314\nvar ALLOWED_AFTER_AMP = /^[\\u0009\\u000a\\u000c <&]/;                                                            // 2315\n                                                                                                               // 2316\nvar getCharRefNumber = makeRegexMatcher(/^(?:[xX][0-9a-fA-F]+|[0-9]+);/);                                      // 2317\n                                                                                                               // 2318\nvar BIG_BAD_CODEPOINTS = (function (obj) {                                                                     // 2319\n  var list = [0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF,                                            // 2320\n              0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF,                                            // 2321\n              0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF,                                            // 2322\n              0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF,                                            // 2323\n              0xDFFFE, 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF,                                            // 2324\n              0x10FFFE, 0x10FFFF];                                                                             // 2325\n  for (var i = 0; i < list.length; i++)                                                                        // 2326\n    obj[list[i]] = true;                                                                                       // 2327\n                                                                                                               // 2328\n  return obj;                                                                                                  // 2329\n})({});                                                                                                        // 2330\n                                                                                                               // 2331\nvar isLegalCodepoint = function (cp) {                                                                         // 2332\n  if ((cp === 0) ||                                                                                            // 2333\n      (cp >= 0x80 && cp <= 0x9f) ||                                                                            // 2334\n      (cp >= 0xd800 && cp <= 0xdfff) ||                                                                        // 2335\n      (cp >= 0x10ffff) ||                                                                                      // 2336\n      (cp >= 0x1 && cp <= 0x8) ||                                                                              // 2337\n      (cp === 0xb) ||                                                                                          // 2338\n      (cp >= 0xd && cp <= 0x1f) ||                                                                             // 2339\n      (cp >= 0x7f && cp <= 0x9f) ||                                                                            // 2340\n      (cp >= 0xfdd0 && cp <= 0xfdef) ||                                                                        // 2341\n      (cp === 0xfffe) ||                                                                                       // 2342\n      (cp === 0xffff) ||                                                                                       // 2343\n      (cp >= 0x10000 && BIG_BAD_CODEPOINTS[cp]))                                                               // 2344\n    return false;                                                                                              // 2345\n                                                                                                               // 2346\n  return true;                                                                                                 // 2347\n};                                                                                                             // 2348\n                                                                                                               // 2349\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#consume-a-character-reference\n//                                                                                                             // 2351\n// Matches a character reference if possible, including the initial `&`.                                       // 2352\n// Fails fatally in error cases (assuming an initial `&` is matched), like a disallowed codepoint              // 2353\n// number or a bad named character reference.                                                                  // 2354\n//                                                                                                             // 2355\n// `inAttribute` is truthy if we are in an attribute value.                                                    // 2356\n//                                                                                                             // 2357\n// `allowedChar` is an optional character that,                                                                // 2358\n// if found after the initial `&`, aborts parsing silently rather than failing fatally.  In real use it is     // 2359\n// either `\"`, `'`, or `>` and is supplied when parsing attribute values.  NOTE: In the current spec, the      // 2360\n// value of `allowedChar` doesn't actually seem to end up mattering, but there is still some debate about      // 2361\n// the right approach to ampersands.                                                                           // 2362\ngetCharacterReference = HTMLTools.Parse.getCharacterReference = function (scanner, inAttribute, allowedChar) {\n  if (scanner.peek() !== '&')                                                                                  // 2364\n    // no ampersand                                                                                            // 2365\n    return null;                                                                                               // 2366\n                                                                                                               // 2367\n  var afterAmp = scanner.rest().charAt(1);                                                                     // 2368\n                                                                                                               // 2369\n  if (afterAmp === '#') {                                                                                      // 2370\n    scanner.pos += 2;                                                                                          // 2371\n    // refNumber includes possible initial `x` and final semicolon                                             // 2372\n    var refNumber = getCharRefNumber(scanner);                                                                 // 2373\n    // At this point we've consumed the input, so we're committed to returning                                 // 2374\n    // something or failing fatally.                                                                           // 2375\n    if (! refNumber)                                                                                           // 2376\n      scanner.fatal(\"Invalid numerical character reference starting with &#\");                                 // 2377\n    var codepoint;                                                                                             // 2378\n    if (refNumber.charAt(0) === 'x' || refNumber.charAt(0) === 'X') {                                          // 2379\n      // hex                                                                                                   // 2380\n      var hex = refNumber.slice(1, -1);                                                                        // 2381\n      while (hex.charAt(0) === '0')                                                                            // 2382\n        hex = hex.slice(1);                                                                                    // 2383\n      if (hex.length > 6)                                                                                      // 2384\n        scanner.fatal(\"Numerical character reference too large: 0x\" + hex);                                    // 2385\n      codepoint = parseInt(hex || \"0\", 16);                                                                    // 2386\n    } else {                                                                                                   // 2387\n      var dec = refNumber.slice(0, -1);                                                                        // 2388\n      while (dec.charAt(0) === '0')                                                                            // 2389\n        dec = dec.slice(1);                                                                                    // 2390\n      if (dec.length > 7)                                                                                      // 2391\n        scanner.fatal(\"Numerical character reference too large: \" + dec);                                      // 2392\n      codepoint = parseInt(dec || \"0\", 10);                                                                    // 2393\n    }                                                                                                          // 2394\n    if (! isLegalCodepoint(codepoint))                                                                         // 2395\n      scanner.fatal(\"Illegal codepoint in numerical character reference: &#\" + refNumber);                     // 2396\n    return { t: 'CharRef',                                                                                     // 2397\n             v: '&#' + refNumber,                                                                              // 2398\n             cp: [codepoint] };                                                                                // 2399\n  } else if ((! afterAmp) // EOF                                                                               // 2400\n             || (allowedChar && afterAmp === allowedChar)                                                      // 2401\n             || ALLOWED_AFTER_AMP.test(afterAmp)) {                                                            // 2402\n    return null;                                                                                               // 2403\n  } else {                                                                                                     // 2404\n    var namedEntity = getNamedCharRef(scanner, inAttribute);                                                   // 2405\n    if (namedEntity) {                                                                                         // 2406\n      return { t: 'CharRef',                                                                                   // 2407\n               v: namedEntity,                                                                                 // 2408\n               cp: getCodePoints(namedEntity) };                                                               // 2409\n    } else {                                                                                                   // 2410\n      return null;                                                                                             // 2411\n    }                                                                                                          // 2412\n  }                                                                                                            // 2413\n};                                                                                                             // 2414\n                                                                                                               // 2415\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/html-tools/tokenize.js                                                                             //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// Token types:                                                                                                // 1\n//                                                                                                             // 2\n// { t: 'Doctype',                                                                                             // 3\n//   v: String (entire Doctype declaration from the source),                                                   // 4\n//   name: String,                                                                                             // 5\n//   systemId: String (optional),                                                                              // 6\n//   publicId: String (optional)                                                                               // 7\n// }                                                                                                           // 8\n//                                                                                                             // 9\n// { t: 'Comment',                                                                                             // 10\n//   v: String (not including \"<!--\" and \"-->\")                                                                // 11\n// }                                                                                                           // 12\n//                                                                                                             // 13\n// { t: 'Chars',                                                                                               // 14\n//   v: String (pure text like you might pass to document.createTextNode,                                      // 15\n//              no character references)                                                                       // 16\n// }                                                                                                           // 17\n//                                                                                                             // 18\n// { t: 'Tag',                                                                                                 // 19\n//   isEnd: Boolean (optional),                                                                                // 20\n//   isSelfClosing: Boolean (optional),                                                                        // 21\n//   n: String (tag name, in lowercase or camel case),                                                         // 22\n//   attrs: dictionary of { String: [tokens] }                                                                 // 23\n//          OR [{ String: [tokens] }, TemplateTag tokens...]                                                   // 24\n//     (only for start tags; required)                                                                         // 25\n// }                                                                                                           // 26\n//                                                                                                             // 27\n// { t: 'CharRef',                                                                                             // 28\n//   v: String (entire character reference from the source, e.g. \"&amp;\"),                                     // 29\n//   cp: [Integer] (array of Unicode code point numbers it expands to)                                         // 30\n// }                                                                                                           // 31\n//                                                                                                             // 32\n// We keep around both the original form of the character reference and its                                    // 33\n// expansion so that subsequent processing steps have the option to                                            // 34\n// re-emit it (if they are generating HTML) or interpret it.  Named and                                        // 35\n// numerical code points may be more than 16 bits, in which case they                                          // 36\n// need to passed through codePointToString to make a JavaScript string.                                       // 37\n// Most named entities and all numeric character references are one codepoint                                  // 38\n// (e.g. \"&amp;\" is [38]), but a few are two codepoints.                                                       // 39\n//                                                                                                             // 40\n// { t: 'TemplateTag',                                                                                         // 41\n//   v: HTMLTools.TemplateTag                                                                                  // 42\n// }                                                                                                           // 43\n                                                                                                               // 44\n// The HTML tokenization spec says to preprocess the input stream to replace                                   // 45\n// CR(LF)? with LF.  However, preprocessing `scanner` would complicate things                                  // 46\n// by making indexes not match the input (e.g. for error messages), so we just                                 // 47\n// keep in mind as we go along that an LF might be represented by CRLF or CR.                                  // 48\n// In most cases, it doesn't actually matter what combination of whitespace                                    // 49\n// characters are present (e.g. inside tags).                                                                  // 50\nvar HTML_SPACE = /^[\\f\\n\\r\\t ]/;                                                                               // 51\n                                                                                                               // 52\nvar convertCRLF = function (str) {                                                                             // 53\n  return str.replace(/\\r\\n?/g, '\\n');                                                                          // 54\n};                                                                                                             // 55\n                                                                                                               // 56\ngetComment = HTMLTools.Parse.getComment = function (scanner) {                                                 // 57\n  if (scanner.rest().slice(0, 4) !== '<!--')                                                                   // 58\n    return null;                                                                                               // 59\n  scanner.pos += 4;                                                                                            // 60\n                                                                                                               // 61\n  // Valid comments are easy to parse; they end at the first `--`!                                             // 62\n  // Our main job is throwing errors.                                                                          // 63\n                                                                                                               // 64\n  var rest = scanner.rest();                                                                                   // 65\n  if (rest.charAt(0) === '>' || rest.slice(0, 2) === '->')                                                     // 66\n    scanner.fatal(\"HTML comment can't start with > or ->\");                                                    // 67\n                                                                                                               // 68\n  var closePos = rest.indexOf('-->');                                                                          // 69\n  if (closePos < 0)                                                                                            // 70\n    scanner.fatal(\"Unclosed HTML comment\");                                                                    // 71\n                                                                                                               // 72\n  var commentContents = rest.slice(0, closePos);                                                               // 73\n  if (commentContents.slice(-1) === '-')                                                                       // 74\n    scanner.fatal(\"HTML comment must end at first `--`\");                                                      // 75\n  if (commentContents.indexOf(\"--\") >= 0)                                                                      // 76\n    scanner.fatal(\"HTML comment cannot contain `--` anywhere\");                                                // 77\n  if (commentContents.indexOf('\\u0000') >= 0)                                                                  // 78\n    scanner.fatal(\"HTML comment cannot contain NULL\");                                                         // 79\n                                                                                                               // 80\n  scanner.pos += closePos + 3;                                                                                 // 81\n                                                                                                               // 82\n  return { t: 'Comment',                                                                                       // 83\n           v: convertCRLF(commentContents) };                                                                  // 84\n};                                                                                                             // 85\n                                                                                                               // 86\nvar skipSpaces = function (scanner) {                                                                          // 87\n  while (HTML_SPACE.test(scanner.peek()))                                                                      // 88\n    scanner.pos++;                                                                                             // 89\n};                                                                                                             // 90\n                                                                                                               // 91\nvar requireSpaces = function (scanner) {                                                                       // 92\n  if (! HTML_SPACE.test(scanner.peek()))                                                                       // 93\n    scanner.fatal(\"Expected space\");                                                                           // 94\n  skipSpaces(scanner);                                                                                         // 95\n};                                                                                                             // 96\n                                                                                                               // 97\nvar getDoctypeQuotedString = function (scanner) {                                                              // 98\n  var quote = scanner.peek();                                                                                  // 99\n  if (! (quote === '\"' || quote === \"'\"))                                                                      // 100\n    scanner.fatal(\"Expected single or double quote in DOCTYPE\");                                               // 101\n  scanner.pos++;                                                                                               // 102\n                                                                                                               // 103\n  if (scanner.peek() === quote)                                                                                // 104\n    // prevent a falsy return value (empty string)                                                             // 105\n    scanner.fatal(\"Malformed DOCTYPE\");                                                                        // 106\n                                                                                                               // 107\n  var str = '';                                                                                                // 108\n  var ch;                                                                                                      // 109\n  while ((ch = scanner.peek()), ch !== quote) {                                                                // 110\n    if ((! ch) || (ch === '\\u0000') || (ch === '>'))                                                           // 111\n      scanner.fatal(\"Malformed DOCTYPE\");                                                                      // 112\n    str += ch;                                                                                                 // 113\n    scanner.pos++;                                                                                             // 114\n  }                                                                                                            // 115\n                                                                                                               // 116\n  scanner.pos++;                                                                                               // 117\n                                                                                                               // 118\n  return str;                                                                                                  // 119\n};                                                                                                             // 120\n                                                                                                               // 121\n// See http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#the-doctype.                    // 122\n//                                                                                                             // 123\n// If `getDocType` sees \"<!DOCTYPE\" (case-insensitive), it will match or fail fatally.                         // 124\ngetDoctype = HTMLTools.Parse.getDoctype = function (scanner) {                                                 // 125\n  if (HTMLTools.asciiLowerCase(scanner.rest().slice(0, 9)) !== '<!doctype')                                    // 126\n    return null;                                                                                               // 127\n  var start = scanner.pos;                                                                                     // 128\n  scanner.pos += 9;                                                                                            // 129\n                                                                                                               // 130\n  requireSpaces(scanner);                                                                                      // 131\n                                                                                                               // 132\n  var ch = scanner.peek();                                                                                     // 133\n  if ((! ch) || (ch === '>') || (ch === '\\u0000'))                                                             // 134\n    scanner.fatal('Malformed DOCTYPE');                                                                        // 135\n  var name = ch;                                                                                               // 136\n  scanner.pos++;                                                                                               // 137\n                                                                                                               // 138\n  while ((ch = scanner.peek()), ! (HTML_SPACE.test(ch) || ch === '>')) {                                       // 139\n    if ((! ch) || (ch === '\\u0000'))                                                                           // 140\n      scanner.fatal('Malformed DOCTYPE');                                                                      // 141\n    name += ch;                                                                                                // 142\n    scanner.pos++;                                                                                             // 143\n  }                                                                                                            // 144\n  name = HTMLTools.asciiLowerCase(name);                                                                       // 145\n                                                                                                               // 146\n  // Now we're looking at a space or a `>`.                                                                    // 147\n  skipSpaces(scanner);                                                                                         // 148\n                                                                                                               // 149\n  var systemId = null;                                                                                         // 150\n  var publicId = null;                                                                                         // 151\n                                                                                                               // 152\n  if (scanner.peek() !== '>') {                                                                                // 153\n    // Now we're essentially in the \"After DOCTYPE name state\" of the tokenizer,                               // 154\n    // but we're not looking at space or `>`.                                                                  // 155\n                                                                                                               // 156\n    // this should be \"public\" or \"system\".                                                                    // 157\n    var publicOrSystem = HTMLTools.asciiLowerCase(scanner.rest().slice(0, 6));                                 // 158\n                                                                                                               // 159\n    if (publicOrSystem === 'system') {                                                                         // 160\n      scanner.pos += 6;                                                                                        // 161\n      requireSpaces(scanner);                                                                                  // 162\n      systemId = getDoctypeQuotedString(scanner);                                                              // 163\n      skipSpaces(scanner);                                                                                     // 164\n      if (scanner.peek() !== '>')                                                                              // 165\n        scanner.fatal(\"Malformed DOCTYPE\");                                                                    // 166\n    } else if (publicOrSystem === 'public') {                                                                  // 167\n      scanner.pos += 6;                                                                                        // 168\n      requireSpaces(scanner);                                                                                  // 169\n      publicId = getDoctypeQuotedString(scanner);                                                              // 170\n      if (scanner.peek() !== '>') {                                                                            // 171\n        requireSpaces(scanner);                                                                                // 172\n        if (scanner.peek() !== '>') {                                                                          // 173\n          systemId = getDoctypeQuotedString(scanner);                                                          // 174\n          skipSpaces(scanner);                                                                                 // 175\n          if (scanner.peek() !== '>')                                                                          // 176\n            scanner.fatal(\"Malformed DOCTYPE\");                                                                // 177\n        }                                                                                                      // 178\n      }                                                                                                        // 179\n    } else {                                                                                                   // 180\n      scanner.fatal(\"Expected PUBLIC or SYSTEM in DOCTYPE\");                                                   // 181\n    }                                                                                                          // 182\n  }                                                                                                            // 183\n                                                                                                               // 184\n  // looking at `>`                                                                                            // 185\n  scanner.pos++;                                                                                               // 186\n  var result = { t: 'Doctype',                                                                                 // 187\n                 v: scanner.input.slice(start, scanner.pos),                                                   // 188\n                 name: name };                                                                                 // 189\n                                                                                                               // 190\n  if (systemId)                                                                                                // 191\n    result.systemId = systemId;                                                                                // 192\n  if (publicId)                                                                                                // 193\n    result.publicId = publicId;                                                                                // 194\n                                                                                                               // 195\n  return result;                                                                                               // 196\n};                                                                                                             // 197\n                                                                                                               // 198\n// The special character `{` is only allowed as the first character                                            // 199\n// of a Chars, so that we have a chance to detect template tags.                                               // 200\nvar getChars = makeRegexMatcher(/^[^&<\\u0000][^&<\\u0000{]*/);                                                  // 201\n                                                                                                               // 202\nvar assertIsTemplateTag = function (x) {                                                                       // 203\n  if (! (x instanceof HTMLTools.TemplateTag))                                                                  // 204\n    throw new Error(\"Expected an instance of HTMLTools.TemplateTag\");                                          // 205\n  return x;                                                                                                    // 206\n};                                                                                                             // 207\n                                                                                                               // 208\n// Returns the next HTML token, or `null` if we reach EOF.                                                     // 209\n//                                                                                                             // 210\n// Note that if we have a `getTemplateTag` function that sometimes                                             // 211\n// consumes characters and emits nothing (e.g. in the case of template                                         // 212\n// comments), we may go from not-at-EOF to at-EOF and return `null`,                                           // 213\n// while otherwise we always find some token to return.                                                        // 214\ngetHTMLToken = HTMLTools.Parse.getHTMLToken = function (scanner, dataMode) {                                   // 215\n  var result = null;                                                                                           // 216\n  if (scanner.getTemplateTag) {                                                                                // 217\n    // Try to parse a template tag by calling out to the provided                                              // 218\n    // `getTemplateTag` function.  If the function returns `null` but                                          // 219\n    // consumes characters, it must have parsed a comment or something,                                        // 220\n    // so we loop and try it again.  If it ever returns `null` without                                         // 221\n    // consuming anything, that means it didn't see anything interesting                                       // 222\n    // so we look for a normal token.  If it returns a truthy value,                                           // 223\n    // the value must be instanceof HTMLTools.TemplateTag.  We wrap it                                         // 224\n    // in a Special token.                                                                                     // 225\n    var lastPos = scanner.pos;                                                                                 // 226\n    result = scanner.getTemplateTag(                                                                           // 227\n      scanner,                                                                                                 // 228\n      (dataMode === 'rcdata' ? TEMPLATE_TAG_POSITION.IN_RCDATA :                                               // 229\n       (dataMode === 'rawtext' ? TEMPLATE_TAG_POSITION.IN_RAWTEXT :                                            // 230\n        TEMPLATE_TAG_POSITION.ELEMENT)));                                                                      // 231\n                                                                                                               // 232\n    if (result)                                                                                                // 233\n      return { t: 'TemplateTag', v: assertIsTemplateTag(result) };                                             // 234\n    else if (scanner.pos > lastPos)                                                                            // 235\n      return null;                                                                                             // 236\n  }                                                                                                            // 237\n                                                                                                               // 238\n  var chars = getChars(scanner);                                                                               // 239\n  if (chars)                                                                                                   // 240\n    return { t: 'Chars',                                                                                       // 241\n             v: convertCRLF(chars) };                                                                          // 242\n                                                                                                               // 243\n  var ch = scanner.peek();                                                                                     // 244\n  if (! ch)                                                                                                    // 245\n    return null; // EOF                                                                                        // 246\n                                                                                                               // 247\n  if (ch === '\\u0000')                                                                                         // 248\n    scanner.fatal(\"Illegal NULL character\");                                                                   // 249\n                                                                                                               // 250\n  if (ch === '&') {                                                                                            // 251\n    if (dataMode !== 'rawtext') {                                                                              // 252\n      var charRef = getCharacterReference(scanner);                                                            // 253\n      if (charRef)                                                                                             // 254\n        return charRef;                                                                                        // 255\n    }                                                                                                          // 256\n                                                                                                               // 257\n    scanner.pos++;                                                                                             // 258\n    return { t: 'Chars',                                                                                       // 259\n             v: '&' };                                                                                         // 260\n  }                                                                                                            // 261\n                                                                                                               // 262\n  // If we're here, we're looking at `<`.                                                                      // 263\n                                                                                                               // 264\n  if (scanner.peek() === '<' && dataMode) {                                                                    // 265\n    // don't interpret tags                                                                                    // 266\n    scanner.pos++;                                                                                             // 267\n    return { t: 'Chars',                                                                                       // 268\n             v: '<' };                                                                                         // 269\n  }                                                                                                            // 270\n                                                                                                               // 271\n  // `getTag` will claim anything starting with `<` not followed by `!`.                                       // 272\n  // `getComment` takes `<!--` and getDoctype takes `<!doctype`.                                               // 273\n  result = (getTagToken(scanner) || getComment(scanner) || getDoctype(scanner));                               // 274\n                                                                                                               // 275\n  if (result)                                                                                                  // 276\n    return result;                                                                                             // 277\n                                                                                                               // 278\n  scanner.fatal(\"Unexpected `<!` directive.\");                                                                 // 279\n};                                                                                                             // 280\n                                                                                                               // 281\nvar getTagName = makeRegexMatcher(/^[a-zA-Z][^\\f\\n\\r\\t />{]*/);                                                // 282\nvar getClangle = makeRegexMatcher(/^>/);                                                                       // 283\nvar getSlash = makeRegexMatcher(/^\\//);                                                                        // 284\nvar getAttributeName = makeRegexMatcher(/^[^>/\\u0000\"'<=\\f\\n\\r\\t ][^\\f\\n\\r\\t /=>\"'<\\u0000]*/);                 // 285\n                                                                                                               // 286\n// Try to parse `>` or `/>`, mutating `tag` to be self-closing in the latter                                   // 287\n// case (and failing fatally if `/` isn't followed by `>`).                                                    // 288\n// Return tag if successful.                                                                                   // 289\nvar handleEndOfTag = function (scanner, tag) {                                                                 // 290\n  if (getClangle(scanner))                                                                                     // 291\n    return tag;                                                                                                // 292\n                                                                                                               // 293\n  if (getSlash(scanner)) {                                                                                     // 294\n    if (! getClangle(scanner))                                                                                 // 295\n      scanner.fatal(\"Expected `>` after `/`\");                                                                 // 296\n    tag.isSelfClosing = true;                                                                                  // 297\n    return tag;                                                                                                // 298\n  }                                                                                                            // 299\n                                                                                                               // 300\n  return null;                                                                                                 // 301\n};                                                                                                             // 302\n                                                                                                               // 303\n// Scan a quoted or unquoted attribute value (omit `quote` for unquoted).                                      // 304\nvar getAttributeValue = function (scanner, quote) {                                                            // 305\n  if (quote) {                                                                                                 // 306\n    if (scanner.peek() !== quote)                                                                              // 307\n      return null;                                                                                             // 308\n    scanner.pos++;                                                                                             // 309\n  }                                                                                                            // 310\n                                                                                                               // 311\n  var tokens = [];                                                                                             // 312\n  var charsTokenToExtend = null;                                                                               // 313\n                                                                                                               // 314\n  var charRef;                                                                                                 // 315\n  while (true) {                                                                                               // 316\n    var ch = scanner.peek();                                                                                   // 317\n    var templateTag;                                                                                           // 318\n    var curPos = scanner.pos;                                                                                  // 319\n    if (quote && ch === quote) {                                                                               // 320\n      scanner.pos++;                                                                                           // 321\n      return tokens;                                                                                           // 322\n    } else if ((! quote) && (HTML_SPACE.test(ch) || ch === '>')) {                                             // 323\n      return tokens;                                                                                           // 324\n    } else if (! ch) {                                                                                         // 325\n      scanner.fatal(\"Unclosed attribute in tag\");                                                              // 326\n    } else if (quote ? ch === '\\u0000' : ('\\u0000\"\\'<=`'.indexOf(ch) >= 0)) {                                  // 327\n      scanner.fatal(\"Unexpected character in attribute value\");                                                // 328\n    } else if (ch === '&' &&                                                                                   // 329\n               (charRef = getCharacterReference(scanner, true,                                                 // 330\n                                                quote || '>'))) {                                              // 331\n      tokens.push(charRef);                                                                                    // 332\n      charsTokenToExtend = null;                                                                               // 333\n    } else if (scanner.getTemplateTag &&                                                                       // 334\n               ((templateTag = scanner.getTemplateTag(                                                         // 335\n                 scanner, TEMPLATE_TAG_POSITION.IN_ATTRIBUTE)) ||                                              // 336\n                scanner.pos > curPos /* `{{! comment}}` */)) {                                                 // 337\n      if (templateTag) {                                                                                       // 338\n        tokens.push({t: 'TemplateTag',                                                                         // 339\n                     v: assertIsTemplateTag(templateTag)});                                                    // 340\n        charsTokenToExtend = null;                                                                             // 341\n      }                                                                                                        // 342\n    } else {                                                                                                   // 343\n      if (! charsTokenToExtend) {                                                                              // 344\n        charsTokenToExtend = { t: 'Chars', v: '' };                                                            // 345\n        tokens.push(charsTokenToExtend);                                                                       // 346\n      }                                                                                                        // 347\n      charsTokenToExtend.v += (ch === '\\r' ? '\\n' : ch);                                                       // 348\n      scanner.pos++;                                                                                           // 349\n      if (quote && ch === '\\r' && scanner.peek() === '\\n')                                                     // 350\n        scanner.pos++;                                                                                         // 351\n    }                                                                                                          // 352\n  }                                                                                                            // 353\n};                                                                                                             // 354\n                                                                                                               // 355\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                          // 356\n                                                                                                               // 357\ngetTagToken = HTMLTools.Parse.getTagToken = function (scanner) {                                               // 358\n  if (! (scanner.peek() === '<' && scanner.rest().charAt(1) !== '!'))                                          // 359\n    return null;                                                                                               // 360\n  scanner.pos++;                                                                                               // 361\n                                                                                                               // 362\n  var tag = { t: 'Tag' };                                                                                      // 363\n                                                                                                               // 364\n  // now looking at the character after `<`, which is not a `!`                                                // 365\n  if (scanner.peek() === '/') {                                                                                // 366\n    tag.isEnd = true;                                                                                          // 367\n    scanner.pos++;                                                                                             // 368\n  }                                                                                                            // 369\n                                                                                                               // 370\n  var tagName = getTagName(scanner);                                                                           // 371\n  if (! tagName)                                                                                               // 372\n    scanner.fatal(\"Expected tag name after `<`\");                                                              // 373\n  tag.n = HTMLTools.properCaseTagName(tagName);                                                                // 374\n                                                                                                               // 375\n  if (scanner.peek() === '/' && tag.isEnd)                                                                     // 376\n    scanner.fatal(\"End tag can't have trailing slash\");                                                        // 377\n  if (handleEndOfTag(scanner, tag))                                                                            // 378\n    return tag;                                                                                                // 379\n                                                                                                               // 380\n  if (scanner.isEOF())                                                                                         // 381\n    scanner.fatal(\"Unclosed `<`\");                                                                             // 382\n                                                                                                               // 383\n  if (! HTML_SPACE.test(scanner.peek()))                                                                       // 384\n    // e.g. `<a{{b}}>`                                                                                         // 385\n    scanner.fatal(\"Expected space after tag name\");                                                            // 386\n                                                                                                               // 387\n  // we're now in \"Before attribute name state\" of the tokenizer                                               // 388\n  skipSpaces(scanner);                                                                                         // 389\n                                                                                                               // 390\n  if (scanner.peek() === '/' && tag.isEnd)                                                                     // 391\n    scanner.fatal(\"End tag can't have trailing slash\");                                                        // 392\n  if (handleEndOfTag(scanner, tag))                                                                            // 393\n    return tag;                                                                                                // 394\n                                                                                                               // 395\n  if (tag.isEnd)                                                                                               // 396\n    scanner.fatal(\"End tag can't have attributes\");                                                            // 397\n                                                                                                               // 398\n  tag.attrs = {};                                                                                              // 399\n  var nondynamicAttrs = tag.attrs;                                                                             // 400\n                                                                                                               // 401\n  while (true) {                                                                                               // 402\n    // Note: at the top of this loop, we've already skipped any spaces.                                        // 403\n                                                                                                               // 404\n    // This will be set to true if after parsing the attribute, we should                                      // 405\n    // require spaces (or else an end of tag, i.e. `>` or `/>`).                                               // 406\n    var spacesRequiredAfter = false;                                                                           // 407\n                                                                                                               // 408\n    // first, try for a template tag.                                                                          // 409\n    var curPos = scanner.pos;                                                                                  // 410\n    var templateTag = (scanner.getTemplateTag &&                                                               // 411\n                       scanner.getTemplateTag(                                                                 // 412\n                         scanner, TEMPLATE_TAG_POSITION.IN_START_TAG));                                        // 413\n    if (templateTag || (scanner.pos > curPos)) {                                                               // 414\n      if (templateTag) {                                                                                       // 415\n        if (tag.attrs === nondynamicAttrs)                                                                     // 416\n          tag.attrs = [nondynamicAttrs];                                                                       // 417\n        tag.attrs.push({ t: 'TemplateTag',                                                                     // 418\n                         v: assertIsTemplateTag(templateTag) });                                               // 419\n      } // else, must have scanned a `{{! comment}}`                                                           // 420\n                                                                                                               // 421\n      spacesRequiredAfter = true;                                                                              // 422\n    } else {                                                                                                   // 423\n                                                                                                               // 424\n      var attributeName = getAttributeName(scanner);                                                           // 425\n      if (! attributeName)                                                                                     // 426\n        scanner.fatal(\"Expected attribute name in tag\");                                                       // 427\n      // Throw error on `{` in attribute name.  This provides *some* error message                             // 428\n      // if someone writes `<a x{{y}}>` or `<a x{{y}}=z>`.  The HTML tokenization                              // 429\n      // spec doesn't say that `{` is invalid, but the DOM API (setAttribute) won't                            // 430\n      // allow it, so who cares.                                                                               // 431\n      if (attributeName.indexOf('{') >= 0)                                                                     // 432\n        scanner.fatal(\"Unexpected `{` in attribute name.\");                                                    // 433\n      attributeName = HTMLTools.properCaseAttributeName(attributeName);                                        // 434\n                                                                                                               // 435\n      if (hasOwnProperty.call(nondynamicAttrs, attributeName))                                                 // 436\n        scanner.fatal(\"Duplicate attribute in tag: \" + attributeName);                                         // 437\n                                                                                                               // 438\n      nondynamicAttrs[attributeName] = [];                                                                     // 439\n                                                                                                               // 440\n      skipSpaces(scanner);                                                                                     // 441\n                                                                                                               // 442\n      if (handleEndOfTag(scanner, tag))                                                                        // 443\n        return tag;                                                                                            // 444\n                                                                                                               // 445\n      var ch = scanner.peek();                                                                                 // 446\n      if (! ch)                                                                                                // 447\n        scanner.fatal(\"Unclosed <\");                                                                           // 448\n      if ('\\u0000\"\\'<'.indexOf(ch) >= 0)                                                                       // 449\n        scanner.fatal(\"Unexpected character after attribute name in tag\");                                     // 450\n                                                                                                               // 451\n      if (ch === '=') {                                                                                        // 452\n        scanner.pos++;                                                                                         // 453\n                                                                                                               // 454\n        skipSpaces(scanner);                                                                                   // 455\n                                                                                                               // 456\n        ch = scanner.peek();                                                                                   // 457\n        if (! ch)                                                                                              // 458\n          scanner.fatal(\"Unclosed <\");                                                                         // 459\n        if ('\\u0000><=`'.indexOf(ch) >= 0)                                                                     // 460\n          scanner.fatal(\"Unexpected character after = in tag\");                                                // 461\n                                                                                                               // 462\n        if ((ch === '\"') || (ch === \"'\"))                                                                      // 463\n          nondynamicAttrs[attributeName] = getAttributeValue(scanner, ch);                                     // 464\n        else                                                                                                   // 465\n          nondynamicAttrs[attributeName] = getAttributeValue(scanner);                                         // 466\n                                                                                                               // 467\n        spacesRequiredAfter = true;                                                                            // 468\n      }                                                                                                        // 469\n    }                                                                                                          // 470\n    // now we are in the \"post-attribute\" position, whether it was a template tag                              // 471\n    // attribute (like `{{x}}`) or a normal one (like `x` or `x=y`).                                           // 472\n                                                                                                               // 473\n    if (handleEndOfTag(scanner, tag))                                                                          // 474\n      return tag;                                                                                              // 475\n                                                                                                               // 476\n    if (scanner.isEOF())                                                                                       // 477\n      scanner.fatal(\"Unclosed `<`\");                                                                           // 478\n                                                                                                               // 479\n    if (spacesRequiredAfter)                                                                                   // 480\n      requireSpaces(scanner);                                                                                  // 481\n    else                                                                                                       // 482\n      skipSpaces(scanner);                                                                                     // 483\n                                                                                                               // 484\n    if (handleEndOfTag(scanner, tag))                                                                          // 485\n      return tag;                                                                                              // 486\n  }                                                                                                            // 487\n};                                                                                                             // 488\n                                                                                                               // 489\nTEMPLATE_TAG_POSITION = HTMLTools.TEMPLATE_TAG_POSITION = {                                                    // 490\n  ELEMENT: 1,                                                                                                  // 491\n  IN_START_TAG: 2,                                                                                             // 492\n  IN_ATTRIBUTE: 3,                                                                                             // 493\n  IN_RCDATA: 4,                                                                                                // 494\n  IN_RAWTEXT: 5                                                                                                // 495\n};                                                                                                             // 496\n                                                                                                               // 497\n// tagName must be proper case                                                                                 // 498\nisLookingAtEndTag = function (scanner, tagName) {                                                              // 499\n  var rest = scanner.rest();                                                                                   // 500\n  var pos = 0; // into rest                                                                                    // 501\n  var firstPart = /^<\\/([a-zA-Z]+)/.exec(rest);                                                                // 502\n  if (firstPart &&                                                                                             // 503\n      HTMLTools.properCaseTagName(firstPart[1]) === tagName) {                                                 // 504\n    // we've seen `</foo`, now see if the end tag continues                                                    // 505\n    pos += firstPart[0].length;                                                                                // 506\n    while (pos < rest.length && HTML_SPACE.test(rest.charAt(pos)))                                             // 507\n      pos++;                                                                                                   // 508\n    if (pos < rest.length && rest.charAt(pos) === '>')                                                         // 509\n      return true;                                                                                             // 510\n  }                                                                                                            // 511\n  return false;                                                                                                // 512\n};                                                                                                             // 513\n                                                                                                               // 514\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/html-tools/templatetag.js                                                                          //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// _assign is like _.extend or the upcoming Object.assign.                                                     // 1\n// Copy src's own, enumerable properties onto tgt and return                                                   // 2\n// tgt.                                                                                                        // 3\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;                                                         // 4\nvar _assign = function (tgt, src) {                                                                            // 5\n  for (var k in src) {                                                                                         // 6\n    if (_hasOwnProperty.call(src, k))                                                                          // 7\n      tgt[k] = src[k];                                                                                         // 8\n  }                                                                                                            // 9\n  return tgt;                                                                                                  // 10\n};                                                                                                             // 11\n                                                                                                               // 12\n                                                                                                               // 13\nHTMLTools.TemplateTag = function (props) {                                                                     // 14\n  if (! (this instanceof HTMLTools.TemplateTag))                                                               // 15\n    // called without `new`                                                                                    // 16\n    return new HTMLTools.TemplateTag;                                                                          // 17\n                                                                                                               // 18\n  if (props)                                                                                                   // 19\n    _assign(this, props);                                                                                      // 20\n};                                                                                                             // 21\n                                                                                                               // 22\n_assign(HTMLTools.TemplateTag.prototype, {                                                                     // 23\n  constructorName: 'HTMLTools.TemplateTag',                                                                    // 24\n  toJS: function (visitor) {                                                                                   // 25\n    return visitor.generateCall(this.constructorName,                                                          // 26\n                                _assign({}, this));                                                            // 27\n  }                                                                                                            // 28\n});                                                                                                            // 29\n                                                                                                               // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/html-tools/parse.js                                                                                //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n                                                                                                               // 1\n// Parse a \"fragment\" of HTML, up to the end of the input or a particular                                      // 2\n// template tag (using the \"shouldStop\" option).                                                               // 3\nHTMLTools.parseFragment = function (input, options) {                                                          // 4\n  var scanner;                                                                                                 // 5\n  if (typeof input === 'string')                                                                               // 6\n    scanner = new Scanner(input);                                                                              // 7\n  else                                                                                                         // 8\n    // input can be a scanner.  We'd better not have a different                                               // 9\n    // value for the \"getTemplateTag\" option as when the scanner                                               // 10\n    // was created, because we don't do anything special to reset                                              // 11\n    // the value (which is attached to the scanner).                                                           // 12\n    scanner = input;                                                                                           // 13\n                                                                                                               // 14\n  // ```                                                                                                       // 15\n  // { getTemplateTag: function (scanner, templateTagPosition) {                                               // 16\n  //     if (templateTagPosition === HTMLTools.TEMPLATE_TAG_POSITION.ELEMENT) {                                // 17\n  //       ...                                                                                                 // 18\n  // ```                                                                                                       // 19\n  if (options && options.getTemplateTag)                                                                       // 20\n    scanner.getTemplateTag = options.getTemplateTag;                                                           // 21\n                                                                                                               // 22\n  // function (scanner) -> boolean                                                                             // 23\n  var shouldStop = options && options.shouldStop;                                                              // 24\n                                                                                                               // 25\n  var result;                                                                                                  // 26\n  if (options && options.textMode) {                                                                           // 27\n    if (options.textMode === HTML.TEXTMODE.STRING) {                                                           // 28\n      result = getRawText(scanner, null, shouldStop);                                                          // 29\n    } else if (options.textMode === HTML.TEXTMODE.RCDATA) {                                                    // 30\n      result = getRCData(scanner, null, shouldStop);                                                           // 31\n    } else {                                                                                                   // 32\n      throw new Error(\"Unsupported textMode: \" + options.textMode);                                            // 33\n    }                                                                                                          // 34\n  } else {                                                                                                     // 35\n    result = getContent(scanner, shouldStop);                                                                  // 36\n  }                                                                                                            // 37\n  if (! scanner.isEOF()) {                                                                                     // 38\n    // If we aren't at the end of the input, we either stopped at an unmatched                                 // 39\n    // HTML end tag or at a template tag (like `{{else}}` or `{{/if}}`).                                       // 40\n    // Detect the former case (stopped at an HTML end tag) and throw a good                                    // 41\n    // error.                                                                                                  // 42\n                                                                                                               // 43\n    var posBefore = scanner.pos;                                                                               // 44\n                                                                                                               // 45\n    try {                                                                                                      // 46\n      var endTag = getHTMLToken(scanner);                                                                      // 47\n    } catch (e) {                                                                                              // 48\n      // ignore errors from getTemplateTag                                                                     // 49\n    }                                                                                                          // 50\n                                                                                                               // 51\n    // XXX we make some assumptions about shouldStop here, like that it                                        // 52\n    // won't tell us to stop at an HTML end tag.  Should refactor                                              // 53\n    // `shouldStop` into something more suitable.                                                              // 54\n    if (endTag && endTag.t === 'Tag' && endTag.isEnd) {                                                        // 55\n      var closeTag = endTag.n;                                                                                 // 56\n      var isVoidElement = HTML.isVoidElement(closeTag);                                                        // 57\n      scanner.fatal(\"Unexpected HTML close tag\" +                                                              // 58\n                    (isVoidElement ?                                                                           // 59\n                     '.  <' + endTag.n + '> should have no close tag.' : ''));                                 // 60\n    }                                                                                                          // 61\n                                                                                                               // 62\n    scanner.pos = posBefore; // rewind, we'll continue parsing as usual                                        // 63\n                                                                                                               // 64\n    // If no \"shouldStop\" option was provided, we should have consumed the whole                               // 65\n    // input.                                                                                                  // 66\n    if (! shouldStop)                                                                                          // 67\n      scanner.fatal(\"Expected EOF\");                                                                           // 68\n  }                                                                                                            // 69\n                                                                                                               // 70\n  return result;                                                                                               // 71\n};                                                                                                             // 72\n                                                                                                               // 73\n// Take a numeric Unicode code point, which may be larger than 16 bits,                                        // 74\n// and encode it as a JavaScript UTF-16 string.                                                                // 75\n//                                                                                                             // 76\n// Adapted from                                                                                                // 77\n// http://stackoverflow.com/questions/7126384/expressing-utf-16-unicode-characters-in-javascript/7126661.      // 78\ncodePointToString = HTMLTools.codePointToString = function(cp) {                                               // 79\n  if (cp >= 0 && cp <= 0xD7FF || cp >= 0xE000 && cp <= 0xFFFF) {                                               // 80\n    return String.fromCharCode(cp);                                                                            // 81\n  } else if (cp >= 0x10000 && cp <= 0x10FFFF) {                                                                // 82\n                                                                                                               // 83\n    // we substract 0x10000 from cp to get a 20-bit number                                                     // 84\n    // in the range 0..0xFFFF                                                                                  // 85\n    cp -= 0x10000;                                                                                             // 86\n                                                                                                               // 87\n    // we add 0xD800 to the number formed by the first 10 bits                                                 // 88\n    // to give the first byte                                                                                  // 89\n    var first = ((0xffc00 & cp) >> 10) + 0xD800;                                                               // 90\n                                                                                                               // 91\n    // we add 0xDC00 to the number formed by the low 10 bits                                                   // 92\n    // to give the second byte                                                                                 // 93\n    var second = (0x3ff & cp) + 0xDC00;                                                                        // 94\n                                                                                                               // 95\n    return String.fromCharCode(first) + String.fromCharCode(second);                                           // 96\n  } else {                                                                                                     // 97\n    return '';                                                                                                 // 98\n  }                                                                                                            // 99\n};                                                                                                             // 100\n                                                                                                               // 101\ngetContent = HTMLTools.Parse.getContent = function (scanner, shouldStopFunc) {                                 // 102\n  var items = [];                                                                                              // 103\n                                                                                                               // 104\n  while (! scanner.isEOF()) {                                                                                  // 105\n    if (shouldStopFunc && shouldStopFunc(scanner))                                                             // 106\n      break;                                                                                                   // 107\n                                                                                                               // 108\n    var posBefore = scanner.pos;                                                                               // 109\n    var token = getHTMLToken(scanner);                                                                         // 110\n    if (! token)                                                                                               // 111\n      // tokenizer reached EOF on its own, e.g. while scanning                                                 // 112\n      // template comments like `{{! foo}}`.                                                                   // 113\n      continue;                                                                                                // 114\n                                                                                                               // 115\n    if (token.t === 'Doctype') {                                                                               // 116\n      scanner.fatal(\"Unexpected Doctype\");                                                                     // 117\n    } else if (token.t === 'Chars') {                                                                          // 118\n      pushOrAppendString(items, token.v);                                                                      // 119\n    } else if (token.t === 'CharRef') {                                                                        // 120\n      items.push(convertCharRef(token));                                                                       // 121\n    } else if (token.t === 'Comment') {                                                                        // 122\n      items.push(HTML.Comment(token.v));                                                                       // 123\n    } else if (token.t === 'TemplateTag') {                                                                    // 124\n      items.push(token.v);                                                                                     // 125\n    } else if (token.t === 'Tag') {                                                                            // 126\n      if (token.isEnd) {                                                                                       // 127\n        // Stop when we encounter an end tag at the top level.                                                 // 128\n        // Rewind; we'll re-parse the end tag later.                                                           // 129\n        scanner.pos = posBefore;                                                                               // 130\n        break;                                                                                                 // 131\n      }                                                                                                        // 132\n                                                                                                               // 133\n      var tagName = token.n;                                                                                   // 134\n      // is this an element with no close tag (a BR, HR, IMG, etc.) based                                      // 135\n      // on its name?                                                                                          // 136\n      var isVoid = HTML.isVoidElement(tagName);                                                                // 137\n      if (token.isSelfClosing) {                                                                               // 138\n        if (! (isVoid || HTML.isKnownSVGElement(tagName) || tagName.indexOf(':') >= 0))                        // 139\n          scanner.fatal('Only certain elements like BR, HR, IMG, etc. (and foreign elements like SVG) are allowed to self-close');\n      }                                                                                                        // 141\n                                                                                                               // 142\n      // result of parseAttrs may be null                                                                      // 143\n      var attrs = parseAttrs(token.attrs);                                                                     // 144\n      // arrays need to be wrapped in HTML.Attrs(...)                                                          // 145\n      // when used to construct tags                                                                           // 146\n      if (HTML.isArray(attrs))                                                                                 // 147\n        attrs = HTML.Attrs.apply(null, attrs);                                                                 // 148\n                                                                                                               // 149\n      var tagFunc = HTML.getTag(tagName);                                                                      // 150\n      if (isVoid || token.isSelfClosing) {                                                                     // 151\n        items.push(attrs ? tagFunc(attrs) : tagFunc());                                                        // 152\n      } else {                                                                                                 // 153\n        // parse HTML tag contents.                                                                            // 154\n                                                                                                               // 155\n        // HTML treats a final `/` in a tag as part of an attribute, as in `<a href=/foo/>`, but the template author who writes `<circle r={{r}}/>`, say, may not be thinking about that, so generate a good error message in the \"looks like self-close\" case.\n        var looksLikeSelfClose = (scanner.input.substr(scanner.pos - 2, 2) === '/>');                          // 157\n                                                                                                               // 158\n        var content = null;                                                                                    // 159\n        if (token.n === 'textarea') {                                                                          // 160\n          if (scanner.peek() === '\\n')                                                                         // 161\n            scanner.pos++;                                                                                     // 162\n          var textareaValue = getRCData(scanner, token.n, shouldStopFunc);                                     // 163\n          if (textareaValue) {                                                                                 // 164\n            if (attrs instanceof HTML.Attrs) {                                                                 // 165\n              attrs = HTML.Attrs.apply(                                                                        // 166\n                null, attrs.value.concat([{value: textareaValue}]));                                           // 167\n            } else {                                                                                           // 168\n              attrs = (attrs || {});                                                                           // 169\n              attrs.value = textareaValue;                                                                     // 170\n            }                                                                                                  // 171\n          }                                                                                                    // 172\n        } else if (token.n === 'script' || token.n === 'style') {                                              // 173\n          content = getRawText(scanner, token.n, shouldStopFunc);                                              // 174\n        } else {                                                                                               // 175\n          content = getContent(scanner, shouldStopFunc);                                                       // 176\n        }                                                                                                      // 177\n                                                                                                               // 178\n        var endTag = getHTMLToken(scanner);                                                                    // 179\n                                                                                                               // 180\n        if (! (endTag && endTag.t === 'Tag' && endTag.isEnd && endTag.n === tagName))                          // 181\n          scanner.fatal('Expected \"' + tagName + '\" end tag' + (looksLikeSelfClose ? ' -- if the \"<' + token.n + ' />\" tag was supposed to self-close, try adding a space before the \"/\"' : ''));\n                                                                                                               // 183\n        // XXX support implied end tags in cases allowed by the spec                                           // 184\n                                                                                                               // 185\n        // make `content` into an array suitable for applying tag constructor                                  // 186\n        // as in `FOO.apply(null, content)`.                                                                   // 187\n        if (content == null)                                                                                   // 188\n          content = [];                                                                                        // 189\n        else if (! (content instanceof Array))                                                                 // 190\n          content = [content];                                                                                 // 191\n                                                                                                               // 192\n        items.push(HTML.getTag(tagName).apply(                                                                 // 193\n          null, (attrs ? [attrs] : []).concat(content)));                                                      // 194\n      }                                                                                                        // 195\n    } else {                                                                                                   // 196\n      scanner.fatal(\"Unknown token type: \" + token.t);                                                         // 197\n    }                                                                                                          // 198\n  }                                                                                                            // 199\n                                                                                                               // 200\n  if (items.length === 0)                                                                                      // 201\n    return null;                                                                                               // 202\n  else if (items.length === 1)                                                                                 // 203\n    return items[0];                                                                                           // 204\n  else                                                                                                         // 205\n    return items;                                                                                              // 206\n};                                                                                                             // 207\n                                                                                                               // 208\nvar pushOrAppendString = function (items, string) {                                                            // 209\n  if (items.length &&                                                                                          // 210\n      typeof items[items.length - 1] === 'string')                                                             // 211\n    items[items.length - 1] += string;                                                                         // 212\n  else                                                                                                         // 213\n    items.push(string);                                                                                        // 214\n};                                                                                                             // 215\n                                                                                                               // 216\n// get RCDATA to go in the lowercase (or camel case) tagName (e.g. \"textarea\")                                 // 217\ngetRCData = HTMLTools.Parse.getRCData = function (scanner, tagName, shouldStopFunc) {                          // 218\n  var items = [];                                                                                              // 219\n                                                                                                               // 220\n  while (! scanner.isEOF()) {                                                                                  // 221\n    // break at appropriate end tag                                                                            // 222\n    if (tagName && isLookingAtEndTag(scanner, tagName))                                                        // 223\n      break;                                                                                                   // 224\n                                                                                                               // 225\n    if (shouldStopFunc && shouldStopFunc(scanner))                                                             // 226\n      break;                                                                                                   // 227\n                                                                                                               // 228\n    var token = getHTMLToken(scanner, 'rcdata');                                                               // 229\n    if (! token)                                                                                               // 230\n      // tokenizer reached EOF on its own, e.g. while scanning                                                 // 231\n      // template comments like `{{! foo}}`.                                                                   // 232\n      continue;                                                                                                // 233\n                                                                                                               // 234\n    if (token.t === 'Chars') {                                                                                 // 235\n      pushOrAppendString(items, token.v);                                                                      // 236\n    } else if (token.t === 'CharRef') {                                                                        // 237\n      items.push(convertCharRef(token));                                                                       // 238\n    } else if (token.t === 'TemplateTag') {                                                                    // 239\n      items.push(token.v);                                                                                     // 240\n    } else {                                                                                                   // 241\n      // (can't happen)                                                                                        // 242\n      scanner.fatal(\"Unknown or unexpected token type: \" + token.t);                                           // 243\n    }                                                                                                          // 244\n  }                                                                                                            // 245\n                                                                                                               // 246\n  if (items.length === 0)                                                                                      // 247\n    return null;                                                                                               // 248\n  else if (items.length === 1)                                                                                 // 249\n    return items[0];                                                                                           // 250\n  else                                                                                                         // 251\n    return items;                                                                                              // 252\n};                                                                                                             // 253\n                                                                                                               // 254\nvar getRawText = function (scanner, tagName, shouldStopFunc) {                                                 // 255\n  var items = [];                                                                                              // 256\n                                                                                                               // 257\n  while (! scanner.isEOF()) {                                                                                  // 258\n    // break at appropriate end tag                                                                            // 259\n    if (tagName && isLookingAtEndTag(scanner, tagName))                                                        // 260\n      break;                                                                                                   // 261\n                                                                                                               // 262\n    if (shouldStopFunc && shouldStopFunc(scanner))                                                             // 263\n      break;                                                                                                   // 264\n                                                                                                               // 265\n    var token = getHTMLToken(scanner, 'rawtext');                                                              // 266\n    if (! token)                                                                                               // 267\n      // tokenizer reached EOF on its own, e.g. while scanning                                                 // 268\n      // template comments like `{{! foo}}`.                                                                   // 269\n      continue;                                                                                                // 270\n                                                                                                               // 271\n    if (token.t === 'Chars') {                                                                                 // 272\n      pushOrAppendString(items, token.v);                                                                      // 273\n    } else if (token.t === 'TemplateTag') {                                                                    // 274\n      items.push(token.v);                                                                                     // 275\n    } else {                                                                                                   // 276\n      // (can't happen)                                                                                        // 277\n      scanner.fatal(\"Unknown or unexpected token type: \" + token.t);                                           // 278\n    }                                                                                                          // 279\n  }                                                                                                            // 280\n                                                                                                               // 281\n  if (items.length === 0)                                                                                      // 282\n    return null;                                                                                               // 283\n  else if (items.length === 1)                                                                                 // 284\n    return items[0];                                                                                           // 285\n  else                                                                                                         // 286\n    return items;                                                                                              // 287\n};                                                                                                             // 288\n                                                                                                               // 289\n// Input: A token like `{ t: 'CharRef', v: '&amp;', cp: [38] }`.                                               // 290\n//                                                                                                             // 291\n// Output: A tag like `HTML.CharRef({ html: '&amp;', str: '&' })`.                                             // 292\nvar convertCharRef = function (token) {                                                                        // 293\n  var codePoints = token.cp;                                                                                   // 294\n  var str = '';                                                                                                // 295\n  for (var i = 0; i < codePoints.length; i++)                                                                  // 296\n    str += codePointToString(codePoints[i]);                                                                   // 297\n  return HTML.CharRef({ html: token.v, str: str });                                                            // 298\n};                                                                                                             // 299\n                                                                                                               // 300\n// Input is always a dictionary (even if zero attributes) and each                                             // 301\n// value in the dictionary is an array of `Chars`, `CharRef`,                                                  // 302\n// and maybe `TemplateTag` tokens.                                                                             // 303\n//                                                                                                             // 304\n// Output is null if there are zero attributes, and otherwise a                                                // 305\n// dictionary, or an array of dictionaries and template tags.                                                  // 306\n// Each value in the dictionary is HTMLjs (e.g. a                                                              // 307\n// string or an array of `Chars`, `CharRef`, and `TemplateTag`                                                 // 308\n// nodes).                                                                                                     // 309\n//                                                                                                             // 310\n// An attribute value with no input tokens is represented as \"\",                                               // 311\n// not an empty array, in order to prop open empty attributes                                                  // 312\n// with no template tags.                                                                                      // 313\nvar parseAttrs = function (attrs) {                                                                            // 314\n  var result = null;                                                                                           // 315\n                                                                                                               // 316\n  if (HTML.isArray(attrs)) {                                                                                   // 317\n    // first element is nondynamic attrs, rest are template tags                                               // 318\n    var nondynamicAttrs = parseAttrs(attrs[0]);                                                                // 319\n    if (nondynamicAttrs) {                                                                                     // 320\n      result = (result || []);                                                                                 // 321\n      result.push(nondynamicAttrs);                                                                            // 322\n    }                                                                                                          // 323\n    for (var i = 1; i < attrs.length; i++) {                                                                   // 324\n      var token = attrs[i];                                                                                    // 325\n      if (token.t !== 'TemplateTag')                                                                           // 326\n        throw new Error(\"Expected TemplateTag token\");                                                         // 327\n      result = (result || []);                                                                                 // 328\n      result.push(token.v);                                                                                    // 329\n    }                                                                                                          // 330\n    return result;                                                                                             // 331\n  }                                                                                                            // 332\n                                                                                                               // 333\n  for (var k in attrs) {                                                                                       // 334\n    if (! result)                                                                                              // 335\n      result = {};                                                                                             // 336\n                                                                                                               // 337\n    var inValue = attrs[k];                                                                                    // 338\n    var outParts = [];                                                                                         // 339\n    for (var i = 0; i < inValue.length; i++) {                                                                 // 340\n      var token = inValue[i];                                                                                  // 341\n      if (token.t === 'CharRef') {                                                                             // 342\n        outParts.push(convertCharRef(token));                                                                  // 343\n      } else if (token.t === 'TemplateTag') {                                                                  // 344\n        outParts.push(token.v);                                                                                // 345\n      } else if (token.t === 'Chars') {                                                                        // 346\n        pushOrAppendString(outParts, token.v);                                                                 // 347\n      }                                                                                                        // 348\n    }                                                                                                          // 349\n                                                                                                               // 350\n    var outValue = (inValue.length === 0 ? '' :                                                                // 351\n                    (outParts.length === 1 ? outParts[0] : outParts));                                         // 352\n    var properKey = HTMLTools.properCaseAttributeName(k);                                                      // 353\n    result[properKey] = outValue;                                                                              // 354\n  }                                                                                                            // 355\n                                                                                                               // 356\n  return result;                                                                                               // 357\n};                                                                                                             // 358\n                                                                                                               // 359\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['html-tools'] = {\n  HTMLTools: HTMLTools\n};\n\n})();\n","servePath":"/packages/html-tools.js","sourceMap":{"version":3,"sources":["/packages/html-tools/utils.js","/packages/html-tools/scanner.js","/packages/html-tools/charref.js","/packages/html-tools/tokenize.js","/packages/html-tools/templatetag.js","/packages/html-tools/parse.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;;;;;;;;AClsH;;;;;;;;;;;;;;;;;;AC92EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qH;;;;;;;;;;;;;;;;;;ACjgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oqH","file":"/packages/html-tools.js","sourcesContent":["\nHTMLTools = {};\nHTMLTools.Parse = {};\n\nvar asciiLowerCase = HTMLTools.asciiLowerCase = function (str) {\n  return str.replace(/[A-Z]/g, function (c) {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n};\n\nvar svgCamelCaseAttributes = 'attributeName attributeType baseFrequency baseProfile calcMode clipPathUnits contentScriptType contentStyleType diffuseConstant edgeMode externalResourcesRequired filterRes filterUnits glyphRef glyphRef gradientTransform gradientTransform gradientUnits gradientUnits kernelMatrix kernelUnitLength kernelUnitLength kernelUnitLength keyPoints keySplines keyTimes lengthAdjust limitingConeAngle markerHeight markerUnits markerWidth maskContentUnits maskUnits numOctaves pathLength patternContentUnits patternTransform patternUnits pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits refX refY repeatCount repeatDur requiredExtensions requiredFeatures specularConstant specularExponent specularExponent spreadMethod spreadMethod startOffset stdDeviation stitchTiles surfaceScale surfaceScale systemLanguage tableValues targetX targetY textLength textLength viewBox viewTarget xChannelSelector yChannelSelector zoomAndPan'.split(' ');\n\nvar properAttributeCaseMap = (function (map) {\n  for (var i = 0; i < svgCamelCaseAttributes.length; i++) {\n    var a = svgCamelCaseAttributes[i];\n    map[asciiLowerCase(a)] = a;\n  }\n  return map;\n})({});\n\nvar properTagCaseMap = (function (map) {\n  var knownElements = HTML.knownElementNames;\n  for (var i = 0; i < knownElements.length; i++) {\n    var a = knownElements[i];\n    map[asciiLowerCase(a)] = a;\n  }\n  return map;\n})({});\n\n// Take a tag name in any case and make it the proper case for HTML.\n//\n// Modern browsers let you embed SVG in HTML, but SVG elements are special\n// in that they have a case-sensitive DOM API (nodeName, getAttribute,\n// setAttribute).  For example, it has to be `setAttribute(\"viewBox\")`,\n// not `\"viewbox\"`.  However, the browser's HTML parser is NOT case sensitive\n// and will fix the case for you, so if you write `<svg viewbox=\"...\">`\n// you actually get a `\"viewBox\"` attribute.  Any HTML-parsing toolchain\n// must do the same.\nHTMLTools.properCaseTagName = function (name) {\n  var lowered = asciiLowerCase(name);\n  return properTagCaseMap.hasOwnProperty(lowered) ?\n    properTagCaseMap[lowered] : lowered;\n};\n\n// See docs for properCaseTagName.\nHTMLTools.properCaseAttributeName = function (name) {\n  var lowered = asciiLowerCase(name);\n  return properAttributeCaseMap.hasOwnProperty(lowered) ?\n    properAttributeCaseMap[lowered] : lowered;\n};\n","// This is a Scanner class suitable for any parser/lexer/tokenizer.\n//\n// A Scanner has an immutable source document (string) `input` and a current\n// position `pos`, an index into the string, which can be set at will.\n//\n// * `new Scanner(input)` - constructs a Scanner with source string `input`\n// * `scanner.rest()` - returns the rest of the input after `pos`\n// * `scanner.peek()` - returns the character at `pos`\n// * `scanner.isEOF()` - true if `pos` is at or beyond the end of `input`\n// * `scanner.fatal(msg)` - throw an error indicating a problem at `pos`\n\nScanner = HTMLTools.Scanner = function (input) {\n  this.input = input; // public, read-only\n  this.pos = 0; // public, read-write\n};\n\nScanner.prototype.rest = function () {\n  // Slicing a string is O(1) in modern JavaScript VMs (including old IE).\n  return this.input.slice(this.pos);\n};\n\nScanner.prototype.isEOF = function () {\n  return this.pos >= this.input.length;\n};\n\nScanner.prototype.fatal = function (msg) {\n  // despite this default, you should always provide a message!\n  msg = (msg || \"Parse error\");\n\n  var CONTEXT_AMOUNT = 20;\n\n  var input = this.input;\n  var pos = this.pos;\n  var pastInput = input.substring(pos - CONTEXT_AMOUNT - 1, pos);\n  if (pastInput.length > CONTEXT_AMOUNT)\n    pastInput = '...' + pastInput.substring(-CONTEXT_AMOUNT);\n\n  var upcomingInput = input.substring(pos, pos + CONTEXT_AMOUNT + 1);\n  if (upcomingInput.length > CONTEXT_AMOUNT)\n    upcomingInput = upcomingInput.substring(0, CONTEXT_AMOUNT) + '...';\n\n  var positionDisplay = ((pastInput + upcomingInput).replace(/\\n/g, ' ') + '\\n' +\n                         (new Array(pastInput.length + 1).join(' ')) + \"^\");\n\n  var e = new Error(msg + \"\\n\" + positionDisplay);\n\n  e.offset = pos;\n  var allPastInput = input.substring(0, pos);\n  e.line = (1 + (allPastInput.match(/\\n/g) || []).length);\n  e.col = (1 + pos - allPastInput.lastIndexOf('\\n'));\n  e.scanner = this;\n\n  throw e;\n};\n\n// Peek at the next character.\n//\n// If `isEOF`, returns an empty string.\nScanner.prototype.peek = function () {\n  return this.input.charAt(this.pos);\n};\n\n// Constructs a `getFoo` function where `foo` is specified with a regex.\n// The regex should start with `^`.  The constructed function will return\n// match group 1, if it exists and matches a non-empty string, or else\n// the entire matched string (or null if there is no match).\n//\n// A `getFoo` function tries to match and consume a foo.  If it succeeds,\n// the current position of the scanner is advanced.  If it fails, the\n// current position is not advanced and a falsy value (typically null)\n// is returned.\nmakeRegexMatcher = function (regex) {\n  return function (scanner) {\n    var match = regex.exec(scanner.rest());\n\n    if (! match)\n      return null;\n\n    scanner.pos += match[0].length;\n    return match[1] || match[0];\n  };\n};\n","\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/entities.json\n\n\n// Note that some entities don't have a final semicolon!  These are used to\n// make `&lt` (for example) with no semicolon a parse error but `&abcde` not.\n\nvar ENTITIES = {\n  \"&Aacute;\": { \"codepoints\": [193], \"characters\": \"\\u00C1\" },\n  \"&Aacute\": { \"codepoints\": [193], \"characters\": \"\\u00C1\" },\n  \"&aacute;\": { \"codepoints\": [225], \"characters\": \"\\u00E1\" },\n  \"&aacute\": { \"codepoints\": [225], \"characters\": \"\\u00E1\" },\n  \"&Abreve;\": { \"codepoints\": [258], \"characters\": \"\\u0102\" },\n  \"&abreve;\": { \"codepoints\": [259], \"characters\": \"\\u0103\" },\n  \"&ac;\": { \"codepoints\": [8766], \"characters\": \"\\u223E\" },\n  \"&acd;\": { \"codepoints\": [8767], \"characters\": \"\\u223F\" },\n  \"&acE;\": { \"codepoints\": [8766, 819], \"characters\": \"\\u223E\\u0333\" },\n  \"&Acirc;\": { \"codepoints\": [194], \"characters\": \"\\u00C2\" },\n  \"&Acirc\": { \"codepoints\": [194], \"characters\": \"\\u00C2\" },\n  \"&acirc;\": { \"codepoints\": [226], \"characters\": \"\\u00E2\" },\n  \"&acirc\": { \"codepoints\": [226], \"characters\": \"\\u00E2\" },\n  \"&acute;\": { \"codepoints\": [180], \"characters\": \"\\u00B4\" },\n  \"&acute\": { \"codepoints\": [180], \"characters\": \"\\u00B4\" },\n  \"&Acy;\": { \"codepoints\": [1040], \"characters\": \"\\u0410\" },\n  \"&acy;\": { \"codepoints\": [1072], \"characters\": \"\\u0430\" },\n  \"&AElig;\": { \"codepoints\": [198], \"characters\": \"\\u00C6\" },\n  \"&AElig\": { \"codepoints\": [198], \"characters\": \"\\u00C6\" },\n  \"&aelig;\": { \"codepoints\": [230], \"characters\": \"\\u00E6\" },\n  \"&aelig\": { \"codepoints\": [230], \"characters\": \"\\u00E6\" },\n  \"&af;\": { \"codepoints\": [8289], \"characters\": \"\\u2061\" },\n  \"&Afr;\": { \"codepoints\": [120068], \"characters\": \"\\uD835\\uDD04\" },\n  \"&afr;\": { \"codepoints\": [120094], \"characters\": \"\\uD835\\uDD1E\" },\n  \"&Agrave;\": { \"codepoints\": [192], \"characters\": \"\\u00C0\" },\n  \"&Agrave\": { \"codepoints\": [192], \"characters\": \"\\u00C0\" },\n  \"&agrave;\": { \"codepoints\": [224], \"characters\": \"\\u00E0\" },\n  \"&agrave\": { \"codepoints\": [224], \"characters\": \"\\u00E0\" },\n  \"&alefsym;\": { \"codepoints\": [8501], \"characters\": \"\\u2135\" },\n  \"&aleph;\": { \"codepoints\": [8501], \"characters\": \"\\u2135\" },\n  \"&Alpha;\": { \"codepoints\": [913], \"characters\": \"\\u0391\" },\n  \"&alpha;\": { \"codepoints\": [945], \"characters\": \"\\u03B1\" },\n  \"&Amacr;\": { \"codepoints\": [256], \"characters\": \"\\u0100\" },\n  \"&amacr;\": { \"codepoints\": [257], \"characters\": \"\\u0101\" },\n  \"&amalg;\": { \"codepoints\": [10815], \"characters\": \"\\u2A3F\" },\n  \"&amp;\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },\n  \"&amp\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },\n  \"&AMP;\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },\n  \"&AMP\": { \"codepoints\": [38], \"characters\": \"\\u0026\" },\n  \"&andand;\": { \"codepoints\": [10837], \"characters\": \"\\u2A55\" },\n  \"&And;\": { \"codepoints\": [10835], \"characters\": \"\\u2A53\" },\n  \"&and;\": { \"codepoints\": [8743], \"characters\": \"\\u2227\" },\n  \"&andd;\": { \"codepoints\": [10844], \"characters\": \"\\u2A5C\" },\n  \"&andslope;\": { \"codepoints\": [10840], \"characters\": \"\\u2A58\" },\n  \"&andv;\": { \"codepoints\": [10842], \"characters\": \"\\u2A5A\" },\n  \"&ang;\": { \"codepoints\": [8736], \"characters\": \"\\u2220\" },\n  \"&ange;\": { \"codepoints\": [10660], \"characters\": \"\\u29A4\" },\n  \"&angle;\": { \"codepoints\": [8736], \"characters\": \"\\u2220\" },\n  \"&angmsdaa;\": { \"codepoints\": [10664], \"characters\": \"\\u29A8\" },\n  \"&angmsdab;\": { \"codepoints\": [10665], \"characters\": \"\\u29A9\" },\n  \"&angmsdac;\": { \"codepoints\": [10666], \"characters\": \"\\u29AA\" },\n  \"&angmsdad;\": { \"codepoints\": [10667], \"characters\": \"\\u29AB\" },\n  \"&angmsdae;\": { \"codepoints\": [10668], \"characters\": \"\\u29AC\" },\n  \"&angmsdaf;\": { \"codepoints\": [10669], \"characters\": \"\\u29AD\" },\n  \"&angmsdag;\": { \"codepoints\": [10670], \"characters\": \"\\u29AE\" },\n  \"&angmsdah;\": { \"codepoints\": [10671], \"characters\": \"\\u29AF\" },\n  \"&angmsd;\": { \"codepoints\": [8737], \"characters\": \"\\u2221\" },\n  \"&angrt;\": { \"codepoints\": [8735], \"characters\": \"\\u221F\" },\n  \"&angrtvb;\": { \"codepoints\": [8894], \"characters\": \"\\u22BE\" },\n  \"&angrtvbd;\": { \"codepoints\": [10653], \"characters\": \"\\u299D\" },\n  \"&angsph;\": { \"codepoints\": [8738], \"characters\": \"\\u2222\" },\n  \"&angst;\": { \"codepoints\": [197], \"characters\": \"\\u00C5\" },\n  \"&angzarr;\": { \"codepoints\": [9084], \"characters\": \"\\u237C\" },\n  \"&Aogon;\": { \"codepoints\": [260], \"characters\": \"\\u0104\" },\n  \"&aogon;\": { \"codepoints\": [261], \"characters\": \"\\u0105\" },\n  \"&Aopf;\": { \"codepoints\": [120120], \"characters\": \"\\uD835\\uDD38\" },\n  \"&aopf;\": { \"codepoints\": [120146], \"characters\": \"\\uD835\\uDD52\" },\n  \"&apacir;\": { \"codepoints\": [10863], \"characters\": \"\\u2A6F\" },\n  \"&ap;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },\n  \"&apE;\": { \"codepoints\": [10864], \"characters\": \"\\u2A70\" },\n  \"&ape;\": { \"codepoints\": [8778], \"characters\": \"\\u224A\" },\n  \"&apid;\": { \"codepoints\": [8779], \"characters\": \"\\u224B\" },\n  \"&apos;\": { \"codepoints\": [39], \"characters\": \"\\u0027\" },\n  \"&ApplyFunction;\": { \"codepoints\": [8289], \"characters\": \"\\u2061\" },\n  \"&approx;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },\n  \"&approxeq;\": { \"codepoints\": [8778], \"characters\": \"\\u224A\" },\n  \"&Aring;\": { \"codepoints\": [197], \"characters\": \"\\u00C5\" },\n  \"&Aring\": { \"codepoints\": [197], \"characters\": \"\\u00C5\" },\n  \"&aring;\": { \"codepoints\": [229], \"characters\": \"\\u00E5\" },\n  \"&aring\": { \"codepoints\": [229], \"characters\": \"\\u00E5\" },\n  \"&Ascr;\": { \"codepoints\": [119964], \"characters\": \"\\uD835\\uDC9C\" },\n  \"&ascr;\": { \"codepoints\": [119990], \"characters\": \"\\uD835\\uDCB6\" },\n  \"&Assign;\": { \"codepoints\": [8788], \"characters\": \"\\u2254\" },\n  \"&ast;\": { \"codepoints\": [42], \"characters\": \"\\u002A\" },\n  \"&asymp;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },\n  \"&asympeq;\": { \"codepoints\": [8781], \"characters\": \"\\u224D\" },\n  \"&Atilde;\": { \"codepoints\": [195], \"characters\": \"\\u00C3\" },\n  \"&Atilde\": { \"codepoints\": [195], \"characters\": \"\\u00C3\" },\n  \"&atilde;\": { \"codepoints\": [227], \"characters\": \"\\u00E3\" },\n  \"&atilde\": { \"codepoints\": [227], \"characters\": \"\\u00E3\" },\n  \"&Auml;\": { \"codepoints\": [196], \"characters\": \"\\u00C4\" },\n  \"&Auml\": { \"codepoints\": [196], \"characters\": \"\\u00C4\" },\n  \"&auml;\": { \"codepoints\": [228], \"characters\": \"\\u00E4\" },\n  \"&auml\": { \"codepoints\": [228], \"characters\": \"\\u00E4\" },\n  \"&awconint;\": { \"codepoints\": [8755], \"characters\": \"\\u2233\" },\n  \"&awint;\": { \"codepoints\": [10769], \"characters\": \"\\u2A11\" },\n  \"&backcong;\": { \"codepoints\": [8780], \"characters\": \"\\u224C\" },\n  \"&backepsilon;\": { \"codepoints\": [1014], \"characters\": \"\\u03F6\" },\n  \"&backprime;\": { \"codepoints\": [8245], \"characters\": \"\\u2035\" },\n  \"&backsim;\": { \"codepoints\": [8765], \"characters\": \"\\u223D\" },\n  \"&backsimeq;\": { \"codepoints\": [8909], \"characters\": \"\\u22CD\" },\n  \"&Backslash;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },\n  \"&Barv;\": { \"codepoints\": [10983], \"characters\": \"\\u2AE7\" },\n  \"&barvee;\": { \"codepoints\": [8893], \"characters\": \"\\u22BD\" },\n  \"&barwed;\": { \"codepoints\": [8965], \"characters\": \"\\u2305\" },\n  \"&Barwed;\": { \"codepoints\": [8966], \"characters\": \"\\u2306\" },\n  \"&barwedge;\": { \"codepoints\": [8965], \"characters\": \"\\u2305\" },\n  \"&bbrk;\": { \"codepoints\": [9141], \"characters\": \"\\u23B5\" },\n  \"&bbrktbrk;\": { \"codepoints\": [9142], \"characters\": \"\\u23B6\" },\n  \"&bcong;\": { \"codepoints\": [8780], \"characters\": \"\\u224C\" },\n  \"&Bcy;\": { \"codepoints\": [1041], \"characters\": \"\\u0411\" },\n  \"&bcy;\": { \"codepoints\": [1073], \"characters\": \"\\u0431\" },\n  \"&bdquo;\": { \"codepoints\": [8222], \"characters\": \"\\u201E\" },\n  \"&becaus;\": { \"codepoints\": [8757], \"characters\": \"\\u2235\" },\n  \"&because;\": { \"codepoints\": [8757], \"characters\": \"\\u2235\" },\n  \"&Because;\": { \"codepoints\": [8757], \"characters\": \"\\u2235\" },\n  \"&bemptyv;\": { \"codepoints\": [10672], \"characters\": \"\\u29B0\" },\n  \"&bepsi;\": { \"codepoints\": [1014], \"characters\": \"\\u03F6\" },\n  \"&bernou;\": { \"codepoints\": [8492], \"characters\": \"\\u212C\" },\n  \"&Bernoullis;\": { \"codepoints\": [8492], \"characters\": \"\\u212C\" },\n  \"&Beta;\": { \"codepoints\": [914], \"characters\": \"\\u0392\" },\n  \"&beta;\": { \"codepoints\": [946], \"characters\": \"\\u03B2\" },\n  \"&beth;\": { \"codepoints\": [8502], \"characters\": \"\\u2136\" },\n  \"&between;\": { \"codepoints\": [8812], \"characters\": \"\\u226C\" },\n  \"&Bfr;\": { \"codepoints\": [120069], \"characters\": \"\\uD835\\uDD05\" },\n  \"&bfr;\": { \"codepoints\": [120095], \"characters\": \"\\uD835\\uDD1F\" },\n  \"&bigcap;\": { \"codepoints\": [8898], \"characters\": \"\\u22C2\" },\n  \"&bigcirc;\": { \"codepoints\": [9711], \"characters\": \"\\u25EF\" },\n  \"&bigcup;\": { \"codepoints\": [8899], \"characters\": \"\\u22C3\" },\n  \"&bigodot;\": { \"codepoints\": [10752], \"characters\": \"\\u2A00\" },\n  \"&bigoplus;\": { \"codepoints\": [10753], \"characters\": \"\\u2A01\" },\n  \"&bigotimes;\": { \"codepoints\": [10754], \"characters\": \"\\u2A02\" },\n  \"&bigsqcup;\": { \"codepoints\": [10758], \"characters\": \"\\u2A06\" },\n  \"&bigstar;\": { \"codepoints\": [9733], \"characters\": \"\\u2605\" },\n  \"&bigtriangledown;\": { \"codepoints\": [9661], \"characters\": \"\\u25BD\" },\n  \"&bigtriangleup;\": { \"codepoints\": [9651], \"characters\": \"\\u25B3\" },\n  \"&biguplus;\": { \"codepoints\": [10756], \"characters\": \"\\u2A04\" },\n  \"&bigvee;\": { \"codepoints\": [8897], \"characters\": \"\\u22C1\" },\n  \"&bigwedge;\": { \"codepoints\": [8896], \"characters\": \"\\u22C0\" },\n  \"&bkarow;\": { \"codepoints\": [10509], \"characters\": \"\\u290D\" },\n  \"&blacklozenge;\": { \"codepoints\": [10731], \"characters\": \"\\u29EB\" },\n  \"&blacksquare;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },\n  \"&blacktriangle;\": { \"codepoints\": [9652], \"characters\": \"\\u25B4\" },\n  \"&blacktriangledown;\": { \"codepoints\": [9662], \"characters\": \"\\u25BE\" },\n  \"&blacktriangleleft;\": { \"codepoints\": [9666], \"characters\": \"\\u25C2\" },\n  \"&blacktriangleright;\": { \"codepoints\": [9656], \"characters\": \"\\u25B8\" },\n  \"&blank;\": { \"codepoints\": [9251], \"characters\": \"\\u2423\" },\n  \"&blk12;\": { \"codepoints\": [9618], \"characters\": \"\\u2592\" },\n  \"&blk14;\": { \"codepoints\": [9617], \"characters\": \"\\u2591\" },\n  \"&blk34;\": { \"codepoints\": [9619], \"characters\": \"\\u2593\" },\n  \"&block;\": { \"codepoints\": [9608], \"characters\": \"\\u2588\" },\n  \"&bne;\": { \"codepoints\": [61, 8421], \"characters\": \"\\u003D\\u20E5\" },\n  \"&bnequiv;\": { \"codepoints\": [8801, 8421], \"characters\": \"\\u2261\\u20E5\" },\n  \"&bNot;\": { \"codepoints\": [10989], \"characters\": \"\\u2AED\" },\n  \"&bnot;\": { \"codepoints\": [8976], \"characters\": \"\\u2310\" },\n  \"&Bopf;\": { \"codepoints\": [120121], \"characters\": \"\\uD835\\uDD39\" },\n  \"&bopf;\": { \"codepoints\": [120147], \"characters\": \"\\uD835\\uDD53\" },\n  \"&bot;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },\n  \"&bottom;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },\n  \"&bowtie;\": { \"codepoints\": [8904], \"characters\": \"\\u22C8\" },\n  \"&boxbox;\": { \"codepoints\": [10697], \"characters\": \"\\u29C9\" },\n  \"&boxdl;\": { \"codepoints\": [9488], \"characters\": \"\\u2510\" },\n  \"&boxdL;\": { \"codepoints\": [9557], \"characters\": \"\\u2555\" },\n  \"&boxDl;\": { \"codepoints\": [9558], \"characters\": \"\\u2556\" },\n  \"&boxDL;\": { \"codepoints\": [9559], \"characters\": \"\\u2557\" },\n  \"&boxdr;\": { \"codepoints\": [9484], \"characters\": \"\\u250C\" },\n  \"&boxdR;\": { \"codepoints\": [9554], \"characters\": \"\\u2552\" },\n  \"&boxDr;\": { \"codepoints\": [9555], \"characters\": \"\\u2553\" },\n  \"&boxDR;\": { \"codepoints\": [9556], \"characters\": \"\\u2554\" },\n  \"&boxh;\": { \"codepoints\": [9472], \"characters\": \"\\u2500\" },\n  \"&boxH;\": { \"codepoints\": [9552], \"characters\": \"\\u2550\" },\n  \"&boxhd;\": { \"codepoints\": [9516], \"characters\": \"\\u252C\" },\n  \"&boxHd;\": { \"codepoints\": [9572], \"characters\": \"\\u2564\" },\n  \"&boxhD;\": { \"codepoints\": [9573], \"characters\": \"\\u2565\" },\n  \"&boxHD;\": { \"codepoints\": [9574], \"characters\": \"\\u2566\" },\n  \"&boxhu;\": { \"codepoints\": [9524], \"characters\": \"\\u2534\" },\n  \"&boxHu;\": { \"codepoints\": [9575], \"characters\": \"\\u2567\" },\n  \"&boxhU;\": { \"codepoints\": [9576], \"characters\": \"\\u2568\" },\n  \"&boxHU;\": { \"codepoints\": [9577], \"characters\": \"\\u2569\" },\n  \"&boxminus;\": { \"codepoints\": [8863], \"characters\": \"\\u229F\" },\n  \"&boxplus;\": { \"codepoints\": [8862], \"characters\": \"\\u229E\" },\n  \"&boxtimes;\": { \"codepoints\": [8864], \"characters\": \"\\u22A0\" },\n  \"&boxul;\": { \"codepoints\": [9496], \"characters\": \"\\u2518\" },\n  \"&boxuL;\": { \"codepoints\": [9563], \"characters\": \"\\u255B\" },\n  \"&boxUl;\": { \"codepoints\": [9564], \"characters\": \"\\u255C\" },\n  \"&boxUL;\": { \"codepoints\": [9565], \"characters\": \"\\u255D\" },\n  \"&boxur;\": { \"codepoints\": [9492], \"characters\": \"\\u2514\" },\n  \"&boxuR;\": { \"codepoints\": [9560], \"characters\": \"\\u2558\" },\n  \"&boxUr;\": { \"codepoints\": [9561], \"characters\": \"\\u2559\" },\n  \"&boxUR;\": { \"codepoints\": [9562], \"characters\": \"\\u255A\" },\n  \"&boxv;\": { \"codepoints\": [9474], \"characters\": \"\\u2502\" },\n  \"&boxV;\": { \"codepoints\": [9553], \"characters\": \"\\u2551\" },\n  \"&boxvh;\": { \"codepoints\": [9532], \"characters\": \"\\u253C\" },\n  \"&boxvH;\": { \"codepoints\": [9578], \"characters\": \"\\u256A\" },\n  \"&boxVh;\": { \"codepoints\": [9579], \"characters\": \"\\u256B\" },\n  \"&boxVH;\": { \"codepoints\": [9580], \"characters\": \"\\u256C\" },\n  \"&boxvl;\": { \"codepoints\": [9508], \"characters\": \"\\u2524\" },\n  \"&boxvL;\": { \"codepoints\": [9569], \"characters\": \"\\u2561\" },\n  \"&boxVl;\": { \"codepoints\": [9570], \"characters\": \"\\u2562\" },\n  \"&boxVL;\": { \"codepoints\": [9571], \"characters\": \"\\u2563\" },\n  \"&boxvr;\": { \"codepoints\": [9500], \"characters\": \"\\u251C\" },\n  \"&boxvR;\": { \"codepoints\": [9566], \"characters\": \"\\u255E\" },\n  \"&boxVr;\": { \"codepoints\": [9567], \"characters\": \"\\u255F\" },\n  \"&boxVR;\": { \"codepoints\": [9568], \"characters\": \"\\u2560\" },\n  \"&bprime;\": { \"codepoints\": [8245], \"characters\": \"\\u2035\" },\n  \"&breve;\": { \"codepoints\": [728], \"characters\": \"\\u02D8\" },\n  \"&Breve;\": { \"codepoints\": [728], \"characters\": \"\\u02D8\" },\n  \"&brvbar;\": { \"codepoints\": [166], \"characters\": \"\\u00A6\" },\n  \"&brvbar\": { \"codepoints\": [166], \"characters\": \"\\u00A6\" },\n  \"&bscr;\": { \"codepoints\": [119991], \"characters\": \"\\uD835\\uDCB7\" },\n  \"&Bscr;\": { \"codepoints\": [8492], \"characters\": \"\\u212C\" },\n  \"&bsemi;\": { \"codepoints\": [8271], \"characters\": \"\\u204F\" },\n  \"&bsim;\": { \"codepoints\": [8765], \"characters\": \"\\u223D\" },\n  \"&bsime;\": { \"codepoints\": [8909], \"characters\": \"\\u22CD\" },\n  \"&bsolb;\": { \"codepoints\": [10693], \"characters\": \"\\u29C5\" },\n  \"&bsol;\": { \"codepoints\": [92], \"characters\": \"\\u005C\" },\n  \"&bsolhsub;\": { \"codepoints\": [10184], \"characters\": \"\\u27C8\" },\n  \"&bull;\": { \"codepoints\": [8226], \"characters\": \"\\u2022\" },\n  \"&bullet;\": { \"codepoints\": [8226], \"characters\": \"\\u2022\" },\n  \"&bump;\": { \"codepoints\": [8782], \"characters\": \"\\u224E\" },\n  \"&bumpE;\": { \"codepoints\": [10926], \"characters\": \"\\u2AAE\" },\n  \"&bumpe;\": { \"codepoints\": [8783], \"characters\": \"\\u224F\" },\n  \"&Bumpeq;\": { \"codepoints\": [8782], \"characters\": \"\\u224E\" },\n  \"&bumpeq;\": { \"codepoints\": [8783], \"characters\": \"\\u224F\" },\n  \"&Cacute;\": { \"codepoints\": [262], \"characters\": \"\\u0106\" },\n  \"&cacute;\": { \"codepoints\": [263], \"characters\": \"\\u0107\" },\n  \"&capand;\": { \"codepoints\": [10820], \"characters\": \"\\u2A44\" },\n  \"&capbrcup;\": { \"codepoints\": [10825], \"characters\": \"\\u2A49\" },\n  \"&capcap;\": { \"codepoints\": [10827], \"characters\": \"\\u2A4B\" },\n  \"&cap;\": { \"codepoints\": [8745], \"characters\": \"\\u2229\" },\n  \"&Cap;\": { \"codepoints\": [8914], \"characters\": \"\\u22D2\" },\n  \"&capcup;\": { \"codepoints\": [10823], \"characters\": \"\\u2A47\" },\n  \"&capdot;\": { \"codepoints\": [10816], \"characters\": \"\\u2A40\" },\n  \"&CapitalDifferentialD;\": { \"codepoints\": [8517], \"characters\": \"\\u2145\" },\n  \"&caps;\": { \"codepoints\": [8745, 65024], \"characters\": \"\\u2229\\uFE00\" },\n  \"&caret;\": { \"codepoints\": [8257], \"characters\": \"\\u2041\" },\n  \"&caron;\": { \"codepoints\": [711], \"characters\": \"\\u02C7\" },\n  \"&Cayleys;\": { \"codepoints\": [8493], \"characters\": \"\\u212D\" },\n  \"&ccaps;\": { \"codepoints\": [10829], \"characters\": \"\\u2A4D\" },\n  \"&Ccaron;\": { \"codepoints\": [268], \"characters\": \"\\u010C\" },\n  \"&ccaron;\": { \"codepoints\": [269], \"characters\": \"\\u010D\" },\n  \"&Ccedil;\": { \"codepoints\": [199], \"characters\": \"\\u00C7\" },\n  \"&Ccedil\": { \"codepoints\": [199], \"characters\": \"\\u00C7\" },\n  \"&ccedil;\": { \"codepoints\": [231], \"characters\": \"\\u00E7\" },\n  \"&ccedil\": { \"codepoints\": [231], \"characters\": \"\\u00E7\" },\n  \"&Ccirc;\": { \"codepoints\": [264], \"characters\": \"\\u0108\" },\n  \"&ccirc;\": { \"codepoints\": [265], \"characters\": \"\\u0109\" },\n  \"&Cconint;\": { \"codepoints\": [8752], \"characters\": \"\\u2230\" },\n  \"&ccups;\": { \"codepoints\": [10828], \"characters\": \"\\u2A4C\" },\n  \"&ccupssm;\": { \"codepoints\": [10832], \"characters\": \"\\u2A50\" },\n  \"&Cdot;\": { \"codepoints\": [266], \"characters\": \"\\u010A\" },\n  \"&cdot;\": { \"codepoints\": [267], \"characters\": \"\\u010B\" },\n  \"&cedil;\": { \"codepoints\": [184], \"characters\": \"\\u00B8\" },\n  \"&cedil\": { \"codepoints\": [184], \"characters\": \"\\u00B8\" },\n  \"&Cedilla;\": { \"codepoints\": [184], \"characters\": \"\\u00B8\" },\n  \"&cemptyv;\": { \"codepoints\": [10674], \"characters\": \"\\u29B2\" },\n  \"&cent;\": { \"codepoints\": [162], \"characters\": \"\\u00A2\" },\n  \"&cent\": { \"codepoints\": [162], \"characters\": \"\\u00A2\" },\n  \"&centerdot;\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },\n  \"&CenterDot;\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },\n  \"&cfr;\": { \"codepoints\": [120096], \"characters\": \"\\uD835\\uDD20\" },\n  \"&Cfr;\": { \"codepoints\": [8493], \"characters\": \"\\u212D\" },\n  \"&CHcy;\": { \"codepoints\": [1063], \"characters\": \"\\u0427\" },\n  \"&chcy;\": { \"codepoints\": [1095], \"characters\": \"\\u0447\" },\n  \"&check;\": { \"codepoints\": [10003], \"characters\": \"\\u2713\" },\n  \"&checkmark;\": { \"codepoints\": [10003], \"characters\": \"\\u2713\" },\n  \"&Chi;\": { \"codepoints\": [935], \"characters\": \"\\u03A7\" },\n  \"&chi;\": { \"codepoints\": [967], \"characters\": \"\\u03C7\" },\n  \"&circ;\": { \"codepoints\": [710], \"characters\": \"\\u02C6\" },\n  \"&circeq;\": { \"codepoints\": [8791], \"characters\": \"\\u2257\" },\n  \"&circlearrowleft;\": { \"codepoints\": [8634], \"characters\": \"\\u21BA\" },\n  \"&circlearrowright;\": { \"codepoints\": [8635], \"characters\": \"\\u21BB\" },\n  \"&circledast;\": { \"codepoints\": [8859], \"characters\": \"\\u229B\" },\n  \"&circledcirc;\": { \"codepoints\": [8858], \"characters\": \"\\u229A\" },\n  \"&circleddash;\": { \"codepoints\": [8861], \"characters\": \"\\u229D\" },\n  \"&CircleDot;\": { \"codepoints\": [8857], \"characters\": \"\\u2299\" },\n  \"&circledR;\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },\n  \"&circledS;\": { \"codepoints\": [9416], \"characters\": \"\\u24C8\" },\n  \"&CircleMinus;\": { \"codepoints\": [8854], \"characters\": \"\\u2296\" },\n  \"&CirclePlus;\": { \"codepoints\": [8853], \"characters\": \"\\u2295\" },\n  \"&CircleTimes;\": { \"codepoints\": [8855], \"characters\": \"\\u2297\" },\n  \"&cir;\": { \"codepoints\": [9675], \"characters\": \"\\u25CB\" },\n  \"&cirE;\": { \"codepoints\": [10691], \"characters\": \"\\u29C3\" },\n  \"&cire;\": { \"codepoints\": [8791], \"characters\": \"\\u2257\" },\n  \"&cirfnint;\": { \"codepoints\": [10768], \"characters\": \"\\u2A10\" },\n  \"&cirmid;\": { \"codepoints\": [10991], \"characters\": \"\\u2AEF\" },\n  \"&cirscir;\": { \"codepoints\": [10690], \"characters\": \"\\u29C2\" },\n  \"&ClockwiseContourIntegral;\": { \"codepoints\": [8754], \"characters\": \"\\u2232\" },\n  \"&CloseCurlyDoubleQuote;\": { \"codepoints\": [8221], \"characters\": \"\\u201D\" },\n  \"&CloseCurlyQuote;\": { \"codepoints\": [8217], \"characters\": \"\\u2019\" },\n  \"&clubs;\": { \"codepoints\": [9827], \"characters\": \"\\u2663\" },\n  \"&clubsuit;\": { \"codepoints\": [9827], \"characters\": \"\\u2663\" },\n  \"&colon;\": { \"codepoints\": [58], \"characters\": \"\\u003A\" },\n  \"&Colon;\": { \"codepoints\": [8759], \"characters\": \"\\u2237\" },\n  \"&Colone;\": { \"codepoints\": [10868], \"characters\": \"\\u2A74\" },\n  \"&colone;\": { \"codepoints\": [8788], \"characters\": \"\\u2254\" },\n  \"&coloneq;\": { \"codepoints\": [8788], \"characters\": \"\\u2254\" },\n  \"&comma;\": { \"codepoints\": [44], \"characters\": \"\\u002C\" },\n  \"&commat;\": { \"codepoints\": [64], \"characters\": \"\\u0040\" },\n  \"&comp;\": { \"codepoints\": [8705], \"characters\": \"\\u2201\" },\n  \"&compfn;\": { \"codepoints\": [8728], \"characters\": \"\\u2218\" },\n  \"&complement;\": { \"codepoints\": [8705], \"characters\": \"\\u2201\" },\n  \"&complexes;\": { \"codepoints\": [8450], \"characters\": \"\\u2102\" },\n  \"&cong;\": { \"codepoints\": [8773], \"characters\": \"\\u2245\" },\n  \"&congdot;\": { \"codepoints\": [10861], \"characters\": \"\\u2A6D\" },\n  \"&Congruent;\": { \"codepoints\": [8801], \"characters\": \"\\u2261\" },\n  \"&conint;\": { \"codepoints\": [8750], \"characters\": \"\\u222E\" },\n  \"&Conint;\": { \"codepoints\": [8751], \"characters\": \"\\u222F\" },\n  \"&ContourIntegral;\": { \"codepoints\": [8750], \"characters\": \"\\u222E\" },\n  \"&copf;\": { \"codepoints\": [120148], \"characters\": \"\\uD835\\uDD54\" },\n  \"&Copf;\": { \"codepoints\": [8450], \"characters\": \"\\u2102\" },\n  \"&coprod;\": { \"codepoints\": [8720], \"characters\": \"\\u2210\" },\n  \"&Coproduct;\": { \"codepoints\": [8720], \"characters\": \"\\u2210\" },\n  \"&copy;\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },\n  \"&copy\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },\n  \"&COPY;\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },\n  \"&COPY\": { \"codepoints\": [169], \"characters\": \"\\u00A9\" },\n  \"&copysr;\": { \"codepoints\": [8471], \"characters\": \"\\u2117\" },\n  \"&CounterClockwiseContourIntegral;\": { \"codepoints\": [8755], \"characters\": \"\\u2233\" },\n  \"&crarr;\": { \"codepoints\": [8629], \"characters\": \"\\u21B5\" },\n  \"&cross;\": { \"codepoints\": [10007], \"characters\": \"\\u2717\" },\n  \"&Cross;\": { \"codepoints\": [10799], \"characters\": \"\\u2A2F\" },\n  \"&Cscr;\": { \"codepoints\": [119966], \"characters\": \"\\uD835\\uDC9E\" },\n  \"&cscr;\": { \"codepoints\": [119992], \"characters\": \"\\uD835\\uDCB8\" },\n  \"&csub;\": { \"codepoints\": [10959], \"characters\": \"\\u2ACF\" },\n  \"&csube;\": { \"codepoints\": [10961], \"characters\": \"\\u2AD1\" },\n  \"&csup;\": { \"codepoints\": [10960], \"characters\": \"\\u2AD0\" },\n  \"&csupe;\": { \"codepoints\": [10962], \"characters\": \"\\u2AD2\" },\n  \"&ctdot;\": { \"codepoints\": [8943], \"characters\": \"\\u22EF\" },\n  \"&cudarrl;\": { \"codepoints\": [10552], \"characters\": \"\\u2938\" },\n  \"&cudarrr;\": { \"codepoints\": [10549], \"characters\": \"\\u2935\" },\n  \"&cuepr;\": { \"codepoints\": [8926], \"characters\": \"\\u22DE\" },\n  \"&cuesc;\": { \"codepoints\": [8927], \"characters\": \"\\u22DF\" },\n  \"&cularr;\": { \"codepoints\": [8630], \"characters\": \"\\u21B6\" },\n  \"&cularrp;\": { \"codepoints\": [10557], \"characters\": \"\\u293D\" },\n  \"&cupbrcap;\": { \"codepoints\": [10824], \"characters\": \"\\u2A48\" },\n  \"&cupcap;\": { \"codepoints\": [10822], \"characters\": \"\\u2A46\" },\n  \"&CupCap;\": { \"codepoints\": [8781], \"characters\": \"\\u224D\" },\n  \"&cup;\": { \"codepoints\": [8746], \"characters\": \"\\u222A\" },\n  \"&Cup;\": { \"codepoints\": [8915], \"characters\": \"\\u22D3\" },\n  \"&cupcup;\": { \"codepoints\": [10826], \"characters\": \"\\u2A4A\" },\n  \"&cupdot;\": { \"codepoints\": [8845], \"characters\": \"\\u228D\" },\n  \"&cupor;\": { \"codepoints\": [10821], \"characters\": \"\\u2A45\" },\n  \"&cups;\": { \"codepoints\": [8746, 65024], \"characters\": \"\\u222A\\uFE00\" },\n  \"&curarr;\": { \"codepoints\": [8631], \"characters\": \"\\u21B7\" },\n  \"&curarrm;\": { \"codepoints\": [10556], \"characters\": \"\\u293C\" },\n  \"&curlyeqprec;\": { \"codepoints\": [8926], \"characters\": \"\\u22DE\" },\n  \"&curlyeqsucc;\": { \"codepoints\": [8927], \"characters\": \"\\u22DF\" },\n  \"&curlyvee;\": { \"codepoints\": [8910], \"characters\": \"\\u22CE\" },\n  \"&curlywedge;\": { \"codepoints\": [8911], \"characters\": \"\\u22CF\" },\n  \"&curren;\": { \"codepoints\": [164], \"characters\": \"\\u00A4\" },\n  \"&curren\": { \"codepoints\": [164], \"characters\": \"\\u00A4\" },\n  \"&curvearrowleft;\": { \"codepoints\": [8630], \"characters\": \"\\u21B6\" },\n  \"&curvearrowright;\": { \"codepoints\": [8631], \"characters\": \"\\u21B7\" },\n  \"&cuvee;\": { \"codepoints\": [8910], \"characters\": \"\\u22CE\" },\n  \"&cuwed;\": { \"codepoints\": [8911], \"characters\": \"\\u22CF\" },\n  \"&cwconint;\": { \"codepoints\": [8754], \"characters\": \"\\u2232\" },\n  \"&cwint;\": { \"codepoints\": [8753], \"characters\": \"\\u2231\" },\n  \"&cylcty;\": { \"codepoints\": [9005], \"characters\": \"\\u232D\" },\n  \"&dagger;\": { \"codepoints\": [8224], \"characters\": \"\\u2020\" },\n  \"&Dagger;\": { \"codepoints\": [8225], \"characters\": \"\\u2021\" },\n  \"&daleth;\": { \"codepoints\": [8504], \"characters\": \"\\u2138\" },\n  \"&darr;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },\n  \"&Darr;\": { \"codepoints\": [8609], \"characters\": \"\\u21A1\" },\n  \"&dArr;\": { \"codepoints\": [8659], \"characters\": \"\\u21D3\" },\n  \"&dash;\": { \"codepoints\": [8208], \"characters\": \"\\u2010\" },\n  \"&Dashv;\": { \"codepoints\": [10980], \"characters\": \"\\u2AE4\" },\n  \"&dashv;\": { \"codepoints\": [8867], \"characters\": \"\\u22A3\" },\n  \"&dbkarow;\": { \"codepoints\": [10511], \"characters\": \"\\u290F\" },\n  \"&dblac;\": { \"codepoints\": [733], \"characters\": \"\\u02DD\" },\n  \"&Dcaron;\": { \"codepoints\": [270], \"characters\": \"\\u010E\" },\n  \"&dcaron;\": { \"codepoints\": [271], \"characters\": \"\\u010F\" },\n  \"&Dcy;\": { \"codepoints\": [1044], \"characters\": \"\\u0414\" },\n  \"&dcy;\": { \"codepoints\": [1076], \"characters\": \"\\u0434\" },\n  \"&ddagger;\": { \"codepoints\": [8225], \"characters\": \"\\u2021\" },\n  \"&ddarr;\": { \"codepoints\": [8650], \"characters\": \"\\u21CA\" },\n  \"&DD;\": { \"codepoints\": [8517], \"characters\": \"\\u2145\" },\n  \"&dd;\": { \"codepoints\": [8518], \"characters\": \"\\u2146\" },\n  \"&DDotrahd;\": { \"codepoints\": [10513], \"characters\": \"\\u2911\" },\n  \"&ddotseq;\": { \"codepoints\": [10871], \"characters\": \"\\u2A77\" },\n  \"&deg;\": { \"codepoints\": [176], \"characters\": \"\\u00B0\" },\n  \"&deg\": { \"codepoints\": [176], \"characters\": \"\\u00B0\" },\n  \"&Del;\": { \"codepoints\": [8711], \"characters\": \"\\u2207\" },\n  \"&Delta;\": { \"codepoints\": [916], \"characters\": \"\\u0394\" },\n  \"&delta;\": { \"codepoints\": [948], \"characters\": \"\\u03B4\" },\n  \"&demptyv;\": { \"codepoints\": [10673], \"characters\": \"\\u29B1\" },\n  \"&dfisht;\": { \"codepoints\": [10623], \"characters\": \"\\u297F\" },\n  \"&Dfr;\": { \"codepoints\": [120071], \"characters\": \"\\uD835\\uDD07\" },\n  \"&dfr;\": { \"codepoints\": [120097], \"characters\": \"\\uD835\\uDD21\" },\n  \"&dHar;\": { \"codepoints\": [10597], \"characters\": \"\\u2965\" },\n  \"&dharl;\": { \"codepoints\": [8643], \"characters\": \"\\u21C3\" },\n  \"&dharr;\": { \"codepoints\": [8642], \"characters\": \"\\u21C2\" },\n  \"&DiacriticalAcute;\": { \"codepoints\": [180], \"characters\": \"\\u00B4\" },\n  \"&DiacriticalDot;\": { \"codepoints\": [729], \"characters\": \"\\u02D9\" },\n  \"&DiacriticalDoubleAcute;\": { \"codepoints\": [733], \"characters\": \"\\u02DD\" },\n  \"&DiacriticalGrave;\": { \"codepoints\": [96], \"characters\": \"\\u0060\" },\n  \"&DiacriticalTilde;\": { \"codepoints\": [732], \"characters\": \"\\u02DC\" },\n  \"&diam;\": { \"codepoints\": [8900], \"characters\": \"\\u22C4\" },\n  \"&diamond;\": { \"codepoints\": [8900], \"characters\": \"\\u22C4\" },\n  \"&Diamond;\": { \"codepoints\": [8900], \"characters\": \"\\u22C4\" },\n  \"&diamondsuit;\": { \"codepoints\": [9830], \"characters\": \"\\u2666\" },\n  \"&diams;\": { \"codepoints\": [9830], \"characters\": \"\\u2666\" },\n  \"&die;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },\n  \"&DifferentialD;\": { \"codepoints\": [8518], \"characters\": \"\\u2146\" },\n  \"&digamma;\": { \"codepoints\": [989], \"characters\": \"\\u03DD\" },\n  \"&disin;\": { \"codepoints\": [8946], \"characters\": \"\\u22F2\" },\n  \"&div;\": { \"codepoints\": [247], \"characters\": \"\\u00F7\" },\n  \"&divide;\": { \"codepoints\": [247], \"characters\": \"\\u00F7\" },\n  \"&divide\": { \"codepoints\": [247], \"characters\": \"\\u00F7\" },\n  \"&divideontimes;\": { \"codepoints\": [8903], \"characters\": \"\\u22C7\" },\n  \"&divonx;\": { \"codepoints\": [8903], \"characters\": \"\\u22C7\" },\n  \"&DJcy;\": { \"codepoints\": [1026], \"characters\": \"\\u0402\" },\n  \"&djcy;\": { \"codepoints\": [1106], \"characters\": \"\\u0452\" },\n  \"&dlcorn;\": { \"codepoints\": [8990], \"characters\": \"\\u231E\" },\n  \"&dlcrop;\": { \"codepoints\": [8973], \"characters\": \"\\u230D\" },\n  \"&dollar;\": { \"codepoints\": [36], \"characters\": \"\\u0024\" },\n  \"&Dopf;\": { \"codepoints\": [120123], \"characters\": \"\\uD835\\uDD3B\" },\n  \"&dopf;\": { \"codepoints\": [120149], \"characters\": \"\\uD835\\uDD55\" },\n  \"&Dot;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },\n  \"&dot;\": { \"codepoints\": [729], \"characters\": \"\\u02D9\" },\n  \"&DotDot;\": { \"codepoints\": [8412], \"characters\": \"\\u20DC\" },\n  \"&doteq;\": { \"codepoints\": [8784], \"characters\": \"\\u2250\" },\n  \"&doteqdot;\": { \"codepoints\": [8785], \"characters\": \"\\u2251\" },\n  \"&DotEqual;\": { \"codepoints\": [8784], \"characters\": \"\\u2250\" },\n  \"&dotminus;\": { \"codepoints\": [8760], \"characters\": \"\\u2238\" },\n  \"&dotplus;\": { \"codepoints\": [8724], \"characters\": \"\\u2214\" },\n  \"&dotsquare;\": { \"codepoints\": [8865], \"characters\": \"\\u22A1\" },\n  \"&doublebarwedge;\": { \"codepoints\": [8966], \"characters\": \"\\u2306\" },\n  \"&DoubleContourIntegral;\": { \"codepoints\": [8751], \"characters\": \"\\u222F\" },\n  \"&DoubleDot;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },\n  \"&DoubleDownArrow;\": { \"codepoints\": [8659], \"characters\": \"\\u21D3\" },\n  \"&DoubleLeftArrow;\": { \"codepoints\": [8656], \"characters\": \"\\u21D0\" },\n  \"&DoubleLeftRightArrow;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },\n  \"&DoubleLeftTee;\": { \"codepoints\": [10980], \"characters\": \"\\u2AE4\" },\n  \"&DoubleLongLeftArrow;\": { \"codepoints\": [10232], \"characters\": \"\\u27F8\" },\n  \"&DoubleLongLeftRightArrow;\": { \"codepoints\": [10234], \"characters\": \"\\u27FA\" },\n  \"&DoubleLongRightArrow;\": { \"codepoints\": [10233], \"characters\": \"\\u27F9\" },\n  \"&DoubleRightArrow;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },\n  \"&DoubleRightTee;\": { \"codepoints\": [8872], \"characters\": \"\\u22A8\" },\n  \"&DoubleUpArrow;\": { \"codepoints\": [8657], \"characters\": \"\\u21D1\" },\n  \"&DoubleUpDownArrow;\": { \"codepoints\": [8661], \"characters\": \"\\u21D5\" },\n  \"&DoubleVerticalBar;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },\n  \"&DownArrowBar;\": { \"codepoints\": [10515], \"characters\": \"\\u2913\" },\n  \"&downarrow;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },\n  \"&DownArrow;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },\n  \"&Downarrow;\": { \"codepoints\": [8659], \"characters\": \"\\u21D3\" },\n  \"&DownArrowUpArrow;\": { \"codepoints\": [8693], \"characters\": \"\\u21F5\" },\n  \"&DownBreve;\": { \"codepoints\": [785], \"characters\": \"\\u0311\" },\n  \"&downdownarrows;\": { \"codepoints\": [8650], \"characters\": \"\\u21CA\" },\n  \"&downharpoonleft;\": { \"codepoints\": [8643], \"characters\": \"\\u21C3\" },\n  \"&downharpoonright;\": { \"codepoints\": [8642], \"characters\": \"\\u21C2\" },\n  \"&DownLeftRightVector;\": { \"codepoints\": [10576], \"characters\": \"\\u2950\" },\n  \"&DownLeftTeeVector;\": { \"codepoints\": [10590], \"characters\": \"\\u295E\" },\n  \"&DownLeftVectorBar;\": { \"codepoints\": [10582], \"characters\": \"\\u2956\" },\n  \"&DownLeftVector;\": { \"codepoints\": [8637], \"characters\": \"\\u21BD\" },\n  \"&DownRightTeeVector;\": { \"codepoints\": [10591], \"characters\": \"\\u295F\" },\n  \"&DownRightVectorBar;\": { \"codepoints\": [10583], \"characters\": \"\\u2957\" },\n  \"&DownRightVector;\": { \"codepoints\": [8641], \"characters\": \"\\u21C1\" },\n  \"&DownTeeArrow;\": { \"codepoints\": [8615], \"characters\": \"\\u21A7\" },\n  \"&DownTee;\": { \"codepoints\": [8868], \"characters\": \"\\u22A4\" },\n  \"&drbkarow;\": { \"codepoints\": [10512], \"characters\": \"\\u2910\" },\n  \"&drcorn;\": { \"codepoints\": [8991], \"characters\": \"\\u231F\" },\n  \"&drcrop;\": { \"codepoints\": [8972], \"characters\": \"\\u230C\" },\n  \"&Dscr;\": { \"codepoints\": [119967], \"characters\": \"\\uD835\\uDC9F\" },\n  \"&dscr;\": { \"codepoints\": [119993], \"characters\": \"\\uD835\\uDCB9\" },\n  \"&DScy;\": { \"codepoints\": [1029], \"characters\": \"\\u0405\" },\n  \"&dscy;\": { \"codepoints\": [1109], \"characters\": \"\\u0455\" },\n  \"&dsol;\": { \"codepoints\": [10742], \"characters\": \"\\u29F6\" },\n  \"&Dstrok;\": { \"codepoints\": [272], \"characters\": \"\\u0110\" },\n  \"&dstrok;\": { \"codepoints\": [273], \"characters\": \"\\u0111\" },\n  \"&dtdot;\": { \"codepoints\": [8945], \"characters\": \"\\u22F1\" },\n  \"&dtri;\": { \"codepoints\": [9663], \"characters\": \"\\u25BF\" },\n  \"&dtrif;\": { \"codepoints\": [9662], \"characters\": \"\\u25BE\" },\n  \"&duarr;\": { \"codepoints\": [8693], \"characters\": \"\\u21F5\" },\n  \"&duhar;\": { \"codepoints\": [10607], \"characters\": \"\\u296F\" },\n  \"&dwangle;\": { \"codepoints\": [10662], \"characters\": \"\\u29A6\" },\n  \"&DZcy;\": { \"codepoints\": [1039], \"characters\": \"\\u040F\" },\n  \"&dzcy;\": { \"codepoints\": [1119], \"characters\": \"\\u045F\" },\n  \"&dzigrarr;\": { \"codepoints\": [10239], \"characters\": \"\\u27FF\" },\n  \"&Eacute;\": { \"codepoints\": [201], \"characters\": \"\\u00C9\" },\n  \"&Eacute\": { \"codepoints\": [201], \"characters\": \"\\u00C9\" },\n  \"&eacute;\": { \"codepoints\": [233], \"characters\": \"\\u00E9\" },\n  \"&eacute\": { \"codepoints\": [233], \"characters\": \"\\u00E9\" },\n  \"&easter;\": { \"codepoints\": [10862], \"characters\": \"\\u2A6E\" },\n  \"&Ecaron;\": { \"codepoints\": [282], \"characters\": \"\\u011A\" },\n  \"&ecaron;\": { \"codepoints\": [283], \"characters\": \"\\u011B\" },\n  \"&Ecirc;\": { \"codepoints\": [202], \"characters\": \"\\u00CA\" },\n  \"&Ecirc\": { \"codepoints\": [202], \"characters\": \"\\u00CA\" },\n  \"&ecirc;\": { \"codepoints\": [234], \"characters\": \"\\u00EA\" },\n  \"&ecirc\": { \"codepoints\": [234], \"characters\": \"\\u00EA\" },\n  \"&ecir;\": { \"codepoints\": [8790], \"characters\": \"\\u2256\" },\n  \"&ecolon;\": { \"codepoints\": [8789], \"characters\": \"\\u2255\" },\n  \"&Ecy;\": { \"codepoints\": [1069], \"characters\": \"\\u042D\" },\n  \"&ecy;\": { \"codepoints\": [1101], \"characters\": \"\\u044D\" },\n  \"&eDDot;\": { \"codepoints\": [10871], \"characters\": \"\\u2A77\" },\n  \"&Edot;\": { \"codepoints\": [278], \"characters\": \"\\u0116\" },\n  \"&edot;\": { \"codepoints\": [279], \"characters\": \"\\u0117\" },\n  \"&eDot;\": { \"codepoints\": [8785], \"characters\": \"\\u2251\" },\n  \"&ee;\": { \"codepoints\": [8519], \"characters\": \"\\u2147\" },\n  \"&efDot;\": { \"codepoints\": [8786], \"characters\": \"\\u2252\" },\n  \"&Efr;\": { \"codepoints\": [120072], \"characters\": \"\\uD835\\uDD08\" },\n  \"&efr;\": { \"codepoints\": [120098], \"characters\": \"\\uD835\\uDD22\" },\n  \"&eg;\": { \"codepoints\": [10906], \"characters\": \"\\u2A9A\" },\n  \"&Egrave;\": { \"codepoints\": [200], \"characters\": \"\\u00C8\" },\n  \"&Egrave\": { \"codepoints\": [200], \"characters\": \"\\u00C8\" },\n  \"&egrave;\": { \"codepoints\": [232], \"characters\": \"\\u00E8\" },\n  \"&egrave\": { \"codepoints\": [232], \"characters\": \"\\u00E8\" },\n  \"&egs;\": { \"codepoints\": [10902], \"characters\": \"\\u2A96\" },\n  \"&egsdot;\": { \"codepoints\": [10904], \"characters\": \"\\u2A98\" },\n  \"&el;\": { \"codepoints\": [10905], \"characters\": \"\\u2A99\" },\n  \"&Element;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },\n  \"&elinters;\": { \"codepoints\": [9191], \"characters\": \"\\u23E7\" },\n  \"&ell;\": { \"codepoints\": [8467], \"characters\": \"\\u2113\" },\n  \"&els;\": { \"codepoints\": [10901], \"characters\": \"\\u2A95\" },\n  \"&elsdot;\": { \"codepoints\": [10903], \"characters\": \"\\u2A97\" },\n  \"&Emacr;\": { \"codepoints\": [274], \"characters\": \"\\u0112\" },\n  \"&emacr;\": { \"codepoints\": [275], \"characters\": \"\\u0113\" },\n  \"&empty;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },\n  \"&emptyset;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },\n  \"&EmptySmallSquare;\": { \"codepoints\": [9723], \"characters\": \"\\u25FB\" },\n  \"&emptyv;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },\n  \"&EmptyVerySmallSquare;\": { \"codepoints\": [9643], \"characters\": \"\\u25AB\" },\n  \"&emsp13;\": { \"codepoints\": [8196], \"characters\": \"\\u2004\" },\n  \"&emsp14;\": { \"codepoints\": [8197], \"characters\": \"\\u2005\" },\n  \"&emsp;\": { \"codepoints\": [8195], \"characters\": \"\\u2003\" },\n  \"&ENG;\": { \"codepoints\": [330], \"characters\": \"\\u014A\" },\n  \"&eng;\": { \"codepoints\": [331], \"characters\": \"\\u014B\" },\n  \"&ensp;\": { \"codepoints\": [8194], \"characters\": \"\\u2002\" },\n  \"&Eogon;\": { \"codepoints\": [280], \"characters\": \"\\u0118\" },\n  \"&eogon;\": { \"codepoints\": [281], \"characters\": \"\\u0119\" },\n  \"&Eopf;\": { \"codepoints\": [120124], \"characters\": \"\\uD835\\uDD3C\" },\n  \"&eopf;\": { \"codepoints\": [120150], \"characters\": \"\\uD835\\uDD56\" },\n  \"&epar;\": { \"codepoints\": [8917], \"characters\": \"\\u22D5\" },\n  \"&eparsl;\": { \"codepoints\": [10723], \"characters\": \"\\u29E3\" },\n  \"&eplus;\": { \"codepoints\": [10865], \"characters\": \"\\u2A71\" },\n  \"&epsi;\": { \"codepoints\": [949], \"characters\": \"\\u03B5\" },\n  \"&Epsilon;\": { \"codepoints\": [917], \"characters\": \"\\u0395\" },\n  \"&epsilon;\": { \"codepoints\": [949], \"characters\": \"\\u03B5\" },\n  \"&epsiv;\": { \"codepoints\": [1013], \"characters\": \"\\u03F5\" },\n  \"&eqcirc;\": { \"codepoints\": [8790], \"characters\": \"\\u2256\" },\n  \"&eqcolon;\": { \"codepoints\": [8789], \"characters\": \"\\u2255\" },\n  \"&eqsim;\": { \"codepoints\": [8770], \"characters\": \"\\u2242\" },\n  \"&eqslantgtr;\": { \"codepoints\": [10902], \"characters\": \"\\u2A96\" },\n  \"&eqslantless;\": { \"codepoints\": [10901], \"characters\": \"\\u2A95\" },\n  \"&Equal;\": { \"codepoints\": [10869], \"characters\": \"\\u2A75\" },\n  \"&equals;\": { \"codepoints\": [61], \"characters\": \"\\u003D\" },\n  \"&EqualTilde;\": { \"codepoints\": [8770], \"characters\": \"\\u2242\" },\n  \"&equest;\": { \"codepoints\": [8799], \"characters\": \"\\u225F\" },\n  \"&Equilibrium;\": { \"codepoints\": [8652], \"characters\": \"\\u21CC\" },\n  \"&equiv;\": { \"codepoints\": [8801], \"characters\": \"\\u2261\" },\n  \"&equivDD;\": { \"codepoints\": [10872], \"characters\": \"\\u2A78\" },\n  \"&eqvparsl;\": { \"codepoints\": [10725], \"characters\": \"\\u29E5\" },\n  \"&erarr;\": { \"codepoints\": [10609], \"characters\": \"\\u2971\" },\n  \"&erDot;\": { \"codepoints\": [8787], \"characters\": \"\\u2253\" },\n  \"&escr;\": { \"codepoints\": [8495], \"characters\": \"\\u212F\" },\n  \"&Escr;\": { \"codepoints\": [8496], \"characters\": \"\\u2130\" },\n  \"&esdot;\": { \"codepoints\": [8784], \"characters\": \"\\u2250\" },\n  \"&Esim;\": { \"codepoints\": [10867], \"characters\": \"\\u2A73\" },\n  \"&esim;\": { \"codepoints\": [8770], \"characters\": \"\\u2242\" },\n  \"&Eta;\": { \"codepoints\": [919], \"characters\": \"\\u0397\" },\n  \"&eta;\": { \"codepoints\": [951], \"characters\": \"\\u03B7\" },\n  \"&ETH;\": { \"codepoints\": [208], \"characters\": \"\\u00D0\" },\n  \"&ETH\": { \"codepoints\": [208], \"characters\": \"\\u00D0\" },\n  \"&eth;\": { \"codepoints\": [240], \"characters\": \"\\u00F0\" },\n  \"&eth\": { \"codepoints\": [240], \"characters\": \"\\u00F0\" },\n  \"&Euml;\": { \"codepoints\": [203], \"characters\": \"\\u00CB\" },\n  \"&Euml\": { \"codepoints\": [203], \"characters\": \"\\u00CB\" },\n  \"&euml;\": { \"codepoints\": [235], \"characters\": \"\\u00EB\" },\n  \"&euml\": { \"codepoints\": [235], \"characters\": \"\\u00EB\" },\n  \"&euro;\": { \"codepoints\": [8364], \"characters\": \"\\u20AC\" },\n  \"&excl;\": { \"codepoints\": [33], \"characters\": \"\\u0021\" },\n  \"&exist;\": { \"codepoints\": [8707], \"characters\": \"\\u2203\" },\n  \"&Exists;\": { \"codepoints\": [8707], \"characters\": \"\\u2203\" },\n  \"&expectation;\": { \"codepoints\": [8496], \"characters\": \"\\u2130\" },\n  \"&exponentiale;\": { \"codepoints\": [8519], \"characters\": \"\\u2147\" },\n  \"&ExponentialE;\": { \"codepoints\": [8519], \"characters\": \"\\u2147\" },\n  \"&fallingdotseq;\": { \"codepoints\": [8786], \"characters\": \"\\u2252\" },\n  \"&Fcy;\": { \"codepoints\": [1060], \"characters\": \"\\u0424\" },\n  \"&fcy;\": { \"codepoints\": [1092], \"characters\": \"\\u0444\" },\n  \"&female;\": { \"codepoints\": [9792], \"characters\": \"\\u2640\" },\n  \"&ffilig;\": { \"codepoints\": [64259], \"characters\": \"\\uFB03\" },\n  \"&fflig;\": { \"codepoints\": [64256], \"characters\": \"\\uFB00\" },\n  \"&ffllig;\": { \"codepoints\": [64260], \"characters\": \"\\uFB04\" },\n  \"&Ffr;\": { \"codepoints\": [120073], \"characters\": \"\\uD835\\uDD09\" },\n  \"&ffr;\": { \"codepoints\": [120099], \"characters\": \"\\uD835\\uDD23\" },\n  \"&filig;\": { \"codepoints\": [64257], \"characters\": \"\\uFB01\" },\n  \"&FilledSmallSquare;\": { \"codepoints\": [9724], \"characters\": \"\\u25FC\" },\n  \"&FilledVerySmallSquare;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },\n  \"&fjlig;\": { \"codepoints\": [102, 106], \"characters\": \"\\u0066\\u006A\" },\n  \"&flat;\": { \"codepoints\": [9837], \"characters\": \"\\u266D\" },\n  \"&fllig;\": { \"codepoints\": [64258], \"characters\": \"\\uFB02\" },\n  \"&fltns;\": { \"codepoints\": [9649], \"characters\": \"\\u25B1\" },\n  \"&fnof;\": { \"codepoints\": [402], \"characters\": \"\\u0192\" },\n  \"&Fopf;\": { \"codepoints\": [120125], \"characters\": \"\\uD835\\uDD3D\" },\n  \"&fopf;\": { \"codepoints\": [120151], \"characters\": \"\\uD835\\uDD57\" },\n  \"&forall;\": { \"codepoints\": [8704], \"characters\": \"\\u2200\" },\n  \"&ForAll;\": { \"codepoints\": [8704], \"characters\": \"\\u2200\" },\n  \"&fork;\": { \"codepoints\": [8916], \"characters\": \"\\u22D4\" },\n  \"&forkv;\": { \"codepoints\": [10969], \"characters\": \"\\u2AD9\" },\n  \"&Fouriertrf;\": { \"codepoints\": [8497], \"characters\": \"\\u2131\" },\n  \"&fpartint;\": { \"codepoints\": [10765], \"characters\": \"\\u2A0D\" },\n  \"&frac12;\": { \"codepoints\": [189], \"characters\": \"\\u00BD\" },\n  \"&frac12\": { \"codepoints\": [189], \"characters\": \"\\u00BD\" },\n  \"&frac13;\": { \"codepoints\": [8531], \"characters\": \"\\u2153\" },\n  \"&frac14;\": { \"codepoints\": [188], \"characters\": \"\\u00BC\" },\n  \"&frac14\": { \"codepoints\": [188], \"characters\": \"\\u00BC\" },\n  \"&frac15;\": { \"codepoints\": [8533], \"characters\": \"\\u2155\" },\n  \"&frac16;\": { \"codepoints\": [8537], \"characters\": \"\\u2159\" },\n  \"&frac18;\": { \"codepoints\": [8539], \"characters\": \"\\u215B\" },\n  \"&frac23;\": { \"codepoints\": [8532], \"characters\": \"\\u2154\" },\n  \"&frac25;\": { \"codepoints\": [8534], \"characters\": \"\\u2156\" },\n  \"&frac34;\": { \"codepoints\": [190], \"characters\": \"\\u00BE\" },\n  \"&frac34\": { \"codepoints\": [190], \"characters\": \"\\u00BE\" },\n  \"&frac35;\": { \"codepoints\": [8535], \"characters\": \"\\u2157\" },\n  \"&frac38;\": { \"codepoints\": [8540], \"characters\": \"\\u215C\" },\n  \"&frac45;\": { \"codepoints\": [8536], \"characters\": \"\\u2158\" },\n  \"&frac56;\": { \"codepoints\": [8538], \"characters\": \"\\u215A\" },\n  \"&frac58;\": { \"codepoints\": [8541], \"characters\": \"\\u215D\" },\n  \"&frac78;\": { \"codepoints\": [8542], \"characters\": \"\\u215E\" },\n  \"&frasl;\": { \"codepoints\": [8260], \"characters\": \"\\u2044\" },\n  \"&frown;\": { \"codepoints\": [8994], \"characters\": \"\\u2322\" },\n  \"&fscr;\": { \"codepoints\": [119995], \"characters\": \"\\uD835\\uDCBB\" },\n  \"&Fscr;\": { \"codepoints\": [8497], \"characters\": \"\\u2131\" },\n  \"&gacute;\": { \"codepoints\": [501], \"characters\": \"\\u01F5\" },\n  \"&Gamma;\": { \"codepoints\": [915], \"characters\": \"\\u0393\" },\n  \"&gamma;\": { \"codepoints\": [947], \"characters\": \"\\u03B3\" },\n  \"&Gammad;\": { \"codepoints\": [988], \"characters\": \"\\u03DC\" },\n  \"&gammad;\": { \"codepoints\": [989], \"characters\": \"\\u03DD\" },\n  \"&gap;\": { \"codepoints\": [10886], \"characters\": \"\\u2A86\" },\n  \"&Gbreve;\": { \"codepoints\": [286], \"characters\": \"\\u011E\" },\n  \"&gbreve;\": { \"codepoints\": [287], \"characters\": \"\\u011F\" },\n  \"&Gcedil;\": { \"codepoints\": [290], \"characters\": \"\\u0122\" },\n  \"&Gcirc;\": { \"codepoints\": [284], \"characters\": \"\\u011C\" },\n  \"&gcirc;\": { \"codepoints\": [285], \"characters\": \"\\u011D\" },\n  \"&Gcy;\": { \"codepoints\": [1043], \"characters\": \"\\u0413\" },\n  \"&gcy;\": { \"codepoints\": [1075], \"characters\": \"\\u0433\" },\n  \"&Gdot;\": { \"codepoints\": [288], \"characters\": \"\\u0120\" },\n  \"&gdot;\": { \"codepoints\": [289], \"characters\": \"\\u0121\" },\n  \"&ge;\": { \"codepoints\": [8805], \"characters\": \"\\u2265\" },\n  \"&gE;\": { \"codepoints\": [8807], \"characters\": \"\\u2267\" },\n  \"&gEl;\": { \"codepoints\": [10892], \"characters\": \"\\u2A8C\" },\n  \"&gel;\": { \"codepoints\": [8923], \"characters\": \"\\u22DB\" },\n  \"&geq;\": { \"codepoints\": [8805], \"characters\": \"\\u2265\" },\n  \"&geqq;\": { \"codepoints\": [8807], \"characters\": \"\\u2267\" },\n  \"&geqslant;\": { \"codepoints\": [10878], \"characters\": \"\\u2A7E\" },\n  \"&gescc;\": { \"codepoints\": [10921], \"characters\": \"\\u2AA9\" },\n  \"&ges;\": { \"codepoints\": [10878], \"characters\": \"\\u2A7E\" },\n  \"&gesdot;\": { \"codepoints\": [10880], \"characters\": \"\\u2A80\" },\n  \"&gesdoto;\": { \"codepoints\": [10882], \"characters\": \"\\u2A82\" },\n  \"&gesdotol;\": { \"codepoints\": [10884], \"characters\": \"\\u2A84\" },\n  \"&gesl;\": { \"codepoints\": [8923, 65024], \"characters\": \"\\u22DB\\uFE00\" },\n  \"&gesles;\": { \"codepoints\": [10900], \"characters\": \"\\u2A94\" },\n  \"&Gfr;\": { \"codepoints\": [120074], \"characters\": \"\\uD835\\uDD0A\" },\n  \"&gfr;\": { \"codepoints\": [120100], \"characters\": \"\\uD835\\uDD24\" },\n  \"&gg;\": { \"codepoints\": [8811], \"characters\": \"\\u226B\" },\n  \"&Gg;\": { \"codepoints\": [8921], \"characters\": \"\\u22D9\" },\n  \"&ggg;\": { \"codepoints\": [8921], \"characters\": \"\\u22D9\" },\n  \"&gimel;\": { \"codepoints\": [8503], \"characters\": \"\\u2137\" },\n  \"&GJcy;\": { \"codepoints\": [1027], \"characters\": \"\\u0403\" },\n  \"&gjcy;\": { \"codepoints\": [1107], \"characters\": \"\\u0453\" },\n  \"&gla;\": { \"codepoints\": [10917], \"characters\": \"\\u2AA5\" },\n  \"&gl;\": { \"codepoints\": [8823], \"characters\": \"\\u2277\" },\n  \"&glE;\": { \"codepoints\": [10898], \"characters\": \"\\u2A92\" },\n  \"&glj;\": { \"codepoints\": [10916], \"characters\": \"\\u2AA4\" },\n  \"&gnap;\": { \"codepoints\": [10890], \"characters\": \"\\u2A8A\" },\n  \"&gnapprox;\": { \"codepoints\": [10890], \"characters\": \"\\u2A8A\" },\n  \"&gne;\": { \"codepoints\": [10888], \"characters\": \"\\u2A88\" },\n  \"&gnE;\": { \"codepoints\": [8809], \"characters\": \"\\u2269\" },\n  \"&gneq;\": { \"codepoints\": [10888], \"characters\": \"\\u2A88\" },\n  \"&gneqq;\": { \"codepoints\": [8809], \"characters\": \"\\u2269\" },\n  \"&gnsim;\": { \"codepoints\": [8935], \"characters\": \"\\u22E7\" },\n  \"&Gopf;\": { \"codepoints\": [120126], \"characters\": \"\\uD835\\uDD3E\" },\n  \"&gopf;\": { \"codepoints\": [120152], \"characters\": \"\\uD835\\uDD58\" },\n  \"&grave;\": { \"codepoints\": [96], \"characters\": \"\\u0060\" },\n  \"&GreaterEqual;\": { \"codepoints\": [8805], \"characters\": \"\\u2265\" },\n  \"&GreaterEqualLess;\": { \"codepoints\": [8923], \"characters\": \"\\u22DB\" },\n  \"&GreaterFullEqual;\": { \"codepoints\": [8807], \"characters\": \"\\u2267\" },\n  \"&GreaterGreater;\": { \"codepoints\": [10914], \"characters\": \"\\u2AA2\" },\n  \"&GreaterLess;\": { \"codepoints\": [8823], \"characters\": \"\\u2277\" },\n  \"&GreaterSlantEqual;\": { \"codepoints\": [10878], \"characters\": \"\\u2A7E\" },\n  \"&GreaterTilde;\": { \"codepoints\": [8819], \"characters\": \"\\u2273\" },\n  \"&Gscr;\": { \"codepoints\": [119970], \"characters\": \"\\uD835\\uDCA2\" },\n  \"&gscr;\": { \"codepoints\": [8458], \"characters\": \"\\u210A\" },\n  \"&gsim;\": { \"codepoints\": [8819], \"characters\": \"\\u2273\" },\n  \"&gsime;\": { \"codepoints\": [10894], \"characters\": \"\\u2A8E\" },\n  \"&gsiml;\": { \"codepoints\": [10896], \"characters\": \"\\u2A90\" },\n  \"&gtcc;\": { \"codepoints\": [10919], \"characters\": \"\\u2AA7\" },\n  \"&gtcir;\": { \"codepoints\": [10874], \"characters\": \"\\u2A7A\" },\n  \"&gt;\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },\n  \"&gt\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },\n  \"&GT;\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },\n  \"&GT\": { \"codepoints\": [62], \"characters\": \"\\u003E\" },\n  \"&Gt;\": { \"codepoints\": [8811], \"characters\": \"\\u226B\" },\n  \"&gtdot;\": { \"codepoints\": [8919], \"characters\": \"\\u22D7\" },\n  \"&gtlPar;\": { \"codepoints\": [10645], \"characters\": \"\\u2995\" },\n  \"&gtquest;\": { \"codepoints\": [10876], \"characters\": \"\\u2A7C\" },\n  \"&gtrapprox;\": { \"codepoints\": [10886], \"characters\": \"\\u2A86\" },\n  \"&gtrarr;\": { \"codepoints\": [10616], \"characters\": \"\\u2978\" },\n  \"&gtrdot;\": { \"codepoints\": [8919], \"characters\": \"\\u22D7\" },\n  \"&gtreqless;\": { \"codepoints\": [8923], \"characters\": \"\\u22DB\" },\n  \"&gtreqqless;\": { \"codepoints\": [10892], \"characters\": \"\\u2A8C\" },\n  \"&gtrless;\": { \"codepoints\": [8823], \"characters\": \"\\u2277\" },\n  \"&gtrsim;\": { \"codepoints\": [8819], \"characters\": \"\\u2273\" },\n  \"&gvertneqq;\": { \"codepoints\": [8809, 65024], \"characters\": \"\\u2269\\uFE00\" },\n  \"&gvnE;\": { \"codepoints\": [8809, 65024], \"characters\": \"\\u2269\\uFE00\" },\n  \"&Hacek;\": { \"codepoints\": [711], \"characters\": \"\\u02C7\" },\n  \"&hairsp;\": { \"codepoints\": [8202], \"characters\": \"\\u200A\" },\n  \"&half;\": { \"codepoints\": [189], \"characters\": \"\\u00BD\" },\n  \"&hamilt;\": { \"codepoints\": [8459], \"characters\": \"\\u210B\" },\n  \"&HARDcy;\": { \"codepoints\": [1066], \"characters\": \"\\u042A\" },\n  \"&hardcy;\": { \"codepoints\": [1098], \"characters\": \"\\u044A\" },\n  \"&harrcir;\": { \"codepoints\": [10568], \"characters\": \"\\u2948\" },\n  \"&harr;\": { \"codepoints\": [8596], \"characters\": \"\\u2194\" },\n  \"&hArr;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },\n  \"&harrw;\": { \"codepoints\": [8621], \"characters\": \"\\u21AD\" },\n  \"&Hat;\": { \"codepoints\": [94], \"characters\": \"\\u005E\" },\n  \"&hbar;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },\n  \"&Hcirc;\": { \"codepoints\": [292], \"characters\": \"\\u0124\" },\n  \"&hcirc;\": { \"codepoints\": [293], \"characters\": \"\\u0125\" },\n  \"&hearts;\": { \"codepoints\": [9829], \"characters\": \"\\u2665\" },\n  \"&heartsuit;\": { \"codepoints\": [9829], \"characters\": \"\\u2665\" },\n  \"&hellip;\": { \"codepoints\": [8230], \"characters\": \"\\u2026\" },\n  \"&hercon;\": { \"codepoints\": [8889], \"characters\": \"\\u22B9\" },\n  \"&hfr;\": { \"codepoints\": [120101], \"characters\": \"\\uD835\\uDD25\" },\n  \"&Hfr;\": { \"codepoints\": [8460], \"characters\": \"\\u210C\" },\n  \"&HilbertSpace;\": { \"codepoints\": [8459], \"characters\": \"\\u210B\" },\n  \"&hksearow;\": { \"codepoints\": [10533], \"characters\": \"\\u2925\" },\n  \"&hkswarow;\": { \"codepoints\": [10534], \"characters\": \"\\u2926\" },\n  \"&hoarr;\": { \"codepoints\": [8703], \"characters\": \"\\u21FF\" },\n  \"&homtht;\": { \"codepoints\": [8763], \"characters\": \"\\u223B\" },\n  \"&hookleftarrow;\": { \"codepoints\": [8617], \"characters\": \"\\u21A9\" },\n  \"&hookrightarrow;\": { \"codepoints\": [8618], \"characters\": \"\\u21AA\" },\n  \"&hopf;\": { \"codepoints\": [120153], \"characters\": \"\\uD835\\uDD59\" },\n  \"&Hopf;\": { \"codepoints\": [8461], \"characters\": \"\\u210D\" },\n  \"&horbar;\": { \"codepoints\": [8213], \"characters\": \"\\u2015\" },\n  \"&HorizontalLine;\": { \"codepoints\": [9472], \"characters\": \"\\u2500\" },\n  \"&hscr;\": { \"codepoints\": [119997], \"characters\": \"\\uD835\\uDCBD\" },\n  \"&Hscr;\": { \"codepoints\": [8459], \"characters\": \"\\u210B\" },\n  \"&hslash;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },\n  \"&Hstrok;\": { \"codepoints\": [294], \"characters\": \"\\u0126\" },\n  \"&hstrok;\": { \"codepoints\": [295], \"characters\": \"\\u0127\" },\n  \"&HumpDownHump;\": { \"codepoints\": [8782], \"characters\": \"\\u224E\" },\n  \"&HumpEqual;\": { \"codepoints\": [8783], \"characters\": \"\\u224F\" },\n  \"&hybull;\": { \"codepoints\": [8259], \"characters\": \"\\u2043\" },\n  \"&hyphen;\": { \"codepoints\": [8208], \"characters\": \"\\u2010\" },\n  \"&Iacute;\": { \"codepoints\": [205], \"characters\": \"\\u00CD\" },\n  \"&Iacute\": { \"codepoints\": [205], \"characters\": \"\\u00CD\" },\n  \"&iacute;\": { \"codepoints\": [237], \"characters\": \"\\u00ED\" },\n  \"&iacute\": { \"codepoints\": [237], \"characters\": \"\\u00ED\" },\n  \"&ic;\": { \"codepoints\": [8291], \"characters\": \"\\u2063\" },\n  \"&Icirc;\": { \"codepoints\": [206], \"characters\": \"\\u00CE\" },\n  \"&Icirc\": { \"codepoints\": [206], \"characters\": \"\\u00CE\" },\n  \"&icirc;\": { \"codepoints\": [238], \"characters\": \"\\u00EE\" },\n  \"&icirc\": { \"codepoints\": [238], \"characters\": \"\\u00EE\" },\n  \"&Icy;\": { \"codepoints\": [1048], \"characters\": \"\\u0418\" },\n  \"&icy;\": { \"codepoints\": [1080], \"characters\": \"\\u0438\" },\n  \"&Idot;\": { \"codepoints\": [304], \"characters\": \"\\u0130\" },\n  \"&IEcy;\": { \"codepoints\": [1045], \"characters\": \"\\u0415\" },\n  \"&iecy;\": { \"codepoints\": [1077], \"characters\": \"\\u0435\" },\n  \"&iexcl;\": { \"codepoints\": [161], \"characters\": \"\\u00A1\" },\n  \"&iexcl\": { \"codepoints\": [161], \"characters\": \"\\u00A1\" },\n  \"&iff;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },\n  \"&ifr;\": { \"codepoints\": [120102], \"characters\": \"\\uD835\\uDD26\" },\n  \"&Ifr;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },\n  \"&Igrave;\": { \"codepoints\": [204], \"characters\": \"\\u00CC\" },\n  \"&Igrave\": { \"codepoints\": [204], \"characters\": \"\\u00CC\" },\n  \"&igrave;\": { \"codepoints\": [236], \"characters\": \"\\u00EC\" },\n  \"&igrave\": { \"codepoints\": [236], \"characters\": \"\\u00EC\" },\n  \"&ii;\": { \"codepoints\": [8520], \"characters\": \"\\u2148\" },\n  \"&iiiint;\": { \"codepoints\": [10764], \"characters\": \"\\u2A0C\" },\n  \"&iiint;\": { \"codepoints\": [8749], \"characters\": \"\\u222D\" },\n  \"&iinfin;\": { \"codepoints\": [10716], \"characters\": \"\\u29DC\" },\n  \"&iiota;\": { \"codepoints\": [8489], \"characters\": \"\\u2129\" },\n  \"&IJlig;\": { \"codepoints\": [306], \"characters\": \"\\u0132\" },\n  \"&ijlig;\": { \"codepoints\": [307], \"characters\": \"\\u0133\" },\n  \"&Imacr;\": { \"codepoints\": [298], \"characters\": \"\\u012A\" },\n  \"&imacr;\": { \"codepoints\": [299], \"characters\": \"\\u012B\" },\n  \"&image;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },\n  \"&ImaginaryI;\": { \"codepoints\": [8520], \"characters\": \"\\u2148\" },\n  \"&imagline;\": { \"codepoints\": [8464], \"characters\": \"\\u2110\" },\n  \"&imagpart;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },\n  \"&imath;\": { \"codepoints\": [305], \"characters\": \"\\u0131\" },\n  \"&Im;\": { \"codepoints\": [8465], \"characters\": \"\\u2111\" },\n  \"&imof;\": { \"codepoints\": [8887], \"characters\": \"\\u22B7\" },\n  \"&imped;\": { \"codepoints\": [437], \"characters\": \"\\u01B5\" },\n  \"&Implies;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },\n  \"&incare;\": { \"codepoints\": [8453], \"characters\": \"\\u2105\" },\n  \"&in;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },\n  \"&infin;\": { \"codepoints\": [8734], \"characters\": \"\\u221E\" },\n  \"&infintie;\": { \"codepoints\": [10717], \"characters\": \"\\u29DD\" },\n  \"&inodot;\": { \"codepoints\": [305], \"characters\": \"\\u0131\" },\n  \"&intcal;\": { \"codepoints\": [8890], \"characters\": \"\\u22BA\" },\n  \"&int;\": { \"codepoints\": [8747], \"characters\": \"\\u222B\" },\n  \"&Int;\": { \"codepoints\": [8748], \"characters\": \"\\u222C\" },\n  \"&integers;\": { \"codepoints\": [8484], \"characters\": \"\\u2124\" },\n  \"&Integral;\": { \"codepoints\": [8747], \"characters\": \"\\u222B\" },\n  \"&intercal;\": { \"codepoints\": [8890], \"characters\": \"\\u22BA\" },\n  \"&Intersection;\": { \"codepoints\": [8898], \"characters\": \"\\u22C2\" },\n  \"&intlarhk;\": { \"codepoints\": [10775], \"characters\": \"\\u2A17\" },\n  \"&intprod;\": { \"codepoints\": [10812], \"characters\": \"\\u2A3C\" },\n  \"&InvisibleComma;\": { \"codepoints\": [8291], \"characters\": \"\\u2063\" },\n  \"&InvisibleTimes;\": { \"codepoints\": [8290], \"characters\": \"\\u2062\" },\n  \"&IOcy;\": { \"codepoints\": [1025], \"characters\": \"\\u0401\" },\n  \"&iocy;\": { \"codepoints\": [1105], \"characters\": \"\\u0451\" },\n  \"&Iogon;\": { \"codepoints\": [302], \"characters\": \"\\u012E\" },\n  \"&iogon;\": { \"codepoints\": [303], \"characters\": \"\\u012F\" },\n  \"&Iopf;\": { \"codepoints\": [120128], \"characters\": \"\\uD835\\uDD40\" },\n  \"&iopf;\": { \"codepoints\": [120154], \"characters\": \"\\uD835\\uDD5A\" },\n  \"&Iota;\": { \"codepoints\": [921], \"characters\": \"\\u0399\" },\n  \"&iota;\": { \"codepoints\": [953], \"characters\": \"\\u03B9\" },\n  \"&iprod;\": { \"codepoints\": [10812], \"characters\": \"\\u2A3C\" },\n  \"&iquest;\": { \"codepoints\": [191], \"characters\": \"\\u00BF\" },\n  \"&iquest\": { \"codepoints\": [191], \"characters\": \"\\u00BF\" },\n  \"&iscr;\": { \"codepoints\": [119998], \"characters\": \"\\uD835\\uDCBE\" },\n  \"&Iscr;\": { \"codepoints\": [8464], \"characters\": \"\\u2110\" },\n  \"&isin;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },\n  \"&isindot;\": { \"codepoints\": [8949], \"characters\": \"\\u22F5\" },\n  \"&isinE;\": { \"codepoints\": [8953], \"characters\": \"\\u22F9\" },\n  \"&isins;\": { \"codepoints\": [8948], \"characters\": \"\\u22F4\" },\n  \"&isinsv;\": { \"codepoints\": [8947], \"characters\": \"\\u22F3\" },\n  \"&isinv;\": { \"codepoints\": [8712], \"characters\": \"\\u2208\" },\n  \"&it;\": { \"codepoints\": [8290], \"characters\": \"\\u2062\" },\n  \"&Itilde;\": { \"codepoints\": [296], \"characters\": \"\\u0128\" },\n  \"&itilde;\": { \"codepoints\": [297], \"characters\": \"\\u0129\" },\n  \"&Iukcy;\": { \"codepoints\": [1030], \"characters\": \"\\u0406\" },\n  \"&iukcy;\": { \"codepoints\": [1110], \"characters\": \"\\u0456\" },\n  \"&Iuml;\": { \"codepoints\": [207], \"characters\": \"\\u00CF\" },\n  \"&Iuml\": { \"codepoints\": [207], \"characters\": \"\\u00CF\" },\n  \"&iuml;\": { \"codepoints\": [239], \"characters\": \"\\u00EF\" },\n  \"&iuml\": { \"codepoints\": [239], \"characters\": \"\\u00EF\" },\n  \"&Jcirc;\": { \"codepoints\": [308], \"characters\": \"\\u0134\" },\n  \"&jcirc;\": { \"codepoints\": [309], \"characters\": \"\\u0135\" },\n  \"&Jcy;\": { \"codepoints\": [1049], \"characters\": \"\\u0419\" },\n  \"&jcy;\": { \"codepoints\": [1081], \"characters\": \"\\u0439\" },\n  \"&Jfr;\": { \"codepoints\": [120077], \"characters\": \"\\uD835\\uDD0D\" },\n  \"&jfr;\": { \"codepoints\": [120103], \"characters\": \"\\uD835\\uDD27\" },\n  \"&jmath;\": { \"codepoints\": [567], \"characters\": \"\\u0237\" },\n  \"&Jopf;\": { \"codepoints\": [120129], \"characters\": \"\\uD835\\uDD41\" },\n  \"&jopf;\": { \"codepoints\": [120155], \"characters\": \"\\uD835\\uDD5B\" },\n  \"&Jscr;\": { \"codepoints\": [119973], \"characters\": \"\\uD835\\uDCA5\" },\n  \"&jscr;\": { \"codepoints\": [119999], \"characters\": \"\\uD835\\uDCBF\" },\n  \"&Jsercy;\": { \"codepoints\": [1032], \"characters\": \"\\u0408\" },\n  \"&jsercy;\": { \"codepoints\": [1112], \"characters\": \"\\u0458\" },\n  \"&Jukcy;\": { \"codepoints\": [1028], \"characters\": \"\\u0404\" },\n  \"&jukcy;\": { \"codepoints\": [1108], \"characters\": \"\\u0454\" },\n  \"&Kappa;\": { \"codepoints\": [922], \"characters\": \"\\u039A\" },\n  \"&kappa;\": { \"codepoints\": [954], \"characters\": \"\\u03BA\" },\n  \"&kappav;\": { \"codepoints\": [1008], \"characters\": \"\\u03F0\" },\n  \"&Kcedil;\": { \"codepoints\": [310], \"characters\": \"\\u0136\" },\n  \"&kcedil;\": { \"codepoints\": [311], \"characters\": \"\\u0137\" },\n  \"&Kcy;\": { \"codepoints\": [1050], \"characters\": \"\\u041A\" },\n  \"&kcy;\": { \"codepoints\": [1082], \"characters\": \"\\u043A\" },\n  \"&Kfr;\": { \"codepoints\": [120078], \"characters\": \"\\uD835\\uDD0E\" },\n  \"&kfr;\": { \"codepoints\": [120104], \"characters\": \"\\uD835\\uDD28\" },\n  \"&kgreen;\": { \"codepoints\": [312], \"characters\": \"\\u0138\" },\n  \"&KHcy;\": { \"codepoints\": [1061], \"characters\": \"\\u0425\" },\n  \"&khcy;\": { \"codepoints\": [1093], \"characters\": \"\\u0445\" },\n  \"&KJcy;\": { \"codepoints\": [1036], \"characters\": \"\\u040C\" },\n  \"&kjcy;\": { \"codepoints\": [1116], \"characters\": \"\\u045C\" },\n  \"&Kopf;\": { \"codepoints\": [120130], \"characters\": \"\\uD835\\uDD42\" },\n  \"&kopf;\": { \"codepoints\": [120156], \"characters\": \"\\uD835\\uDD5C\" },\n  \"&Kscr;\": { \"codepoints\": [119974], \"characters\": \"\\uD835\\uDCA6\" },\n  \"&kscr;\": { \"codepoints\": [120000], \"characters\": \"\\uD835\\uDCC0\" },\n  \"&lAarr;\": { \"codepoints\": [8666], \"characters\": \"\\u21DA\" },\n  \"&Lacute;\": { \"codepoints\": [313], \"characters\": \"\\u0139\" },\n  \"&lacute;\": { \"codepoints\": [314], \"characters\": \"\\u013A\" },\n  \"&laemptyv;\": { \"codepoints\": [10676], \"characters\": \"\\u29B4\" },\n  \"&lagran;\": { \"codepoints\": [8466], \"characters\": \"\\u2112\" },\n  \"&Lambda;\": { \"codepoints\": [923], \"characters\": \"\\u039B\" },\n  \"&lambda;\": { \"codepoints\": [955], \"characters\": \"\\u03BB\" },\n  \"&lang;\": { \"codepoints\": [10216], \"characters\": \"\\u27E8\" },\n  \"&Lang;\": { \"codepoints\": [10218], \"characters\": \"\\u27EA\" },\n  \"&langd;\": { \"codepoints\": [10641], \"characters\": \"\\u2991\" },\n  \"&langle;\": { \"codepoints\": [10216], \"characters\": \"\\u27E8\" },\n  \"&lap;\": { \"codepoints\": [10885], \"characters\": \"\\u2A85\" },\n  \"&Laplacetrf;\": { \"codepoints\": [8466], \"characters\": \"\\u2112\" },\n  \"&laquo;\": { \"codepoints\": [171], \"characters\": \"\\u00AB\" },\n  \"&laquo\": { \"codepoints\": [171], \"characters\": \"\\u00AB\" },\n  \"&larrb;\": { \"codepoints\": [8676], \"characters\": \"\\u21E4\" },\n  \"&larrbfs;\": { \"codepoints\": [10527], \"characters\": \"\\u291F\" },\n  \"&larr;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },\n  \"&Larr;\": { \"codepoints\": [8606], \"characters\": \"\\u219E\" },\n  \"&lArr;\": { \"codepoints\": [8656], \"characters\": \"\\u21D0\" },\n  \"&larrfs;\": { \"codepoints\": [10525], \"characters\": \"\\u291D\" },\n  \"&larrhk;\": { \"codepoints\": [8617], \"characters\": \"\\u21A9\" },\n  \"&larrlp;\": { \"codepoints\": [8619], \"characters\": \"\\u21AB\" },\n  \"&larrpl;\": { \"codepoints\": [10553], \"characters\": \"\\u2939\" },\n  \"&larrsim;\": { \"codepoints\": [10611], \"characters\": \"\\u2973\" },\n  \"&larrtl;\": { \"codepoints\": [8610], \"characters\": \"\\u21A2\" },\n  \"&latail;\": { \"codepoints\": [10521], \"characters\": \"\\u2919\" },\n  \"&lAtail;\": { \"codepoints\": [10523], \"characters\": \"\\u291B\" },\n  \"&lat;\": { \"codepoints\": [10923], \"characters\": \"\\u2AAB\" },\n  \"&late;\": { \"codepoints\": [10925], \"characters\": \"\\u2AAD\" },\n  \"&lates;\": { \"codepoints\": [10925, 65024], \"characters\": \"\\u2AAD\\uFE00\" },\n  \"&lbarr;\": { \"codepoints\": [10508], \"characters\": \"\\u290C\" },\n  \"&lBarr;\": { \"codepoints\": [10510], \"characters\": \"\\u290E\" },\n  \"&lbbrk;\": { \"codepoints\": [10098], \"characters\": \"\\u2772\" },\n  \"&lbrace;\": { \"codepoints\": [123], \"characters\": \"\\u007B\" },\n  \"&lbrack;\": { \"codepoints\": [91], \"characters\": \"\\u005B\" },\n  \"&lbrke;\": { \"codepoints\": [10635], \"characters\": \"\\u298B\" },\n  \"&lbrksld;\": { \"codepoints\": [10639], \"characters\": \"\\u298F\" },\n  \"&lbrkslu;\": { \"codepoints\": [10637], \"characters\": \"\\u298D\" },\n  \"&Lcaron;\": { \"codepoints\": [317], \"characters\": \"\\u013D\" },\n  \"&lcaron;\": { \"codepoints\": [318], \"characters\": \"\\u013E\" },\n  \"&Lcedil;\": { \"codepoints\": [315], \"characters\": \"\\u013B\" },\n  \"&lcedil;\": { \"codepoints\": [316], \"characters\": \"\\u013C\" },\n  \"&lceil;\": { \"codepoints\": [8968], \"characters\": \"\\u2308\" },\n  \"&lcub;\": { \"codepoints\": [123], \"characters\": \"\\u007B\" },\n  \"&Lcy;\": { \"codepoints\": [1051], \"characters\": \"\\u041B\" },\n  \"&lcy;\": { \"codepoints\": [1083], \"characters\": \"\\u043B\" },\n  \"&ldca;\": { \"codepoints\": [10550], \"characters\": \"\\u2936\" },\n  \"&ldquo;\": { \"codepoints\": [8220], \"characters\": \"\\u201C\" },\n  \"&ldquor;\": { \"codepoints\": [8222], \"characters\": \"\\u201E\" },\n  \"&ldrdhar;\": { \"codepoints\": [10599], \"characters\": \"\\u2967\" },\n  \"&ldrushar;\": { \"codepoints\": [10571], \"characters\": \"\\u294B\" },\n  \"&ldsh;\": { \"codepoints\": [8626], \"characters\": \"\\u21B2\" },\n  \"&le;\": { \"codepoints\": [8804], \"characters\": \"\\u2264\" },\n  \"&lE;\": { \"codepoints\": [8806], \"characters\": \"\\u2266\" },\n  \"&LeftAngleBracket;\": { \"codepoints\": [10216], \"characters\": \"\\u27E8\" },\n  \"&LeftArrowBar;\": { \"codepoints\": [8676], \"characters\": \"\\u21E4\" },\n  \"&leftarrow;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },\n  \"&LeftArrow;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },\n  \"&Leftarrow;\": { \"codepoints\": [8656], \"characters\": \"\\u21D0\" },\n  \"&LeftArrowRightArrow;\": { \"codepoints\": [8646], \"characters\": \"\\u21C6\" },\n  \"&leftarrowtail;\": { \"codepoints\": [8610], \"characters\": \"\\u21A2\" },\n  \"&LeftCeiling;\": { \"codepoints\": [8968], \"characters\": \"\\u2308\" },\n  \"&LeftDoubleBracket;\": { \"codepoints\": [10214], \"characters\": \"\\u27E6\" },\n  \"&LeftDownTeeVector;\": { \"codepoints\": [10593], \"characters\": \"\\u2961\" },\n  \"&LeftDownVectorBar;\": { \"codepoints\": [10585], \"characters\": \"\\u2959\" },\n  \"&LeftDownVector;\": { \"codepoints\": [8643], \"characters\": \"\\u21C3\" },\n  \"&LeftFloor;\": { \"codepoints\": [8970], \"characters\": \"\\u230A\" },\n  \"&leftharpoondown;\": { \"codepoints\": [8637], \"characters\": \"\\u21BD\" },\n  \"&leftharpoonup;\": { \"codepoints\": [8636], \"characters\": \"\\u21BC\" },\n  \"&leftleftarrows;\": { \"codepoints\": [8647], \"characters\": \"\\u21C7\" },\n  \"&leftrightarrow;\": { \"codepoints\": [8596], \"characters\": \"\\u2194\" },\n  \"&LeftRightArrow;\": { \"codepoints\": [8596], \"characters\": \"\\u2194\" },\n  \"&Leftrightarrow;\": { \"codepoints\": [8660], \"characters\": \"\\u21D4\" },\n  \"&leftrightarrows;\": { \"codepoints\": [8646], \"characters\": \"\\u21C6\" },\n  \"&leftrightharpoons;\": { \"codepoints\": [8651], \"characters\": \"\\u21CB\" },\n  \"&leftrightsquigarrow;\": { \"codepoints\": [8621], \"characters\": \"\\u21AD\" },\n  \"&LeftRightVector;\": { \"codepoints\": [10574], \"characters\": \"\\u294E\" },\n  \"&LeftTeeArrow;\": { \"codepoints\": [8612], \"characters\": \"\\u21A4\" },\n  \"&LeftTee;\": { \"codepoints\": [8867], \"characters\": \"\\u22A3\" },\n  \"&LeftTeeVector;\": { \"codepoints\": [10586], \"characters\": \"\\u295A\" },\n  \"&leftthreetimes;\": { \"codepoints\": [8907], \"characters\": \"\\u22CB\" },\n  \"&LeftTriangleBar;\": { \"codepoints\": [10703], \"characters\": \"\\u29CF\" },\n  \"&LeftTriangle;\": { \"codepoints\": [8882], \"characters\": \"\\u22B2\" },\n  \"&LeftTriangleEqual;\": { \"codepoints\": [8884], \"characters\": \"\\u22B4\" },\n  \"&LeftUpDownVector;\": { \"codepoints\": [10577], \"characters\": \"\\u2951\" },\n  \"&LeftUpTeeVector;\": { \"codepoints\": [10592], \"characters\": \"\\u2960\" },\n  \"&LeftUpVectorBar;\": { \"codepoints\": [10584], \"characters\": \"\\u2958\" },\n  \"&LeftUpVector;\": { \"codepoints\": [8639], \"characters\": \"\\u21BF\" },\n  \"&LeftVectorBar;\": { \"codepoints\": [10578], \"characters\": \"\\u2952\" },\n  \"&LeftVector;\": { \"codepoints\": [8636], \"characters\": \"\\u21BC\" },\n  \"&lEg;\": { \"codepoints\": [10891], \"characters\": \"\\u2A8B\" },\n  \"&leg;\": { \"codepoints\": [8922], \"characters\": \"\\u22DA\" },\n  \"&leq;\": { \"codepoints\": [8804], \"characters\": \"\\u2264\" },\n  \"&leqq;\": { \"codepoints\": [8806], \"characters\": \"\\u2266\" },\n  \"&leqslant;\": { \"codepoints\": [10877], \"characters\": \"\\u2A7D\" },\n  \"&lescc;\": { \"codepoints\": [10920], \"characters\": \"\\u2AA8\" },\n  \"&les;\": { \"codepoints\": [10877], \"characters\": \"\\u2A7D\" },\n  \"&lesdot;\": { \"codepoints\": [10879], \"characters\": \"\\u2A7F\" },\n  \"&lesdoto;\": { \"codepoints\": [10881], \"characters\": \"\\u2A81\" },\n  \"&lesdotor;\": { \"codepoints\": [10883], \"characters\": \"\\u2A83\" },\n  \"&lesg;\": { \"codepoints\": [8922, 65024], \"characters\": \"\\u22DA\\uFE00\" },\n  \"&lesges;\": { \"codepoints\": [10899], \"characters\": \"\\u2A93\" },\n  \"&lessapprox;\": { \"codepoints\": [10885], \"characters\": \"\\u2A85\" },\n  \"&lessdot;\": { \"codepoints\": [8918], \"characters\": \"\\u22D6\" },\n  \"&lesseqgtr;\": { \"codepoints\": [8922], \"characters\": \"\\u22DA\" },\n  \"&lesseqqgtr;\": { \"codepoints\": [10891], \"characters\": \"\\u2A8B\" },\n  \"&LessEqualGreater;\": { \"codepoints\": [8922], \"characters\": \"\\u22DA\" },\n  \"&LessFullEqual;\": { \"codepoints\": [8806], \"characters\": \"\\u2266\" },\n  \"&LessGreater;\": { \"codepoints\": [8822], \"characters\": \"\\u2276\" },\n  \"&lessgtr;\": { \"codepoints\": [8822], \"characters\": \"\\u2276\" },\n  \"&LessLess;\": { \"codepoints\": [10913], \"characters\": \"\\u2AA1\" },\n  \"&lesssim;\": { \"codepoints\": [8818], \"characters\": \"\\u2272\" },\n  \"&LessSlantEqual;\": { \"codepoints\": [10877], \"characters\": \"\\u2A7D\" },\n  \"&LessTilde;\": { \"codepoints\": [8818], \"characters\": \"\\u2272\" },\n  \"&lfisht;\": { \"codepoints\": [10620], \"characters\": \"\\u297C\" },\n  \"&lfloor;\": { \"codepoints\": [8970], \"characters\": \"\\u230A\" },\n  \"&Lfr;\": { \"codepoints\": [120079], \"characters\": \"\\uD835\\uDD0F\" },\n  \"&lfr;\": { \"codepoints\": [120105], \"characters\": \"\\uD835\\uDD29\" },\n  \"&lg;\": { \"codepoints\": [8822], \"characters\": \"\\u2276\" },\n  \"&lgE;\": { \"codepoints\": [10897], \"characters\": \"\\u2A91\" },\n  \"&lHar;\": { \"codepoints\": [10594], \"characters\": \"\\u2962\" },\n  \"&lhard;\": { \"codepoints\": [8637], \"characters\": \"\\u21BD\" },\n  \"&lharu;\": { \"codepoints\": [8636], \"characters\": \"\\u21BC\" },\n  \"&lharul;\": { \"codepoints\": [10602], \"characters\": \"\\u296A\" },\n  \"&lhblk;\": { \"codepoints\": [9604], \"characters\": \"\\u2584\" },\n  \"&LJcy;\": { \"codepoints\": [1033], \"characters\": \"\\u0409\" },\n  \"&ljcy;\": { \"codepoints\": [1113], \"characters\": \"\\u0459\" },\n  \"&llarr;\": { \"codepoints\": [8647], \"characters\": \"\\u21C7\" },\n  \"&ll;\": { \"codepoints\": [8810], \"characters\": \"\\u226A\" },\n  \"&Ll;\": { \"codepoints\": [8920], \"characters\": \"\\u22D8\" },\n  \"&llcorner;\": { \"codepoints\": [8990], \"characters\": \"\\u231E\" },\n  \"&Lleftarrow;\": { \"codepoints\": [8666], \"characters\": \"\\u21DA\" },\n  \"&llhard;\": { \"codepoints\": [10603], \"characters\": \"\\u296B\" },\n  \"&lltri;\": { \"codepoints\": [9722], \"characters\": \"\\u25FA\" },\n  \"&Lmidot;\": { \"codepoints\": [319], \"characters\": \"\\u013F\" },\n  \"&lmidot;\": { \"codepoints\": [320], \"characters\": \"\\u0140\" },\n  \"&lmoustache;\": { \"codepoints\": [9136], \"characters\": \"\\u23B0\" },\n  \"&lmoust;\": { \"codepoints\": [9136], \"characters\": \"\\u23B0\" },\n  \"&lnap;\": { \"codepoints\": [10889], \"characters\": \"\\u2A89\" },\n  \"&lnapprox;\": { \"codepoints\": [10889], \"characters\": \"\\u2A89\" },\n  \"&lne;\": { \"codepoints\": [10887], \"characters\": \"\\u2A87\" },\n  \"&lnE;\": { \"codepoints\": [8808], \"characters\": \"\\u2268\" },\n  \"&lneq;\": { \"codepoints\": [10887], \"characters\": \"\\u2A87\" },\n  \"&lneqq;\": { \"codepoints\": [8808], \"characters\": \"\\u2268\" },\n  \"&lnsim;\": { \"codepoints\": [8934], \"characters\": \"\\u22E6\" },\n  \"&loang;\": { \"codepoints\": [10220], \"characters\": \"\\u27EC\" },\n  \"&loarr;\": { \"codepoints\": [8701], \"characters\": \"\\u21FD\" },\n  \"&lobrk;\": { \"codepoints\": [10214], \"characters\": \"\\u27E6\" },\n  \"&longleftarrow;\": { \"codepoints\": [10229], \"characters\": \"\\u27F5\" },\n  \"&LongLeftArrow;\": { \"codepoints\": [10229], \"characters\": \"\\u27F5\" },\n  \"&Longleftarrow;\": { \"codepoints\": [10232], \"characters\": \"\\u27F8\" },\n  \"&longleftrightarrow;\": { \"codepoints\": [10231], \"characters\": \"\\u27F7\" },\n  \"&LongLeftRightArrow;\": { \"codepoints\": [10231], \"characters\": \"\\u27F7\" },\n  \"&Longleftrightarrow;\": { \"codepoints\": [10234], \"characters\": \"\\u27FA\" },\n  \"&longmapsto;\": { \"codepoints\": [10236], \"characters\": \"\\u27FC\" },\n  \"&longrightarrow;\": { \"codepoints\": [10230], \"characters\": \"\\u27F6\" },\n  \"&LongRightArrow;\": { \"codepoints\": [10230], \"characters\": \"\\u27F6\" },\n  \"&Longrightarrow;\": { \"codepoints\": [10233], \"characters\": \"\\u27F9\" },\n  \"&looparrowleft;\": { \"codepoints\": [8619], \"characters\": \"\\u21AB\" },\n  \"&looparrowright;\": { \"codepoints\": [8620], \"characters\": \"\\u21AC\" },\n  \"&lopar;\": { \"codepoints\": [10629], \"characters\": \"\\u2985\" },\n  \"&Lopf;\": { \"codepoints\": [120131], \"characters\": \"\\uD835\\uDD43\" },\n  \"&lopf;\": { \"codepoints\": [120157], \"characters\": \"\\uD835\\uDD5D\" },\n  \"&loplus;\": { \"codepoints\": [10797], \"characters\": \"\\u2A2D\" },\n  \"&lotimes;\": { \"codepoints\": [10804], \"characters\": \"\\u2A34\" },\n  \"&lowast;\": { \"codepoints\": [8727], \"characters\": \"\\u2217\" },\n  \"&lowbar;\": { \"codepoints\": [95], \"characters\": \"\\u005F\" },\n  \"&LowerLeftArrow;\": { \"codepoints\": [8601], \"characters\": \"\\u2199\" },\n  \"&LowerRightArrow;\": { \"codepoints\": [8600], \"characters\": \"\\u2198\" },\n  \"&loz;\": { \"codepoints\": [9674], \"characters\": \"\\u25CA\" },\n  \"&lozenge;\": { \"codepoints\": [9674], \"characters\": \"\\u25CA\" },\n  \"&lozf;\": { \"codepoints\": [10731], \"characters\": \"\\u29EB\" },\n  \"&lpar;\": { \"codepoints\": [40], \"characters\": \"\\u0028\" },\n  \"&lparlt;\": { \"codepoints\": [10643], \"characters\": \"\\u2993\" },\n  \"&lrarr;\": { \"codepoints\": [8646], \"characters\": \"\\u21C6\" },\n  \"&lrcorner;\": { \"codepoints\": [8991], \"characters\": \"\\u231F\" },\n  \"&lrhar;\": { \"codepoints\": [8651], \"characters\": \"\\u21CB\" },\n  \"&lrhard;\": { \"codepoints\": [10605], \"characters\": \"\\u296D\" },\n  \"&lrm;\": { \"codepoints\": [8206], \"characters\": \"\\u200E\" },\n  \"&lrtri;\": { \"codepoints\": [8895], \"characters\": \"\\u22BF\" },\n  \"&lsaquo;\": { \"codepoints\": [8249], \"characters\": \"\\u2039\" },\n  \"&lscr;\": { \"codepoints\": [120001], \"characters\": \"\\uD835\\uDCC1\" },\n  \"&Lscr;\": { \"codepoints\": [8466], \"characters\": \"\\u2112\" },\n  \"&lsh;\": { \"codepoints\": [8624], \"characters\": \"\\u21B0\" },\n  \"&Lsh;\": { \"codepoints\": [8624], \"characters\": \"\\u21B0\" },\n  \"&lsim;\": { \"codepoints\": [8818], \"characters\": \"\\u2272\" },\n  \"&lsime;\": { \"codepoints\": [10893], \"characters\": \"\\u2A8D\" },\n  \"&lsimg;\": { \"codepoints\": [10895], \"characters\": \"\\u2A8F\" },\n  \"&lsqb;\": { \"codepoints\": [91], \"characters\": \"\\u005B\" },\n  \"&lsquo;\": { \"codepoints\": [8216], \"characters\": \"\\u2018\" },\n  \"&lsquor;\": { \"codepoints\": [8218], \"characters\": \"\\u201A\" },\n  \"&Lstrok;\": { \"codepoints\": [321], \"characters\": \"\\u0141\" },\n  \"&lstrok;\": { \"codepoints\": [322], \"characters\": \"\\u0142\" },\n  \"&ltcc;\": { \"codepoints\": [10918], \"characters\": \"\\u2AA6\" },\n  \"&ltcir;\": { \"codepoints\": [10873], \"characters\": \"\\u2A79\" },\n  \"&lt;\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },\n  \"&lt\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },\n  \"&LT;\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },\n  \"&LT\": { \"codepoints\": [60], \"characters\": \"\\u003C\" },\n  \"&Lt;\": { \"codepoints\": [8810], \"characters\": \"\\u226A\" },\n  \"&ltdot;\": { \"codepoints\": [8918], \"characters\": \"\\u22D6\" },\n  \"&lthree;\": { \"codepoints\": [8907], \"characters\": \"\\u22CB\" },\n  \"&ltimes;\": { \"codepoints\": [8905], \"characters\": \"\\u22C9\" },\n  \"&ltlarr;\": { \"codepoints\": [10614], \"characters\": \"\\u2976\" },\n  \"&ltquest;\": { \"codepoints\": [10875], \"characters\": \"\\u2A7B\" },\n  \"&ltri;\": { \"codepoints\": [9667], \"characters\": \"\\u25C3\" },\n  \"&ltrie;\": { \"codepoints\": [8884], \"characters\": \"\\u22B4\" },\n  \"&ltrif;\": { \"codepoints\": [9666], \"characters\": \"\\u25C2\" },\n  \"&ltrPar;\": { \"codepoints\": [10646], \"characters\": \"\\u2996\" },\n  \"&lurdshar;\": { \"codepoints\": [10570], \"characters\": \"\\u294A\" },\n  \"&luruhar;\": { \"codepoints\": [10598], \"characters\": \"\\u2966\" },\n  \"&lvertneqq;\": { \"codepoints\": [8808, 65024], \"characters\": \"\\u2268\\uFE00\" },\n  \"&lvnE;\": { \"codepoints\": [8808, 65024], \"characters\": \"\\u2268\\uFE00\" },\n  \"&macr;\": { \"codepoints\": [175], \"characters\": \"\\u00AF\" },\n  \"&macr\": { \"codepoints\": [175], \"characters\": \"\\u00AF\" },\n  \"&male;\": { \"codepoints\": [9794], \"characters\": \"\\u2642\" },\n  \"&malt;\": { \"codepoints\": [10016], \"characters\": \"\\u2720\" },\n  \"&maltese;\": { \"codepoints\": [10016], \"characters\": \"\\u2720\" },\n  \"&Map;\": { \"codepoints\": [10501], \"characters\": \"\\u2905\" },\n  \"&map;\": { \"codepoints\": [8614], \"characters\": \"\\u21A6\" },\n  \"&mapsto;\": { \"codepoints\": [8614], \"characters\": \"\\u21A6\" },\n  \"&mapstodown;\": { \"codepoints\": [8615], \"characters\": \"\\u21A7\" },\n  \"&mapstoleft;\": { \"codepoints\": [8612], \"characters\": \"\\u21A4\" },\n  \"&mapstoup;\": { \"codepoints\": [8613], \"characters\": \"\\u21A5\" },\n  \"&marker;\": { \"codepoints\": [9646], \"characters\": \"\\u25AE\" },\n  \"&mcomma;\": { \"codepoints\": [10793], \"characters\": \"\\u2A29\" },\n  \"&Mcy;\": { \"codepoints\": [1052], \"characters\": \"\\u041C\" },\n  \"&mcy;\": { \"codepoints\": [1084], \"characters\": \"\\u043C\" },\n  \"&mdash;\": { \"codepoints\": [8212], \"characters\": \"\\u2014\" },\n  \"&mDDot;\": { \"codepoints\": [8762], \"characters\": \"\\u223A\" },\n  \"&measuredangle;\": { \"codepoints\": [8737], \"characters\": \"\\u2221\" },\n  \"&MediumSpace;\": { \"codepoints\": [8287], \"characters\": \"\\u205F\" },\n  \"&Mellintrf;\": { \"codepoints\": [8499], \"characters\": \"\\u2133\" },\n  \"&Mfr;\": { \"codepoints\": [120080], \"characters\": \"\\uD835\\uDD10\" },\n  \"&mfr;\": { \"codepoints\": [120106], \"characters\": \"\\uD835\\uDD2A\" },\n  \"&mho;\": { \"codepoints\": [8487], \"characters\": \"\\u2127\" },\n  \"&micro;\": { \"codepoints\": [181], \"characters\": \"\\u00B5\" },\n  \"&micro\": { \"codepoints\": [181], \"characters\": \"\\u00B5\" },\n  \"&midast;\": { \"codepoints\": [42], \"characters\": \"\\u002A\" },\n  \"&midcir;\": { \"codepoints\": [10992], \"characters\": \"\\u2AF0\" },\n  \"&mid;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },\n  \"&middot;\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },\n  \"&middot\": { \"codepoints\": [183], \"characters\": \"\\u00B7\" },\n  \"&minusb;\": { \"codepoints\": [8863], \"characters\": \"\\u229F\" },\n  \"&minus;\": { \"codepoints\": [8722], \"characters\": \"\\u2212\" },\n  \"&minusd;\": { \"codepoints\": [8760], \"characters\": \"\\u2238\" },\n  \"&minusdu;\": { \"codepoints\": [10794], \"characters\": \"\\u2A2A\" },\n  \"&MinusPlus;\": { \"codepoints\": [8723], \"characters\": \"\\u2213\" },\n  \"&mlcp;\": { \"codepoints\": [10971], \"characters\": \"\\u2ADB\" },\n  \"&mldr;\": { \"codepoints\": [8230], \"characters\": \"\\u2026\" },\n  \"&mnplus;\": { \"codepoints\": [8723], \"characters\": \"\\u2213\" },\n  \"&models;\": { \"codepoints\": [8871], \"characters\": \"\\u22A7\" },\n  \"&Mopf;\": { \"codepoints\": [120132], \"characters\": \"\\uD835\\uDD44\" },\n  \"&mopf;\": { \"codepoints\": [120158], \"characters\": \"\\uD835\\uDD5E\" },\n  \"&mp;\": { \"codepoints\": [8723], \"characters\": \"\\u2213\" },\n  \"&mscr;\": { \"codepoints\": [120002], \"characters\": \"\\uD835\\uDCC2\" },\n  \"&Mscr;\": { \"codepoints\": [8499], \"characters\": \"\\u2133\" },\n  \"&mstpos;\": { \"codepoints\": [8766], \"characters\": \"\\u223E\" },\n  \"&Mu;\": { \"codepoints\": [924], \"characters\": \"\\u039C\" },\n  \"&mu;\": { \"codepoints\": [956], \"characters\": \"\\u03BC\" },\n  \"&multimap;\": { \"codepoints\": [8888], \"characters\": \"\\u22B8\" },\n  \"&mumap;\": { \"codepoints\": [8888], \"characters\": \"\\u22B8\" },\n  \"&nabla;\": { \"codepoints\": [8711], \"characters\": \"\\u2207\" },\n  \"&Nacute;\": { \"codepoints\": [323], \"characters\": \"\\u0143\" },\n  \"&nacute;\": { \"codepoints\": [324], \"characters\": \"\\u0144\" },\n  \"&nang;\": { \"codepoints\": [8736, 8402], \"characters\": \"\\u2220\\u20D2\" },\n  \"&nap;\": { \"codepoints\": [8777], \"characters\": \"\\u2249\" },\n  \"&napE;\": { \"codepoints\": [10864, 824], \"characters\": \"\\u2A70\\u0338\" },\n  \"&napid;\": { \"codepoints\": [8779, 824], \"characters\": \"\\u224B\\u0338\" },\n  \"&napos;\": { \"codepoints\": [329], \"characters\": \"\\u0149\" },\n  \"&napprox;\": { \"codepoints\": [8777], \"characters\": \"\\u2249\" },\n  \"&natural;\": { \"codepoints\": [9838], \"characters\": \"\\u266E\" },\n  \"&naturals;\": { \"codepoints\": [8469], \"characters\": \"\\u2115\" },\n  \"&natur;\": { \"codepoints\": [9838], \"characters\": \"\\u266E\" },\n  \"&nbsp;\": { \"codepoints\": [160], \"characters\": \"\\u00A0\" },\n  \"&nbsp\": { \"codepoints\": [160], \"characters\": \"\\u00A0\" },\n  \"&nbump;\": { \"codepoints\": [8782, 824], \"characters\": \"\\u224E\\u0338\" },\n  \"&nbumpe;\": { \"codepoints\": [8783, 824], \"characters\": \"\\u224F\\u0338\" },\n  \"&ncap;\": { \"codepoints\": [10819], \"characters\": \"\\u2A43\" },\n  \"&Ncaron;\": { \"codepoints\": [327], \"characters\": \"\\u0147\" },\n  \"&ncaron;\": { \"codepoints\": [328], \"characters\": \"\\u0148\" },\n  \"&Ncedil;\": { \"codepoints\": [325], \"characters\": \"\\u0145\" },\n  \"&ncedil;\": { \"codepoints\": [326], \"characters\": \"\\u0146\" },\n  \"&ncong;\": { \"codepoints\": [8775], \"characters\": \"\\u2247\" },\n  \"&ncongdot;\": { \"codepoints\": [10861, 824], \"characters\": \"\\u2A6D\\u0338\" },\n  \"&ncup;\": { \"codepoints\": [10818], \"characters\": \"\\u2A42\" },\n  \"&Ncy;\": { \"codepoints\": [1053], \"characters\": \"\\u041D\" },\n  \"&ncy;\": { \"codepoints\": [1085], \"characters\": \"\\u043D\" },\n  \"&ndash;\": { \"codepoints\": [8211], \"characters\": \"\\u2013\" },\n  \"&nearhk;\": { \"codepoints\": [10532], \"characters\": \"\\u2924\" },\n  \"&nearr;\": { \"codepoints\": [8599], \"characters\": \"\\u2197\" },\n  \"&neArr;\": { \"codepoints\": [8663], \"characters\": \"\\u21D7\" },\n  \"&nearrow;\": { \"codepoints\": [8599], \"characters\": \"\\u2197\" },\n  \"&ne;\": { \"codepoints\": [8800], \"characters\": \"\\u2260\" },\n  \"&nedot;\": { \"codepoints\": [8784, 824], \"characters\": \"\\u2250\\u0338\" },\n  \"&NegativeMediumSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },\n  \"&NegativeThickSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },\n  \"&NegativeThinSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },\n  \"&NegativeVeryThinSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },\n  \"&nequiv;\": { \"codepoints\": [8802], \"characters\": \"\\u2262\" },\n  \"&nesear;\": { \"codepoints\": [10536], \"characters\": \"\\u2928\" },\n  \"&nesim;\": { \"codepoints\": [8770, 824], \"characters\": \"\\u2242\\u0338\" },\n  \"&NestedGreaterGreater;\": { \"codepoints\": [8811], \"characters\": \"\\u226B\" },\n  \"&NestedLessLess;\": { \"codepoints\": [8810], \"characters\": \"\\u226A\" },\n  \"&NewLine;\": { \"codepoints\": [10], \"characters\": \"\\u000A\" },\n  \"&nexist;\": { \"codepoints\": [8708], \"characters\": \"\\u2204\" },\n  \"&nexists;\": { \"codepoints\": [8708], \"characters\": \"\\u2204\" },\n  \"&Nfr;\": { \"codepoints\": [120081], \"characters\": \"\\uD835\\uDD11\" },\n  \"&nfr;\": { \"codepoints\": [120107], \"characters\": \"\\uD835\\uDD2B\" },\n  \"&ngE;\": { \"codepoints\": [8807, 824], \"characters\": \"\\u2267\\u0338\" },\n  \"&nge;\": { \"codepoints\": [8817], \"characters\": \"\\u2271\" },\n  \"&ngeq;\": { \"codepoints\": [8817], \"characters\": \"\\u2271\" },\n  \"&ngeqq;\": { \"codepoints\": [8807, 824], \"characters\": \"\\u2267\\u0338\" },\n  \"&ngeqslant;\": { \"codepoints\": [10878, 824], \"characters\": \"\\u2A7E\\u0338\" },\n  \"&nges;\": { \"codepoints\": [10878, 824], \"characters\": \"\\u2A7E\\u0338\" },\n  \"&nGg;\": { \"codepoints\": [8921, 824], \"characters\": \"\\u22D9\\u0338\" },\n  \"&ngsim;\": { \"codepoints\": [8821], \"characters\": \"\\u2275\" },\n  \"&nGt;\": { \"codepoints\": [8811, 8402], \"characters\": \"\\u226B\\u20D2\" },\n  \"&ngt;\": { \"codepoints\": [8815], \"characters\": \"\\u226F\" },\n  \"&ngtr;\": { \"codepoints\": [8815], \"characters\": \"\\u226F\" },\n  \"&nGtv;\": { \"codepoints\": [8811, 824], \"characters\": \"\\u226B\\u0338\" },\n  \"&nharr;\": { \"codepoints\": [8622], \"characters\": \"\\u21AE\" },\n  \"&nhArr;\": { \"codepoints\": [8654], \"characters\": \"\\u21CE\" },\n  \"&nhpar;\": { \"codepoints\": [10994], \"characters\": \"\\u2AF2\" },\n  \"&ni;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },\n  \"&nis;\": { \"codepoints\": [8956], \"characters\": \"\\u22FC\" },\n  \"&nisd;\": { \"codepoints\": [8954], \"characters\": \"\\u22FA\" },\n  \"&niv;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },\n  \"&NJcy;\": { \"codepoints\": [1034], \"characters\": \"\\u040A\" },\n  \"&njcy;\": { \"codepoints\": [1114], \"characters\": \"\\u045A\" },\n  \"&nlarr;\": { \"codepoints\": [8602], \"characters\": \"\\u219A\" },\n  \"&nlArr;\": { \"codepoints\": [8653], \"characters\": \"\\u21CD\" },\n  \"&nldr;\": { \"codepoints\": [8229], \"characters\": \"\\u2025\" },\n  \"&nlE;\": { \"codepoints\": [8806, 824], \"characters\": \"\\u2266\\u0338\" },\n  \"&nle;\": { \"codepoints\": [8816], \"characters\": \"\\u2270\" },\n  \"&nleftarrow;\": { \"codepoints\": [8602], \"characters\": \"\\u219A\" },\n  \"&nLeftarrow;\": { \"codepoints\": [8653], \"characters\": \"\\u21CD\" },\n  \"&nleftrightarrow;\": { \"codepoints\": [8622], \"characters\": \"\\u21AE\" },\n  \"&nLeftrightarrow;\": { \"codepoints\": [8654], \"characters\": \"\\u21CE\" },\n  \"&nleq;\": { \"codepoints\": [8816], \"characters\": \"\\u2270\" },\n  \"&nleqq;\": { \"codepoints\": [8806, 824], \"characters\": \"\\u2266\\u0338\" },\n  \"&nleqslant;\": { \"codepoints\": [10877, 824], \"characters\": \"\\u2A7D\\u0338\" },\n  \"&nles;\": { \"codepoints\": [10877, 824], \"characters\": \"\\u2A7D\\u0338\" },\n  \"&nless;\": { \"codepoints\": [8814], \"characters\": \"\\u226E\" },\n  \"&nLl;\": { \"codepoints\": [8920, 824], \"characters\": \"\\u22D8\\u0338\" },\n  \"&nlsim;\": { \"codepoints\": [8820], \"characters\": \"\\u2274\" },\n  \"&nLt;\": { \"codepoints\": [8810, 8402], \"characters\": \"\\u226A\\u20D2\" },\n  \"&nlt;\": { \"codepoints\": [8814], \"characters\": \"\\u226E\" },\n  \"&nltri;\": { \"codepoints\": [8938], \"characters\": \"\\u22EA\" },\n  \"&nltrie;\": { \"codepoints\": [8940], \"characters\": \"\\u22EC\" },\n  \"&nLtv;\": { \"codepoints\": [8810, 824], \"characters\": \"\\u226A\\u0338\" },\n  \"&nmid;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },\n  \"&NoBreak;\": { \"codepoints\": [8288], \"characters\": \"\\u2060\" },\n  \"&NonBreakingSpace;\": { \"codepoints\": [160], \"characters\": \"\\u00A0\" },\n  \"&nopf;\": { \"codepoints\": [120159], \"characters\": \"\\uD835\\uDD5F\" },\n  \"&Nopf;\": { \"codepoints\": [8469], \"characters\": \"\\u2115\" },\n  \"&Not;\": { \"codepoints\": [10988], \"characters\": \"\\u2AEC\" },\n  \"&not;\": { \"codepoints\": [172], \"characters\": \"\\u00AC\" },\n  \"&not\": { \"codepoints\": [172], \"characters\": \"\\u00AC\" },\n  \"&NotCongruent;\": { \"codepoints\": [8802], \"characters\": \"\\u2262\" },\n  \"&NotCupCap;\": { \"codepoints\": [8813], \"characters\": \"\\u226D\" },\n  \"&NotDoubleVerticalBar;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },\n  \"&NotElement;\": { \"codepoints\": [8713], \"characters\": \"\\u2209\" },\n  \"&NotEqual;\": { \"codepoints\": [8800], \"characters\": \"\\u2260\" },\n  \"&NotEqualTilde;\": { \"codepoints\": [8770, 824], \"characters\": \"\\u2242\\u0338\" },\n  \"&NotExists;\": { \"codepoints\": [8708], \"characters\": \"\\u2204\" },\n  \"&NotGreater;\": { \"codepoints\": [8815], \"characters\": \"\\u226F\" },\n  \"&NotGreaterEqual;\": { \"codepoints\": [8817], \"characters\": \"\\u2271\" },\n  \"&NotGreaterFullEqual;\": { \"codepoints\": [8807, 824], \"characters\": \"\\u2267\\u0338\" },\n  \"&NotGreaterGreater;\": { \"codepoints\": [8811, 824], \"characters\": \"\\u226B\\u0338\" },\n  \"&NotGreaterLess;\": { \"codepoints\": [8825], \"characters\": \"\\u2279\" },\n  \"&NotGreaterSlantEqual;\": { \"codepoints\": [10878, 824], \"characters\": \"\\u2A7E\\u0338\" },\n  \"&NotGreaterTilde;\": { \"codepoints\": [8821], \"characters\": \"\\u2275\" },\n  \"&NotHumpDownHump;\": { \"codepoints\": [8782, 824], \"characters\": \"\\u224E\\u0338\" },\n  \"&NotHumpEqual;\": { \"codepoints\": [8783, 824], \"characters\": \"\\u224F\\u0338\" },\n  \"&notin;\": { \"codepoints\": [8713], \"characters\": \"\\u2209\" },\n  \"&notindot;\": { \"codepoints\": [8949, 824], \"characters\": \"\\u22F5\\u0338\" },\n  \"&notinE;\": { \"codepoints\": [8953, 824], \"characters\": \"\\u22F9\\u0338\" },\n  \"&notinva;\": { \"codepoints\": [8713], \"characters\": \"\\u2209\" },\n  \"&notinvb;\": { \"codepoints\": [8951], \"characters\": \"\\u22F7\" },\n  \"&notinvc;\": { \"codepoints\": [8950], \"characters\": \"\\u22F6\" },\n  \"&NotLeftTriangleBar;\": { \"codepoints\": [10703, 824], \"characters\": \"\\u29CF\\u0338\" },\n  \"&NotLeftTriangle;\": { \"codepoints\": [8938], \"characters\": \"\\u22EA\" },\n  \"&NotLeftTriangleEqual;\": { \"codepoints\": [8940], \"characters\": \"\\u22EC\" },\n  \"&NotLess;\": { \"codepoints\": [8814], \"characters\": \"\\u226E\" },\n  \"&NotLessEqual;\": { \"codepoints\": [8816], \"characters\": \"\\u2270\" },\n  \"&NotLessGreater;\": { \"codepoints\": [8824], \"characters\": \"\\u2278\" },\n  \"&NotLessLess;\": { \"codepoints\": [8810, 824], \"characters\": \"\\u226A\\u0338\" },\n  \"&NotLessSlantEqual;\": { \"codepoints\": [10877, 824], \"characters\": \"\\u2A7D\\u0338\" },\n  \"&NotLessTilde;\": { \"codepoints\": [8820], \"characters\": \"\\u2274\" },\n  \"&NotNestedGreaterGreater;\": { \"codepoints\": [10914, 824], \"characters\": \"\\u2AA2\\u0338\" },\n  \"&NotNestedLessLess;\": { \"codepoints\": [10913, 824], \"characters\": \"\\u2AA1\\u0338\" },\n  \"&notni;\": { \"codepoints\": [8716], \"characters\": \"\\u220C\" },\n  \"&notniva;\": { \"codepoints\": [8716], \"characters\": \"\\u220C\" },\n  \"&notnivb;\": { \"codepoints\": [8958], \"characters\": \"\\u22FE\" },\n  \"&notnivc;\": { \"codepoints\": [8957], \"characters\": \"\\u22FD\" },\n  \"&NotPrecedes;\": { \"codepoints\": [8832], \"characters\": \"\\u2280\" },\n  \"&NotPrecedesEqual;\": { \"codepoints\": [10927, 824], \"characters\": \"\\u2AAF\\u0338\" },\n  \"&NotPrecedesSlantEqual;\": { \"codepoints\": [8928], \"characters\": \"\\u22E0\" },\n  \"&NotReverseElement;\": { \"codepoints\": [8716], \"characters\": \"\\u220C\" },\n  \"&NotRightTriangleBar;\": { \"codepoints\": [10704, 824], \"characters\": \"\\u29D0\\u0338\" },\n  \"&NotRightTriangle;\": { \"codepoints\": [8939], \"characters\": \"\\u22EB\" },\n  \"&NotRightTriangleEqual;\": { \"codepoints\": [8941], \"characters\": \"\\u22ED\" },\n  \"&NotSquareSubset;\": { \"codepoints\": [8847, 824], \"characters\": \"\\u228F\\u0338\" },\n  \"&NotSquareSubsetEqual;\": { \"codepoints\": [8930], \"characters\": \"\\u22E2\" },\n  \"&NotSquareSuperset;\": { \"codepoints\": [8848, 824], \"characters\": \"\\u2290\\u0338\" },\n  \"&NotSquareSupersetEqual;\": { \"codepoints\": [8931], \"characters\": \"\\u22E3\" },\n  \"&NotSubset;\": { \"codepoints\": [8834, 8402], \"characters\": \"\\u2282\\u20D2\" },\n  \"&NotSubsetEqual;\": { \"codepoints\": [8840], \"characters\": \"\\u2288\" },\n  \"&NotSucceeds;\": { \"codepoints\": [8833], \"characters\": \"\\u2281\" },\n  \"&NotSucceedsEqual;\": { \"codepoints\": [10928, 824], \"characters\": \"\\u2AB0\\u0338\" },\n  \"&NotSucceedsSlantEqual;\": { \"codepoints\": [8929], \"characters\": \"\\u22E1\" },\n  \"&NotSucceedsTilde;\": { \"codepoints\": [8831, 824], \"characters\": \"\\u227F\\u0338\" },\n  \"&NotSuperset;\": { \"codepoints\": [8835, 8402], \"characters\": \"\\u2283\\u20D2\" },\n  \"&NotSupersetEqual;\": { \"codepoints\": [8841], \"characters\": \"\\u2289\" },\n  \"&NotTilde;\": { \"codepoints\": [8769], \"characters\": \"\\u2241\" },\n  \"&NotTildeEqual;\": { \"codepoints\": [8772], \"characters\": \"\\u2244\" },\n  \"&NotTildeFullEqual;\": { \"codepoints\": [8775], \"characters\": \"\\u2247\" },\n  \"&NotTildeTilde;\": { \"codepoints\": [8777], \"characters\": \"\\u2249\" },\n  \"&NotVerticalBar;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },\n  \"&nparallel;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },\n  \"&npar;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },\n  \"&nparsl;\": { \"codepoints\": [11005, 8421], \"characters\": \"\\u2AFD\\u20E5\" },\n  \"&npart;\": { \"codepoints\": [8706, 824], \"characters\": \"\\u2202\\u0338\" },\n  \"&npolint;\": { \"codepoints\": [10772], \"characters\": \"\\u2A14\" },\n  \"&npr;\": { \"codepoints\": [8832], \"characters\": \"\\u2280\" },\n  \"&nprcue;\": { \"codepoints\": [8928], \"characters\": \"\\u22E0\" },\n  \"&nprec;\": { \"codepoints\": [8832], \"characters\": \"\\u2280\" },\n  \"&npreceq;\": { \"codepoints\": [10927, 824], \"characters\": \"\\u2AAF\\u0338\" },\n  \"&npre;\": { \"codepoints\": [10927, 824], \"characters\": \"\\u2AAF\\u0338\" },\n  \"&nrarrc;\": { \"codepoints\": [10547, 824], \"characters\": \"\\u2933\\u0338\" },\n  \"&nrarr;\": { \"codepoints\": [8603], \"characters\": \"\\u219B\" },\n  \"&nrArr;\": { \"codepoints\": [8655], \"characters\": \"\\u21CF\" },\n  \"&nrarrw;\": { \"codepoints\": [8605, 824], \"characters\": \"\\u219D\\u0338\" },\n  \"&nrightarrow;\": { \"codepoints\": [8603], \"characters\": \"\\u219B\" },\n  \"&nRightarrow;\": { \"codepoints\": [8655], \"characters\": \"\\u21CF\" },\n  \"&nrtri;\": { \"codepoints\": [8939], \"characters\": \"\\u22EB\" },\n  \"&nrtrie;\": { \"codepoints\": [8941], \"characters\": \"\\u22ED\" },\n  \"&nsc;\": { \"codepoints\": [8833], \"characters\": \"\\u2281\" },\n  \"&nsccue;\": { \"codepoints\": [8929], \"characters\": \"\\u22E1\" },\n  \"&nsce;\": { \"codepoints\": [10928, 824], \"characters\": \"\\u2AB0\\u0338\" },\n  \"&Nscr;\": { \"codepoints\": [119977], \"characters\": \"\\uD835\\uDCA9\" },\n  \"&nscr;\": { \"codepoints\": [120003], \"characters\": \"\\uD835\\uDCC3\" },\n  \"&nshortmid;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },\n  \"&nshortparallel;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },\n  \"&nsim;\": { \"codepoints\": [8769], \"characters\": \"\\u2241\" },\n  \"&nsime;\": { \"codepoints\": [8772], \"characters\": \"\\u2244\" },\n  \"&nsimeq;\": { \"codepoints\": [8772], \"characters\": \"\\u2244\" },\n  \"&nsmid;\": { \"codepoints\": [8740], \"characters\": \"\\u2224\" },\n  \"&nspar;\": { \"codepoints\": [8742], \"characters\": \"\\u2226\" },\n  \"&nsqsube;\": { \"codepoints\": [8930], \"characters\": \"\\u22E2\" },\n  \"&nsqsupe;\": { \"codepoints\": [8931], \"characters\": \"\\u22E3\" },\n  \"&nsub;\": { \"codepoints\": [8836], \"characters\": \"\\u2284\" },\n  \"&nsubE;\": { \"codepoints\": [10949, 824], \"characters\": \"\\u2AC5\\u0338\" },\n  \"&nsube;\": { \"codepoints\": [8840], \"characters\": \"\\u2288\" },\n  \"&nsubset;\": { \"codepoints\": [8834, 8402], \"characters\": \"\\u2282\\u20D2\" },\n  \"&nsubseteq;\": { \"codepoints\": [8840], \"characters\": \"\\u2288\" },\n  \"&nsubseteqq;\": { \"codepoints\": [10949, 824], \"characters\": \"\\u2AC5\\u0338\" },\n  \"&nsucc;\": { \"codepoints\": [8833], \"characters\": \"\\u2281\" },\n  \"&nsucceq;\": { \"codepoints\": [10928, 824], \"characters\": \"\\u2AB0\\u0338\" },\n  \"&nsup;\": { \"codepoints\": [8837], \"characters\": \"\\u2285\" },\n  \"&nsupE;\": { \"codepoints\": [10950, 824], \"characters\": \"\\u2AC6\\u0338\" },\n  \"&nsupe;\": { \"codepoints\": [8841], \"characters\": \"\\u2289\" },\n  \"&nsupset;\": { \"codepoints\": [8835, 8402], \"characters\": \"\\u2283\\u20D2\" },\n  \"&nsupseteq;\": { \"codepoints\": [8841], \"characters\": \"\\u2289\" },\n  \"&nsupseteqq;\": { \"codepoints\": [10950, 824], \"characters\": \"\\u2AC6\\u0338\" },\n  \"&ntgl;\": { \"codepoints\": [8825], \"characters\": \"\\u2279\" },\n  \"&Ntilde;\": { \"codepoints\": [209], \"characters\": \"\\u00D1\" },\n  \"&Ntilde\": { \"codepoints\": [209], \"characters\": \"\\u00D1\" },\n  \"&ntilde;\": { \"codepoints\": [241], \"characters\": \"\\u00F1\" },\n  \"&ntilde\": { \"codepoints\": [241], \"characters\": \"\\u00F1\" },\n  \"&ntlg;\": { \"codepoints\": [8824], \"characters\": \"\\u2278\" },\n  \"&ntriangleleft;\": { \"codepoints\": [8938], \"characters\": \"\\u22EA\" },\n  \"&ntrianglelefteq;\": { \"codepoints\": [8940], \"characters\": \"\\u22EC\" },\n  \"&ntriangleright;\": { \"codepoints\": [8939], \"characters\": \"\\u22EB\" },\n  \"&ntrianglerighteq;\": { \"codepoints\": [8941], \"characters\": \"\\u22ED\" },\n  \"&Nu;\": { \"codepoints\": [925], \"characters\": \"\\u039D\" },\n  \"&nu;\": { \"codepoints\": [957], \"characters\": \"\\u03BD\" },\n  \"&num;\": { \"codepoints\": [35], \"characters\": \"\\u0023\" },\n  \"&numero;\": { \"codepoints\": [8470], \"characters\": \"\\u2116\" },\n  \"&numsp;\": { \"codepoints\": [8199], \"characters\": \"\\u2007\" },\n  \"&nvap;\": { \"codepoints\": [8781, 8402], \"characters\": \"\\u224D\\u20D2\" },\n  \"&nvdash;\": { \"codepoints\": [8876], \"characters\": \"\\u22AC\" },\n  \"&nvDash;\": { \"codepoints\": [8877], \"characters\": \"\\u22AD\" },\n  \"&nVdash;\": { \"codepoints\": [8878], \"characters\": \"\\u22AE\" },\n  \"&nVDash;\": { \"codepoints\": [8879], \"characters\": \"\\u22AF\" },\n  \"&nvge;\": { \"codepoints\": [8805, 8402], \"characters\": \"\\u2265\\u20D2\" },\n  \"&nvgt;\": { \"codepoints\": [62, 8402], \"characters\": \"\\u003E\\u20D2\" },\n  \"&nvHarr;\": { \"codepoints\": [10500], \"characters\": \"\\u2904\" },\n  \"&nvinfin;\": { \"codepoints\": [10718], \"characters\": \"\\u29DE\" },\n  \"&nvlArr;\": { \"codepoints\": [10498], \"characters\": \"\\u2902\" },\n  \"&nvle;\": { \"codepoints\": [8804, 8402], \"characters\": \"\\u2264\\u20D2\" },\n  \"&nvlt;\": { \"codepoints\": [60, 8402], \"characters\": \"\\u003C\\u20D2\" },\n  \"&nvltrie;\": { \"codepoints\": [8884, 8402], \"characters\": \"\\u22B4\\u20D2\" },\n  \"&nvrArr;\": { \"codepoints\": [10499], \"characters\": \"\\u2903\" },\n  \"&nvrtrie;\": { \"codepoints\": [8885, 8402], \"characters\": \"\\u22B5\\u20D2\" },\n  \"&nvsim;\": { \"codepoints\": [8764, 8402], \"characters\": \"\\u223C\\u20D2\" },\n  \"&nwarhk;\": { \"codepoints\": [10531], \"characters\": \"\\u2923\" },\n  \"&nwarr;\": { \"codepoints\": [8598], \"characters\": \"\\u2196\" },\n  \"&nwArr;\": { \"codepoints\": [8662], \"characters\": \"\\u21D6\" },\n  \"&nwarrow;\": { \"codepoints\": [8598], \"characters\": \"\\u2196\" },\n  \"&nwnear;\": { \"codepoints\": [10535], \"characters\": \"\\u2927\" },\n  \"&Oacute;\": { \"codepoints\": [211], \"characters\": \"\\u00D3\" },\n  \"&Oacute\": { \"codepoints\": [211], \"characters\": \"\\u00D3\" },\n  \"&oacute;\": { \"codepoints\": [243], \"characters\": \"\\u00F3\" },\n  \"&oacute\": { \"codepoints\": [243], \"characters\": \"\\u00F3\" },\n  \"&oast;\": { \"codepoints\": [8859], \"characters\": \"\\u229B\" },\n  \"&Ocirc;\": { \"codepoints\": [212], \"characters\": \"\\u00D4\" },\n  \"&Ocirc\": { \"codepoints\": [212], \"characters\": \"\\u00D4\" },\n  \"&ocirc;\": { \"codepoints\": [244], \"characters\": \"\\u00F4\" },\n  \"&ocirc\": { \"codepoints\": [244], \"characters\": \"\\u00F4\" },\n  \"&ocir;\": { \"codepoints\": [8858], \"characters\": \"\\u229A\" },\n  \"&Ocy;\": { \"codepoints\": [1054], \"characters\": \"\\u041E\" },\n  \"&ocy;\": { \"codepoints\": [1086], \"characters\": \"\\u043E\" },\n  \"&odash;\": { \"codepoints\": [8861], \"characters\": \"\\u229D\" },\n  \"&Odblac;\": { \"codepoints\": [336], \"characters\": \"\\u0150\" },\n  \"&odblac;\": { \"codepoints\": [337], \"characters\": \"\\u0151\" },\n  \"&odiv;\": { \"codepoints\": [10808], \"characters\": \"\\u2A38\" },\n  \"&odot;\": { \"codepoints\": [8857], \"characters\": \"\\u2299\" },\n  \"&odsold;\": { \"codepoints\": [10684], \"characters\": \"\\u29BC\" },\n  \"&OElig;\": { \"codepoints\": [338], \"characters\": \"\\u0152\" },\n  \"&oelig;\": { \"codepoints\": [339], \"characters\": \"\\u0153\" },\n  \"&ofcir;\": { \"codepoints\": [10687], \"characters\": \"\\u29BF\" },\n  \"&Ofr;\": { \"codepoints\": [120082], \"characters\": \"\\uD835\\uDD12\" },\n  \"&ofr;\": { \"codepoints\": [120108], \"characters\": \"\\uD835\\uDD2C\" },\n  \"&ogon;\": { \"codepoints\": [731], \"characters\": \"\\u02DB\" },\n  \"&Ograve;\": { \"codepoints\": [210], \"characters\": \"\\u00D2\" },\n  \"&Ograve\": { \"codepoints\": [210], \"characters\": \"\\u00D2\" },\n  \"&ograve;\": { \"codepoints\": [242], \"characters\": \"\\u00F2\" },\n  \"&ograve\": { \"codepoints\": [242], \"characters\": \"\\u00F2\" },\n  \"&ogt;\": { \"codepoints\": [10689], \"characters\": \"\\u29C1\" },\n  \"&ohbar;\": { \"codepoints\": [10677], \"characters\": \"\\u29B5\" },\n  \"&ohm;\": { \"codepoints\": [937], \"characters\": \"\\u03A9\" },\n  \"&oint;\": { \"codepoints\": [8750], \"characters\": \"\\u222E\" },\n  \"&olarr;\": { \"codepoints\": [8634], \"characters\": \"\\u21BA\" },\n  \"&olcir;\": { \"codepoints\": [10686], \"characters\": \"\\u29BE\" },\n  \"&olcross;\": { \"codepoints\": [10683], \"characters\": \"\\u29BB\" },\n  \"&oline;\": { \"codepoints\": [8254], \"characters\": \"\\u203E\" },\n  \"&olt;\": { \"codepoints\": [10688], \"characters\": \"\\u29C0\" },\n  \"&Omacr;\": { \"codepoints\": [332], \"characters\": \"\\u014C\" },\n  \"&omacr;\": { \"codepoints\": [333], \"characters\": \"\\u014D\" },\n  \"&Omega;\": { \"codepoints\": [937], \"characters\": \"\\u03A9\" },\n  \"&omega;\": { \"codepoints\": [969], \"characters\": \"\\u03C9\" },\n  \"&Omicron;\": { \"codepoints\": [927], \"characters\": \"\\u039F\" },\n  \"&omicron;\": { \"codepoints\": [959], \"characters\": \"\\u03BF\" },\n  \"&omid;\": { \"codepoints\": [10678], \"characters\": \"\\u29B6\" },\n  \"&ominus;\": { \"codepoints\": [8854], \"characters\": \"\\u2296\" },\n  \"&Oopf;\": { \"codepoints\": [120134], \"characters\": \"\\uD835\\uDD46\" },\n  \"&oopf;\": { \"codepoints\": [120160], \"characters\": \"\\uD835\\uDD60\" },\n  \"&opar;\": { \"codepoints\": [10679], \"characters\": \"\\u29B7\" },\n  \"&OpenCurlyDoubleQuote;\": { \"codepoints\": [8220], \"characters\": \"\\u201C\" },\n  \"&OpenCurlyQuote;\": { \"codepoints\": [8216], \"characters\": \"\\u2018\" },\n  \"&operp;\": { \"codepoints\": [10681], \"characters\": \"\\u29B9\" },\n  \"&oplus;\": { \"codepoints\": [8853], \"characters\": \"\\u2295\" },\n  \"&orarr;\": { \"codepoints\": [8635], \"characters\": \"\\u21BB\" },\n  \"&Or;\": { \"codepoints\": [10836], \"characters\": \"\\u2A54\" },\n  \"&or;\": { \"codepoints\": [8744], \"characters\": \"\\u2228\" },\n  \"&ord;\": { \"codepoints\": [10845], \"characters\": \"\\u2A5D\" },\n  \"&order;\": { \"codepoints\": [8500], \"characters\": \"\\u2134\" },\n  \"&orderof;\": { \"codepoints\": [8500], \"characters\": \"\\u2134\" },\n  \"&ordf;\": { \"codepoints\": [170], \"characters\": \"\\u00AA\" },\n  \"&ordf\": { \"codepoints\": [170], \"characters\": \"\\u00AA\" },\n  \"&ordm;\": { \"codepoints\": [186], \"characters\": \"\\u00BA\" },\n  \"&ordm\": { \"codepoints\": [186], \"characters\": \"\\u00BA\" },\n  \"&origof;\": { \"codepoints\": [8886], \"characters\": \"\\u22B6\" },\n  \"&oror;\": { \"codepoints\": [10838], \"characters\": \"\\u2A56\" },\n  \"&orslope;\": { \"codepoints\": [10839], \"characters\": \"\\u2A57\" },\n  \"&orv;\": { \"codepoints\": [10843], \"characters\": \"\\u2A5B\" },\n  \"&oS;\": { \"codepoints\": [9416], \"characters\": \"\\u24C8\" },\n  \"&Oscr;\": { \"codepoints\": [119978], \"characters\": \"\\uD835\\uDCAA\" },\n  \"&oscr;\": { \"codepoints\": [8500], \"characters\": \"\\u2134\" },\n  \"&Oslash;\": { \"codepoints\": [216], \"characters\": \"\\u00D8\" },\n  \"&Oslash\": { \"codepoints\": [216], \"characters\": \"\\u00D8\" },\n  \"&oslash;\": { \"codepoints\": [248], \"characters\": \"\\u00F8\" },\n  \"&oslash\": { \"codepoints\": [248], \"characters\": \"\\u00F8\" },\n  \"&osol;\": { \"codepoints\": [8856], \"characters\": \"\\u2298\" },\n  \"&Otilde;\": { \"codepoints\": [213], \"characters\": \"\\u00D5\" },\n  \"&Otilde\": { \"codepoints\": [213], \"characters\": \"\\u00D5\" },\n  \"&otilde;\": { \"codepoints\": [245], \"characters\": \"\\u00F5\" },\n  \"&otilde\": { \"codepoints\": [245], \"characters\": \"\\u00F5\" },\n  \"&otimesas;\": { \"codepoints\": [10806], \"characters\": \"\\u2A36\" },\n  \"&Otimes;\": { \"codepoints\": [10807], \"characters\": \"\\u2A37\" },\n  \"&otimes;\": { \"codepoints\": [8855], \"characters\": \"\\u2297\" },\n  \"&Ouml;\": { \"codepoints\": [214], \"characters\": \"\\u00D6\" },\n  \"&Ouml\": { \"codepoints\": [214], \"characters\": \"\\u00D6\" },\n  \"&ouml;\": { \"codepoints\": [246], \"characters\": \"\\u00F6\" },\n  \"&ouml\": { \"codepoints\": [246], \"characters\": \"\\u00F6\" },\n  \"&ovbar;\": { \"codepoints\": [9021], \"characters\": \"\\u233D\" },\n  \"&OverBar;\": { \"codepoints\": [8254], \"characters\": \"\\u203E\" },\n  \"&OverBrace;\": { \"codepoints\": [9182], \"characters\": \"\\u23DE\" },\n  \"&OverBracket;\": { \"codepoints\": [9140], \"characters\": \"\\u23B4\" },\n  \"&OverParenthesis;\": { \"codepoints\": [9180], \"characters\": \"\\u23DC\" },\n  \"&para;\": { \"codepoints\": [182], \"characters\": \"\\u00B6\" },\n  \"&para\": { \"codepoints\": [182], \"characters\": \"\\u00B6\" },\n  \"&parallel;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },\n  \"&par;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },\n  \"&parsim;\": { \"codepoints\": [10995], \"characters\": \"\\u2AF3\" },\n  \"&parsl;\": { \"codepoints\": [11005], \"characters\": \"\\u2AFD\" },\n  \"&part;\": { \"codepoints\": [8706], \"characters\": \"\\u2202\" },\n  \"&PartialD;\": { \"codepoints\": [8706], \"characters\": \"\\u2202\" },\n  \"&Pcy;\": { \"codepoints\": [1055], \"characters\": \"\\u041F\" },\n  \"&pcy;\": { \"codepoints\": [1087], \"characters\": \"\\u043F\" },\n  \"&percnt;\": { \"codepoints\": [37], \"characters\": \"\\u0025\" },\n  \"&period;\": { \"codepoints\": [46], \"characters\": \"\\u002E\" },\n  \"&permil;\": { \"codepoints\": [8240], \"characters\": \"\\u2030\" },\n  \"&perp;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },\n  \"&pertenk;\": { \"codepoints\": [8241], \"characters\": \"\\u2031\" },\n  \"&Pfr;\": { \"codepoints\": [120083], \"characters\": \"\\uD835\\uDD13\" },\n  \"&pfr;\": { \"codepoints\": [120109], \"characters\": \"\\uD835\\uDD2D\" },\n  \"&Phi;\": { \"codepoints\": [934], \"characters\": \"\\u03A6\" },\n  \"&phi;\": { \"codepoints\": [966], \"characters\": \"\\u03C6\" },\n  \"&phiv;\": { \"codepoints\": [981], \"characters\": \"\\u03D5\" },\n  \"&phmmat;\": { \"codepoints\": [8499], \"characters\": \"\\u2133\" },\n  \"&phone;\": { \"codepoints\": [9742], \"characters\": \"\\u260E\" },\n  \"&Pi;\": { \"codepoints\": [928], \"characters\": \"\\u03A0\" },\n  \"&pi;\": { \"codepoints\": [960], \"characters\": \"\\u03C0\" },\n  \"&pitchfork;\": { \"codepoints\": [8916], \"characters\": \"\\u22D4\" },\n  \"&piv;\": { \"codepoints\": [982], \"characters\": \"\\u03D6\" },\n  \"&planck;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },\n  \"&planckh;\": { \"codepoints\": [8462], \"characters\": \"\\u210E\" },\n  \"&plankv;\": { \"codepoints\": [8463], \"characters\": \"\\u210F\" },\n  \"&plusacir;\": { \"codepoints\": [10787], \"characters\": \"\\u2A23\" },\n  \"&plusb;\": { \"codepoints\": [8862], \"characters\": \"\\u229E\" },\n  \"&pluscir;\": { \"codepoints\": [10786], \"characters\": \"\\u2A22\" },\n  \"&plus;\": { \"codepoints\": [43], \"characters\": \"\\u002B\" },\n  \"&plusdo;\": { \"codepoints\": [8724], \"characters\": \"\\u2214\" },\n  \"&plusdu;\": { \"codepoints\": [10789], \"characters\": \"\\u2A25\" },\n  \"&pluse;\": { \"codepoints\": [10866], \"characters\": \"\\u2A72\" },\n  \"&PlusMinus;\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },\n  \"&plusmn;\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },\n  \"&plusmn\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },\n  \"&plussim;\": { \"codepoints\": [10790], \"characters\": \"\\u2A26\" },\n  \"&plustwo;\": { \"codepoints\": [10791], \"characters\": \"\\u2A27\" },\n  \"&pm;\": { \"codepoints\": [177], \"characters\": \"\\u00B1\" },\n  \"&Poincareplane;\": { \"codepoints\": [8460], \"characters\": \"\\u210C\" },\n  \"&pointint;\": { \"codepoints\": [10773], \"characters\": \"\\u2A15\" },\n  \"&popf;\": { \"codepoints\": [120161], \"characters\": \"\\uD835\\uDD61\" },\n  \"&Popf;\": { \"codepoints\": [8473], \"characters\": \"\\u2119\" },\n  \"&pound;\": { \"codepoints\": [163], \"characters\": \"\\u00A3\" },\n  \"&pound\": { \"codepoints\": [163], \"characters\": \"\\u00A3\" },\n  \"&prap;\": { \"codepoints\": [10935], \"characters\": \"\\u2AB7\" },\n  \"&Pr;\": { \"codepoints\": [10939], \"characters\": \"\\u2ABB\" },\n  \"&pr;\": { \"codepoints\": [8826], \"characters\": \"\\u227A\" },\n  \"&prcue;\": { \"codepoints\": [8828], \"characters\": \"\\u227C\" },\n  \"&precapprox;\": { \"codepoints\": [10935], \"characters\": \"\\u2AB7\" },\n  \"&prec;\": { \"codepoints\": [8826], \"characters\": \"\\u227A\" },\n  \"&preccurlyeq;\": { \"codepoints\": [8828], \"characters\": \"\\u227C\" },\n  \"&Precedes;\": { \"codepoints\": [8826], \"characters\": \"\\u227A\" },\n  \"&PrecedesEqual;\": { \"codepoints\": [10927], \"characters\": \"\\u2AAF\" },\n  \"&PrecedesSlantEqual;\": { \"codepoints\": [8828], \"characters\": \"\\u227C\" },\n  \"&PrecedesTilde;\": { \"codepoints\": [8830], \"characters\": \"\\u227E\" },\n  \"&preceq;\": { \"codepoints\": [10927], \"characters\": \"\\u2AAF\" },\n  \"&precnapprox;\": { \"codepoints\": [10937], \"characters\": \"\\u2AB9\" },\n  \"&precneqq;\": { \"codepoints\": [10933], \"characters\": \"\\u2AB5\" },\n  \"&precnsim;\": { \"codepoints\": [8936], \"characters\": \"\\u22E8\" },\n  \"&pre;\": { \"codepoints\": [10927], \"characters\": \"\\u2AAF\" },\n  \"&prE;\": { \"codepoints\": [10931], \"characters\": \"\\u2AB3\" },\n  \"&precsim;\": { \"codepoints\": [8830], \"characters\": \"\\u227E\" },\n  \"&prime;\": { \"codepoints\": [8242], \"characters\": \"\\u2032\" },\n  \"&Prime;\": { \"codepoints\": [8243], \"characters\": \"\\u2033\" },\n  \"&primes;\": { \"codepoints\": [8473], \"characters\": \"\\u2119\" },\n  \"&prnap;\": { \"codepoints\": [10937], \"characters\": \"\\u2AB9\" },\n  \"&prnE;\": { \"codepoints\": [10933], \"characters\": \"\\u2AB5\" },\n  \"&prnsim;\": { \"codepoints\": [8936], \"characters\": \"\\u22E8\" },\n  \"&prod;\": { \"codepoints\": [8719], \"characters\": \"\\u220F\" },\n  \"&Product;\": { \"codepoints\": [8719], \"characters\": \"\\u220F\" },\n  \"&profalar;\": { \"codepoints\": [9006], \"characters\": \"\\u232E\" },\n  \"&profline;\": { \"codepoints\": [8978], \"characters\": \"\\u2312\" },\n  \"&profsurf;\": { \"codepoints\": [8979], \"characters\": \"\\u2313\" },\n  \"&prop;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },\n  \"&Proportional;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },\n  \"&Proportion;\": { \"codepoints\": [8759], \"characters\": \"\\u2237\" },\n  \"&propto;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },\n  \"&prsim;\": { \"codepoints\": [8830], \"characters\": \"\\u227E\" },\n  \"&prurel;\": { \"codepoints\": [8880], \"characters\": \"\\u22B0\" },\n  \"&Pscr;\": { \"codepoints\": [119979], \"characters\": \"\\uD835\\uDCAB\" },\n  \"&pscr;\": { \"codepoints\": [120005], \"characters\": \"\\uD835\\uDCC5\" },\n  \"&Psi;\": { \"codepoints\": [936], \"characters\": \"\\u03A8\" },\n  \"&psi;\": { \"codepoints\": [968], \"characters\": \"\\u03C8\" },\n  \"&puncsp;\": { \"codepoints\": [8200], \"characters\": \"\\u2008\" },\n  \"&Qfr;\": { \"codepoints\": [120084], \"characters\": \"\\uD835\\uDD14\" },\n  \"&qfr;\": { \"codepoints\": [120110], \"characters\": \"\\uD835\\uDD2E\" },\n  \"&qint;\": { \"codepoints\": [10764], \"characters\": \"\\u2A0C\" },\n  \"&qopf;\": { \"codepoints\": [120162], \"characters\": \"\\uD835\\uDD62\" },\n  \"&Qopf;\": { \"codepoints\": [8474], \"characters\": \"\\u211A\" },\n  \"&qprime;\": { \"codepoints\": [8279], \"characters\": \"\\u2057\" },\n  \"&Qscr;\": { \"codepoints\": [119980], \"characters\": \"\\uD835\\uDCAC\" },\n  \"&qscr;\": { \"codepoints\": [120006], \"characters\": \"\\uD835\\uDCC6\" },\n  \"&quaternions;\": { \"codepoints\": [8461], \"characters\": \"\\u210D\" },\n  \"&quatint;\": { \"codepoints\": [10774], \"characters\": \"\\u2A16\" },\n  \"&quest;\": { \"codepoints\": [63], \"characters\": \"\\u003F\" },\n  \"&questeq;\": { \"codepoints\": [8799], \"characters\": \"\\u225F\" },\n  \"&quot;\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },\n  \"&quot\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },\n  \"&QUOT;\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },\n  \"&QUOT\": { \"codepoints\": [34], \"characters\": \"\\u0022\" },\n  \"&rAarr;\": { \"codepoints\": [8667], \"characters\": \"\\u21DB\" },\n  \"&race;\": { \"codepoints\": [8765, 817], \"characters\": \"\\u223D\\u0331\" },\n  \"&Racute;\": { \"codepoints\": [340], \"characters\": \"\\u0154\" },\n  \"&racute;\": { \"codepoints\": [341], \"characters\": \"\\u0155\" },\n  \"&radic;\": { \"codepoints\": [8730], \"characters\": \"\\u221A\" },\n  \"&raemptyv;\": { \"codepoints\": [10675], \"characters\": \"\\u29B3\" },\n  \"&rang;\": { \"codepoints\": [10217], \"characters\": \"\\u27E9\" },\n  \"&Rang;\": { \"codepoints\": [10219], \"characters\": \"\\u27EB\" },\n  \"&rangd;\": { \"codepoints\": [10642], \"characters\": \"\\u2992\" },\n  \"&range;\": { \"codepoints\": [10661], \"characters\": \"\\u29A5\" },\n  \"&rangle;\": { \"codepoints\": [10217], \"characters\": \"\\u27E9\" },\n  \"&raquo;\": { \"codepoints\": [187], \"characters\": \"\\u00BB\" },\n  \"&raquo\": { \"codepoints\": [187], \"characters\": \"\\u00BB\" },\n  \"&rarrap;\": { \"codepoints\": [10613], \"characters\": \"\\u2975\" },\n  \"&rarrb;\": { \"codepoints\": [8677], \"characters\": \"\\u21E5\" },\n  \"&rarrbfs;\": { \"codepoints\": [10528], \"characters\": \"\\u2920\" },\n  \"&rarrc;\": { \"codepoints\": [10547], \"characters\": \"\\u2933\" },\n  \"&rarr;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },\n  \"&Rarr;\": { \"codepoints\": [8608], \"characters\": \"\\u21A0\" },\n  \"&rArr;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },\n  \"&rarrfs;\": { \"codepoints\": [10526], \"characters\": \"\\u291E\" },\n  \"&rarrhk;\": { \"codepoints\": [8618], \"characters\": \"\\u21AA\" },\n  \"&rarrlp;\": { \"codepoints\": [8620], \"characters\": \"\\u21AC\" },\n  \"&rarrpl;\": { \"codepoints\": [10565], \"characters\": \"\\u2945\" },\n  \"&rarrsim;\": { \"codepoints\": [10612], \"characters\": \"\\u2974\" },\n  \"&Rarrtl;\": { \"codepoints\": [10518], \"characters\": \"\\u2916\" },\n  \"&rarrtl;\": { \"codepoints\": [8611], \"characters\": \"\\u21A3\" },\n  \"&rarrw;\": { \"codepoints\": [8605], \"characters\": \"\\u219D\" },\n  \"&ratail;\": { \"codepoints\": [10522], \"characters\": \"\\u291A\" },\n  \"&rAtail;\": { \"codepoints\": [10524], \"characters\": \"\\u291C\" },\n  \"&ratio;\": { \"codepoints\": [8758], \"characters\": \"\\u2236\" },\n  \"&rationals;\": { \"codepoints\": [8474], \"characters\": \"\\u211A\" },\n  \"&rbarr;\": { \"codepoints\": [10509], \"characters\": \"\\u290D\" },\n  \"&rBarr;\": { \"codepoints\": [10511], \"characters\": \"\\u290F\" },\n  \"&RBarr;\": { \"codepoints\": [10512], \"characters\": \"\\u2910\" },\n  \"&rbbrk;\": { \"codepoints\": [10099], \"characters\": \"\\u2773\" },\n  \"&rbrace;\": { \"codepoints\": [125], \"characters\": \"\\u007D\" },\n  \"&rbrack;\": { \"codepoints\": [93], \"characters\": \"\\u005D\" },\n  \"&rbrke;\": { \"codepoints\": [10636], \"characters\": \"\\u298C\" },\n  \"&rbrksld;\": { \"codepoints\": [10638], \"characters\": \"\\u298E\" },\n  \"&rbrkslu;\": { \"codepoints\": [10640], \"characters\": \"\\u2990\" },\n  \"&Rcaron;\": { \"codepoints\": [344], \"characters\": \"\\u0158\" },\n  \"&rcaron;\": { \"codepoints\": [345], \"characters\": \"\\u0159\" },\n  \"&Rcedil;\": { \"codepoints\": [342], \"characters\": \"\\u0156\" },\n  \"&rcedil;\": { \"codepoints\": [343], \"characters\": \"\\u0157\" },\n  \"&rceil;\": { \"codepoints\": [8969], \"characters\": \"\\u2309\" },\n  \"&rcub;\": { \"codepoints\": [125], \"characters\": \"\\u007D\" },\n  \"&Rcy;\": { \"codepoints\": [1056], \"characters\": \"\\u0420\" },\n  \"&rcy;\": { \"codepoints\": [1088], \"characters\": \"\\u0440\" },\n  \"&rdca;\": { \"codepoints\": [10551], \"characters\": \"\\u2937\" },\n  \"&rdldhar;\": { \"codepoints\": [10601], \"characters\": \"\\u2969\" },\n  \"&rdquo;\": { \"codepoints\": [8221], \"characters\": \"\\u201D\" },\n  \"&rdquor;\": { \"codepoints\": [8221], \"characters\": \"\\u201D\" },\n  \"&rdsh;\": { \"codepoints\": [8627], \"characters\": \"\\u21B3\" },\n  \"&real;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },\n  \"&realine;\": { \"codepoints\": [8475], \"characters\": \"\\u211B\" },\n  \"&realpart;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },\n  \"&reals;\": { \"codepoints\": [8477], \"characters\": \"\\u211D\" },\n  \"&Re;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },\n  \"&rect;\": { \"codepoints\": [9645], \"characters\": \"\\u25AD\" },\n  \"&reg;\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },\n  \"&reg\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },\n  \"&REG;\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },\n  \"&REG\": { \"codepoints\": [174], \"characters\": \"\\u00AE\" },\n  \"&ReverseElement;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },\n  \"&ReverseEquilibrium;\": { \"codepoints\": [8651], \"characters\": \"\\u21CB\" },\n  \"&ReverseUpEquilibrium;\": { \"codepoints\": [10607], \"characters\": \"\\u296F\" },\n  \"&rfisht;\": { \"codepoints\": [10621], \"characters\": \"\\u297D\" },\n  \"&rfloor;\": { \"codepoints\": [8971], \"characters\": \"\\u230B\" },\n  \"&rfr;\": { \"codepoints\": [120111], \"characters\": \"\\uD835\\uDD2F\" },\n  \"&Rfr;\": { \"codepoints\": [8476], \"characters\": \"\\u211C\" },\n  \"&rHar;\": { \"codepoints\": [10596], \"characters\": \"\\u2964\" },\n  \"&rhard;\": { \"codepoints\": [8641], \"characters\": \"\\u21C1\" },\n  \"&rharu;\": { \"codepoints\": [8640], \"characters\": \"\\u21C0\" },\n  \"&rharul;\": { \"codepoints\": [10604], \"characters\": \"\\u296C\" },\n  \"&Rho;\": { \"codepoints\": [929], \"characters\": \"\\u03A1\" },\n  \"&rho;\": { \"codepoints\": [961], \"characters\": \"\\u03C1\" },\n  \"&rhov;\": { \"codepoints\": [1009], \"characters\": \"\\u03F1\" },\n  \"&RightAngleBracket;\": { \"codepoints\": [10217], \"characters\": \"\\u27E9\" },\n  \"&RightArrowBar;\": { \"codepoints\": [8677], \"characters\": \"\\u21E5\" },\n  \"&rightarrow;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },\n  \"&RightArrow;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },\n  \"&Rightarrow;\": { \"codepoints\": [8658], \"characters\": \"\\u21D2\" },\n  \"&RightArrowLeftArrow;\": { \"codepoints\": [8644], \"characters\": \"\\u21C4\" },\n  \"&rightarrowtail;\": { \"codepoints\": [8611], \"characters\": \"\\u21A3\" },\n  \"&RightCeiling;\": { \"codepoints\": [8969], \"characters\": \"\\u2309\" },\n  \"&RightDoubleBracket;\": { \"codepoints\": [10215], \"characters\": \"\\u27E7\" },\n  \"&RightDownTeeVector;\": { \"codepoints\": [10589], \"characters\": \"\\u295D\" },\n  \"&RightDownVectorBar;\": { \"codepoints\": [10581], \"characters\": \"\\u2955\" },\n  \"&RightDownVector;\": { \"codepoints\": [8642], \"characters\": \"\\u21C2\" },\n  \"&RightFloor;\": { \"codepoints\": [8971], \"characters\": \"\\u230B\" },\n  \"&rightharpoondown;\": { \"codepoints\": [8641], \"characters\": \"\\u21C1\" },\n  \"&rightharpoonup;\": { \"codepoints\": [8640], \"characters\": \"\\u21C0\" },\n  \"&rightleftarrows;\": { \"codepoints\": [8644], \"characters\": \"\\u21C4\" },\n  \"&rightleftharpoons;\": { \"codepoints\": [8652], \"characters\": \"\\u21CC\" },\n  \"&rightrightarrows;\": { \"codepoints\": [8649], \"characters\": \"\\u21C9\" },\n  \"&rightsquigarrow;\": { \"codepoints\": [8605], \"characters\": \"\\u219D\" },\n  \"&RightTeeArrow;\": { \"codepoints\": [8614], \"characters\": \"\\u21A6\" },\n  \"&RightTee;\": { \"codepoints\": [8866], \"characters\": \"\\u22A2\" },\n  \"&RightTeeVector;\": { \"codepoints\": [10587], \"characters\": \"\\u295B\" },\n  \"&rightthreetimes;\": { \"codepoints\": [8908], \"characters\": \"\\u22CC\" },\n  \"&RightTriangleBar;\": { \"codepoints\": [10704], \"characters\": \"\\u29D0\" },\n  \"&RightTriangle;\": { \"codepoints\": [8883], \"characters\": \"\\u22B3\" },\n  \"&RightTriangleEqual;\": { \"codepoints\": [8885], \"characters\": \"\\u22B5\" },\n  \"&RightUpDownVector;\": { \"codepoints\": [10575], \"characters\": \"\\u294F\" },\n  \"&RightUpTeeVector;\": { \"codepoints\": [10588], \"characters\": \"\\u295C\" },\n  \"&RightUpVectorBar;\": { \"codepoints\": [10580], \"characters\": \"\\u2954\" },\n  \"&RightUpVector;\": { \"codepoints\": [8638], \"characters\": \"\\u21BE\" },\n  \"&RightVectorBar;\": { \"codepoints\": [10579], \"characters\": \"\\u2953\" },\n  \"&RightVector;\": { \"codepoints\": [8640], \"characters\": \"\\u21C0\" },\n  \"&ring;\": { \"codepoints\": [730], \"characters\": \"\\u02DA\" },\n  \"&risingdotseq;\": { \"codepoints\": [8787], \"characters\": \"\\u2253\" },\n  \"&rlarr;\": { \"codepoints\": [8644], \"characters\": \"\\u21C4\" },\n  \"&rlhar;\": { \"codepoints\": [8652], \"characters\": \"\\u21CC\" },\n  \"&rlm;\": { \"codepoints\": [8207], \"characters\": \"\\u200F\" },\n  \"&rmoustache;\": { \"codepoints\": [9137], \"characters\": \"\\u23B1\" },\n  \"&rmoust;\": { \"codepoints\": [9137], \"characters\": \"\\u23B1\" },\n  \"&rnmid;\": { \"codepoints\": [10990], \"characters\": \"\\u2AEE\" },\n  \"&roang;\": { \"codepoints\": [10221], \"characters\": \"\\u27ED\" },\n  \"&roarr;\": { \"codepoints\": [8702], \"characters\": \"\\u21FE\" },\n  \"&robrk;\": { \"codepoints\": [10215], \"characters\": \"\\u27E7\" },\n  \"&ropar;\": { \"codepoints\": [10630], \"characters\": \"\\u2986\" },\n  \"&ropf;\": { \"codepoints\": [120163], \"characters\": \"\\uD835\\uDD63\" },\n  \"&Ropf;\": { \"codepoints\": [8477], \"characters\": \"\\u211D\" },\n  \"&roplus;\": { \"codepoints\": [10798], \"characters\": \"\\u2A2E\" },\n  \"&rotimes;\": { \"codepoints\": [10805], \"characters\": \"\\u2A35\" },\n  \"&RoundImplies;\": { \"codepoints\": [10608], \"characters\": \"\\u2970\" },\n  \"&rpar;\": { \"codepoints\": [41], \"characters\": \"\\u0029\" },\n  \"&rpargt;\": { \"codepoints\": [10644], \"characters\": \"\\u2994\" },\n  \"&rppolint;\": { \"codepoints\": [10770], \"characters\": \"\\u2A12\" },\n  \"&rrarr;\": { \"codepoints\": [8649], \"characters\": \"\\u21C9\" },\n  \"&Rrightarrow;\": { \"codepoints\": [8667], \"characters\": \"\\u21DB\" },\n  \"&rsaquo;\": { \"codepoints\": [8250], \"characters\": \"\\u203A\" },\n  \"&rscr;\": { \"codepoints\": [120007], \"characters\": \"\\uD835\\uDCC7\" },\n  \"&Rscr;\": { \"codepoints\": [8475], \"characters\": \"\\u211B\" },\n  \"&rsh;\": { \"codepoints\": [8625], \"characters\": \"\\u21B1\" },\n  \"&Rsh;\": { \"codepoints\": [8625], \"characters\": \"\\u21B1\" },\n  \"&rsqb;\": { \"codepoints\": [93], \"characters\": \"\\u005D\" },\n  \"&rsquo;\": { \"codepoints\": [8217], \"characters\": \"\\u2019\" },\n  \"&rsquor;\": { \"codepoints\": [8217], \"characters\": \"\\u2019\" },\n  \"&rthree;\": { \"codepoints\": [8908], \"characters\": \"\\u22CC\" },\n  \"&rtimes;\": { \"codepoints\": [8906], \"characters\": \"\\u22CA\" },\n  \"&rtri;\": { \"codepoints\": [9657], \"characters\": \"\\u25B9\" },\n  \"&rtrie;\": { \"codepoints\": [8885], \"characters\": \"\\u22B5\" },\n  \"&rtrif;\": { \"codepoints\": [9656], \"characters\": \"\\u25B8\" },\n  \"&rtriltri;\": { \"codepoints\": [10702], \"characters\": \"\\u29CE\" },\n  \"&RuleDelayed;\": { \"codepoints\": [10740], \"characters\": \"\\u29F4\" },\n  \"&ruluhar;\": { \"codepoints\": [10600], \"characters\": \"\\u2968\" },\n  \"&rx;\": { \"codepoints\": [8478], \"characters\": \"\\u211E\" },\n  \"&Sacute;\": { \"codepoints\": [346], \"characters\": \"\\u015A\" },\n  \"&sacute;\": { \"codepoints\": [347], \"characters\": \"\\u015B\" },\n  \"&sbquo;\": { \"codepoints\": [8218], \"characters\": \"\\u201A\" },\n  \"&scap;\": { \"codepoints\": [10936], \"characters\": \"\\u2AB8\" },\n  \"&Scaron;\": { \"codepoints\": [352], \"characters\": \"\\u0160\" },\n  \"&scaron;\": { \"codepoints\": [353], \"characters\": \"\\u0161\" },\n  \"&Sc;\": { \"codepoints\": [10940], \"characters\": \"\\u2ABC\" },\n  \"&sc;\": { \"codepoints\": [8827], \"characters\": \"\\u227B\" },\n  \"&sccue;\": { \"codepoints\": [8829], \"characters\": \"\\u227D\" },\n  \"&sce;\": { \"codepoints\": [10928], \"characters\": \"\\u2AB0\" },\n  \"&scE;\": { \"codepoints\": [10932], \"characters\": \"\\u2AB4\" },\n  \"&Scedil;\": { \"codepoints\": [350], \"characters\": \"\\u015E\" },\n  \"&scedil;\": { \"codepoints\": [351], \"characters\": \"\\u015F\" },\n  \"&Scirc;\": { \"codepoints\": [348], \"characters\": \"\\u015C\" },\n  \"&scirc;\": { \"codepoints\": [349], \"characters\": \"\\u015D\" },\n  \"&scnap;\": { \"codepoints\": [10938], \"characters\": \"\\u2ABA\" },\n  \"&scnE;\": { \"codepoints\": [10934], \"characters\": \"\\u2AB6\" },\n  \"&scnsim;\": { \"codepoints\": [8937], \"characters\": \"\\u22E9\" },\n  \"&scpolint;\": { \"codepoints\": [10771], \"characters\": \"\\u2A13\" },\n  \"&scsim;\": { \"codepoints\": [8831], \"characters\": \"\\u227F\" },\n  \"&Scy;\": { \"codepoints\": [1057], \"characters\": \"\\u0421\" },\n  \"&scy;\": { \"codepoints\": [1089], \"characters\": \"\\u0441\" },\n  \"&sdotb;\": { \"codepoints\": [8865], \"characters\": \"\\u22A1\" },\n  \"&sdot;\": { \"codepoints\": [8901], \"characters\": \"\\u22C5\" },\n  \"&sdote;\": { \"codepoints\": [10854], \"characters\": \"\\u2A66\" },\n  \"&searhk;\": { \"codepoints\": [10533], \"characters\": \"\\u2925\" },\n  \"&searr;\": { \"codepoints\": [8600], \"characters\": \"\\u2198\" },\n  \"&seArr;\": { \"codepoints\": [8664], \"characters\": \"\\u21D8\" },\n  \"&searrow;\": { \"codepoints\": [8600], \"characters\": \"\\u2198\" },\n  \"&sect;\": { \"codepoints\": [167], \"characters\": \"\\u00A7\" },\n  \"&sect\": { \"codepoints\": [167], \"characters\": \"\\u00A7\" },\n  \"&semi;\": { \"codepoints\": [59], \"characters\": \"\\u003B\" },\n  \"&seswar;\": { \"codepoints\": [10537], \"characters\": \"\\u2929\" },\n  \"&setminus;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },\n  \"&setmn;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },\n  \"&sext;\": { \"codepoints\": [10038], \"characters\": \"\\u2736\" },\n  \"&Sfr;\": { \"codepoints\": [120086], \"characters\": \"\\uD835\\uDD16\" },\n  \"&sfr;\": { \"codepoints\": [120112], \"characters\": \"\\uD835\\uDD30\" },\n  \"&sfrown;\": { \"codepoints\": [8994], \"characters\": \"\\u2322\" },\n  \"&sharp;\": { \"codepoints\": [9839], \"characters\": \"\\u266F\" },\n  \"&SHCHcy;\": { \"codepoints\": [1065], \"characters\": \"\\u0429\" },\n  \"&shchcy;\": { \"codepoints\": [1097], \"characters\": \"\\u0449\" },\n  \"&SHcy;\": { \"codepoints\": [1064], \"characters\": \"\\u0428\" },\n  \"&shcy;\": { \"codepoints\": [1096], \"characters\": \"\\u0448\" },\n  \"&ShortDownArrow;\": { \"codepoints\": [8595], \"characters\": \"\\u2193\" },\n  \"&ShortLeftArrow;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },\n  \"&shortmid;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },\n  \"&shortparallel;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },\n  \"&ShortRightArrow;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },\n  \"&ShortUpArrow;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },\n  \"&shy;\": { \"codepoints\": [173], \"characters\": \"\\u00AD\" },\n  \"&shy\": { \"codepoints\": [173], \"characters\": \"\\u00AD\" },\n  \"&Sigma;\": { \"codepoints\": [931], \"characters\": \"\\u03A3\" },\n  \"&sigma;\": { \"codepoints\": [963], \"characters\": \"\\u03C3\" },\n  \"&sigmaf;\": { \"codepoints\": [962], \"characters\": \"\\u03C2\" },\n  \"&sigmav;\": { \"codepoints\": [962], \"characters\": \"\\u03C2\" },\n  \"&sim;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },\n  \"&simdot;\": { \"codepoints\": [10858], \"characters\": \"\\u2A6A\" },\n  \"&sime;\": { \"codepoints\": [8771], \"characters\": \"\\u2243\" },\n  \"&simeq;\": { \"codepoints\": [8771], \"characters\": \"\\u2243\" },\n  \"&simg;\": { \"codepoints\": [10910], \"characters\": \"\\u2A9E\" },\n  \"&simgE;\": { \"codepoints\": [10912], \"characters\": \"\\u2AA0\" },\n  \"&siml;\": { \"codepoints\": [10909], \"characters\": \"\\u2A9D\" },\n  \"&simlE;\": { \"codepoints\": [10911], \"characters\": \"\\u2A9F\" },\n  \"&simne;\": { \"codepoints\": [8774], \"characters\": \"\\u2246\" },\n  \"&simplus;\": { \"codepoints\": [10788], \"characters\": \"\\u2A24\" },\n  \"&simrarr;\": { \"codepoints\": [10610], \"characters\": \"\\u2972\" },\n  \"&slarr;\": { \"codepoints\": [8592], \"characters\": \"\\u2190\" },\n  \"&SmallCircle;\": { \"codepoints\": [8728], \"characters\": \"\\u2218\" },\n  \"&smallsetminus;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },\n  \"&smashp;\": { \"codepoints\": [10803], \"characters\": \"\\u2A33\" },\n  \"&smeparsl;\": { \"codepoints\": [10724], \"characters\": \"\\u29E4\" },\n  \"&smid;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },\n  \"&smile;\": { \"codepoints\": [8995], \"characters\": \"\\u2323\" },\n  \"&smt;\": { \"codepoints\": [10922], \"characters\": \"\\u2AAA\" },\n  \"&smte;\": { \"codepoints\": [10924], \"characters\": \"\\u2AAC\" },\n  \"&smtes;\": { \"codepoints\": [10924, 65024], \"characters\": \"\\u2AAC\\uFE00\" },\n  \"&SOFTcy;\": { \"codepoints\": [1068], \"characters\": \"\\u042C\" },\n  \"&softcy;\": { \"codepoints\": [1100], \"characters\": \"\\u044C\" },\n  \"&solbar;\": { \"codepoints\": [9023], \"characters\": \"\\u233F\" },\n  \"&solb;\": { \"codepoints\": [10692], \"characters\": \"\\u29C4\" },\n  \"&sol;\": { \"codepoints\": [47], \"characters\": \"\\u002F\" },\n  \"&Sopf;\": { \"codepoints\": [120138], \"characters\": \"\\uD835\\uDD4A\" },\n  \"&sopf;\": { \"codepoints\": [120164], \"characters\": \"\\uD835\\uDD64\" },\n  \"&spades;\": { \"codepoints\": [9824], \"characters\": \"\\u2660\" },\n  \"&spadesuit;\": { \"codepoints\": [9824], \"characters\": \"\\u2660\" },\n  \"&spar;\": { \"codepoints\": [8741], \"characters\": \"\\u2225\" },\n  \"&sqcap;\": { \"codepoints\": [8851], \"characters\": \"\\u2293\" },\n  \"&sqcaps;\": { \"codepoints\": [8851, 65024], \"characters\": \"\\u2293\\uFE00\" },\n  \"&sqcup;\": { \"codepoints\": [8852], \"characters\": \"\\u2294\" },\n  \"&sqcups;\": { \"codepoints\": [8852, 65024], \"characters\": \"\\u2294\\uFE00\" },\n  \"&Sqrt;\": { \"codepoints\": [8730], \"characters\": \"\\u221A\" },\n  \"&sqsub;\": { \"codepoints\": [8847], \"characters\": \"\\u228F\" },\n  \"&sqsube;\": { \"codepoints\": [8849], \"characters\": \"\\u2291\" },\n  \"&sqsubset;\": { \"codepoints\": [8847], \"characters\": \"\\u228F\" },\n  \"&sqsubseteq;\": { \"codepoints\": [8849], \"characters\": \"\\u2291\" },\n  \"&sqsup;\": { \"codepoints\": [8848], \"characters\": \"\\u2290\" },\n  \"&sqsupe;\": { \"codepoints\": [8850], \"characters\": \"\\u2292\" },\n  \"&sqsupset;\": { \"codepoints\": [8848], \"characters\": \"\\u2290\" },\n  \"&sqsupseteq;\": { \"codepoints\": [8850], \"characters\": \"\\u2292\" },\n  \"&square;\": { \"codepoints\": [9633], \"characters\": \"\\u25A1\" },\n  \"&Square;\": { \"codepoints\": [9633], \"characters\": \"\\u25A1\" },\n  \"&SquareIntersection;\": { \"codepoints\": [8851], \"characters\": \"\\u2293\" },\n  \"&SquareSubset;\": { \"codepoints\": [8847], \"characters\": \"\\u228F\" },\n  \"&SquareSubsetEqual;\": { \"codepoints\": [8849], \"characters\": \"\\u2291\" },\n  \"&SquareSuperset;\": { \"codepoints\": [8848], \"characters\": \"\\u2290\" },\n  \"&SquareSupersetEqual;\": { \"codepoints\": [8850], \"characters\": \"\\u2292\" },\n  \"&SquareUnion;\": { \"codepoints\": [8852], \"characters\": \"\\u2294\" },\n  \"&squarf;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },\n  \"&squ;\": { \"codepoints\": [9633], \"characters\": \"\\u25A1\" },\n  \"&squf;\": { \"codepoints\": [9642], \"characters\": \"\\u25AA\" },\n  \"&srarr;\": { \"codepoints\": [8594], \"characters\": \"\\u2192\" },\n  \"&Sscr;\": { \"codepoints\": [119982], \"characters\": \"\\uD835\\uDCAE\" },\n  \"&sscr;\": { \"codepoints\": [120008], \"characters\": \"\\uD835\\uDCC8\" },\n  \"&ssetmn;\": { \"codepoints\": [8726], \"characters\": \"\\u2216\" },\n  \"&ssmile;\": { \"codepoints\": [8995], \"characters\": \"\\u2323\" },\n  \"&sstarf;\": { \"codepoints\": [8902], \"characters\": \"\\u22C6\" },\n  \"&Star;\": { \"codepoints\": [8902], \"characters\": \"\\u22C6\" },\n  \"&star;\": { \"codepoints\": [9734], \"characters\": \"\\u2606\" },\n  \"&starf;\": { \"codepoints\": [9733], \"characters\": \"\\u2605\" },\n  \"&straightepsilon;\": { \"codepoints\": [1013], \"characters\": \"\\u03F5\" },\n  \"&straightphi;\": { \"codepoints\": [981], \"characters\": \"\\u03D5\" },\n  \"&strns;\": { \"codepoints\": [175], \"characters\": \"\\u00AF\" },\n  \"&sub;\": { \"codepoints\": [8834], \"characters\": \"\\u2282\" },\n  \"&Sub;\": { \"codepoints\": [8912], \"characters\": \"\\u22D0\" },\n  \"&subdot;\": { \"codepoints\": [10941], \"characters\": \"\\u2ABD\" },\n  \"&subE;\": { \"codepoints\": [10949], \"characters\": \"\\u2AC5\" },\n  \"&sube;\": { \"codepoints\": [8838], \"characters\": \"\\u2286\" },\n  \"&subedot;\": { \"codepoints\": [10947], \"characters\": \"\\u2AC3\" },\n  \"&submult;\": { \"codepoints\": [10945], \"characters\": \"\\u2AC1\" },\n  \"&subnE;\": { \"codepoints\": [10955], \"characters\": \"\\u2ACB\" },\n  \"&subne;\": { \"codepoints\": [8842], \"characters\": \"\\u228A\" },\n  \"&subplus;\": { \"codepoints\": [10943], \"characters\": \"\\u2ABF\" },\n  \"&subrarr;\": { \"codepoints\": [10617], \"characters\": \"\\u2979\" },\n  \"&subset;\": { \"codepoints\": [8834], \"characters\": \"\\u2282\" },\n  \"&Subset;\": { \"codepoints\": [8912], \"characters\": \"\\u22D0\" },\n  \"&subseteq;\": { \"codepoints\": [8838], \"characters\": \"\\u2286\" },\n  \"&subseteqq;\": { \"codepoints\": [10949], \"characters\": \"\\u2AC5\" },\n  \"&SubsetEqual;\": { \"codepoints\": [8838], \"characters\": \"\\u2286\" },\n  \"&subsetneq;\": { \"codepoints\": [8842], \"characters\": \"\\u228A\" },\n  \"&subsetneqq;\": { \"codepoints\": [10955], \"characters\": \"\\u2ACB\" },\n  \"&subsim;\": { \"codepoints\": [10951], \"characters\": \"\\u2AC7\" },\n  \"&subsub;\": { \"codepoints\": [10965], \"characters\": \"\\u2AD5\" },\n  \"&subsup;\": { \"codepoints\": [10963], \"characters\": \"\\u2AD3\" },\n  \"&succapprox;\": { \"codepoints\": [10936], \"characters\": \"\\u2AB8\" },\n  \"&succ;\": { \"codepoints\": [8827], \"characters\": \"\\u227B\" },\n  \"&succcurlyeq;\": { \"codepoints\": [8829], \"characters\": \"\\u227D\" },\n  \"&Succeeds;\": { \"codepoints\": [8827], \"characters\": \"\\u227B\" },\n  \"&SucceedsEqual;\": { \"codepoints\": [10928], \"characters\": \"\\u2AB0\" },\n  \"&SucceedsSlantEqual;\": { \"codepoints\": [8829], \"characters\": \"\\u227D\" },\n  \"&SucceedsTilde;\": { \"codepoints\": [8831], \"characters\": \"\\u227F\" },\n  \"&succeq;\": { \"codepoints\": [10928], \"characters\": \"\\u2AB0\" },\n  \"&succnapprox;\": { \"codepoints\": [10938], \"characters\": \"\\u2ABA\" },\n  \"&succneqq;\": { \"codepoints\": [10934], \"characters\": \"\\u2AB6\" },\n  \"&succnsim;\": { \"codepoints\": [8937], \"characters\": \"\\u22E9\" },\n  \"&succsim;\": { \"codepoints\": [8831], \"characters\": \"\\u227F\" },\n  \"&SuchThat;\": { \"codepoints\": [8715], \"characters\": \"\\u220B\" },\n  \"&sum;\": { \"codepoints\": [8721], \"characters\": \"\\u2211\" },\n  \"&Sum;\": { \"codepoints\": [8721], \"characters\": \"\\u2211\" },\n  \"&sung;\": { \"codepoints\": [9834], \"characters\": \"\\u266A\" },\n  \"&sup1;\": { \"codepoints\": [185], \"characters\": \"\\u00B9\" },\n  \"&sup1\": { \"codepoints\": [185], \"characters\": \"\\u00B9\" },\n  \"&sup2;\": { \"codepoints\": [178], \"characters\": \"\\u00B2\" },\n  \"&sup2\": { \"codepoints\": [178], \"characters\": \"\\u00B2\" },\n  \"&sup3;\": { \"codepoints\": [179], \"characters\": \"\\u00B3\" },\n  \"&sup3\": { \"codepoints\": [179], \"characters\": \"\\u00B3\" },\n  \"&sup;\": { \"codepoints\": [8835], \"characters\": \"\\u2283\" },\n  \"&Sup;\": { \"codepoints\": [8913], \"characters\": \"\\u22D1\" },\n  \"&supdot;\": { \"codepoints\": [10942], \"characters\": \"\\u2ABE\" },\n  \"&supdsub;\": { \"codepoints\": [10968], \"characters\": \"\\u2AD8\" },\n  \"&supE;\": { \"codepoints\": [10950], \"characters\": \"\\u2AC6\" },\n  \"&supe;\": { \"codepoints\": [8839], \"characters\": \"\\u2287\" },\n  \"&supedot;\": { \"codepoints\": [10948], \"characters\": \"\\u2AC4\" },\n  \"&Superset;\": { \"codepoints\": [8835], \"characters\": \"\\u2283\" },\n  \"&SupersetEqual;\": { \"codepoints\": [8839], \"characters\": \"\\u2287\" },\n  \"&suphsol;\": { \"codepoints\": [10185], \"characters\": \"\\u27C9\" },\n  \"&suphsub;\": { \"codepoints\": [10967], \"characters\": \"\\u2AD7\" },\n  \"&suplarr;\": { \"codepoints\": [10619], \"characters\": \"\\u297B\" },\n  \"&supmult;\": { \"codepoints\": [10946], \"characters\": \"\\u2AC2\" },\n  \"&supnE;\": { \"codepoints\": [10956], \"characters\": \"\\u2ACC\" },\n  \"&supne;\": { \"codepoints\": [8843], \"characters\": \"\\u228B\" },\n  \"&supplus;\": { \"codepoints\": [10944], \"characters\": \"\\u2AC0\" },\n  \"&supset;\": { \"codepoints\": [8835], \"characters\": \"\\u2283\" },\n  \"&Supset;\": { \"codepoints\": [8913], \"characters\": \"\\u22D1\" },\n  \"&supseteq;\": { \"codepoints\": [8839], \"characters\": \"\\u2287\" },\n  \"&supseteqq;\": { \"codepoints\": [10950], \"characters\": \"\\u2AC6\" },\n  \"&supsetneq;\": { \"codepoints\": [8843], \"characters\": \"\\u228B\" },\n  \"&supsetneqq;\": { \"codepoints\": [10956], \"characters\": \"\\u2ACC\" },\n  \"&supsim;\": { \"codepoints\": [10952], \"characters\": \"\\u2AC8\" },\n  \"&supsub;\": { \"codepoints\": [10964], \"characters\": \"\\u2AD4\" },\n  \"&supsup;\": { \"codepoints\": [10966], \"characters\": \"\\u2AD6\" },\n  \"&swarhk;\": { \"codepoints\": [10534], \"characters\": \"\\u2926\" },\n  \"&swarr;\": { \"codepoints\": [8601], \"characters\": \"\\u2199\" },\n  \"&swArr;\": { \"codepoints\": [8665], \"characters\": \"\\u21D9\" },\n  \"&swarrow;\": { \"codepoints\": [8601], \"characters\": \"\\u2199\" },\n  \"&swnwar;\": { \"codepoints\": [10538], \"characters\": \"\\u292A\" },\n  \"&szlig;\": { \"codepoints\": [223], \"characters\": \"\\u00DF\" },\n  \"&szlig\": { \"codepoints\": [223], \"characters\": \"\\u00DF\" },\n  \"&Tab;\": { \"codepoints\": [9], \"characters\": \"\\u0009\" },\n  \"&target;\": { \"codepoints\": [8982], \"characters\": \"\\u2316\" },\n  \"&Tau;\": { \"codepoints\": [932], \"characters\": \"\\u03A4\" },\n  \"&tau;\": { \"codepoints\": [964], \"characters\": \"\\u03C4\" },\n  \"&tbrk;\": { \"codepoints\": [9140], \"characters\": \"\\u23B4\" },\n  \"&Tcaron;\": { \"codepoints\": [356], \"characters\": \"\\u0164\" },\n  \"&tcaron;\": { \"codepoints\": [357], \"characters\": \"\\u0165\" },\n  \"&Tcedil;\": { \"codepoints\": [354], \"characters\": \"\\u0162\" },\n  \"&tcedil;\": { \"codepoints\": [355], \"characters\": \"\\u0163\" },\n  \"&Tcy;\": { \"codepoints\": [1058], \"characters\": \"\\u0422\" },\n  \"&tcy;\": { \"codepoints\": [1090], \"characters\": \"\\u0442\" },\n  \"&tdot;\": { \"codepoints\": [8411], \"characters\": \"\\u20DB\" },\n  \"&telrec;\": { \"codepoints\": [8981], \"characters\": \"\\u2315\" },\n  \"&Tfr;\": { \"codepoints\": [120087], \"characters\": \"\\uD835\\uDD17\" },\n  \"&tfr;\": { \"codepoints\": [120113], \"characters\": \"\\uD835\\uDD31\" },\n  \"&there4;\": { \"codepoints\": [8756], \"characters\": \"\\u2234\" },\n  \"&therefore;\": { \"codepoints\": [8756], \"characters\": \"\\u2234\" },\n  \"&Therefore;\": { \"codepoints\": [8756], \"characters\": \"\\u2234\" },\n  \"&Theta;\": { \"codepoints\": [920], \"characters\": \"\\u0398\" },\n  \"&theta;\": { \"codepoints\": [952], \"characters\": \"\\u03B8\" },\n  \"&thetasym;\": { \"codepoints\": [977], \"characters\": \"\\u03D1\" },\n  \"&thetav;\": { \"codepoints\": [977], \"characters\": \"\\u03D1\" },\n  \"&thickapprox;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },\n  \"&thicksim;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },\n  \"&ThickSpace;\": { \"codepoints\": [8287, 8202], \"characters\": \"\\u205F\\u200A\" },\n  \"&ThinSpace;\": { \"codepoints\": [8201], \"characters\": \"\\u2009\" },\n  \"&thinsp;\": { \"codepoints\": [8201], \"characters\": \"\\u2009\" },\n  \"&thkap;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },\n  \"&thksim;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },\n  \"&THORN;\": { \"codepoints\": [222], \"characters\": \"\\u00DE\" },\n  \"&THORN\": { \"codepoints\": [222], \"characters\": \"\\u00DE\" },\n  \"&thorn;\": { \"codepoints\": [254], \"characters\": \"\\u00FE\" },\n  \"&thorn\": { \"codepoints\": [254], \"characters\": \"\\u00FE\" },\n  \"&tilde;\": { \"codepoints\": [732], \"characters\": \"\\u02DC\" },\n  \"&Tilde;\": { \"codepoints\": [8764], \"characters\": \"\\u223C\" },\n  \"&TildeEqual;\": { \"codepoints\": [8771], \"characters\": \"\\u2243\" },\n  \"&TildeFullEqual;\": { \"codepoints\": [8773], \"characters\": \"\\u2245\" },\n  \"&TildeTilde;\": { \"codepoints\": [8776], \"characters\": \"\\u2248\" },\n  \"&timesbar;\": { \"codepoints\": [10801], \"characters\": \"\\u2A31\" },\n  \"&timesb;\": { \"codepoints\": [8864], \"characters\": \"\\u22A0\" },\n  \"&times;\": { \"codepoints\": [215], \"characters\": \"\\u00D7\" },\n  \"&times\": { \"codepoints\": [215], \"characters\": \"\\u00D7\" },\n  \"&timesd;\": { \"codepoints\": [10800], \"characters\": \"\\u2A30\" },\n  \"&tint;\": { \"codepoints\": [8749], \"characters\": \"\\u222D\" },\n  \"&toea;\": { \"codepoints\": [10536], \"characters\": \"\\u2928\" },\n  \"&topbot;\": { \"codepoints\": [9014], \"characters\": \"\\u2336\" },\n  \"&topcir;\": { \"codepoints\": [10993], \"characters\": \"\\u2AF1\" },\n  \"&top;\": { \"codepoints\": [8868], \"characters\": \"\\u22A4\" },\n  \"&Topf;\": { \"codepoints\": [120139], \"characters\": \"\\uD835\\uDD4B\" },\n  \"&topf;\": { \"codepoints\": [120165], \"characters\": \"\\uD835\\uDD65\" },\n  \"&topfork;\": { \"codepoints\": [10970], \"characters\": \"\\u2ADA\" },\n  \"&tosa;\": { \"codepoints\": [10537], \"characters\": \"\\u2929\" },\n  \"&tprime;\": { \"codepoints\": [8244], \"characters\": \"\\u2034\" },\n  \"&trade;\": { \"codepoints\": [8482], \"characters\": \"\\u2122\" },\n  \"&TRADE;\": { \"codepoints\": [8482], \"characters\": \"\\u2122\" },\n  \"&triangle;\": { \"codepoints\": [9653], \"characters\": \"\\u25B5\" },\n  \"&triangledown;\": { \"codepoints\": [9663], \"characters\": \"\\u25BF\" },\n  \"&triangleleft;\": { \"codepoints\": [9667], \"characters\": \"\\u25C3\" },\n  \"&trianglelefteq;\": { \"codepoints\": [8884], \"characters\": \"\\u22B4\" },\n  \"&triangleq;\": { \"codepoints\": [8796], \"characters\": \"\\u225C\" },\n  \"&triangleright;\": { \"codepoints\": [9657], \"characters\": \"\\u25B9\" },\n  \"&trianglerighteq;\": { \"codepoints\": [8885], \"characters\": \"\\u22B5\" },\n  \"&tridot;\": { \"codepoints\": [9708], \"characters\": \"\\u25EC\" },\n  \"&trie;\": { \"codepoints\": [8796], \"characters\": \"\\u225C\" },\n  \"&triminus;\": { \"codepoints\": [10810], \"characters\": \"\\u2A3A\" },\n  \"&TripleDot;\": { \"codepoints\": [8411], \"characters\": \"\\u20DB\" },\n  \"&triplus;\": { \"codepoints\": [10809], \"characters\": \"\\u2A39\" },\n  \"&trisb;\": { \"codepoints\": [10701], \"characters\": \"\\u29CD\" },\n  \"&tritime;\": { \"codepoints\": [10811], \"characters\": \"\\u2A3B\" },\n  \"&trpezium;\": { \"codepoints\": [9186], \"characters\": \"\\u23E2\" },\n  \"&Tscr;\": { \"codepoints\": [119983], \"characters\": \"\\uD835\\uDCAF\" },\n  \"&tscr;\": { \"codepoints\": [120009], \"characters\": \"\\uD835\\uDCC9\" },\n  \"&TScy;\": { \"codepoints\": [1062], \"characters\": \"\\u0426\" },\n  \"&tscy;\": { \"codepoints\": [1094], \"characters\": \"\\u0446\" },\n  \"&TSHcy;\": { \"codepoints\": [1035], \"characters\": \"\\u040B\" },\n  \"&tshcy;\": { \"codepoints\": [1115], \"characters\": \"\\u045B\" },\n  \"&Tstrok;\": { \"codepoints\": [358], \"characters\": \"\\u0166\" },\n  \"&tstrok;\": { \"codepoints\": [359], \"characters\": \"\\u0167\" },\n  \"&twixt;\": { \"codepoints\": [8812], \"characters\": \"\\u226C\" },\n  \"&twoheadleftarrow;\": { \"codepoints\": [8606], \"characters\": \"\\u219E\" },\n  \"&twoheadrightarrow;\": { \"codepoints\": [8608], \"characters\": \"\\u21A0\" },\n  \"&Uacute;\": { \"codepoints\": [218], \"characters\": \"\\u00DA\" },\n  \"&Uacute\": { \"codepoints\": [218], \"characters\": \"\\u00DA\" },\n  \"&uacute;\": { \"codepoints\": [250], \"characters\": \"\\u00FA\" },\n  \"&uacute\": { \"codepoints\": [250], \"characters\": \"\\u00FA\" },\n  \"&uarr;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },\n  \"&Uarr;\": { \"codepoints\": [8607], \"characters\": \"\\u219F\" },\n  \"&uArr;\": { \"codepoints\": [8657], \"characters\": \"\\u21D1\" },\n  \"&Uarrocir;\": { \"codepoints\": [10569], \"characters\": \"\\u2949\" },\n  \"&Ubrcy;\": { \"codepoints\": [1038], \"characters\": \"\\u040E\" },\n  \"&ubrcy;\": { \"codepoints\": [1118], \"characters\": \"\\u045E\" },\n  \"&Ubreve;\": { \"codepoints\": [364], \"characters\": \"\\u016C\" },\n  \"&ubreve;\": { \"codepoints\": [365], \"characters\": \"\\u016D\" },\n  \"&Ucirc;\": { \"codepoints\": [219], \"characters\": \"\\u00DB\" },\n  \"&Ucirc\": { \"codepoints\": [219], \"characters\": \"\\u00DB\" },\n  \"&ucirc;\": { \"codepoints\": [251], \"characters\": \"\\u00FB\" },\n  \"&ucirc\": { \"codepoints\": [251], \"characters\": \"\\u00FB\" },\n  \"&Ucy;\": { \"codepoints\": [1059], \"characters\": \"\\u0423\" },\n  \"&ucy;\": { \"codepoints\": [1091], \"characters\": \"\\u0443\" },\n  \"&udarr;\": { \"codepoints\": [8645], \"characters\": \"\\u21C5\" },\n  \"&Udblac;\": { \"codepoints\": [368], \"characters\": \"\\u0170\" },\n  \"&udblac;\": { \"codepoints\": [369], \"characters\": \"\\u0171\" },\n  \"&udhar;\": { \"codepoints\": [10606], \"characters\": \"\\u296E\" },\n  \"&ufisht;\": { \"codepoints\": [10622], \"characters\": \"\\u297E\" },\n  \"&Ufr;\": { \"codepoints\": [120088], \"characters\": \"\\uD835\\uDD18\" },\n  \"&ufr;\": { \"codepoints\": [120114], \"characters\": \"\\uD835\\uDD32\" },\n  \"&Ugrave;\": { \"codepoints\": [217], \"characters\": \"\\u00D9\" },\n  \"&Ugrave\": { \"codepoints\": [217], \"characters\": \"\\u00D9\" },\n  \"&ugrave;\": { \"codepoints\": [249], \"characters\": \"\\u00F9\" },\n  \"&ugrave\": { \"codepoints\": [249], \"characters\": \"\\u00F9\" },\n  \"&uHar;\": { \"codepoints\": [10595], \"characters\": \"\\u2963\" },\n  \"&uharl;\": { \"codepoints\": [8639], \"characters\": \"\\u21BF\" },\n  \"&uharr;\": { \"codepoints\": [8638], \"characters\": \"\\u21BE\" },\n  \"&uhblk;\": { \"codepoints\": [9600], \"characters\": \"\\u2580\" },\n  \"&ulcorn;\": { \"codepoints\": [8988], \"characters\": \"\\u231C\" },\n  \"&ulcorner;\": { \"codepoints\": [8988], \"characters\": \"\\u231C\" },\n  \"&ulcrop;\": { \"codepoints\": [8975], \"characters\": \"\\u230F\" },\n  \"&ultri;\": { \"codepoints\": [9720], \"characters\": \"\\u25F8\" },\n  \"&Umacr;\": { \"codepoints\": [362], \"characters\": \"\\u016A\" },\n  \"&umacr;\": { \"codepoints\": [363], \"characters\": \"\\u016B\" },\n  \"&uml;\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },\n  \"&uml\": { \"codepoints\": [168], \"characters\": \"\\u00A8\" },\n  \"&UnderBar;\": { \"codepoints\": [95], \"characters\": \"\\u005F\" },\n  \"&UnderBrace;\": { \"codepoints\": [9183], \"characters\": \"\\u23DF\" },\n  \"&UnderBracket;\": { \"codepoints\": [9141], \"characters\": \"\\u23B5\" },\n  \"&UnderParenthesis;\": { \"codepoints\": [9181], \"characters\": \"\\u23DD\" },\n  \"&Union;\": { \"codepoints\": [8899], \"characters\": \"\\u22C3\" },\n  \"&UnionPlus;\": { \"codepoints\": [8846], \"characters\": \"\\u228E\" },\n  \"&Uogon;\": { \"codepoints\": [370], \"characters\": \"\\u0172\" },\n  \"&uogon;\": { \"codepoints\": [371], \"characters\": \"\\u0173\" },\n  \"&Uopf;\": { \"codepoints\": [120140], \"characters\": \"\\uD835\\uDD4C\" },\n  \"&uopf;\": { \"codepoints\": [120166], \"characters\": \"\\uD835\\uDD66\" },\n  \"&UpArrowBar;\": { \"codepoints\": [10514], \"characters\": \"\\u2912\" },\n  \"&uparrow;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },\n  \"&UpArrow;\": { \"codepoints\": [8593], \"characters\": \"\\u2191\" },\n  \"&Uparrow;\": { \"codepoints\": [8657], \"characters\": \"\\u21D1\" },\n  \"&UpArrowDownArrow;\": { \"codepoints\": [8645], \"characters\": \"\\u21C5\" },\n  \"&updownarrow;\": { \"codepoints\": [8597], \"characters\": \"\\u2195\" },\n  \"&UpDownArrow;\": { \"codepoints\": [8597], \"characters\": \"\\u2195\" },\n  \"&Updownarrow;\": { \"codepoints\": [8661], \"characters\": \"\\u21D5\" },\n  \"&UpEquilibrium;\": { \"codepoints\": [10606], \"characters\": \"\\u296E\" },\n  \"&upharpoonleft;\": { \"codepoints\": [8639], \"characters\": \"\\u21BF\" },\n  \"&upharpoonright;\": { \"codepoints\": [8638], \"characters\": \"\\u21BE\" },\n  \"&uplus;\": { \"codepoints\": [8846], \"characters\": \"\\u228E\" },\n  \"&UpperLeftArrow;\": { \"codepoints\": [8598], \"characters\": \"\\u2196\" },\n  \"&UpperRightArrow;\": { \"codepoints\": [8599], \"characters\": \"\\u2197\" },\n  \"&upsi;\": { \"codepoints\": [965], \"characters\": \"\\u03C5\" },\n  \"&Upsi;\": { \"codepoints\": [978], \"characters\": \"\\u03D2\" },\n  \"&upsih;\": { \"codepoints\": [978], \"characters\": \"\\u03D2\" },\n  \"&Upsilon;\": { \"codepoints\": [933], \"characters\": \"\\u03A5\" },\n  \"&upsilon;\": { \"codepoints\": [965], \"characters\": \"\\u03C5\" },\n  \"&UpTeeArrow;\": { \"codepoints\": [8613], \"characters\": \"\\u21A5\" },\n  \"&UpTee;\": { \"codepoints\": [8869], \"characters\": \"\\u22A5\" },\n  \"&upuparrows;\": { \"codepoints\": [8648], \"characters\": \"\\u21C8\" },\n  \"&urcorn;\": { \"codepoints\": [8989], \"characters\": \"\\u231D\" },\n  \"&urcorner;\": { \"codepoints\": [8989], \"characters\": \"\\u231D\" },\n  \"&urcrop;\": { \"codepoints\": [8974], \"characters\": \"\\u230E\" },\n  \"&Uring;\": { \"codepoints\": [366], \"characters\": \"\\u016E\" },\n  \"&uring;\": { \"codepoints\": [367], \"characters\": \"\\u016F\" },\n  \"&urtri;\": { \"codepoints\": [9721], \"characters\": \"\\u25F9\" },\n  \"&Uscr;\": { \"codepoints\": [119984], \"characters\": \"\\uD835\\uDCB0\" },\n  \"&uscr;\": { \"codepoints\": [120010], \"characters\": \"\\uD835\\uDCCA\" },\n  \"&utdot;\": { \"codepoints\": [8944], \"characters\": \"\\u22F0\" },\n  \"&Utilde;\": { \"codepoints\": [360], \"characters\": \"\\u0168\" },\n  \"&utilde;\": { \"codepoints\": [361], \"characters\": \"\\u0169\" },\n  \"&utri;\": { \"codepoints\": [9653], \"characters\": \"\\u25B5\" },\n  \"&utrif;\": { \"codepoints\": [9652], \"characters\": \"\\u25B4\" },\n  \"&uuarr;\": { \"codepoints\": [8648], \"characters\": \"\\u21C8\" },\n  \"&Uuml;\": { \"codepoints\": [220], \"characters\": \"\\u00DC\" },\n  \"&Uuml\": { \"codepoints\": [220], \"characters\": \"\\u00DC\" },\n  \"&uuml;\": { \"codepoints\": [252], \"characters\": \"\\u00FC\" },\n  \"&uuml\": { \"codepoints\": [252], \"characters\": \"\\u00FC\" },\n  \"&uwangle;\": { \"codepoints\": [10663], \"characters\": \"\\u29A7\" },\n  \"&vangrt;\": { \"codepoints\": [10652], \"characters\": \"\\u299C\" },\n  \"&varepsilon;\": { \"codepoints\": [1013], \"characters\": \"\\u03F5\" },\n  \"&varkappa;\": { \"codepoints\": [1008], \"characters\": \"\\u03F0\" },\n  \"&varnothing;\": { \"codepoints\": [8709], \"characters\": \"\\u2205\" },\n  \"&varphi;\": { \"codepoints\": [981], \"characters\": \"\\u03D5\" },\n  \"&varpi;\": { \"codepoints\": [982], \"characters\": \"\\u03D6\" },\n  \"&varpropto;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },\n  \"&varr;\": { \"codepoints\": [8597], \"characters\": \"\\u2195\" },\n  \"&vArr;\": { \"codepoints\": [8661], \"characters\": \"\\u21D5\" },\n  \"&varrho;\": { \"codepoints\": [1009], \"characters\": \"\\u03F1\" },\n  \"&varsigma;\": { \"codepoints\": [962], \"characters\": \"\\u03C2\" },\n  \"&varsubsetneq;\": { \"codepoints\": [8842, 65024], \"characters\": \"\\u228A\\uFE00\" },\n  \"&varsubsetneqq;\": { \"codepoints\": [10955, 65024], \"characters\": \"\\u2ACB\\uFE00\" },\n  \"&varsupsetneq;\": { \"codepoints\": [8843, 65024], \"characters\": \"\\u228B\\uFE00\" },\n  \"&varsupsetneqq;\": { \"codepoints\": [10956, 65024], \"characters\": \"\\u2ACC\\uFE00\" },\n  \"&vartheta;\": { \"codepoints\": [977], \"characters\": \"\\u03D1\" },\n  \"&vartriangleleft;\": { \"codepoints\": [8882], \"characters\": \"\\u22B2\" },\n  \"&vartriangleright;\": { \"codepoints\": [8883], \"characters\": \"\\u22B3\" },\n  \"&vBar;\": { \"codepoints\": [10984], \"characters\": \"\\u2AE8\" },\n  \"&Vbar;\": { \"codepoints\": [10987], \"characters\": \"\\u2AEB\" },\n  \"&vBarv;\": { \"codepoints\": [10985], \"characters\": \"\\u2AE9\" },\n  \"&Vcy;\": { \"codepoints\": [1042], \"characters\": \"\\u0412\" },\n  \"&vcy;\": { \"codepoints\": [1074], \"characters\": \"\\u0432\" },\n  \"&vdash;\": { \"codepoints\": [8866], \"characters\": \"\\u22A2\" },\n  \"&vDash;\": { \"codepoints\": [8872], \"characters\": \"\\u22A8\" },\n  \"&Vdash;\": { \"codepoints\": [8873], \"characters\": \"\\u22A9\" },\n  \"&VDash;\": { \"codepoints\": [8875], \"characters\": \"\\u22AB\" },\n  \"&Vdashl;\": { \"codepoints\": [10982], \"characters\": \"\\u2AE6\" },\n  \"&veebar;\": { \"codepoints\": [8891], \"characters\": \"\\u22BB\" },\n  \"&vee;\": { \"codepoints\": [8744], \"characters\": \"\\u2228\" },\n  \"&Vee;\": { \"codepoints\": [8897], \"characters\": \"\\u22C1\" },\n  \"&veeeq;\": { \"codepoints\": [8794], \"characters\": \"\\u225A\" },\n  \"&vellip;\": { \"codepoints\": [8942], \"characters\": \"\\u22EE\" },\n  \"&verbar;\": { \"codepoints\": [124], \"characters\": \"\\u007C\" },\n  \"&Verbar;\": { \"codepoints\": [8214], \"characters\": \"\\u2016\" },\n  \"&vert;\": { \"codepoints\": [124], \"characters\": \"\\u007C\" },\n  \"&Vert;\": { \"codepoints\": [8214], \"characters\": \"\\u2016\" },\n  \"&VerticalBar;\": { \"codepoints\": [8739], \"characters\": \"\\u2223\" },\n  \"&VerticalLine;\": { \"codepoints\": [124], \"characters\": \"\\u007C\" },\n  \"&VerticalSeparator;\": { \"codepoints\": [10072], \"characters\": \"\\u2758\" },\n  \"&VerticalTilde;\": { \"codepoints\": [8768], \"characters\": \"\\u2240\" },\n  \"&VeryThinSpace;\": { \"codepoints\": [8202], \"characters\": \"\\u200A\" },\n  \"&Vfr;\": { \"codepoints\": [120089], \"characters\": \"\\uD835\\uDD19\" },\n  \"&vfr;\": { \"codepoints\": [120115], \"characters\": \"\\uD835\\uDD33\" },\n  \"&vltri;\": { \"codepoints\": [8882], \"characters\": \"\\u22B2\" },\n  \"&vnsub;\": { \"codepoints\": [8834, 8402], \"characters\": \"\\u2282\\u20D2\" },\n  \"&vnsup;\": { \"codepoints\": [8835, 8402], \"characters\": \"\\u2283\\u20D2\" },\n  \"&Vopf;\": { \"codepoints\": [120141], \"characters\": \"\\uD835\\uDD4D\" },\n  \"&vopf;\": { \"codepoints\": [120167], \"characters\": \"\\uD835\\uDD67\" },\n  \"&vprop;\": { \"codepoints\": [8733], \"characters\": \"\\u221D\" },\n  \"&vrtri;\": { \"codepoints\": [8883], \"characters\": \"\\u22B3\" },\n  \"&Vscr;\": { \"codepoints\": [119985], \"characters\": \"\\uD835\\uDCB1\" },\n  \"&vscr;\": { \"codepoints\": [120011], \"characters\": \"\\uD835\\uDCCB\" },\n  \"&vsubnE;\": { \"codepoints\": [10955, 65024], \"characters\": \"\\u2ACB\\uFE00\" },\n  \"&vsubne;\": { \"codepoints\": [8842, 65024], \"characters\": \"\\u228A\\uFE00\" },\n  \"&vsupnE;\": { \"codepoints\": [10956, 65024], \"characters\": \"\\u2ACC\\uFE00\" },\n  \"&vsupne;\": { \"codepoints\": [8843, 65024], \"characters\": \"\\u228B\\uFE00\" },\n  \"&Vvdash;\": { \"codepoints\": [8874], \"characters\": \"\\u22AA\" },\n  \"&vzigzag;\": { \"codepoints\": [10650], \"characters\": \"\\u299A\" },\n  \"&Wcirc;\": { \"codepoints\": [372], \"characters\": \"\\u0174\" },\n  \"&wcirc;\": { \"codepoints\": [373], \"characters\": \"\\u0175\" },\n  \"&wedbar;\": { \"codepoints\": [10847], \"characters\": \"\\u2A5F\" },\n  \"&wedge;\": { \"codepoints\": [8743], \"characters\": \"\\u2227\" },\n  \"&Wedge;\": { \"codepoints\": [8896], \"characters\": \"\\u22C0\" },\n  \"&wedgeq;\": { \"codepoints\": [8793], \"characters\": \"\\u2259\" },\n  \"&weierp;\": { \"codepoints\": [8472], \"characters\": \"\\u2118\" },\n  \"&Wfr;\": { \"codepoints\": [120090], \"characters\": \"\\uD835\\uDD1A\" },\n  \"&wfr;\": { \"codepoints\": [120116], \"characters\": \"\\uD835\\uDD34\" },\n  \"&Wopf;\": { \"codepoints\": [120142], \"characters\": \"\\uD835\\uDD4E\" },\n  \"&wopf;\": { \"codepoints\": [120168], \"characters\": \"\\uD835\\uDD68\" },\n  \"&wp;\": { \"codepoints\": [8472], \"characters\": \"\\u2118\" },\n  \"&wr;\": { \"codepoints\": [8768], \"characters\": \"\\u2240\" },\n  \"&wreath;\": { \"codepoints\": [8768], \"characters\": \"\\u2240\" },\n  \"&Wscr;\": { \"codepoints\": [119986], \"characters\": \"\\uD835\\uDCB2\" },\n  \"&wscr;\": { \"codepoints\": [120012], \"characters\": \"\\uD835\\uDCCC\" },\n  \"&xcap;\": { \"codepoints\": [8898], \"characters\": \"\\u22C2\" },\n  \"&xcirc;\": { \"codepoints\": [9711], \"characters\": \"\\u25EF\" },\n  \"&xcup;\": { \"codepoints\": [8899], \"characters\": \"\\u22C3\" },\n  \"&xdtri;\": { \"codepoints\": [9661], \"characters\": \"\\u25BD\" },\n  \"&Xfr;\": { \"codepoints\": [120091], \"characters\": \"\\uD835\\uDD1B\" },\n  \"&xfr;\": { \"codepoints\": [120117], \"characters\": \"\\uD835\\uDD35\" },\n  \"&xharr;\": { \"codepoints\": [10231], \"characters\": \"\\u27F7\" },\n  \"&xhArr;\": { \"codepoints\": [10234], \"characters\": \"\\u27FA\" },\n  \"&Xi;\": { \"codepoints\": [926], \"characters\": \"\\u039E\" },\n  \"&xi;\": { \"codepoints\": [958], \"characters\": \"\\u03BE\" },\n  \"&xlarr;\": { \"codepoints\": [10229], \"characters\": \"\\u27F5\" },\n  \"&xlArr;\": { \"codepoints\": [10232], \"characters\": \"\\u27F8\" },\n  \"&xmap;\": { \"codepoints\": [10236], \"characters\": \"\\u27FC\" },\n  \"&xnis;\": { \"codepoints\": [8955], \"characters\": \"\\u22FB\" },\n  \"&xodot;\": { \"codepoints\": [10752], \"characters\": \"\\u2A00\" },\n  \"&Xopf;\": { \"codepoints\": [120143], \"characters\": \"\\uD835\\uDD4F\" },\n  \"&xopf;\": { \"codepoints\": [120169], \"characters\": \"\\uD835\\uDD69\" },\n  \"&xoplus;\": { \"codepoints\": [10753], \"characters\": \"\\u2A01\" },\n  \"&xotime;\": { \"codepoints\": [10754], \"characters\": \"\\u2A02\" },\n  \"&xrarr;\": { \"codepoints\": [10230], \"characters\": \"\\u27F6\" },\n  \"&xrArr;\": { \"codepoints\": [10233], \"characters\": \"\\u27F9\" },\n  \"&Xscr;\": { \"codepoints\": [119987], \"characters\": \"\\uD835\\uDCB3\" },\n  \"&xscr;\": { \"codepoints\": [120013], \"characters\": \"\\uD835\\uDCCD\" },\n  \"&xsqcup;\": { \"codepoints\": [10758], \"characters\": \"\\u2A06\" },\n  \"&xuplus;\": { \"codepoints\": [10756], \"characters\": \"\\u2A04\" },\n  \"&xutri;\": { \"codepoints\": [9651], \"characters\": \"\\u25B3\" },\n  \"&xvee;\": { \"codepoints\": [8897], \"characters\": \"\\u22C1\" },\n  \"&xwedge;\": { \"codepoints\": [8896], \"characters\": \"\\u22C0\" },\n  \"&Yacute;\": { \"codepoints\": [221], \"characters\": \"\\u00DD\" },\n  \"&Yacute\": { \"codepoints\": [221], \"characters\": \"\\u00DD\" },\n  \"&yacute;\": { \"codepoints\": [253], \"characters\": \"\\u00FD\" },\n  \"&yacute\": { \"codepoints\": [253], \"characters\": \"\\u00FD\" },\n  \"&YAcy;\": { \"codepoints\": [1071], \"characters\": \"\\u042F\" },\n  \"&yacy;\": { \"codepoints\": [1103], \"characters\": \"\\u044F\" },\n  \"&Ycirc;\": { \"codepoints\": [374], \"characters\": \"\\u0176\" },\n  \"&ycirc;\": { \"codepoints\": [375], \"characters\": \"\\u0177\" },\n  \"&Ycy;\": { \"codepoints\": [1067], \"characters\": \"\\u042B\" },\n  \"&ycy;\": { \"codepoints\": [1099], \"characters\": \"\\u044B\" },\n  \"&yen;\": { \"codepoints\": [165], \"characters\": \"\\u00A5\" },\n  \"&yen\": { \"codepoints\": [165], \"characters\": \"\\u00A5\" },\n  \"&Yfr;\": { \"codepoints\": [120092], \"characters\": \"\\uD835\\uDD1C\" },\n  \"&yfr;\": { \"codepoints\": [120118], \"characters\": \"\\uD835\\uDD36\" },\n  \"&YIcy;\": { \"codepoints\": [1031], \"characters\": \"\\u0407\" },\n  \"&yicy;\": { \"codepoints\": [1111], \"characters\": \"\\u0457\" },\n  \"&Yopf;\": { \"codepoints\": [120144], \"characters\": \"\\uD835\\uDD50\" },\n  \"&yopf;\": { \"codepoints\": [120170], \"characters\": \"\\uD835\\uDD6A\" },\n  \"&Yscr;\": { \"codepoints\": [119988], \"characters\": \"\\uD835\\uDCB4\" },\n  \"&yscr;\": { \"codepoints\": [120014], \"characters\": \"\\uD835\\uDCCE\" },\n  \"&YUcy;\": { \"codepoints\": [1070], \"characters\": \"\\u042E\" },\n  \"&yucy;\": { \"codepoints\": [1102], \"characters\": \"\\u044E\" },\n  \"&yuml;\": { \"codepoints\": [255], \"characters\": \"\\u00FF\" },\n  \"&yuml\": { \"codepoints\": [255], \"characters\": \"\\u00FF\" },\n  \"&Yuml;\": { \"codepoints\": [376], \"characters\": \"\\u0178\" },\n  \"&Zacute;\": { \"codepoints\": [377], \"characters\": \"\\u0179\" },\n  \"&zacute;\": { \"codepoints\": [378], \"characters\": \"\\u017A\" },\n  \"&Zcaron;\": { \"codepoints\": [381], \"characters\": \"\\u017D\" },\n  \"&zcaron;\": { \"codepoints\": [382], \"characters\": \"\\u017E\" },\n  \"&Zcy;\": { \"codepoints\": [1047], \"characters\": \"\\u0417\" },\n  \"&zcy;\": { \"codepoints\": [1079], \"characters\": \"\\u0437\" },\n  \"&Zdot;\": { \"codepoints\": [379], \"characters\": \"\\u017B\" },\n  \"&zdot;\": { \"codepoints\": [380], \"characters\": \"\\u017C\" },\n  \"&zeetrf;\": { \"codepoints\": [8488], \"characters\": \"\\u2128\" },\n  \"&ZeroWidthSpace;\": { \"codepoints\": [8203], \"characters\": \"\\u200B\" },\n  \"&Zeta;\": { \"codepoints\": [918], \"characters\": \"\\u0396\" },\n  \"&zeta;\": { \"codepoints\": [950], \"characters\": \"\\u03B6\" },\n  \"&zfr;\": { \"codepoints\": [120119], \"characters\": \"\\uD835\\uDD37\" },\n  \"&Zfr;\": { \"codepoints\": [8488], \"characters\": \"\\u2128\" },\n  \"&ZHcy;\": { \"codepoints\": [1046], \"characters\": \"\\u0416\" },\n  \"&zhcy;\": { \"codepoints\": [1078], \"characters\": \"\\u0436\" },\n  \"&zigrarr;\": { \"codepoints\": [8669], \"characters\": \"\\u21DD\" },\n  \"&zopf;\": { \"codepoints\": [120171], \"characters\": \"\\uD835\\uDD6B\" },\n  \"&Zopf;\": { \"codepoints\": [8484], \"characters\": \"\\u2124\" },\n  \"&Zscr;\": { \"codepoints\": [119989], \"characters\": \"\\uD835\\uDCB5\" },\n  \"&zscr;\": { \"codepoints\": [120015], \"characters\": \"\\uD835\\uDCCF\" },\n  \"&zwj;\": { \"codepoints\": [8205], \"characters\": \"\\u200D\" },\n  \"&zwnj;\": { \"codepoints\": [8204], \"characters\": \"\\u200C\" }\n};\n\nvar ALPHANUMERIC = /^[a-zA-Z0-9]/;\nvar getPossibleNamedEntityStart = makeRegexMatcher(/^&[a-zA-Z0-9]/);\nvar getApparentNamedEntity = makeRegexMatcher(/^&[a-zA-Z0-9]+;/);\n\nvar getNamedEntityByFirstChar = {};\n(function () {\n  var namedEntitiesByFirstChar = {};\n  for (var ent in ENTITIES) {\n    var chr = ent.charAt(1);\n    namedEntitiesByFirstChar[chr] = (namedEntitiesByFirstChar[chr] || []);\n    namedEntitiesByFirstChar[chr].push(ent.slice(2));\n  }\n  for (var chr in namedEntitiesByFirstChar) {\n    getNamedEntityByFirstChar[chr] = makeRegexMatcher(\n      new RegExp('^&' + chr + '(?:' +\n                 namedEntitiesByFirstChar[chr].join('|') + ')'));\n  }\n})();\n\n// Run a provided \"matcher\" function but reset the current position afterwards.\n// Fatal failure of the matcher is not suppressed.\nvar peekMatcher = function (scanner, matcher) {\n  var start = scanner.pos;\n  var result = matcher(scanner);\n  scanner.pos = start;\n  return result;\n};\n\n// Returns a string like \"&amp;\" or a falsy value if no match.  Fails fatally\n// if something looks like a named entity but isn't.\nvar getNamedCharRef = function (scanner, inAttribute) {\n  // look for `&` followed by alphanumeric\n  if (! peekMatcher(scanner, getPossibleNamedEntityStart))\n    return null;\n\n  var matcher = getNamedEntityByFirstChar[scanner.rest().charAt(1)];\n  var entity = null;\n  if (matcher)\n    entity = peekMatcher(scanner, matcher);\n\n  if (entity) {\n    if (entity.slice(-1) !== ';') {\n      // Certain character references with no semi are an error, like `&lt`.\n      // In attribute values, however, this is not fatal if the next character\n      // is alphanumeric.\n      //\n      // This rule affects href attributes, for example, deeming \"/?foo=bar&ltc=abc\"\n      // to be ok but \"/?foo=bar&lt=abc\" to not be.\n      if (inAttribute && ALPHANUMERIC.test(scanner.rest().charAt(entity.length)))\n        return null;\n      scanner.fatal(\"Character reference requires semicolon: \" + entity);\n    } else {\n      scanner.pos += entity.length;\n      return entity;\n    }\n  } else {\n    // we couldn't match any real entity, so see if this is a bad entity\n    // or something we can overlook.\n    var badEntity = peekMatcher(scanner, getApparentNamedEntity);\n    if (badEntity)\n      scanner.fatal(\"Invalid character reference: \" + badEntity);\n    // `&aaaa` is ok with no semicolon\n    return null;\n  }\n};\n\n// Returns the sequence of one or two codepoints making up an entity as an array.\n// Codepoints in the array are integers and may be out of the single-char JavaScript\n// range.\nvar getCodePoints = function (namedEntity) {\n  return ENTITIES[namedEntity].codepoints;\n};\n\nvar ALLOWED_AFTER_AMP = /^[\\u0009\\u000a\\u000c <&]/;\n\nvar getCharRefNumber = makeRegexMatcher(/^(?:[xX][0-9a-fA-F]+|[0-9]+);/);\n\nvar BIG_BAD_CODEPOINTS = (function (obj) {\n  var list = [0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF,\n              0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF,\n              0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF,\n              0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF,\n              0xDFFFE, 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF,\n              0x10FFFE, 0x10FFFF];\n  for (var i = 0; i < list.length; i++)\n    obj[list[i]] = true;\n\n  return obj;\n})({});\n\nvar isLegalCodepoint = function (cp) {\n  if ((cp === 0) ||\n      (cp >= 0x80 && cp <= 0x9f) ||\n      (cp >= 0xd800 && cp <= 0xdfff) ||\n      (cp >= 0x10ffff) ||\n      (cp >= 0x1 && cp <= 0x8) ||\n      (cp === 0xb) ||\n      (cp >= 0xd && cp <= 0x1f) ||\n      (cp >= 0x7f && cp <= 0x9f) ||\n      (cp >= 0xfdd0 && cp <= 0xfdef) ||\n      (cp === 0xfffe) ||\n      (cp === 0xffff) ||\n      (cp >= 0x10000 && BIG_BAD_CODEPOINTS[cp]))\n    return false;\n\n  return true;\n};\n\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#consume-a-character-reference\n//\n// Matches a character reference if possible, including the initial `&`.\n// Fails fatally in error cases (assuming an initial `&` is matched), like a disallowed codepoint\n// number or a bad named character reference.\n//\n// `inAttribute` is truthy if we are in an attribute value.\n//\n// `allowedChar` is an optional character that,\n// if found after the initial `&`, aborts parsing silently rather than failing fatally.  In real use it is\n// either `\"`, `'`, or `>` and is supplied when parsing attribute values.  NOTE: In the current spec, the\n// value of `allowedChar` doesn't actually seem to end up mattering, but there is still some debate about\n// the right approach to ampersands.\ngetCharacterReference = HTMLTools.Parse.getCharacterReference = function (scanner, inAttribute, allowedChar) {\n  if (scanner.peek() !== '&')\n    // no ampersand\n    return null;\n\n  var afterAmp = scanner.rest().charAt(1);\n\n  if (afterAmp === '#') {\n    scanner.pos += 2;\n    // refNumber includes possible initial `x` and final semicolon\n    var refNumber = getCharRefNumber(scanner);\n    // At this point we've consumed the input, so we're committed to returning\n    // something or failing fatally.\n    if (! refNumber)\n      scanner.fatal(\"Invalid numerical character reference starting with &#\");\n    var codepoint;\n    if (refNumber.charAt(0) === 'x' || refNumber.charAt(0) === 'X') {\n      // hex\n      var hex = refNumber.slice(1, -1);\n      while (hex.charAt(0) === '0')\n        hex = hex.slice(1);\n      if (hex.length > 6)\n        scanner.fatal(\"Numerical character reference too large: 0x\" + hex);\n      codepoint = parseInt(hex || \"0\", 16);\n    } else {\n      var dec = refNumber.slice(0, -1);\n      while (dec.charAt(0) === '0')\n        dec = dec.slice(1);\n      if (dec.length > 7)\n        scanner.fatal(\"Numerical character reference too large: \" + dec);\n      codepoint = parseInt(dec || \"0\", 10);\n    }\n    if (! isLegalCodepoint(codepoint))\n      scanner.fatal(\"Illegal codepoint in numerical character reference: &#\" + refNumber);\n    return { t: 'CharRef',\n             v: '&#' + refNumber,\n             cp: [codepoint] };\n  } else if ((! afterAmp) // EOF\n             || (allowedChar && afterAmp === allowedChar)\n             || ALLOWED_AFTER_AMP.test(afterAmp)) {\n    return null;\n  } else {\n    var namedEntity = getNamedCharRef(scanner, inAttribute);\n    if (namedEntity) {\n      return { t: 'CharRef',\n               v: namedEntity,\n               cp: getCodePoints(namedEntity) };\n    } else {\n      return null;\n    }\n  }\n};\n","// Token types:\n//\n// { t: 'Doctype',\n//   v: String (entire Doctype declaration from the source),\n//   name: String,\n//   systemId: String (optional),\n//   publicId: String (optional)\n// }\n//\n// { t: 'Comment',\n//   v: String (not including \"<!--\" and \"-->\")\n// }\n//\n// { t: 'Chars',\n//   v: String (pure text like you might pass to document.createTextNode,\n//              no character references)\n// }\n//\n// { t: 'Tag',\n//   isEnd: Boolean (optional),\n//   isSelfClosing: Boolean (optional),\n//   n: String (tag name, in lowercase or camel case),\n//   attrs: dictionary of { String: [tokens] }\n//          OR [{ String: [tokens] }, TemplateTag tokens...]\n//     (only for start tags; required)\n// }\n//\n// { t: 'CharRef',\n//   v: String (entire character reference from the source, e.g. \"&amp;\"),\n//   cp: [Integer] (array of Unicode code point numbers it expands to)\n// }\n//\n// We keep around both the original form of the character reference and its\n// expansion so that subsequent processing steps have the option to\n// re-emit it (if they are generating HTML) or interpret it.  Named and\n// numerical code points may be more than 16 bits, in which case they\n// need to passed through codePointToString to make a JavaScript string.\n// Most named entities and all numeric character references are one codepoint\n// (e.g. \"&amp;\" is [38]), but a few are two codepoints.\n//\n// { t: 'TemplateTag',\n//   v: HTMLTools.TemplateTag\n// }\n\n// The HTML tokenization spec says to preprocess the input stream to replace\n// CR(LF)? with LF.  However, preprocessing `scanner` would complicate things\n// by making indexes not match the input (e.g. for error messages), so we just\n// keep in mind as we go along that an LF might be represented by CRLF or CR.\n// In most cases, it doesn't actually matter what combination of whitespace\n// characters are present (e.g. inside tags).\nvar HTML_SPACE = /^[\\f\\n\\r\\t ]/;\n\nvar convertCRLF = function (str) {\n  return str.replace(/\\r\\n?/g, '\\n');\n};\n\ngetComment = HTMLTools.Parse.getComment = function (scanner) {\n  if (scanner.rest().slice(0, 4) !== '<!--')\n    return null;\n  scanner.pos += 4;\n\n  // Valid comments are easy to parse; they end at the first `--`!\n  // Our main job is throwing errors.\n\n  var rest = scanner.rest();\n  if (rest.charAt(0) === '>' || rest.slice(0, 2) === '->')\n    scanner.fatal(\"HTML comment can't start with > or ->\");\n\n  var closePos = rest.indexOf('-->');\n  if (closePos < 0)\n    scanner.fatal(\"Unclosed HTML comment\");\n\n  var commentContents = rest.slice(0, closePos);\n  if (commentContents.slice(-1) === '-')\n    scanner.fatal(\"HTML comment must end at first `--`\");\n  if (commentContents.indexOf(\"--\") >= 0)\n    scanner.fatal(\"HTML comment cannot contain `--` anywhere\");\n  if (commentContents.indexOf('\\u0000') >= 0)\n    scanner.fatal(\"HTML comment cannot contain NULL\");\n\n  scanner.pos += closePos + 3;\n\n  return { t: 'Comment',\n           v: convertCRLF(commentContents) };\n};\n\nvar skipSpaces = function (scanner) {\n  while (HTML_SPACE.test(scanner.peek()))\n    scanner.pos++;\n};\n\nvar requireSpaces = function (scanner) {\n  if (! HTML_SPACE.test(scanner.peek()))\n    scanner.fatal(\"Expected space\");\n  skipSpaces(scanner);\n};\n\nvar getDoctypeQuotedString = function (scanner) {\n  var quote = scanner.peek();\n  if (! (quote === '\"' || quote === \"'\"))\n    scanner.fatal(\"Expected single or double quote in DOCTYPE\");\n  scanner.pos++;\n\n  if (scanner.peek() === quote)\n    // prevent a falsy return value (empty string)\n    scanner.fatal(\"Malformed DOCTYPE\");\n\n  var str = '';\n  var ch;\n  while ((ch = scanner.peek()), ch !== quote) {\n    if ((! ch) || (ch === '\\u0000') || (ch === '>'))\n      scanner.fatal(\"Malformed DOCTYPE\");\n    str += ch;\n    scanner.pos++;\n  }\n\n  scanner.pos++;\n\n  return str;\n};\n\n// See http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#the-doctype.\n//\n// If `getDocType` sees \"<!DOCTYPE\" (case-insensitive), it will match or fail fatally.\ngetDoctype = HTMLTools.Parse.getDoctype = function (scanner) {\n  if (HTMLTools.asciiLowerCase(scanner.rest().slice(0, 9)) !== '<!doctype')\n    return null;\n  var start = scanner.pos;\n  scanner.pos += 9;\n\n  requireSpaces(scanner);\n\n  var ch = scanner.peek();\n  if ((! ch) || (ch === '>') || (ch === '\\u0000'))\n    scanner.fatal('Malformed DOCTYPE');\n  var name = ch;\n  scanner.pos++;\n\n  while ((ch = scanner.peek()), ! (HTML_SPACE.test(ch) || ch === '>')) {\n    if ((! ch) || (ch === '\\u0000'))\n      scanner.fatal('Malformed DOCTYPE');\n    name += ch;\n    scanner.pos++;\n  }\n  name = HTMLTools.asciiLowerCase(name);\n\n  // Now we're looking at a space or a `>`.\n  skipSpaces(scanner);\n\n  var systemId = null;\n  var publicId = null;\n\n  if (scanner.peek() !== '>') {\n    // Now we're essentially in the \"After DOCTYPE name state\" of the tokenizer,\n    // but we're not looking at space or `>`.\n\n    // this should be \"public\" or \"system\".\n    var publicOrSystem = HTMLTools.asciiLowerCase(scanner.rest().slice(0, 6));\n\n    if (publicOrSystem === 'system') {\n      scanner.pos += 6;\n      requireSpaces(scanner);\n      systemId = getDoctypeQuotedString(scanner);\n      skipSpaces(scanner);\n      if (scanner.peek() !== '>')\n        scanner.fatal(\"Malformed DOCTYPE\");\n    } else if (publicOrSystem === 'public') {\n      scanner.pos += 6;\n      requireSpaces(scanner);\n      publicId = getDoctypeQuotedString(scanner);\n      if (scanner.peek() !== '>') {\n        requireSpaces(scanner);\n        if (scanner.peek() !== '>') {\n          systemId = getDoctypeQuotedString(scanner);\n          skipSpaces(scanner);\n          if (scanner.peek() !== '>')\n            scanner.fatal(\"Malformed DOCTYPE\");\n        }\n      }\n    } else {\n      scanner.fatal(\"Expected PUBLIC or SYSTEM in DOCTYPE\");\n    }\n  }\n\n  // looking at `>`\n  scanner.pos++;\n  var result = { t: 'Doctype',\n                 v: scanner.input.slice(start, scanner.pos),\n                 name: name };\n\n  if (systemId)\n    result.systemId = systemId;\n  if (publicId)\n    result.publicId = publicId;\n\n  return result;\n};\n\n// The special character `{` is only allowed as the first character\n// of a Chars, so that we have a chance to detect template tags.\nvar getChars = makeRegexMatcher(/^[^&<\\u0000][^&<\\u0000{]*/);\n\nvar assertIsTemplateTag = function (x) {\n  if (! (x instanceof HTMLTools.TemplateTag))\n    throw new Error(\"Expected an instance of HTMLTools.TemplateTag\");\n  return x;\n};\n\n// Returns the next HTML token, or `null` if we reach EOF.\n//\n// Note that if we have a `getTemplateTag` function that sometimes\n// consumes characters and emits nothing (e.g. in the case of template\n// comments), we may go from not-at-EOF to at-EOF and return `null`,\n// while otherwise we always find some token to return.\ngetHTMLToken = HTMLTools.Parse.getHTMLToken = function (scanner, dataMode) {\n  var result = null;\n  if (scanner.getTemplateTag) {\n    // Try to parse a template tag by calling out to the provided\n    // `getTemplateTag` function.  If the function returns `null` but\n    // consumes characters, it must have parsed a comment or something,\n    // so we loop and try it again.  If it ever returns `null` without\n    // consuming anything, that means it didn't see anything interesting\n    // so we look for a normal token.  If it returns a truthy value,\n    // the value must be instanceof HTMLTools.TemplateTag.  We wrap it\n    // in a Special token.\n    var lastPos = scanner.pos;\n    result = scanner.getTemplateTag(\n      scanner,\n      (dataMode === 'rcdata' ? TEMPLATE_TAG_POSITION.IN_RCDATA :\n       (dataMode === 'rawtext' ? TEMPLATE_TAG_POSITION.IN_RAWTEXT :\n        TEMPLATE_TAG_POSITION.ELEMENT)));\n\n    if (result)\n      return { t: 'TemplateTag', v: assertIsTemplateTag(result) };\n    else if (scanner.pos > lastPos)\n      return null;\n  }\n\n  var chars = getChars(scanner);\n  if (chars)\n    return { t: 'Chars',\n             v: convertCRLF(chars) };\n\n  var ch = scanner.peek();\n  if (! ch)\n    return null; // EOF\n\n  if (ch === '\\u0000')\n    scanner.fatal(\"Illegal NULL character\");\n\n  if (ch === '&') {\n    if (dataMode !== 'rawtext') {\n      var charRef = getCharacterReference(scanner);\n      if (charRef)\n        return charRef;\n    }\n\n    scanner.pos++;\n    return { t: 'Chars',\n             v: '&' };\n  }\n\n  // If we're here, we're looking at `<`.\n\n  if (scanner.peek() === '<' && dataMode) {\n    // don't interpret tags\n    scanner.pos++;\n    return { t: 'Chars',\n             v: '<' };\n  }\n\n  // `getTag` will claim anything starting with `<` not followed by `!`.\n  // `getComment` takes `<!--` and getDoctype takes `<!doctype`.\n  result = (getTagToken(scanner) || getComment(scanner) || getDoctype(scanner));\n\n  if (result)\n    return result;\n\n  scanner.fatal(\"Unexpected `<!` directive.\");\n};\n\nvar getTagName = makeRegexMatcher(/^[a-zA-Z][^\\f\\n\\r\\t />{]*/);\nvar getClangle = makeRegexMatcher(/^>/);\nvar getSlash = makeRegexMatcher(/^\\//);\nvar getAttributeName = makeRegexMatcher(/^[^>/\\u0000\"'<=\\f\\n\\r\\t ][^\\f\\n\\r\\t /=>\"'<\\u0000]*/);\n\n// Try to parse `>` or `/>`, mutating `tag` to be self-closing in the latter\n// case (and failing fatally if `/` isn't followed by `>`).\n// Return tag if successful.\nvar handleEndOfTag = function (scanner, tag) {\n  if (getClangle(scanner))\n    return tag;\n\n  if (getSlash(scanner)) {\n    if (! getClangle(scanner))\n      scanner.fatal(\"Expected `>` after `/`\");\n    tag.isSelfClosing = true;\n    return tag;\n  }\n\n  return null;\n};\n\n// Scan a quoted or unquoted attribute value (omit `quote` for unquoted).\nvar getAttributeValue = function (scanner, quote) {\n  if (quote) {\n    if (scanner.peek() !== quote)\n      return null;\n    scanner.pos++;\n  }\n\n  var tokens = [];\n  var charsTokenToExtend = null;\n\n  var charRef;\n  while (true) {\n    var ch = scanner.peek();\n    var templateTag;\n    var curPos = scanner.pos;\n    if (quote && ch === quote) {\n      scanner.pos++;\n      return tokens;\n    } else if ((! quote) && (HTML_SPACE.test(ch) || ch === '>')) {\n      return tokens;\n    } else if (! ch) {\n      scanner.fatal(\"Unclosed attribute in tag\");\n    } else if (quote ? ch === '\\u0000' : ('\\u0000\"\\'<=`'.indexOf(ch) >= 0)) {\n      scanner.fatal(\"Unexpected character in attribute value\");\n    } else if (ch === '&' &&\n               (charRef = getCharacterReference(scanner, true,\n                                                quote || '>'))) {\n      tokens.push(charRef);\n      charsTokenToExtend = null;\n    } else if (scanner.getTemplateTag &&\n               ((templateTag = scanner.getTemplateTag(\n                 scanner, TEMPLATE_TAG_POSITION.IN_ATTRIBUTE)) ||\n                scanner.pos > curPos /* `{{! comment}}` */)) {\n      if (templateTag) {\n        tokens.push({t: 'TemplateTag',\n                     v: assertIsTemplateTag(templateTag)});\n        charsTokenToExtend = null;\n      }\n    } else {\n      if (! charsTokenToExtend) {\n        charsTokenToExtend = { t: 'Chars', v: '' };\n        tokens.push(charsTokenToExtend);\n      }\n      charsTokenToExtend.v += (ch === '\\r' ? '\\n' : ch);\n      scanner.pos++;\n      if (quote && ch === '\\r' && scanner.peek() === '\\n')\n        scanner.pos++;\n    }\n  }\n};\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\ngetTagToken = HTMLTools.Parse.getTagToken = function (scanner) {\n  if (! (scanner.peek() === '<' && scanner.rest().charAt(1) !== '!'))\n    return null;\n  scanner.pos++;\n\n  var tag = { t: 'Tag' };\n\n  // now looking at the character after `<`, which is not a `!`\n  if (scanner.peek() === '/') {\n    tag.isEnd = true;\n    scanner.pos++;\n  }\n\n  var tagName = getTagName(scanner);\n  if (! tagName)\n    scanner.fatal(\"Expected tag name after `<`\");\n  tag.n = HTMLTools.properCaseTagName(tagName);\n\n  if (scanner.peek() === '/' && tag.isEnd)\n    scanner.fatal(\"End tag can't have trailing slash\");\n  if (handleEndOfTag(scanner, tag))\n    return tag;\n\n  if (scanner.isEOF())\n    scanner.fatal(\"Unclosed `<`\");\n\n  if (! HTML_SPACE.test(scanner.peek()))\n    // e.g. `<a{{b}}>`\n    scanner.fatal(\"Expected space after tag name\");\n\n  // we're now in \"Before attribute name state\" of the tokenizer\n  skipSpaces(scanner);\n\n  if (scanner.peek() === '/' && tag.isEnd)\n    scanner.fatal(\"End tag can't have trailing slash\");\n  if (handleEndOfTag(scanner, tag))\n    return tag;\n\n  if (tag.isEnd)\n    scanner.fatal(\"End tag can't have attributes\");\n\n  tag.attrs = {};\n  var nondynamicAttrs = tag.attrs;\n\n  while (true) {\n    // Note: at the top of this loop, we've already skipped any spaces.\n\n    // This will be set to true if after parsing the attribute, we should\n    // require spaces (or else an end of tag, i.e. `>` or `/>`).\n    var spacesRequiredAfter = false;\n\n    // first, try for a template tag.\n    var curPos = scanner.pos;\n    var templateTag = (scanner.getTemplateTag &&\n                       scanner.getTemplateTag(\n                         scanner, TEMPLATE_TAG_POSITION.IN_START_TAG));\n    if (templateTag || (scanner.pos > curPos)) {\n      if (templateTag) {\n        if (tag.attrs === nondynamicAttrs)\n          tag.attrs = [nondynamicAttrs];\n        tag.attrs.push({ t: 'TemplateTag',\n                         v: assertIsTemplateTag(templateTag) });\n      } // else, must have scanned a `{{! comment}}`\n\n      spacesRequiredAfter = true;\n    } else {\n\n      var attributeName = getAttributeName(scanner);\n      if (! attributeName)\n        scanner.fatal(\"Expected attribute name in tag\");\n      // Throw error on `{` in attribute name.  This provides *some* error message\n      // if someone writes `<a x{{y}}>` or `<a x{{y}}=z>`.  The HTML tokenization\n      // spec doesn't say that `{` is invalid, but the DOM API (setAttribute) won't\n      // allow it, so who cares.\n      if (attributeName.indexOf('{') >= 0)\n        scanner.fatal(\"Unexpected `{` in attribute name.\");\n      attributeName = HTMLTools.properCaseAttributeName(attributeName);\n\n      if (hasOwnProperty.call(nondynamicAttrs, attributeName))\n        scanner.fatal(\"Duplicate attribute in tag: \" + attributeName);\n\n      nondynamicAttrs[attributeName] = [];\n\n      skipSpaces(scanner);\n\n      if (handleEndOfTag(scanner, tag))\n        return tag;\n\n      var ch = scanner.peek();\n      if (! ch)\n        scanner.fatal(\"Unclosed <\");\n      if ('\\u0000\"\\'<'.indexOf(ch) >= 0)\n        scanner.fatal(\"Unexpected character after attribute name in tag\");\n\n      if (ch === '=') {\n        scanner.pos++;\n\n        skipSpaces(scanner);\n\n        ch = scanner.peek();\n        if (! ch)\n          scanner.fatal(\"Unclosed <\");\n        if ('\\u0000><=`'.indexOf(ch) >= 0)\n          scanner.fatal(\"Unexpected character after = in tag\");\n\n        if ((ch === '\"') || (ch === \"'\"))\n          nondynamicAttrs[attributeName] = getAttributeValue(scanner, ch);\n        else\n          nondynamicAttrs[attributeName] = getAttributeValue(scanner);\n\n        spacesRequiredAfter = true;\n      }\n    }\n    // now we are in the \"post-attribute\" position, whether it was a template tag\n    // attribute (like `{{x}}`) or a normal one (like `x` or `x=y`).\n\n    if (handleEndOfTag(scanner, tag))\n      return tag;\n\n    if (scanner.isEOF())\n      scanner.fatal(\"Unclosed `<`\");\n\n    if (spacesRequiredAfter)\n      requireSpaces(scanner);\n    else\n      skipSpaces(scanner);\n\n    if (handleEndOfTag(scanner, tag))\n      return tag;\n  }\n};\n\nTEMPLATE_TAG_POSITION = HTMLTools.TEMPLATE_TAG_POSITION = {\n  ELEMENT: 1,\n  IN_START_TAG: 2,\n  IN_ATTRIBUTE: 3,\n  IN_RCDATA: 4,\n  IN_RAWTEXT: 5\n};\n\n// tagName must be proper case\nisLookingAtEndTag = function (scanner, tagName) {\n  var rest = scanner.rest();\n  var pos = 0; // into rest\n  var firstPart = /^<\\/([a-zA-Z]+)/.exec(rest);\n  if (firstPart &&\n      HTMLTools.properCaseTagName(firstPart[1]) === tagName) {\n    // we've seen `</foo`, now see if the end tag continues\n    pos += firstPart[0].length;\n    while (pos < rest.length && HTML_SPACE.test(rest.charAt(pos)))\n      pos++;\n    if (pos < rest.length && rest.charAt(pos) === '>')\n      return true;\n  }\n  return false;\n};\n","// _assign is like _.extend or the upcoming Object.assign.\n// Copy src's own, enumerable properties onto tgt and return\n// tgt.\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _assign = function (tgt, src) {\n  for (var k in src) {\n    if (_hasOwnProperty.call(src, k))\n      tgt[k] = src[k];\n  }\n  return tgt;\n};\n\n\nHTMLTools.TemplateTag = function (props) {\n  if (! (this instanceof HTMLTools.TemplateTag))\n    // called without `new`\n    return new HTMLTools.TemplateTag;\n\n  if (props)\n    _assign(this, props);\n};\n\n_assign(HTMLTools.TemplateTag.prototype, {\n  constructorName: 'HTMLTools.TemplateTag',\n  toJS: function (visitor) {\n    return visitor.generateCall(this.constructorName,\n                                _assign({}, this));\n  }\n});\n","\n// Parse a \"fragment\" of HTML, up to the end of the input or a particular\n// template tag (using the \"shouldStop\" option).\nHTMLTools.parseFragment = function (input, options) {\n  var scanner;\n  if (typeof input === 'string')\n    scanner = new Scanner(input);\n  else\n    // input can be a scanner.  We'd better not have a different\n    // value for the \"getTemplateTag\" option as when the scanner\n    // was created, because we don't do anything special to reset\n    // the value (which is attached to the scanner).\n    scanner = input;\n\n  // ```\n  // { getTemplateTag: function (scanner, templateTagPosition) {\n  //     if (templateTagPosition === HTMLTools.TEMPLATE_TAG_POSITION.ELEMENT) {\n  //       ...\n  // ```\n  if (options && options.getTemplateTag)\n    scanner.getTemplateTag = options.getTemplateTag;\n\n  // function (scanner) -> boolean\n  var shouldStop = options && options.shouldStop;\n\n  var result;\n  if (options && options.textMode) {\n    if (options.textMode === HTML.TEXTMODE.STRING) {\n      result = getRawText(scanner, null, shouldStop);\n    } else if (options.textMode === HTML.TEXTMODE.RCDATA) {\n      result = getRCData(scanner, null, shouldStop);\n    } else {\n      throw new Error(\"Unsupported textMode: \" + options.textMode);\n    }\n  } else {\n    result = getContent(scanner, shouldStop);\n  }\n  if (! scanner.isEOF()) {\n    // If we aren't at the end of the input, we either stopped at an unmatched\n    // HTML end tag or at a template tag (like `{{else}}` or `{{/if}}`).\n    // Detect the former case (stopped at an HTML end tag) and throw a good\n    // error.\n\n    var posBefore = scanner.pos;\n\n    try {\n      var endTag = getHTMLToken(scanner);\n    } catch (e) {\n      // ignore errors from getTemplateTag\n    }\n\n    // XXX we make some assumptions about shouldStop here, like that it\n    // won't tell us to stop at an HTML end tag.  Should refactor\n    // `shouldStop` into something more suitable.\n    if (endTag && endTag.t === 'Tag' && endTag.isEnd) {\n      var closeTag = endTag.n;\n      var isVoidElement = HTML.isVoidElement(closeTag);\n      scanner.fatal(\"Unexpected HTML close tag\" +\n                    (isVoidElement ?\n                     '.  <' + endTag.n + '> should have no close tag.' : ''));\n    }\n\n    scanner.pos = posBefore; // rewind, we'll continue parsing as usual\n\n    // If no \"shouldStop\" option was provided, we should have consumed the whole\n    // input.\n    if (! shouldStop)\n      scanner.fatal(\"Expected EOF\");\n  }\n\n  return result;\n};\n\n// Take a numeric Unicode code point, which may be larger than 16 bits,\n// and encode it as a JavaScript UTF-16 string.\n//\n// Adapted from\n// http://stackoverflow.com/questions/7126384/expressing-utf-16-unicode-characters-in-javascript/7126661.\ncodePointToString = HTMLTools.codePointToString = function(cp) {\n  if (cp >= 0 && cp <= 0xD7FF || cp >= 0xE000 && cp <= 0xFFFF) {\n    return String.fromCharCode(cp);\n  } else if (cp >= 0x10000 && cp <= 0x10FFFF) {\n\n    // we substract 0x10000 from cp to get a 20-bit number\n    // in the range 0..0xFFFF\n    cp -= 0x10000;\n\n    // we add 0xD800 to the number formed by the first 10 bits\n    // to give the first byte\n    var first = ((0xffc00 & cp) >> 10) + 0xD800;\n\n    // we add 0xDC00 to the number formed by the low 10 bits\n    // to give the second byte\n    var second = (0x3ff & cp) + 0xDC00;\n\n    return String.fromCharCode(first) + String.fromCharCode(second);\n  } else {\n    return '';\n  }\n};\n\ngetContent = HTMLTools.Parse.getContent = function (scanner, shouldStopFunc) {\n  var items = [];\n\n  while (! scanner.isEOF()) {\n    if (shouldStopFunc && shouldStopFunc(scanner))\n      break;\n\n    var posBefore = scanner.pos;\n    var token = getHTMLToken(scanner);\n    if (! token)\n      // tokenizer reached EOF on its own, e.g. while scanning\n      // template comments like `{{! foo}}`.\n      continue;\n\n    if (token.t === 'Doctype') {\n      scanner.fatal(\"Unexpected Doctype\");\n    } else if (token.t === 'Chars') {\n      pushOrAppendString(items, token.v);\n    } else if (token.t === 'CharRef') {\n      items.push(convertCharRef(token));\n    } else if (token.t === 'Comment') {\n      items.push(HTML.Comment(token.v));\n    } else if (token.t === 'TemplateTag') {\n      items.push(token.v);\n    } else if (token.t === 'Tag') {\n      if (token.isEnd) {\n        // Stop when we encounter an end tag at the top level.\n        // Rewind; we'll re-parse the end tag later.\n        scanner.pos = posBefore;\n        break;\n      }\n\n      var tagName = token.n;\n      // is this an element with no close tag (a BR, HR, IMG, etc.) based\n      // on its name?\n      var isVoid = HTML.isVoidElement(tagName);\n      if (token.isSelfClosing) {\n        if (! (isVoid || HTML.isKnownSVGElement(tagName) || tagName.indexOf(':') >= 0))\n          scanner.fatal('Only certain elements like BR, HR, IMG, etc. (and foreign elements like SVG) are allowed to self-close');\n      }\n\n      // result of parseAttrs may be null\n      var attrs = parseAttrs(token.attrs);\n      // arrays need to be wrapped in HTML.Attrs(...)\n      // when used to construct tags\n      if (HTML.isArray(attrs))\n        attrs = HTML.Attrs.apply(null, attrs);\n\n      var tagFunc = HTML.getTag(tagName);\n      if (isVoid || token.isSelfClosing) {\n        items.push(attrs ? tagFunc(attrs) : tagFunc());\n      } else {\n        // parse HTML tag contents.\n\n        // HTML treats a final `/` in a tag as part of an attribute, as in `<a href=/foo/>`, but the template author who writes `<circle r={{r}}/>`, say, may not be thinking about that, so generate a good error message in the \"looks like self-close\" case.\n        var looksLikeSelfClose = (scanner.input.substr(scanner.pos - 2, 2) === '/>');\n\n        var content = null;\n        if (token.n === 'textarea') {\n          if (scanner.peek() === '\\n')\n            scanner.pos++;\n          var textareaValue = getRCData(scanner, token.n, shouldStopFunc);\n          if (textareaValue) {\n            if (attrs instanceof HTML.Attrs) {\n              attrs = HTML.Attrs.apply(\n                null, attrs.value.concat([{value: textareaValue}]));\n            } else {\n              attrs = (attrs || {});\n              attrs.value = textareaValue;\n            }\n          }\n        } else if (token.n === 'script' || token.n === 'style') {\n          content = getRawText(scanner, token.n, shouldStopFunc);\n        } else {\n          content = getContent(scanner, shouldStopFunc);\n        }\n\n        var endTag = getHTMLToken(scanner);\n\n        if (! (endTag && endTag.t === 'Tag' && endTag.isEnd && endTag.n === tagName))\n          scanner.fatal('Expected \"' + tagName + '\" end tag' + (looksLikeSelfClose ? ' -- if the \"<' + token.n + ' />\" tag was supposed to self-close, try adding a space before the \"/\"' : ''));\n\n        // XXX support implied end tags in cases allowed by the spec\n\n        // make `content` into an array suitable for applying tag constructor\n        // as in `FOO.apply(null, content)`.\n        if (content == null)\n          content = [];\n        else if (! (content instanceof Array))\n          content = [content];\n\n        items.push(HTML.getTag(tagName).apply(\n          null, (attrs ? [attrs] : []).concat(content)));\n      }\n    } else {\n      scanner.fatal(\"Unknown token type: \" + token.t);\n    }\n  }\n\n  if (items.length === 0)\n    return null;\n  else if (items.length === 1)\n    return items[0];\n  else\n    return items;\n};\n\nvar pushOrAppendString = function (items, string) {\n  if (items.length &&\n      typeof items[items.length - 1] === 'string')\n    items[items.length - 1] += string;\n  else\n    items.push(string);\n};\n\n// get RCDATA to go in the lowercase (or camel case) tagName (e.g. \"textarea\")\ngetRCData = HTMLTools.Parse.getRCData = function (scanner, tagName, shouldStopFunc) {\n  var items = [];\n\n  while (! scanner.isEOF()) {\n    // break at appropriate end tag\n    if (tagName && isLookingAtEndTag(scanner, tagName))\n      break;\n\n    if (shouldStopFunc && shouldStopFunc(scanner))\n      break;\n\n    var token = getHTMLToken(scanner, 'rcdata');\n    if (! token)\n      // tokenizer reached EOF on its own, e.g. while scanning\n      // template comments like `{{! foo}}`.\n      continue;\n\n    if (token.t === 'Chars') {\n      pushOrAppendString(items, token.v);\n    } else if (token.t === 'CharRef') {\n      items.push(convertCharRef(token));\n    } else if (token.t === 'TemplateTag') {\n      items.push(token.v);\n    } else {\n      // (can't happen)\n      scanner.fatal(\"Unknown or unexpected token type: \" + token.t);\n    }\n  }\n\n  if (items.length === 0)\n    return null;\n  else if (items.length === 1)\n    return items[0];\n  else\n    return items;\n};\n\nvar getRawText = function (scanner, tagName, shouldStopFunc) {\n  var items = [];\n\n  while (! scanner.isEOF()) {\n    // break at appropriate end tag\n    if (tagName && isLookingAtEndTag(scanner, tagName))\n      break;\n\n    if (shouldStopFunc && shouldStopFunc(scanner))\n      break;\n\n    var token = getHTMLToken(scanner, 'rawtext');\n    if (! token)\n      // tokenizer reached EOF on its own, e.g. while scanning\n      // template comments like `{{! foo}}`.\n      continue;\n\n    if (token.t === 'Chars') {\n      pushOrAppendString(items, token.v);\n    } else if (token.t === 'TemplateTag') {\n      items.push(token.v);\n    } else {\n      // (can't happen)\n      scanner.fatal(\"Unknown or unexpected token type: \" + token.t);\n    }\n  }\n\n  if (items.length === 0)\n    return null;\n  else if (items.length === 1)\n    return items[0];\n  else\n    return items;\n};\n\n// Input: A token like `{ t: 'CharRef', v: '&amp;', cp: [38] }`.\n//\n// Output: A tag like `HTML.CharRef({ html: '&amp;', str: '&' })`.\nvar convertCharRef = function (token) {\n  var codePoints = token.cp;\n  var str = '';\n  for (var i = 0; i < codePoints.length; i++)\n    str += codePointToString(codePoints[i]);\n  return HTML.CharRef({ html: token.v, str: str });\n};\n\n// Input is always a dictionary (even if zero attributes) and each\n// value in the dictionary is an array of `Chars`, `CharRef`,\n// and maybe `TemplateTag` tokens.\n//\n// Output is null if there are zero attributes, and otherwise a\n// dictionary, or an array of dictionaries and template tags.\n// Each value in the dictionary is HTMLjs (e.g. a\n// string or an array of `Chars`, `CharRef`, and `TemplateTag`\n// nodes).\n//\n// An attribute value with no input tokens is represented as \"\",\n// not an empty array, in order to prop open empty attributes\n// with no template tags.\nvar parseAttrs = function (attrs) {\n  var result = null;\n\n  if (HTML.isArray(attrs)) {\n    // first element is nondynamic attrs, rest are template tags\n    var nondynamicAttrs = parseAttrs(attrs[0]);\n    if (nondynamicAttrs) {\n      result = (result || []);\n      result.push(nondynamicAttrs);\n    }\n    for (var i = 1; i < attrs.length; i++) {\n      var token = attrs[i];\n      if (token.t !== 'TemplateTag')\n        throw new Error(\"Expected TemplateTag token\");\n      result = (result || []);\n      result.push(token.v);\n    }\n    return result;\n  }\n\n  for (var k in attrs) {\n    if (! result)\n      result = {};\n\n    var inValue = attrs[k];\n    var outParts = [];\n    for (var i = 0; i < inValue.length; i++) {\n      var token = inValue[i];\n      if (token.t === 'CharRef') {\n        outParts.push(convertCharRef(token));\n      } else if (token.t === 'TemplateTag') {\n        outParts.push(token.v);\n      } else if (token.t === 'Chars') {\n        pushOrAppendString(outParts, token.v);\n      }\n    }\n\n    var outValue = (inValue.length === 0 ? '' :\n                    (outParts.length === 1 ? outParts[0] : outParts));\n    var properKey = HTMLTools.properCaseAttributeName(k);\n    result[properKey] = outValue;\n  }\n\n  return result;\n};\n"]}}]