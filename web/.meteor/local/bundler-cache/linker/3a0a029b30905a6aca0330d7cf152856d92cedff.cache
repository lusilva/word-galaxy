[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar check, Match;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/check/match.js                                                                            //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n// XXX docs                                                                                           // 1\n                                                                                                      // 2\n// Things we explicitly do NOT support:                                                               // 3\n//    - heterogenous arrays                                                                           // 4\n                                                                                                      // 5\nvar currentArgumentChecker = new Meteor.EnvironmentVariable;                                          // 6\n                                                                                                      // 7\n/**                                                                                                   // 8\n * @summary Check that a value matches a [pattern](#matchpatterns).                                   // 9\n * If the value does not match the pattern, throw a `Match.Error`.                                    // 10\n *                                                                                                    // 11\n * Particularly useful to assert that arguments to a function have the right                          // 12\n * types and structure.                                                                               // 13\n * @locus Anywhere                                                                                    // 14\n * @param {Any} value The value to check                                                              // 15\n * @param {MatchPattern} pattern The pattern to match                                                 // 16\n * `value` against                                                                                    // 17\n */                                                                                                   // 18\ncheck = function (value, pattern) {                                                                   // 19\n  // Record that check got called, if somebody cared.                                                 // 20\n  //                                                                                                  // 21\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()                                   // 22\n  // from non-Fiber server contexts; the downside is that if you forget to                            // 23\n  // bindEnvironment on some random callback in your method/publisher,                                // 24\n  // it might not find the argumentChecker and you'll get an error about                              // 25\n  // not checking an argument that it looks like you're checking (instead                             // 26\n  // of just getting a \"Node code must run in a Fiber\" error).                                        // 27\n  var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();                                  // 28\n  if (argChecker)                                                                                     // 29\n    argChecker.checking(value);                                                                       // 30\n  var result = testSubtree(value, pattern);                                                           // 31\n  if (result) {                                                                                       // 32\n    var err = new Match.Error(result.message);                                                        // 33\n    if (result.path) {                                                                                // 34\n      err.message += \" in field \" + result.path;                                                      // 35\n      err.path = result.path;                                                                         // 36\n    }                                                                                                 // 37\n    throw err;                                                                                        // 38\n  }                                                                                                   // 39\n};                                                                                                    // 40\n                                                                                                      // 41\n/**                                                                                                   // 42\n * @namespace Match                                                                                   // 43\n * @summary The namespace for all Match types and methods.                                            // 44\n */                                                                                                   // 45\nMatch = {                                                                                             // 46\n  Optional: function (pattern) {                                                                      // 47\n    return new Optional(pattern);                                                                     // 48\n  },                                                                                                  // 49\n  OneOf: function (/*arguments*/) {                                                                   // 50\n    return new OneOf(_.toArray(arguments));                                                           // 51\n  },                                                                                                  // 52\n  Any: ['__any__'],                                                                                   // 53\n  Where: function (condition) {                                                                       // 54\n    return new Where(condition);                                                                      // 55\n  },                                                                                                  // 56\n  ObjectIncluding: function (pattern) {                                                               // 57\n    return new ObjectIncluding(pattern);                                                              // 58\n  },                                                                                                  // 59\n  ObjectWithValues: function (pattern) {                                                              // 60\n    return new ObjectWithValues(pattern);                                                             // 61\n  },                                                                                                  // 62\n  // Matches only signed 32-bit integers                                                              // 63\n  Integer: ['__integer__'],                                                                           // 64\n                                                                                                      // 65\n  // XXX matchers should know how to describe themselves for errors                                   // 66\n  Error: Meteor.makeErrorType(\"Match.Error\", function (msg) {                                         // 67\n    this.message = \"Match error: \" + msg;                                                             // 68\n    // The path of the value that failed to match. Initially empty, this gets                         // 69\n    // populated by catching and rethrowing the exception as it goes back up the                      // 70\n    // stack.                                                                                         // 71\n    // E.g.: \"vals[3].entity.created\"                                                                 // 72\n    this.path = \"\";                                                                                   // 73\n    // If this gets sent over DDP, don't give full internal details but at least                      // 74\n    // provide something better than 500 Internal server error.                                       // 75\n    this.sanitizedError = new Meteor.Error(400, \"Match failed\");                                      // 76\n  }),                                                                                                 // 77\n                                                                                                      // 78\n  // Tests to see if value matches pattern. Unlike check, it merely returns true                      // 79\n  // or false (unless an error other than Match.Error was thrown). It does not                        // 80\n  // interact with _failIfArgumentsAreNotAllChecked.                                                  // 81\n  // XXX maybe also implement a Match.match which returns more information about                      // 82\n  //     failures but without using exception handling or doing what check()                          // 83\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion                       // 84\n                                                                                                      // 85\n  /**                                                                                                 // 86\n   * @summary Returns true if the value matches the pattern.                                          // 87\n   * @locus Anywhere                                                                                  // 88\n   * @param {Any} value The value to check                                                            // 89\n   * @param {MatchPattern} pattern The pattern to match `value` against                               // 90\n   */                                                                                                 // 91\n  test: function (value, pattern) {                                                                   // 92\n    return !testSubtree(value, pattern);                                                              // 93\n  },                                                                                                  // 94\n                                                                                                      // 95\n  // Runs `f.apply(context, args)`. If check() is not called on every element of                      // 96\n  // `args` (either directly or in the first level of an array), throws an error                      // 97\n  // (using `description` in the message).                                                            // 98\n  //                                                                                                  // 99\n  _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {                        // 100\n    var argChecker = new ArgumentChecker(args, description);                                          // 101\n    var result = currentArgumentChecker.withValue(argChecker, function () {                           // 102\n      return f.apply(context, args);                                                                  // 103\n    });                                                                                               // 104\n    // If f didn't itself throw, make sure it checked all of its arguments.                           // 105\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();                                              // 106\n    return result;                                                                                    // 107\n  }                                                                                                   // 108\n};                                                                                                    // 109\n                                                                                                      // 110\nvar Optional = function (pattern) {                                                                   // 111\n  this.pattern = pattern;                                                                             // 112\n};                                                                                                    // 113\n                                                                                                      // 114\nvar OneOf = function (choices) {                                                                      // 115\n  if (_.isEmpty(choices))                                                                             // 116\n    throw new Error(\"Must provide at least one choice to Match.OneOf\");                               // 117\n  this.choices = choices;                                                                             // 118\n};                                                                                                    // 119\n                                                                                                      // 120\nvar Where = function (condition) {                                                                    // 121\n  this.condition = condition;                                                                         // 122\n};                                                                                                    // 123\n                                                                                                      // 124\nvar ObjectIncluding = function (pattern) {                                                            // 125\n  this.pattern = pattern;                                                                             // 126\n};                                                                                                    // 127\n                                                                                                      // 128\nvar ObjectWithValues = function (pattern) {                                                           // 129\n  this.pattern = pattern;                                                                             // 130\n};                                                                                                    // 131\n                                                                                                      // 132\nvar typeofChecks = [                                                                                  // 133\n  [String, \"string\"],                                                                                 // 134\n  [Number, \"number\"],                                                                                 // 135\n  [Boolean, \"boolean\"],                                                                               // 136\n  // While we don't allow undefined in EJSON, this is good for optional                               // 137\n  // arguments with OneOf.                                                                            // 138\n  [undefined, \"undefined\"]                                                                            // 139\n];                                                                                                    // 140\n                                                                                                      // 141\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.     // 142\nvar testSubtree = function (value, pattern) {                                                         // 143\n  // Match anything!                                                                                  // 144\n  if (pattern === Match.Any)                                                                          // 145\n    return false;                                                                                     // 146\n                                                                                                      // 147\n  // Basic atomic types.                                                                              // 148\n  // Do not match boxed objects (e.g. String, Boolean)                                                // 149\n  for (var i = 0; i < typeofChecks.length; ++i) {                                                     // 150\n    if (pattern === typeofChecks[i][0]) {                                                             // 151\n      if (typeof value === typeofChecks[i][1])                                                        // 152\n        return false;                                                                                 // 153\n      return {                                                                                        // 154\n        message: \"Expected \" + typeofChecks[i][1] + \", got \" + typeof value,                          // 155\n        path: \"\"                                                                                      // 156\n      };                                                                                              // 157\n    }                                                                                                 // 158\n  }                                                                                                   // 159\n  if (pattern === null) {                                                                             // 160\n    if (value === null)                                                                               // 161\n      return false;                                                                                   // 162\n    return {                                                                                          // 163\n      message: \"Expected null, got \" + EJSON.stringify(value),                                        // 164\n      path: \"\"                                                                                        // 165\n    };                                                                                                // 166\n  }                                                                                                   // 167\n                                                                                                      // 168\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.                      // 169\n  if (typeof pattern === \"string\" || typeof pattern === \"number\" || typeof pattern === \"boolean\") {   // 170\n    if (value === pattern)                                                                            // 171\n      return false;                                                                                   // 172\n    return {                                                                                          // 173\n      message: \"Expected \" + pattern + \", got \" + EJSON.stringify(value),                             // 174\n      path: \"\"                                                                                        // 175\n    };                                                                                                // 176\n  }                                                                                                   // 177\n                                                                                                      // 178\n  // Match.Integer is special type encoded with array                                                 // 179\n  if (pattern === Match.Integer) {                                                                    // 180\n    // There is no consistent and reliable way to check if variable is a 64-bit                       // 181\n    // integer. One of the popular solutions is to get reminder of division by 1                      // 182\n    // but this method fails on really large floats with big precision.                               // 183\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8                                                    // 184\n    // Bitwise operators work consistantly but always cast variable to 32-bit                         // 185\n    // signed integer according to JavaScript specs.                                                  // 186\n    if (typeof value === \"number\" && (value | 0) === value)                                           // 187\n      return false;                                                                                   // 188\n    return {                                                                                          // 189\n      message: \"Expected Integer, got \" + (value instanceof Object ? EJSON.stringify(value) : value),\n      path: \"\"                                                                                        // 191\n    };                                                                                                // 192\n  }                                                                                                   // 193\n                                                                                                      // 194\n  // \"Object\" is shorthand for Match.ObjectIncluding({});                                             // 195\n  if (pattern === Object)                                                                             // 196\n    pattern = Match.ObjectIncluding({});                                                              // 197\n                                                                                                      // 198\n  // Array (checked AFTER Any, which is implemented as an Array).                                     // 199\n  if (pattern instanceof Array) {                                                                     // 200\n    if (pattern.length !== 1) {                                                                       // 201\n      return {                                                                                        // 202\n        message: \"Bad pattern: arrays must have one type element\" + EJSON.stringify(pattern),         // 203\n        path: \"\"                                                                                      // 204\n      };                                                                                              // 205\n    }                                                                                                 // 206\n    if (!_.isArray(value) && !_.isArguments(value)) {                                                 // 207\n      return {                                                                                        // 208\n        message: \"Expected array, got \" + EJSON.stringify(value),                                     // 209\n        path: \"\"                                                                                      // 210\n      };                                                                                              // 211\n    }                                                                                                 // 212\n                                                                                                      // 213\n    for (var i = 0, length = value.length; i < length; i++) {                                         // 214\n      var result = testSubtree(value[i], pattern[0]);                                                 // 215\n      if (result) {                                                                                   // 216\n        result.path = _prependPath(i, result.path);                                                   // 217\n        return result;                                                                                // 218\n      }                                                                                               // 219\n    }                                                                                                 // 220\n    return false;                                                                                     // 221\n  }                                                                                                   // 222\n                                                                                                      // 223\n  // Arbitrary validation checks. The condition can return false or throw a                           // 224\n  // Match.Error (ie, it can internally use check()) to fail.                                         // 225\n  if (pattern instanceof Where) {                                                                     // 226\n    var result;                                                                                       // 227\n    try {                                                                                             // 228\n      result = pattern.condition(value);                                                              // 229\n    } catch (err) {                                                                                   // 230\n      if (!(err instanceof Match.Error))                                                              // 231\n        throw err;                                                                                    // 232\n      return {                                                                                        // 233\n        message: err.message,                                                                         // 234\n        path: err.path                                                                                // 235\n      };                                                                                              // 236\n    }                                                                                                 // 237\n    if (pattern.condition(value))                                                                     // 238\n      return false;                                                                                   // 239\n    // XXX this error is terrible                                                                     // 240\n    return {                                                                                          // 241\n      message: \"Failed Match.Where validation\",                                                       // 242\n      path: \"\"                                                                                        // 243\n    };                                                                                                // 244\n  }                                                                                                   // 245\n                                                                                                      // 246\n                                                                                                      // 247\n  if (pattern instanceof Optional)                                                                    // 248\n    pattern = Match.OneOf(undefined, pattern.pattern);                                                // 249\n                                                                                                      // 250\n  if (pattern instanceof OneOf) {                                                                     // 251\n    for (var i = 0; i < pattern.choices.length; ++i) {                                                // 252\n      var result = testSubtree(value, pattern.choices[i]);                                            // 253\n      if (!result) {                                                                                  // 254\n        // No error? Yay, return.                                                                     // 255\n        return false;                                                                                 // 256\n      }                                                                                               // 257\n      // Match errors just mean try another choice.                                                   // 258\n    }                                                                                                 // 259\n    // XXX this error is terrible                                                                     // 260\n    return {                                                                                          // 261\n      message: \"Failed Match.OneOf or Match.Optional validation\",                                     // 262\n      path: \"\"                                                                                        // 263\n    };                                                                                                // 264\n  }                                                                                                   // 265\n                                                                                                      // 266\n  // A function that isn't something we special-case is assumed to be a                               // 267\n  // constructor.                                                                                     // 268\n  if (pattern instanceof Function) {                                                                  // 269\n    if (value instanceof pattern)                                                                     // 270\n      return false;                                                                                   // 271\n    return {                                                                                          // 272\n      message: \"Expected \" + (pattern.name ||\"particular constructor\"),                               // 273\n      path: \"\"                                                                                        // 274\n    };                                                                                                // 275\n  }                                                                                                   // 276\n                                                                                                      // 277\n  var unknownKeysAllowed = false;                                                                     // 278\n  var unknownKeyPattern;                                                                              // 279\n  if (pattern instanceof ObjectIncluding) {                                                           // 280\n    unknownKeysAllowed = true;                                                                        // 281\n    pattern = pattern.pattern;                                                                        // 282\n  }                                                                                                   // 283\n  if (pattern instanceof ObjectWithValues) {                                                          // 284\n    unknownKeysAllowed = true;                                                                        // 285\n    unknownKeyPattern = [pattern.pattern];                                                            // 286\n    pattern = {};  // no required keys                                                                // 287\n  }                                                                                                   // 288\n                                                                                                      // 289\n  if (typeof pattern !== \"object\") {                                                                  // 290\n    return {                                                                                          // 291\n      message: \"Bad pattern: unknown pattern type\",                                                   // 292\n      path: \"\"                                                                                        // 293\n    };                                                                                                // 294\n  }                                                                                                   // 295\n                                                                                                      // 296\n  // An object, with required and optional keys. Note that this does NOT do                           // 297\n  // structural matches against objects of special types that happen to match                         // 298\n  // the pattern: this really needs to be a plain old {Object}!                                       // 299\n  if (typeof value !== 'object') {                                                                    // 300\n    return {                                                                                          // 301\n      message: \"Expected object, got \" + typeof value,                                                // 302\n      path: \"\"                                                                                        // 303\n    };                                                                                                // 304\n  }                                                                                                   // 305\n  if (value === null) {                                                                               // 306\n    return {                                                                                          // 307\n      message: \"Expected object, got null\",                                                           // 308\n      path: \"\"                                                                                        // 309\n    };                                                                                                // 310\n  }                                                                                                   // 311\n  if (value.constructor !== Object) {                                                                 // 312\n    return {                                                                                          // 313\n      message: \"Expected plain object\",                                                               // 314\n      path: \"\"                                                                                        // 315\n    };                                                                                                // 316\n  }                                                                                                   // 317\n                                                                                                      // 318\n  var requiredPatterns = {};                                                                          // 319\n  var optionalPatterns = {};                                                                          // 320\n  _.each(pattern, function (subPattern, key) {                                                        // 321\n    if (subPattern instanceof Optional)                                                               // 322\n      optionalPatterns[key] = subPattern.pattern;                                                     // 323\n    else                                                                                              // 324\n      requiredPatterns[key] = subPattern;                                                             // 325\n  });                                                                                                 // 326\n                                                                                                      // 327\n  for (var keys = _.keys(value), i = 0, length = keys.length; i < length; i++) {                      // 328\n    var key = keys[i];                                                                                // 329\n    var subValue = value[key];                                                                        // 330\n    if (_.has(requiredPatterns, key)) {                                                               // 331\n      var result = testSubtree(subValue, requiredPatterns[key]);                                      // 332\n      if (result) {                                                                                   // 333\n        result.path = _prependPath(key, result.path);                                                 // 334\n        return result;                                                                                // 335\n      }                                                                                               // 336\n      delete requiredPatterns[key];                                                                   // 337\n    } else if (_.has(optionalPatterns, key)) {                                                        // 338\n      var result = testSubtree(subValue, optionalPatterns[key]);                                      // 339\n      if (result) {                                                                                   // 340\n        result.path = _prependPath(key, result.path);                                                 // 341\n        return result;                                                                                // 342\n      }                                                                                               // 343\n    } else {                                                                                          // 344\n      if (!unknownKeysAllowed) {                                                                      // 345\n        return {                                                                                      // 346\n          message: \"Unknown key\",                                                                     // 347\n          path: key                                                                                   // 348\n        };                                                                                            // 349\n      }                                                                                               // 350\n      if (unknownKeyPattern) {                                                                        // 351\n        var result = testSubtree(subValue, unknownKeyPattern[0]);                                     // 352\n        if (result) {                                                                                 // 353\n          result.path = _prependPath(key, result.path);                                               // 354\n          return result;                                                                              // 355\n        }                                                                                             // 356\n      }                                                                                               // 357\n    }                                                                                                 // 358\n  }                                                                                                   // 359\n                                                                                                      // 360\n  var keys = _.keys(requiredPatterns);                                                                // 361\n  if (keys.length) {                                                                                  // 362\n    return {                                                                                          // 363\n      message: \"Missing key '\" + keys[0] + \"'\",                                                       // 364\n      path: \"\"                                                                                        // 365\n    };                                                                                                // 366\n  }                                                                                                   // 367\n};                                                                                                    // 368\n                                                                                                      // 369\nvar ArgumentChecker = function (args, description) {                                                  // 370\n  var self = this;                                                                                    // 371\n  // Make a SHALLOW copy of the arguments. (We'll be doing identity checks                            // 372\n  // against its contents.)                                                                           // 373\n  self.args = _.clone(args);                                                                          // 374\n  // Since the common case will be to check arguments in order, and we splice                         // 375\n  // out arguments when we check them, make it so we splice out from the end                          // 376\n  // rather than the beginning.                                                                       // 377\n  self.args.reverse();                                                                                // 378\n  self.description = description;                                                                     // 379\n};                                                                                                    // 380\n                                                                                                      // 381\n_.extend(ArgumentChecker.prototype, {                                                                 // 382\n  checking: function (value) {                                                                        // 383\n    var self = this;                                                                                  // 384\n    if (self._checkingOneValue(value))                                                                // 385\n      return;                                                                                         // 386\n    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])                        // 387\n    // or check([foo, bar], [String]) to count... but only if value wasn't                            // 388\n    // itself an argument.                                                                            // 389\n    if (_.isArray(value) || _.isArguments(value)) {                                                   // 390\n      _.each(value, _.bind(self._checkingOneValue, self));                                            // 391\n    }                                                                                                 // 392\n  },                                                                                                  // 393\n  _checkingOneValue: function (value) {                                                               // 394\n    var self = this;                                                                                  // 395\n    for (var i = 0; i < self.args.length; ++i) {                                                      // 396\n      // Is this value one of the arguments? (This can have a false positive if                       // 397\n      // the argument is an interned primitive, but it's still a good enough                          // 398\n      // check.)                                                                                      // 399\n      // (NaN is not === to itself, so we have to check specially.)                                   // 400\n      if (value === self.args[i] || (_.isNaN(value) && _.isNaN(self.args[i]))) {                      // 401\n        self.args.splice(i, 1);                                                                       // 402\n        return true;                                                                                  // 403\n      }                                                                                               // 404\n    }                                                                                                 // 405\n    return false;                                                                                     // 406\n  },                                                                                                  // 407\n  throwUnlessAllArgumentsHaveBeenChecked: function () {                                               // 408\n    var self = this;                                                                                  // 409\n    if (!_.isEmpty(self.args))                                                                        // 410\n      throw new Error(\"Did not check() all arguments during \" +                                       // 411\n                      self.description);                                                              // 412\n  }                                                                                                   // 413\n});                                                                                                   // 414\n                                                                                                      // 415\nvar _jsKeywords = [\"do\", \"if\", \"in\", \"for\", \"let\", \"new\", \"try\", \"var\", \"case\",                       // 416\n  \"else\", \"enum\", \"eval\", \"false\", \"null\", \"this\", \"true\", \"void\", \"with\",                            // 417\n  \"break\", \"catch\", \"class\", \"const\", \"super\", \"throw\", \"while\", \"yield\",                             // 418\n  \"delete\", \"export\", \"import\", \"public\", \"return\", \"static\", \"switch\",                               // 419\n  \"typeof\", \"default\", \"extends\", \"finally\", \"package\", \"private\", \"continue\",                        // 420\n  \"debugger\", \"function\", \"arguments\", \"interface\", \"protected\", \"implements\",                        // 421\n  \"instanceof\"];                                                                                      // 422\n                                                                                                      // 423\n// Assumes the base of path is already escaped properly                                               // 424\n// returns key + base                                                                                 // 425\nvar _prependPath = function (key, base) {                                                             // 426\n  if ((typeof key) === \"number\" || key.match(/^[0-9]+$/))                                             // 427\n    key = \"[\" + key + \"]\";                                                                            // 428\n  else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key))                       // 429\n    key = JSON.stringify([key]);                                                                      // 430\n                                                                                                      // 431\n  if (base && base[0] !== \"[\")                                                                        // 432\n    return key + '.' + base;                                                                          // 433\n  return key + base;                                                                                  // 434\n};                                                                                                    // 435\n                                                                                                      // 436\n                                                                                                      // 437\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.check = {\n  check: check,\n  Match: Match\n};\n\n})();\n","servePath":"/packages/check.js","sourceMap":{"version":3,"sources":["/packages/check/match.js"],"names":[],"mappingsfile":"/packages/check.js","sourcesContent":["// XXX docs\n\n// Things we explicitly do NOT support:\n//    - heterogenous arrays\n\nvar currentArgumentChecker = new Meteor.EnvironmentVariable;\n\n/**\n * @summary Check that a value matches a [pattern](#matchpatterns).\n * If the value does not match the pattern, throw a `Match.Error`.\n *\n * Particularly useful to assert that arguments to a function have the right\n * types and structure.\n * @locus Anywhere\n * @param {Any} value The value to check\n * @param {MatchPattern} pattern The pattern to match\n * `value` against\n */\ncheck = function (value, pattern) {\n  // Record that check got called, if somebody cared.\n  //\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()\n  // from non-Fiber server contexts; the downside is that if you forget to\n  // bindEnvironment on some random callback in your method/publisher,\n  // it might not find the argumentChecker and you'll get an error about\n  // not checking an argument that it looks like you're checking (instead\n  // of just getting a \"Node code must run in a Fiber\" error).\n  var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();\n  if (argChecker)\n    argChecker.checking(value);\n  var result = testSubtree(value, pattern);\n  if (result) {\n    var err = new Match.Error(result.message);\n    if (result.path) {\n      err.message += \" in field \" + result.path;\n      err.path = result.path;\n    }\n    throw err;\n  }\n};\n\n/**\n * @namespace Match\n * @summary The namespace for all Match types and methods.\n */\nMatch = {\n  Optional: function (pattern) {\n    return new Optional(pattern);\n  },\n  OneOf: function (/*arguments*/) {\n    return new OneOf(_.toArray(arguments));\n  },\n  Any: ['__any__'],\n  Where: function (condition) {\n    return new Where(condition);\n  },\n  ObjectIncluding: function (pattern) {\n    return new ObjectIncluding(pattern);\n  },\n  ObjectWithValues: function (pattern) {\n    return new ObjectWithValues(pattern);\n  },\n  // Matches only signed 32-bit integers\n  Integer: ['__integer__'],\n\n  // XXX matchers should know how to describe themselves for errors\n  Error: Meteor.makeErrorType(\"Match.Error\", function (msg) {\n    this.message = \"Match error: \" + msg;\n    // The path of the value that failed to match. Initially empty, this gets\n    // populated by catching and rethrowing the exception as it goes back up the\n    // stack.\n    // E.g.: \"vals[3].entity.created\"\n    this.path = \"\";\n    // If this gets sent over DDP, don't give full internal details but at least\n    // provide something better than 500 Internal server error.\n    this.sanitizedError = new Meteor.Error(400, \"Match failed\");\n  }),\n\n  // Tests to see if value matches pattern. Unlike check, it merely returns true\n  // or false (unless an error other than Match.Error was thrown). It does not\n  // interact with _failIfArgumentsAreNotAllChecked.\n  // XXX maybe also implement a Match.match which returns more information about\n  //     failures but without using exception handling or doing what check()\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion\n\n  /**\n   * @summary Returns true if the value matches the pattern.\n   * @locus Anywhere\n   * @param {Any} value The value to check\n   * @param {MatchPattern} pattern The pattern to match `value` against\n   */\n  test: function (value, pattern) {\n    return !testSubtree(value, pattern);\n  },\n\n  // Runs `f.apply(context, args)`. If check() is not called on every element of\n  // `args` (either directly or in the first level of an array), throws an error\n  // (using `description` in the message).\n  //\n  _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {\n    var argChecker = new ArgumentChecker(args, description);\n    var result = currentArgumentChecker.withValue(argChecker, function () {\n      return f.apply(context, args);\n    });\n    // If f didn't itself throw, make sure it checked all of its arguments.\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();\n    return result;\n  }\n};\n\nvar Optional = function (pattern) {\n  this.pattern = pattern;\n};\n\nvar OneOf = function (choices) {\n  if (_.isEmpty(choices))\n    throw new Error(\"Must provide at least one choice to Match.OneOf\");\n  this.choices = choices;\n};\n\nvar Where = function (condition) {\n  this.condition = condition;\n};\n\nvar ObjectIncluding = function (pattern) {\n  this.pattern = pattern;\n};\n\nvar ObjectWithValues = function (pattern) {\n  this.pattern = pattern;\n};\n\nvar typeofChecks = [\n  [String, \"string\"],\n  [Number, \"number\"],\n  [Boolean, \"boolean\"],\n  // While we don't allow undefined in EJSON, this is good for optional\n  // arguments with OneOf.\n  [undefined, \"undefined\"]\n];\n\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.\nvar testSubtree = function (value, pattern) {\n  // Match anything!\n  if (pattern === Match.Any)\n    return false;\n\n  // Basic atomic types.\n  // Do not match boxed objects (e.g. String, Boolean)\n  for (var i = 0; i < typeofChecks.length; ++i) {\n    if (pattern === typeofChecks[i][0]) {\n      if (typeof value === typeofChecks[i][1])\n        return false;\n      return {\n        message: \"Expected \" + typeofChecks[i][1] + \", got \" + typeof value,\n        path: \"\"\n      };\n    }\n  }\n  if (pattern === null) {\n    if (value === null)\n      return false;\n    return {\n      message: \"Expected null, got \" + EJSON.stringify(value),\n      path: \"\"\n    };\n  }\n\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.\n  if (typeof pattern === \"string\" || typeof pattern === \"number\" || typeof pattern === \"boolean\") {\n    if (value === pattern)\n      return false;\n    return {\n      message: \"Expected \" + pattern + \", got \" + EJSON.stringify(value),\n      path: \"\"\n    };\n  }\n\n  // Match.Integer is special type encoded with array\n  if (pattern === Match.Integer) {\n    // There is no consistent and reliable way to check if variable is a 64-bit\n    // integer. One of the popular solutions is to get reminder of division by 1\n    // but this method fails on really large floats with big precision.\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8\n    // Bitwise operators work consistantly but always cast variable to 32-bit\n    // signed integer according to JavaScript specs.\n    if (typeof value === \"number\" && (value | 0) === value)\n      return false;\n    return {\n      message: \"Expected Integer, got \" + (value instanceof Object ? EJSON.stringify(value) : value),\n      path: \"\"\n    };\n  }\n\n  // \"Object\" is shorthand for Match.ObjectIncluding({});\n  if (pattern === Object)\n    pattern = Match.ObjectIncluding({});\n\n  // Array (checked AFTER Any, which is implemented as an Array).\n  if (pattern instanceof Array) {\n    if (pattern.length !== 1) {\n      return {\n        message: \"Bad pattern: arrays must have one type element\" + EJSON.stringify(pattern),\n        path: \"\"\n      };\n    }\n    if (!_.isArray(value) && !_.isArguments(value)) {\n      return {\n        message: \"Expected array, got \" + EJSON.stringify(value),\n        path: \"\"\n      };\n    }\n\n    for (var i = 0, length = value.length; i < length; i++) {\n      var result = testSubtree(value[i], pattern[0]);\n      if (result) {\n        result.path = _prependPath(i, result.path);\n        return result;\n      }\n    }\n    return false;\n  }\n\n  // Arbitrary validation checks. The condition can return false or throw a\n  // Match.Error (ie, it can internally use check()) to fail.\n  if (pattern instanceof Where) {\n    var result;\n    try {\n      result = pattern.condition(value);\n    } catch (err) {\n      if (!(err instanceof Match.Error))\n        throw err;\n      return {\n        message: err.message,\n        path: err.path\n      };\n    }\n    if (pattern.condition(value))\n      return false;\n    // XXX this error is terrible\n    return {\n      message: \"Failed Match.Where validation\",\n      path: \"\"\n    };\n  }\n\n\n  if (pattern instanceof Optional)\n    pattern = Match.OneOf(undefined, pattern.pattern);\n\n  if (pattern instanceof OneOf) {\n    for (var i = 0; i < pattern.choices.length; ++i) {\n      var result = testSubtree(value, pattern.choices[i]);\n      if (!result) {\n        // No error? Yay, return.\n        return false;\n      }\n      // Match errors just mean try another choice.\n    }\n    // XXX this error is terrible\n    return {\n      message: \"Failed Match.OneOf or Match.Optional validation\",\n      path: \"\"\n    };\n  }\n\n  // A function that isn't something we special-case is assumed to be a\n  // constructor.\n  if (pattern instanceof Function) {\n    if (value instanceof pattern)\n      return false;\n    return {\n      message: \"Expected \" + (pattern.name ||\"particular constructor\"),\n      path: \"\"\n    };\n  }\n\n  var unknownKeysAllowed = false;\n  var unknownKeyPattern;\n  if (pattern instanceof ObjectIncluding) {\n    unknownKeysAllowed = true;\n    pattern = pattern.pattern;\n  }\n  if (pattern instanceof ObjectWithValues) {\n    unknownKeysAllowed = true;\n    unknownKeyPattern = [pattern.pattern];\n    pattern = {};  // no required keys\n  }\n\n  if (typeof pattern !== \"object\") {\n    return {\n      message: \"Bad pattern: unknown pattern type\",\n      path: \"\"\n    };\n  }\n\n  // An object, with required and optional keys. Note that this does NOT do\n  // structural matches against objects of special types that happen to match\n  // the pattern: this really needs to be a plain old {Object}!\n  if (typeof value !== 'object') {\n    return {\n      message: \"Expected object, got \" + typeof value,\n      path: \"\"\n    };\n  }\n  if (value === null) {\n    return {\n      message: \"Expected object, got null\",\n      path: \"\"\n    };\n  }\n  if (value.constructor !== Object) {\n    return {\n      message: \"Expected plain object\",\n      path: \"\"\n    };\n  }\n\n  var requiredPatterns = {};\n  var optionalPatterns = {};\n  _.each(pattern, function (subPattern, key) {\n    if (subPattern instanceof Optional)\n      optionalPatterns[key] = subPattern.pattern;\n    else\n      requiredPatterns[key] = subPattern;\n  });\n\n  for (var keys = _.keys(value), i = 0, length = keys.length; i < length; i++) {\n    var key = keys[i];\n    var subValue = value[key];\n    if (_.has(requiredPatterns, key)) {\n      var result = testSubtree(subValue, requiredPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n      delete requiredPatterns[key];\n    } else if (_.has(optionalPatterns, key)) {\n      var result = testSubtree(subValue, optionalPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n    } else {\n      if (!unknownKeysAllowed) {\n        return {\n          message: \"Unknown key\",\n          path: key\n        };\n      }\n      if (unknownKeyPattern) {\n        var result = testSubtree(subValue, unknownKeyPattern[0]);\n        if (result) {\n          result.path = _prependPath(key, result.path);\n          return result;\n        }\n      }\n    }\n  }\n\n  var keys = _.keys(requiredPatterns);\n  if (keys.length) {\n    return {\n      message: \"Missing key '\" + keys[0] + \"'\",\n      path: \"\"\n    };\n  }\n};\n\nvar ArgumentChecker = function (args, description) {\n  var self = this;\n  // Make a SHALLOW copy of the arguments. (We'll be doing identity checks\n  // against its contents.)\n  self.args = _.clone(args);\n  // Since the common case will be to check arguments in order, and we splice\n  // out arguments when we check them, make it so we splice out from the end\n  // rather than the beginning.\n  self.args.reverse();\n  self.description = description;\n};\n\n_.extend(ArgumentChecker.prototype, {\n  checking: function (value) {\n    var self = this;\n    if (self._checkingOneValue(value))\n      return;\n    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])\n    // or check([foo, bar], [String]) to count... but only if value wasn't\n    // itself an argument.\n    if (_.isArray(value) || _.isArguments(value)) {\n      _.each(value, _.bind(self._checkingOneValue, self));\n    }\n  },\n  _checkingOneValue: function (value) {\n    var self = this;\n    for (var i = 0; i < self.args.length; ++i) {\n      // Is this value one of the arguments? (This can have a false positive if\n      // the argument is an interned primitive, but it's still a good enough\n      // check.)\n      // (NaN is not === to itself, so we have to check specially.)\n      if (value === self.args[i] || (_.isNaN(value) && _.isNaN(self.args[i]))) {\n        self.args.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  },\n  throwUnlessAllArgumentsHaveBeenChecked: function () {\n    var self = this;\n    if (!_.isEmpty(self.args))\n      throw new Error(\"Did not check() all arguments during \" +\n                      self.description);\n  }\n});\n\nvar _jsKeywords = [\"do\", \"if\", \"in\", \"for\", \"let\", \"new\", \"try\", \"var\", \"case\",\n  \"else\", \"enum\", \"eval\", \"false\", \"null\", \"this\", \"true\", \"void\", \"with\",\n  \"break\", \"catch\", \"class\", \"const\", \"super\", \"throw\", \"while\", \"yield\",\n  \"delete\", \"export\", \"import\", \"public\", \"return\", \"static\", \"switch\",\n  \"typeof\", \"default\", \"extends\", \"finally\", \"package\", \"private\", \"continue\",\n  \"debugger\", \"function\", \"arguments\", \"interface\", \"protected\", \"implements\",\n  \"instanceof\"];\n\n// Assumes the base of path is already escaped properly\n// returns key + base\nvar _prependPath = function (key, base) {\n  if ((typeof key) === \"number\" || key.match(/^[0-9]+$/))\n    key = \"[\" + key + \"]\";\n  else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key))\n    key = JSON.stringify([key]);\n\n  if (base && base[0] !== \"[\")\n    return key + '.' + base;\n  return key + base;\n};\n\n"]}}]