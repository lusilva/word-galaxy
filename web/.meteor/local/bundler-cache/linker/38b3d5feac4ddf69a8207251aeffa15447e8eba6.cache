[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Reload;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/reload/reload.js                                                               //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n/**                                                                                        // 1\n * This code does _NOT_ support hot (session-restoring) reloads on                         // 2\n * IE6,7. It only works on browsers with sessionStorage support.                           // 3\n *                                                                                         // 4\n * There are a couple approaches to add IE6,7 support:                                     // 5\n *                                                                                         // 6\n * - use IE's \"userData\" mechanism in combination with window.name.                        // 7\n * This mostly works, however the problem is that it can not get to the                    // 8\n * data until after DOMReady. This is a problem for us since this API                      // 9\n * relies on the data being ready before API users run. We could                           // 10\n * refactor using Meteor.startup in all API users, but that might slow                     // 11\n * page loads as we couldn't start the stream until after DOMReady.                        // 12\n * Here are some resources on this approach:                                               // 13\n * https://github.com/hugeinc/USTORE.js                                                    // 14\n * http://thudjs.tumblr.com/post/419577524/localstorage-userdata                           // 15\n * http://www.javascriptkit.com/javatutors/domstorage2.shtml                               // 16\n *                                                                                         // 17\n * - POST the data to the server, and have the server send it back on                      // 18\n * page load. This is nice because it sidesteps all the local storage                      // 19\n * compatibility issues, however it is kinda tricky. We can use a unique                   // 20\n * token in the URL, then get rid of it with HTML5 pushstate, but that                     // 21\n * only works on pushstate browsers.                                                       // 22\n *                                                                                         // 23\n * This will all need to be reworked entirely when we add server-side                      // 24\n * HTML rendering. In that case, the server will need to have access to                    // 25\n * the client's session to render properly.                                                // 26\n */                                                                                        // 27\n                                                                                           // 28\n// XXX when making this API public, also expose a flag for the app                         // 29\n// developer to know whether a hot code push is happening. This is                         // 30\n// useful for apps using `window.onbeforeunload`. See                                      // 31\n// https://github.com/meteor/meteor/pull/657                                               // 32\n                                                                                           // 33\nReload = {};                                                                               // 34\n                                                                                           // 35\nvar KEY_NAME = 'Meteor_Reload';                                                            // 36\n                                                                                           // 37\nvar old_data = {};                                                                         // 38\n// read in old data at startup.                                                            // 39\nvar old_json;                                                                              // 40\n                                                                                           // 41\n// This logic for sessionStorage detection is based on browserstate/history.js             // 42\nvar safeSessionStorage = null;                                                             // 43\ntry {                                                                                      // 44\n  // This throws a SecurityError on Chrome if cookies & localStorage are                   // 45\n  // explicitly disabled                                                                   // 46\n  //                                                                                       // 47\n  // On Firefox with dom.storage.enabled set to false, sessionStorage is null              // 48\n  //                                                                                       // 49\n  // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely            // 50\n  // on the throw if sessionStorage == null; the alternative is browser                    // 51\n  // detection, but this seems better.                                                     // 52\n  safeSessionStorage = window.sessionStorage;                                              // 53\n                                                                                           // 54\n  // Check we can actually use it                                                          // 55\n  if (safeSessionStorage) {                                                                // 56\n    safeSessionStorage.setItem('__dummy__', '1');                                          // 57\n    safeSessionStorage.removeItem('__dummy__');                                            // 58\n  } else {                                                                                 // 59\n    // Be consistently null, for safety                                                    // 60\n    safeSessionStorage = null;                                                             // 61\n  }                                                                                        // 62\n} catch(e) {                                                                               // 63\n  // Expected on chrome with strict security, or if sessionStorage not supported           // 64\n  safeSessionStorage = null;                                                               // 65\n}                                                                                          // 66\n                                                                                           // 67\n// Exported for test.                                                                      // 68\nReload._getData = function () {                                                            // 69\n  return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);                       // 70\n};                                                                                         // 71\n                                                                                           // 72\nif (safeSessionStorage) {                                                                  // 73\n  old_json = Reload._getData();                                                            // 74\n  safeSessionStorage.removeItem(KEY_NAME);                                                 // 75\n} else {                                                                                   // 76\n  // Unsupported browser (IE 6,7) or locked down security settings.                        // 77\n  // No session resumption.                                                                // 78\n  // Meteor._debug(\"XXX UNSUPPORTED BROWSER/SETTINGS\");                                    // 79\n}                                                                                          // 80\n                                                                                           // 81\nif (!old_json) old_json = '{}';                                                            // 82\nvar old_parsed = {};                                                                       // 83\ntry {                                                                                      // 84\n  old_parsed = JSON.parse(old_json);                                                       // 85\n  if (typeof old_parsed !== \"object\") {                                                    // 86\n    Meteor._debug(\"Got bad data on reload. Ignoring.\");                                    // 87\n    old_parsed = {};                                                                       // 88\n  }                                                                                        // 89\n} catch (err) {                                                                            // 90\n  Meteor._debug(\"Got invalid JSON on reload. Ignoring.\");                                  // 91\n}                                                                                          // 92\n                                                                                           // 93\nif (old_parsed.reload && typeof old_parsed.data === \"object\") {                            // 94\n  // Meteor._debug(\"Restoring reload data.\");                                              // 95\n  old_data = old_parsed.data;                                                              // 96\n}                                                                                          // 97\n                                                                                           // 98\n                                                                                           // 99\nvar providers = [];                                                                        // 100\n                                                                                           // 101\n////////// External API //////////                                                         // 102\n                                                                                           // 103\n// Packages that support migration should register themselves by calling                   // 104\n// this function. When it's time to migrate, callback will be called                       // 105\n// with one argument, the \"retry function,\" and an optional 'option'                       // 106\n// argument (containing a key 'immediateMigration'). If the package                        // 107\n// is ready to migrate, it should return [true, data], where data is                       // 108\n// its migration data, an arbitrary JSON value (or [true] if it has                        // 109\n// no migration data this time). If the package needs more time                            // 110\n// before it is ready to migrate, it should return false. Then, once                       // 111\n// it is ready to migrating again, it should call the retry                                // 112\n// function. The retry function will return immediately, but will                          // 113\n// schedule the migration to be retried, meaning that every package                        // 114\n// will be polled once again for its migration data. If they are all                       // 115\n// ready this time, then the migration will happen. name must be set if there              // 116\n// is migration data. If 'immediateMigration' is set in the options                        // 117\n// argument, then it doesn't matter whether the package is ready to                        // 118\n// migrate or not; the reload will happen immediately without waiting                      // 119\n// (used for OAuth redirect login).                                                        // 120\n//                                                                                         // 121\nReload._onMigrate = function (name, callback) {                                            // 122\n  if (!callback) {                                                                         // 123\n    // name not provided, so first arg is callback.                                        // 124\n    callback = name;                                                                       // 125\n    name = undefined;                                                                      // 126\n  }                                                                                        // 127\n  providers.push({name: name, callback: callback});                                        // 128\n};                                                                                         // 129\n                                                                                           // 130\n// Called by packages when they start up.                                                  // 131\n// Returns the object that was saved, or undefined if none saved.                          // 132\n//                                                                                         // 133\nReload._migrationData = function (name) {                                                  // 134\n  return old_data[name];                                                                   // 135\n};                                                                                         // 136\n                                                                                           // 137\n// Options are the same as for `Reload._migrate`.                                          // 138\nvar pollProviders = function (tryReload, options) {                                        // 139\n  tryReload = tryReload || function () {};                                                 // 140\n  options = options || {};                                                                 // 141\n                                                                                           // 142\n  var migrationData = {};                                                                  // 143\n  var remaining = _.clone(providers);                                                      // 144\n  var allReady = true;                                                                     // 145\n  while (remaining.length) {                                                               // 146\n    var p = remaining.shift();                                                             // 147\n    var status = p.callback(tryReload, options);                                           // 148\n    if (!status[0])                                                                        // 149\n      allReady = false;                                                                    // 150\n    if (status.length > 1 && p.name)                                                       // 151\n      migrationData[p.name] = status[1];                                                   // 152\n  };                                                                                       // 153\n  if (allReady || options.immediateMigration)                                              // 154\n    return migrationData;                                                                  // 155\n  else                                                                                     // 156\n    return null;                                                                           // 157\n};                                                                                         // 158\n                                                                                           // 159\n// Options are:                                                                            // 160\n//  - immediateMigration: true if the page will be reloaded immediately                    // 161\n//    regardless of whether packages report that they are ready or not.                    // 162\nReload._migrate = function (tryReload, options) {                                          // 163\n  // Make sure each package is ready to go, and collect their                              // 164\n  // migration data                                                                        // 165\n  var migrationData = pollProviders(tryReload, options);                                   // 166\n  if (migrationData === null)                                                              // 167\n    return false; // not ready yet..                                                       // 168\n                                                                                           // 169\n  try {                                                                                    // 170\n    // Persist the migration data                                                          // 171\n    var json = JSON.stringify({                                                            // 172\n      data: migrationData, reload: true                                                    // 173\n    });                                                                                    // 174\n  } catch (err) {                                                                          // 175\n    Meteor._debug(\"Couldn't serialize data for migration\", migrationData);                 // 176\n    throw err;                                                                             // 177\n  }                                                                                        // 178\n                                                                                           // 179\n  if (safeSessionStorage) {                                                                // 180\n    try {                                                                                  // 181\n      safeSessionStorage.setItem(KEY_NAME, json);                                          // 182\n    } catch (err) {                                                                        // 183\n      // We should have already checked this, but just log - don't throw                   // 184\n      Meteor._debug(\"Couldn't save data for migration to sessionStorage\", err);            // 185\n    }                                                                                      // 186\n  } else {                                                                                 // 187\n    Meteor._debug(\"Browser does not support sessionStorage. Not saving migration state.\");\n  }                                                                                        // 189\n                                                                                           // 190\n  return true;                                                                             // 191\n};                                                                                         // 192\n                                                                                           // 193\n// Allows tests to isolate the list of providers.                                          // 194\nReload._withFreshProvidersForTest = function (f) {                                         // 195\n  var originalProviders = _.clone(providers);                                              // 196\n  providers = [];                                                                          // 197\n  try {                                                                                    // 198\n    f();                                                                                   // 199\n  } finally {                                                                              // 200\n    providers = originalProviders;                                                         // 201\n  }                                                                                        // 202\n};                                                                                         // 203\n                                                                                           // 204\n// Migrating reload: reload this page (presumably to pick up a new                         // 205\n// version of the code or assets), but save the program state and                          // 206\n// migrate it over. This function returns immediately. The reload                          // 207\n// will happen at some point in the future once all of the packages                        // 208\n// are ready to migrate.                                                                   // 209\n//                                                                                         // 210\nvar reloading = false;                                                                     // 211\nReload._reload = function (options) {                                                      // 212\n  options = options || {};                                                                 // 213\n                                                                                           // 214\n  if (reloading)                                                                           // 215\n    return;                                                                                // 216\n  reloading = true;                                                                        // 217\n                                                                                           // 218\n  var tryReload = function () { _.defer(function () {                                      // 219\n    if (Reload._migrate(tryReload, options)) {                                             // 220\n      // Tell the browser to shut down this VM and make a new one                          // 221\n      window.location.reload();                                                            // 222\n    }                                                                                      // 223\n  }); };                                                                                   // 224\n                                                                                           // 225\n  tryReload();                                                                             // 226\n};                                                                                         // 227\n                                                                                           // 228\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/reload/deprecated.js                                                           //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n// Reload functionality used to live on Meteor._reload. Be nice and try not to             // 1\n// break code that uses it, even though it's internal.                                     // 2\n// XXX COMPAT WITH 0.6.4                                                                   // 3\nMeteor._reload = {                                                                         // 4\n  onMigrate: Reload._onMigrate,                                                            // 5\n  migrationData: Reload._migrationData,                                                    // 6\n  reload: Reload._reload                                                                   // 7\n};                                                                                         // 8\n                                                                                           // 9\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.reload = {\n  Reload: Reload\n};\n\n})();\n","servePath":"/packages/reload.js","sourceMap":{"version":3,"sources":["/packages/reload/reload.js","/packages/reload/deprecated.js"],"names":[],"mappingsiG;;;;;;;;;;;;;;;;;;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+F","file":"/packages/reload.js","sourcesContent":["/**\n * This code does _NOT_ support hot (session-restoring) reloads on\n * IE6,7. It only works on browsers with sessionStorage support.\n *\n * There are a couple approaches to add IE6,7 support:\n *\n * - use IE's \"userData\" mechanism in combination with window.name.\n * This mostly works, however the problem is that it can not get to the\n * data until after DOMReady. This is a problem for us since this API\n * relies on the data being ready before API users run. We could\n * refactor using Meteor.startup in all API users, but that might slow\n * page loads as we couldn't start the stream until after DOMReady.\n * Here are some resources on this approach:\n * https://github.com/hugeinc/USTORE.js\n * http://thudjs.tumblr.com/post/419577524/localstorage-userdata\n * http://www.javascriptkit.com/javatutors/domstorage2.shtml\n *\n * - POST the data to the server, and have the server send it back on\n * page load. This is nice because it sidesteps all the local storage\n * compatibility issues, however it is kinda tricky. We can use a unique\n * token in the URL, then get rid of it with HTML5 pushstate, but that\n * only works on pushstate browsers.\n *\n * This will all need to be reworked entirely when we add server-side\n * HTML rendering. In that case, the server will need to have access to\n * the client's session to render properly.\n */\n\n// XXX when making this API public, also expose a flag for the app\n// developer to know whether a hot code push is happening. This is\n// useful for apps using `window.onbeforeunload`. See\n// https://github.com/meteor/meteor/pull/657\n\nReload = {};\n\nvar KEY_NAME = 'Meteor_Reload';\n\nvar old_data = {};\n// read in old data at startup.\nvar old_json;\n\n// This logic for sessionStorage detection is based on browserstate/history.js\nvar safeSessionStorage = null;\ntry {\n  // This throws a SecurityError on Chrome if cookies & localStorage are\n  // explicitly disabled\n  //\n  // On Firefox with dom.storage.enabled set to false, sessionStorage is null\n  //\n  // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely\n  // on the throw if sessionStorage == null; the alternative is browser\n  // detection, but this seems better.\n  safeSessionStorage = window.sessionStorage;\n\n  // Check we can actually use it\n  if (safeSessionStorage) {\n    safeSessionStorage.setItem('__dummy__', '1');\n    safeSessionStorage.removeItem('__dummy__');\n  } else {\n    // Be consistently null, for safety\n    safeSessionStorage = null;\n  }\n} catch(e) {\n  // Expected on chrome with strict security, or if sessionStorage not supported\n  safeSessionStorage = null;\n}\n\n// Exported for test.\nReload._getData = function () {\n  return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);\n};\n\nif (safeSessionStorage) {\n  old_json = Reload._getData();\n  safeSessionStorage.removeItem(KEY_NAME);\n} else {\n  // Unsupported browser (IE 6,7) or locked down security settings.\n  // No session resumption.\n  // Meteor._debug(\"XXX UNSUPPORTED BROWSER/SETTINGS\");\n}\n\nif (!old_json) old_json = '{}';\nvar old_parsed = {};\ntry {\n  old_parsed = JSON.parse(old_json);\n  if (typeof old_parsed !== \"object\") {\n    Meteor._debug(\"Got bad data on reload. Ignoring.\");\n    old_parsed = {};\n  }\n} catch (err) {\n  Meteor._debug(\"Got invalid JSON on reload. Ignoring.\");\n}\n\nif (old_parsed.reload && typeof old_parsed.data === \"object\") {\n  // Meteor._debug(\"Restoring reload data.\");\n  old_data = old_parsed.data;\n}\n\n\nvar providers = [];\n\n////////// External API //////////\n\n// Packages that support migration should register themselves by calling\n// this function. When it's time to migrate, callback will be called\n// with one argument, the \"retry function,\" and an optional 'option'\n// argument (containing a key 'immediateMigration'). If the package\n// is ready to migrate, it should return [true, data], where data is\n// its migration data, an arbitrary JSON value (or [true] if it has\n// no migration data this time). If the package needs more time\n// before it is ready to migrate, it should return false. Then, once\n// it is ready to migrating again, it should call the retry\n// function. The retry function will return immediately, but will\n// schedule the migration to be retried, meaning that every package\n// will be polled once again for its migration data. If they are all\n// ready this time, then the migration will happen. name must be set if there\n// is migration data. If 'immediateMigration' is set in the options\n// argument, then it doesn't matter whether the package is ready to\n// migrate or not; the reload will happen immediately without waiting\n// (used for OAuth redirect login).\n//\nReload._onMigrate = function (name, callback) {\n  if (!callback) {\n    // name not provided, so first arg is callback.\n    callback = name;\n    name = undefined;\n  }\n  providers.push({name: name, callback: callback});\n};\n\n// Called by packages when they start up.\n// Returns the object that was saved, or undefined if none saved.\n//\nReload._migrationData = function (name) {\n  return old_data[name];\n};\n\n// Options are the same as for `Reload._migrate`.\nvar pollProviders = function (tryReload, options) {\n  tryReload = tryReload || function () {};\n  options = options || {};\n\n  var migrationData = {};\n  var remaining = _.clone(providers);\n  var allReady = true;\n  while (remaining.length) {\n    var p = remaining.shift();\n    var status = p.callback(tryReload, options);\n    if (!status[0])\n      allReady = false;\n    if (status.length > 1 && p.name)\n      migrationData[p.name] = status[1];\n  };\n  if (allReady || options.immediateMigration)\n    return migrationData;\n  else\n    return null;\n};\n\n// Options are:\n//  - immediateMigration: true if the page will be reloaded immediately\n//    regardless of whether packages report that they are ready or not.\nReload._migrate = function (tryReload, options) {\n  // Make sure each package is ready to go, and collect their\n  // migration data\n  var migrationData = pollProviders(tryReload, options);\n  if (migrationData === null)\n    return false; // not ready yet..\n\n  try {\n    // Persist the migration data\n    var json = JSON.stringify({\n      data: migrationData, reload: true\n    });\n  } catch (err) {\n    Meteor._debug(\"Couldn't serialize data for migration\", migrationData);\n    throw err;\n  }\n\n  if (safeSessionStorage) {\n    try {\n      safeSessionStorage.setItem(KEY_NAME, json);\n    } catch (err) {\n      // We should have already checked this, but just log - don't throw\n      Meteor._debug(\"Couldn't save data for migration to sessionStorage\", err);\n    }\n  } else {\n    Meteor._debug(\"Browser does not support sessionStorage. Not saving migration state.\");\n  }\n\n  return true;\n};\n\n// Allows tests to isolate the list of providers.\nReload._withFreshProvidersForTest = function (f) {\n  var originalProviders = _.clone(providers);\n  providers = [];\n  try {\n    f();\n  } finally {\n    providers = originalProviders;\n  }\n};\n\n// Migrating reload: reload this page (presumably to pick up a new\n// version of the code or assets), but save the program state and\n// migrate it over. This function returns immediately. The reload\n// will happen at some point in the future once all of the packages\n// are ready to migrate.\n//\nvar reloading = false;\nReload._reload = function (options) {\n  options = options || {};\n\n  if (reloading)\n    return;\n  reloading = true;\n\n  var tryReload = function () { _.defer(function () {\n    if (Reload._migrate(tryReload, options)) {\n      // Tell the browser to shut down this VM and make a new one\n      window.location.reload();\n    }\n  }); };\n\n  tryReload();\n};\n","// Reload functionality used to live on Meteor._reload. Be nice and try not to\n// break code that uses it, even though it's internal.\n// XXX COMPAT WITH 0.6.4\nMeteor._reload = {\n  onMigrate: Reload._onMigrate,\n  migrationData: Reload._migrationData,\n  reload: Reload._reload\n};\n"]}}]