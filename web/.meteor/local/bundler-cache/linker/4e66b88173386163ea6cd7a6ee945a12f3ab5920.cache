[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Base64 = Package.base64.Base64;\n\n/* Package-scope variables */\nvar EJSON, EJSONTest;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ejson/ejson.js                                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  // 1\n * @namespace                                                                                                        // 2\n * @summary Namespace for EJSON functions                                                                            // 3\n */                                                                                                                  // 4\nEJSON = {};                                                                                                          // 5\nEJSONTest = {};                                                                                                      // 6\n                                                                                                                     // 7\n                                                                                                                     // 8\n                                                                                                                     // 9\n// Custom type interface definition                                                                                  // 10\n/**                                                                                                                  // 11\n * @class CustomType                                                                                                 // 12\n * @instanceName customType                                                                                          // 13\n * @memberOf EJSON                                                                                                   // 14\n * @summary The interface that a class must satisfy to be able to become an                                          // 15\n * EJSON custom type via EJSON.addType.                                                                              // 16\n */                                                                                                                  // 17\n                                                                                                                     // 18\n/**                                                                                                                  // 19\n * @function typeName                                                                                                // 20\n * @memberOf EJSON.CustomType                                                                                        // 21\n * @summary Return the tag used to identify this type.  This must match the tag used to register this type with [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere                                                                                                   // 23\n * @instance                                                                                                         // 24\n */                                                                                                                  // 25\n                                                                                                                     // 26\n/**                                                                                                                  // 27\n * @function toJSONValue                                                                                             // 28\n * @memberOf EJSON.CustomType                                                                                        // 29\n * @summary Serialize this instance into a JSON-compatible value.                                                    // 30\n * @locus Anywhere                                                                                                   // 31\n * @instance                                                                                                         // 32\n */                                                                                                                  // 33\n                                                                                                                     // 34\n/**                                                                                                                  // 35\n * @function clone                                                                                                   // 36\n * @memberOf EJSON.CustomType                                                                                        // 37\n * @summary Return a value `r` such that `this.equals(r)` is true, and modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere                                                                                                   // 39\n * @instance                                                                                                         // 40\n */                                                                                                                  // 41\n                                                                                                                     // 42\n/**                                                                                                                  // 43\n * @function equals                                                                                                  // 44\n * @memberOf EJSON.CustomType                                                                                        // 45\n * @summary Return `true` if `other` has a value equal to `this`; `false` otherwise.                                 // 46\n * @locus Anywhere                                                                                                   // 47\n * @param {Object} other Another object to compare this to.                                                          // 48\n * @instance                                                                                                         // 49\n */                                                                                                                  // 50\n                                                                                                                     // 51\n                                                                                                                     // 52\nvar customTypes = {};                                                                                                // 53\n// Add a custom type, using a method of your choice to get to and                                                    // 54\n// from a basic JSON-able representation.  The factory argument                                                      // 55\n// is a function of JSON-able --> your object                                                                        // 56\n// The type you add must have:                                                                                       // 57\n// - A toJSONValue() method, so that Meteor can serialize it                                                         // 58\n// - a typeName() method, to show how to look it up in our type table.                                               // 59\n// It is okay if these methods are monkey-patched on.                                                                // 60\n// EJSON.clone will use toJSONValue and the given factory to produce                                                 // 61\n// a clone, but you may specify a method clone() that will be                                                        // 62\n// used instead.                                                                                                     // 63\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,                                                 // 64\n// but you may provide a method equals() instead.                                                                    // 65\n/**                                                                                                                  // 66\n * @summary Add a custom datatype to EJSON.                                                                          // 67\n * @locus Anywhere                                                                                                   // 68\n * @param {String} name A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's `toJSONValue` method.\n */                                                                                                                  // 71\nEJSON.addType = function (name, factory) {                                                                           // 72\n  if (_.has(customTypes, name))                                                                                      // 73\n    throw new Error(\"Type \" + name + \" already present\");                                                            // 74\n  customTypes[name] = factory;                                                                                       // 75\n};                                                                                                                   // 76\n                                                                                                                     // 77\nvar isInfOrNan = function (obj) {                                                                                    // 78\n  return _.isNaN(obj) || obj === Infinity || obj === -Infinity;                                                      // 79\n};                                                                                                                   // 80\n                                                                                                                     // 81\nvar builtinConverters = [                                                                                            // 82\n  { // Date                                                                                                          // 83\n    matchJSONValue: function (obj) {                                                                                 // 84\n      return _.has(obj, '$date') && _.size(obj) === 1;                                                               // 85\n    },                                                                                                               // 86\n    matchObject: function (obj) {                                                                                    // 87\n      return obj instanceof Date;                                                                                    // 88\n    },                                                                                                               // 89\n    toJSONValue: function (obj) {                                                                                    // 90\n      return {$date: obj.getTime()};                                                                                 // 91\n    },                                                                                                               // 92\n    fromJSONValue: function (obj) {                                                                                  // 93\n      return new Date(obj.$date);                                                                                    // 94\n    }                                                                                                                // 95\n  },                                                                                                                 // 96\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                                          // 97\n    // which we match.)                                                                                              // 98\n    matchJSONValue: function (obj) {                                                                                 // 99\n      return _.has(obj, '$InfNaN') && _.size(obj) === 1;                                                             // 100\n    },                                                                                                               // 101\n    matchObject: isInfOrNan,                                                                                         // 102\n    toJSONValue: function (obj) {                                                                                    // 103\n      var sign;                                                                                                      // 104\n      if (_.isNaN(obj))                                                                                              // 105\n        sign = 0;                                                                                                    // 106\n      else if (obj === Infinity)                                                                                     // 107\n        sign = 1;                                                                                                    // 108\n      else                                                                                                           // 109\n        sign = -1;                                                                                                   // 110\n      return {$InfNaN: sign};                                                                                        // 111\n    },                                                                                                               // 112\n    fromJSONValue: function (obj) {                                                                                  // 113\n      return obj.$InfNaN/0;                                                                                          // 114\n    }                                                                                                                // 115\n  },                                                                                                                 // 116\n  { // Binary                                                                                                        // 117\n    matchJSONValue: function (obj) {                                                                                 // 118\n      return _.has(obj, '$binary') && _.size(obj) === 1;                                                             // 119\n    },                                                                                                               // 120\n    matchObject: function (obj) {                                                                                    // 121\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array                                          // 122\n        || (obj && _.has(obj, '$Uint8ArrayPolyfill'));                                                               // 123\n    },                                                                                                               // 124\n    toJSONValue: function (obj) {                                                                                    // 125\n      return {$binary: Base64.encode(obj)};                                                                          // 126\n    },                                                                                                               // 127\n    fromJSONValue: function (obj) {                                                                                  // 128\n      return Base64.decode(obj.$binary);                                                                             // 129\n    }                                                                                                                // 130\n  },                                                                                                                 // 131\n  { // Escaping one level                                                                                            // 132\n    matchJSONValue: function (obj) {                                                                                 // 133\n      return _.has(obj, '$escape') && _.size(obj) === 1;                                                             // 134\n    },                                                                                                               // 135\n    matchObject: function (obj) {                                                                                    // 136\n      if (_.isEmpty(obj) || _.size(obj) > 2) {                                                                       // 137\n        return false;                                                                                                // 138\n      }                                                                                                              // 139\n      return _.any(builtinConverters, function (converter) {                                                         // 140\n        return converter.matchJSONValue(obj);                                                                        // 141\n      });                                                                                                            // 142\n    },                                                                                                               // 143\n    toJSONValue: function (obj) {                                                                                    // 144\n      var newObj = {};                                                                                               // 145\n      _.each(obj, function (value, key) {                                                                            // 146\n        newObj[key] = EJSON.toJSONValue(value);                                                                      // 147\n      });                                                                                                            // 148\n      return {$escape: newObj};                                                                                      // 149\n    },                                                                                                               // 150\n    fromJSONValue: function (obj) {                                                                                  // 151\n      var newObj = {};                                                                                               // 152\n      _.each(obj.$escape, function (value, key) {                                                                    // 153\n        newObj[key] = EJSON.fromJSONValue(value);                                                                    // 154\n      });                                                                                                            // 155\n      return newObj;                                                                                                 // 156\n    }                                                                                                                // 157\n  },                                                                                                                 // 158\n  { // Custom                                                                                                        // 159\n    matchJSONValue: function (obj) {                                                                                 // 160\n      return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;                                       // 161\n    },                                                                                                               // 162\n    matchObject: function (obj) {                                                                                    // 163\n      return EJSON._isCustomType(obj);                                                                               // 164\n    },                                                                                                               // 165\n    toJSONValue: function (obj) {                                                                                    // 166\n      var jsonValue = Meteor._noYieldsAllowed(function () {                                                          // 167\n        return obj.toJSONValue();                                                                                    // 168\n      });                                                                                                            // 169\n      return {$type: obj.typeName(), $value: jsonValue};                                                             // 170\n    },                                                                                                               // 171\n    fromJSONValue: function (obj) {                                                                                  // 172\n      var typeName = obj.$type;                                                                                      // 173\n      if (!_.has(customTypes, typeName))                                                                             // 174\n        throw new Error(\"Custom EJSON type \" + typeName + \" is not defined\");                                        // 175\n      var converter = customTypes[typeName];                                                                         // 176\n      return Meteor._noYieldsAllowed(function () {                                                                   // 177\n        return converter(obj.$value);                                                                                // 178\n      });                                                                                                            // 179\n    }                                                                                                                // 180\n  }                                                                                                                  // 181\n];                                                                                                                   // 182\n                                                                                                                     // 183\nEJSON._isCustomType = function (obj) {                                                                               // 184\n  return obj &&                                                                                                      // 185\n    typeof obj.toJSONValue === 'function' &&                                                                         // 186\n    typeof obj.typeName === 'function' &&                                                                            // 187\n    _.has(customTypes, obj.typeName());                                                                              // 188\n};                                                                                                                   // 189\n                                                                                                                     // 190\nEJSON._getTypes = function () {                                                                                      // 191\n  return customTypes;                                                                                                // 192\n};                                                                                                                   // 193\n                                                                                                                     // 194\nEJSON._getConverters = function () {                                                                                 // 195\n  return builtinConverters;                                                                                          // 196\n};                                                                                                                   // 197\n                                                                                                                     // 198\n// for both arrays and objects, in-place modification.                                                               // 199\nvar adjustTypesToJSONValue =                                                                                         // 200\nEJSON._adjustTypesToJSONValue = function (obj) {                                                                     // 201\n  // Is it an atom that we need to adjust?                                                                           // 202\n  if (obj === null)                                                                                                  // 203\n    return null;                                                                                                     // 204\n  var maybeChanged = toJSONValueHelper(obj);                                                                         // 205\n  if (maybeChanged !== undefined)                                                                                    // 206\n    return maybeChanged;                                                                                             // 207\n                                                                                                                     // 208\n  // Other atoms are unchanged.                                                                                      // 209\n  if (typeof obj !== 'object')                                                                                       // 210\n    return obj;                                                                                                      // 211\n                                                                                                                     // 212\n  // Iterate over array or object structure.                                                                         // 213\n  _.each(obj, function (value, key) {                                                                                // 214\n    if (typeof value !== 'object' && value !== undefined &&                                                          // 215\n        !isInfOrNan(value))                                                                                          // 216\n      return; // continue                                                                                            // 217\n                                                                                                                     // 218\n    var changed = toJSONValueHelper(value);                                                                          // 219\n    if (changed) {                                                                                                   // 220\n      obj[key] = changed;                                                                                            // 221\n      return; // on to the next key                                                                                  // 222\n    }                                                                                                                // 223\n    // if we get here, value is an object but not adjustable                                                         // 224\n    // at this level.  recurse.                                                                                      // 225\n    adjustTypesToJSONValue(value);                                                                                   // 226\n  });                                                                                                                // 227\n  return obj;                                                                                                        // 228\n};                                                                                                                   // 229\n                                                                                                                     // 230\n// Either return the JSON-compatible version of the argument, or undefined (if                                       // 231\n// the item isn't itself replaceable, but maybe some fields in it are)                                               // 232\nvar toJSONValueHelper = function (item) {                                                                            // 233\n  for (var i = 0; i < builtinConverters.length; i++) {                                                               // 234\n    var converter = builtinConverters[i];                                                                            // 235\n    if (converter.matchObject(item)) {                                                                               // 236\n      return converter.toJSONValue(item);                                                                            // 237\n    }                                                                                                                // 238\n  }                                                                                                                  // 239\n  return undefined;                                                                                                  // 240\n};                                                                                                                   // 241\n                                                                                                                     // 242\n/**                                                                                                                  // 243\n * @summary Serialize an EJSON-compatible value into its plain JSON representation.                                  // 244\n * @locus Anywhere                                                                                                   // 245\n * @param {EJSON} val A value to serialize to plain JSON.                                                            // 246\n */                                                                                                                  // 247\nEJSON.toJSONValue = function (item) {                                                                                // 248\n  var changed = toJSONValueHelper(item);                                                                             // 249\n  if (changed !== undefined)                                                                                         // 250\n    return changed;                                                                                                  // 251\n  if (typeof item === 'object') {                                                                                    // 252\n    item = EJSON.clone(item);                                                                                        // 253\n    adjustTypesToJSONValue(item);                                                                                    // 254\n  }                                                                                                                  // 255\n  return item;                                                                                                       // 256\n};                                                                                                                   // 257\n                                                                                                                     // 258\n// for both arrays and objects. Tries its best to just                                                               // 259\n// use the object you hand it, but may return something                                                              // 260\n// different if the object you hand it itself needs changing.                                                        // 261\n//                                                                                                                   // 262\nvar adjustTypesFromJSONValue =                                                                                       // 263\nEJSON._adjustTypesFromJSONValue = function (obj) {                                                                   // 264\n  if (obj === null)                                                                                                  // 265\n    return null;                                                                                                     // 266\n  var maybeChanged = fromJSONValueHelper(obj);                                                                       // 267\n  if (maybeChanged !== obj)                                                                                          // 268\n    return maybeChanged;                                                                                             // 269\n                                                                                                                     // 270\n  // Other atoms are unchanged.                                                                                      // 271\n  if (typeof obj !== 'object')                                                                                       // 272\n    return obj;                                                                                                      // 273\n                                                                                                                     // 274\n  _.each(obj, function (value, key) {                                                                                // 275\n    if (typeof value === 'object') {                                                                                 // 276\n      var changed = fromJSONValueHelper(value);                                                                      // 277\n      if (value !== changed) {                                                                                       // 278\n        obj[key] = changed;                                                                                          // 279\n        return;                                                                                                      // 280\n      }                                                                                                              // 281\n      // if we get here, value is an object but not adjustable                                                       // 282\n      // at this level.  recurse.                                                                                    // 283\n      adjustTypesFromJSONValue(value);                                                                               // 284\n    }                                                                                                                // 285\n  });                                                                                                                // 286\n  return obj;                                                                                                        // 287\n};                                                                                                                   // 288\n                                                                                                                     // 289\n// Either return the argument changed to have the non-json                                                           // 290\n// rep of itself (the Object version) or the argument itself.                                                        // 291\n                                                                                                                     // 292\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use                                              // 293\n// EJSON.fromJSONValue                                                                                               // 294\nvar fromJSONValueHelper = function (value) {                                                                         // 295\n  if (typeof value === 'object' && value !== null) {                                                                 // 296\n    if (_.size(value) <= 2                                                                                           // 297\n        && _.all(value, function (v, k) {                                                                            // 298\n          return typeof k === 'string' && k.substr(0, 1) === '$';                                                    // 299\n        })) {                                                                                                        // 300\n      for (var i = 0; i < builtinConverters.length; i++) {                                                           // 301\n        var converter = builtinConverters[i];                                                                        // 302\n        if (converter.matchJSONValue(value)) {                                                                       // 303\n          return converter.fromJSONValue(value);                                                                     // 304\n        }                                                                                                            // 305\n      }                                                                                                              // 306\n    }                                                                                                                // 307\n  }                                                                                                                  // 308\n  return value;                                                                                                      // 309\n};                                                                                                                   // 310\n                                                                                                                     // 311\n/**                                                                                                                  // 312\n * @summary Deserialize an EJSON value from its plain JSON representation.                                           // 313\n * @locus Anywhere                                                                                                   // 314\n * @param {JSONCompatible} val A value to deserialize into EJSON.                                                    // 315\n */                                                                                                                  // 316\nEJSON.fromJSONValue = function (item) {                                                                              // 317\n  var changed = fromJSONValueHelper(item);                                                                           // 318\n  if (changed === item && typeof item === 'object') {                                                                // 319\n    item = EJSON.clone(item);                                                                                        // 320\n    adjustTypesFromJSONValue(item);                                                                                  // 321\n    return item;                                                                                                     // 322\n  } else {                                                                                                           // 323\n    return changed;                                                                                                  // 324\n  }                                                                                                                  // 325\n};                                                                                                                   // 326\n                                                                                                                     // 327\n/**                                                                                                                  // 328\n * @summary Serialize a value to a string.                                                                           // 329\n                                                                                                                     // 330\nFor EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as `JSON.stringify`.\n * @locus Anywhere                                                                                                   // 332\n * @param {EJSON} val A value to stringify.                                                                          // 333\n * @param {Object} [options]                                                                                         // 334\n * @param {Boolean | Integer | String} options.indent Indents objects and arrays for easy readability.  When `true`, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an object in sorted order.                    // 336\n */                                                                                                                  // 337\nEJSON.stringify = function (item, options) {                                                                         // 338\n  var json = EJSON.toJSONValue(item);                                                                                // 339\n  if (options && (options.canonical || options.indent)) {                                                            // 340\n    return EJSON._canonicalStringify(json, options);                                                                 // 341\n  } else {                                                                                                           // 342\n    return JSON.stringify(json);                                                                                     // 343\n  }                                                                                                                  // 344\n};                                                                                                                   // 345\n                                                                                                                     // 346\n/**                                                                                                                  // 347\n * @summary Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.                    // 348\n * @locus Anywhere                                                                                                   // 349\n * @param {String} str A string to parse into an EJSON value.                                                        // 350\n */                                                                                                                  // 351\nEJSON.parse = function (item) {                                                                                      // 352\n  if (typeof item !== 'string')                                                                                      // 353\n    throw new Error(\"EJSON.parse argument should be a string\");                                                      // 354\n  return EJSON.fromJSONValue(JSON.parse(item));                                                                      // 355\n};                                                                                                                   // 356\n                                                                                                                     // 357\n/**                                                                                                                  // 358\n * @summary Returns true if `x` is a buffer of binary data, as returned from [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.                                                                          // 360\n * @locus Anywhere                                                                                                   // 361\n */                                                                                                                  // 362\nEJSON.isBinary = function (obj) {                                                                                    // 363\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||                                      // 364\n    (obj && obj.$Uint8ArrayPolyfill));                                                                               // 365\n};                                                                                                                   // 366\n                                                                                                                     // 367\n/**                                                                                                                  // 368\n * @summary Return true if `a` and `b` are equal to each other.  Return false otherwise.  Uses the `equals` method on `a` if present, otherwise performs a deep comparison.\n * @locus Anywhere                                                                                                   // 370\n * @param {EJSON} a                                                                                                  // 371\n * @param {EJSON} b                                                                                                  // 372\n * @param {Object} [options]                                                                                         // 373\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order, if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}` is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The default is `false`.\n */                                                                                                                  // 375\nEJSON.equals = function (a, b, options) {                                                                            // 376\n  var i;                                                                                                             // 377\n  var keyOrderSensitive = !!(options && options.keyOrderSensitive);                                                  // 378\n  if (a === b)                                                                                                       // 379\n    return true;                                                                                                     // 380\n  if (_.isNaN(a) && _.isNaN(b))                                                                                      // 381\n    return true; // This differs from the IEEE spec for NaN equality, b/c we don't want                              // 382\n                 // anything ever with a NaN to be poisoned from becoming equal to anything.                         // 383\n  if (!a || !b) // if either one is falsy, they'd have to be === to be equal                                         // 384\n    return false;                                                                                                    // 385\n  if (!(typeof a === 'object' && typeof b === 'object'))                                                             // 386\n    return false;                                                                                                    // 387\n  if (a instanceof Date && b instanceof Date)                                                                        // 388\n    return a.valueOf() === b.valueOf();                                                                              // 389\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {                                                                      // 390\n    if (a.length !== b.length)                                                                                       // 391\n      return false;                                                                                                  // 392\n    for (i = 0; i < a.length; i++) {                                                                                 // 393\n      if (a[i] !== b[i])                                                                                             // 394\n        return false;                                                                                                // 395\n    }                                                                                                                // 396\n    return true;                                                                                                     // 397\n  }                                                                                                                  // 398\n  if (typeof (a.equals) === 'function')                                                                              // 399\n    return a.equals(b, options);                                                                                     // 400\n  if (typeof (b.equals) === 'function')                                                                              // 401\n    return b.equals(a, options);                                                                                     // 402\n  if (a instanceof Array) {                                                                                          // 403\n    if (!(b instanceof Array))                                                                                       // 404\n      return false;                                                                                                  // 405\n    if (a.length !== b.length)                                                                                       // 406\n      return false;                                                                                                  // 407\n    for (i = 0; i < a.length; i++) {                                                                                 // 408\n      if (!EJSON.equals(a[i], b[i], options))                                                                        // 409\n        return false;                                                                                                // 410\n    }                                                                                                                // 411\n    return true;                                                                                                     // 412\n  }                                                                                                                  // 413\n  // fallback for custom types that don't implement their own equals                                                 // 414\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {                                                         // 415\n    case 1: return false;                                                                                            // 416\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));                                         // 417\n  }                                                                                                                  // 418\n  // fall back to structural equality of objects                                                                     // 419\n  var ret;                                                                                                           // 420\n  if (keyOrderSensitive) {                                                                                           // 421\n    var bKeys = [];                                                                                                  // 422\n    _.each(b, function (val, x) {                                                                                    // 423\n        bKeys.push(x);                                                                                               // 424\n    });                                                                                                              // 425\n    i = 0;                                                                                                           // 426\n    ret = _.all(a, function (val, x) {                                                                               // 427\n      if (i >= bKeys.length) {                                                                                       // 428\n        return false;                                                                                                // 429\n      }                                                                                                              // 430\n      if (x !== bKeys[i]) {                                                                                          // 431\n        return false;                                                                                                // 432\n      }                                                                                                              // 433\n      if (!EJSON.equals(val, b[bKeys[i]], options)) {                                                                // 434\n        return false;                                                                                                // 435\n      }                                                                                                              // 436\n      i++;                                                                                                           // 437\n      return true;                                                                                                   // 438\n    });                                                                                                              // 439\n    return ret && i === bKeys.length;                                                                                // 440\n  } else {                                                                                                           // 441\n    i = 0;                                                                                                           // 442\n    ret = _.all(a, function (val, key) {                                                                             // 443\n      if (!_.has(b, key)) {                                                                                          // 444\n        return false;                                                                                                // 445\n      }                                                                                                              // 446\n      if (!EJSON.equals(val, b[key], options)) {                                                                     // 447\n        return false;                                                                                                // 448\n      }                                                                                                              // 449\n      i++;                                                                                                           // 450\n      return true;                                                                                                   // 451\n    });                                                                                                              // 452\n    return ret && _.size(b) === i;                                                                                   // 453\n  }                                                                                                                  // 454\n};                                                                                                                   // 455\n                                                                                                                     // 456\n/**                                                                                                                  // 457\n * @summary Return a deep copy of `val`.                                                                             // 458\n * @locus Anywhere                                                                                                   // 459\n * @param {EJSON} val A value to copy.                                                                               // 460\n */                                                                                                                  // 461\nEJSON.clone = function (v) {                                                                                         // 462\n  var ret;                                                                                                           // 463\n  if (typeof v !== \"object\")                                                                                         // 464\n    return v;                                                                                                        // 465\n  if (v === null)                                                                                                    // 466\n    return null; // null has typeof \"object\"                                                                         // 467\n  if (v instanceof Date)                                                                                             // 468\n    return new Date(v.getTime());                                                                                    // 469\n  // RegExps are not really EJSON elements (eg we don't define a serialization                                       // 470\n  // for them), but they're immutable anyway, so we can support them in clone.                                       // 471\n  if (v instanceof RegExp)                                                                                           // 472\n    return v;                                                                                                        // 473\n  if (EJSON.isBinary(v)) {                                                                                           // 474\n    ret = EJSON.newBinary(v.length);                                                                                 // 475\n    for (var i = 0; i < v.length; i++) {                                                                             // 476\n      ret[i] = v[i];                                                                                                 // 477\n    }                                                                                                                // 478\n    return ret;                                                                                                      // 479\n  }                                                                                                                  // 480\n  // XXX: Use something better than underscore's isArray                                                             // 481\n  if (_.isArray(v) || _.isArguments(v)) {                                                                            // 482\n    // For some reason, _.map doesn't work in this context on Opera (weird test                                      // 483\n    // failures).                                                                                                    // 484\n    ret = [];                                                                                                        // 485\n    for (i = 0; i < v.length; i++)                                                                                   // 486\n      ret[i] = EJSON.clone(v[i]);                                                                                    // 487\n    return ret;                                                                                                      // 488\n  }                                                                                                                  // 489\n  // handle general user-defined typed Objects if they have a clone method                                           // 490\n  if (typeof v.clone === 'function') {                                                                               // 491\n    return v.clone();                                                                                                // 492\n  }                                                                                                                  // 493\n  // handle other custom types                                                                                       // 494\n  if (EJSON._isCustomType(v)) {                                                                                      // 495\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);                                             // 496\n  }                                                                                                                  // 497\n  // handle other objects                                                                                            // 498\n  ret = {};                                                                                                          // 499\n  _.each(v, function (value, key) {                                                                                  // 500\n    ret[key] = EJSON.clone(value);                                                                                   // 501\n  });                                                                                                                // 502\n  return ret;                                                                                                        // 503\n};                                                                                                                   // 504\n                                                                                                                     // 505\n/**                                                                                                                  // 506\n * @summary Allocate a new buffer of binary data that EJSON can serialize.                                           // 507\n * @locus Anywhere                                                                                                   // 508\n * @param {Number} size The number of bytes of binary data to allocate.                                              // 509\n */                                                                                                                  // 510\n// EJSON.newBinary is the public documented API for this functionality,                                              // 511\n// but the implementation is in the 'base64' package to avoid                                                        // 512\n// introducing a circular dependency. (If the implementation were here,                                              // 513\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would                                                // 514\n// also have to use 'base64'.)                                                                                       // 515\nEJSON.newBinary = Base64.newBinary;                                                                                  // 516\n                                                                                                                     // 517\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ejson/stringify.js                                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Based on json2.js from https://github.com/douglascrockford/JSON-js                                                // 1\n//                                                                                                                   // 2\n//    json2.js                                                                                                       // 3\n//    2012-10-08                                                                                                     // 4\n//                                                                                                                   // 5\n//    Public Domain.                                                                                                 // 6\n//                                                                                                                   // 7\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                        // 8\n                                                                                                                     // 9\nfunction quote(string) {                                                                                             // 10\n  return JSON.stringify(string);                                                                                     // 11\n}                                                                                                                    // 12\n                                                                                                                     // 13\nvar str = function (key, holder, singleIndent, outerIndent, canonical) {                                             // 14\n                                                                                                                     // 15\n  // Produce a string from holder[key].                                                                              // 16\n                                                                                                                     // 17\n  var i;          // The loop counter.                                                                               // 18\n  var k;          // The member key.                                                                                 // 19\n  var v;          // The member value.                                                                               // 20\n  var length;                                                                                                        // 21\n  var innerIndent = outerIndent;                                                                                     // 22\n  var partial;                                                                                                       // 23\n  var value = holder[key];                                                                                           // 24\n                                                                                                                     // 25\n  // What happens next depends on the value's type.                                                                  // 26\n                                                                                                                     // 27\n  switch (typeof value) {                                                                                            // 28\n  case 'string':                                                                                                     // 29\n    return quote(value);                                                                                             // 30\n  case 'number':                                                                                                     // 31\n    // JSON numbers must be finite. Encode non-finite numbers as null.                                               // 32\n    return isFinite(value) ? String(value) : 'null';                                                                 // 33\n  case 'boolean':                                                                                                    // 34\n    return String(value);                                                                                            // 35\n  // If the type is 'object', we might be dealing with an object or an array or                                      // 36\n  // null.                                                                                                           // 37\n  case 'object':                                                                                                     // 38\n    // Due to a specification blunder in ECMAScript, typeof null is 'object',                                        // 39\n    // so watch out for that case.                                                                                   // 40\n    if (!value) {                                                                                                    // 41\n      return 'null';                                                                                                 // 42\n    }                                                                                                                // 43\n    // Make an array to hold the partial results of stringifying this object value.                                  // 44\n    innerIndent = outerIndent + singleIndent;                                                                        // 45\n    partial = [];                                                                                                    // 46\n                                                                                                                     // 47\n    // Is the value an array?                                                                                        // 48\n    if (_.isArray(value) || _.isArguments(value)) {                                                                  // 49\n                                                                                                                     // 50\n      // The value is an array. Stringify every element. Use null as a placeholder                                   // 51\n      // for non-JSON values.                                                                                        // 52\n                                                                                                                     // 53\n      length = value.length;                                                                                         // 54\n      for (i = 0; i < length; i += 1) {                                                                              // 55\n        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';                                  // 56\n      }                                                                                                              // 57\n                                                                                                                     // 58\n      // Join all of the elements together, separated with commas, and wrap them in                                  // 59\n      // brackets.                                                                                                   // 60\n                                                                                                                     // 61\n      if (partial.length === 0) {                                                                                    // 62\n        v = '[]';                                                                                                    // 63\n      } else if (innerIndent) {                                                                                      // 64\n        v = '[\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + ']';                      // 65\n      } else {                                                                                                       // 66\n        v = '[' + partial.join(',') + ']';                                                                           // 67\n      }                                                                                                              // 68\n      return v;                                                                                                      // 69\n    }                                                                                                                // 70\n                                                                                                                     // 71\n                                                                                                                     // 72\n    // Iterate through all of the keys in the object.                                                                // 73\n    var keys = _.keys(value);                                                                                        // 74\n    if (canonical)                                                                                                   // 75\n      keys = keys.sort();                                                                                            // 76\n    _.each(keys, function (k) {                                                                                      // 77\n      v = str(k, value, singleIndent, innerIndent, canonical);                                                       // 78\n      if (v) {                                                                                                       // 79\n        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);                                                     // 80\n      }                                                                                                              // 81\n    });                                                                                                              // 82\n                                                                                                                     // 83\n                                                                                                                     // 84\n    // Join all of the member texts together, separated with commas,                                                 // 85\n    // and wrap them in braces.                                                                                      // 86\n                                                                                                                     // 87\n    if (partial.length === 0) {                                                                                      // 88\n      v = '{}';                                                                                                      // 89\n    } else if (innerIndent) {                                                                                        // 90\n      v = '{\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + '}';                        // 91\n    } else {                                                                                                         // 92\n      v = '{' + partial.join(',') + '}';                                                                             // 93\n    }                                                                                                                // 94\n    return v;                                                                                                        // 95\n  }                                                                                                                  // 96\n}                                                                                                                    // 97\n                                                                                                                     // 98\n// If the JSON object does not yet have a stringify method, give it one.                                             // 99\n                                                                                                                     // 100\nEJSON._canonicalStringify = function (value, options) {                                                              // 101\n  // Make a fake root object containing our value under the key of ''.                                               // 102\n  // Return the result of stringifying the value.                                                                    // 103\n  options = _.extend({                                                                                               // 104\n    indent: \"\",                                                                                                      // 105\n    canonical: false                                                                                                 // 106\n  }, options);                                                                                                       // 107\n  if (options.indent === true) {                                                                                     // 108\n    options.indent = \"  \";                                                                                           // 109\n  } else if (typeof options.indent === 'number') {                                                                   // 110\n    var newIndent = \"\";                                                                                              // 111\n    for (var i = 0; i < options.indent; i++) {                                                                       // 112\n      newIndent += ' ';                                                                                              // 113\n    }                                                                                                                // 114\n    options.indent = newIndent;                                                                                      // 115\n  }                                                                                                                  // 116\n  return str('', {'': value}, options.indent, \"\", options.canonical);                                                // 117\n};                                                                                                                   // 118\n                                                                                                                     // 119\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.ejson = {\n  EJSON: EJSON,\n  EJSONTest: EJSONTest\n};\n\n})();\n","servePath":"/packages/ejson.js","sourceMap":{"version":3,"sources":["/packages/ejson/ejson.js","/packages/ejson/stringify.js"],"names":[],"mappingspgfile":"/packages/ejson.js","sourcesContent":["/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nEJSON = {};\nEJSONTest = {};\n\n\n\n// Custom type interface definition\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the tag used to register this type with [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false` otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\n\nvar customTypes = {};\n// Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's `toJSONValue` method.\n */\nEJSON.addType = function (name, factory) {\n  if (_.has(customTypes, name))\n    throw new Error(\"Type \" + name + \" already present\");\n  customTypes[name] = factory;\n};\n\nvar isInfOrNan = function (obj) {\n  return _.isNaN(obj) || obj === Infinity || obj === -Infinity;\n};\n\nvar builtinConverters = [\n  { // Date\n    matchJSONValue: function (obj) {\n      return _.has(obj, '$date') && _.size(obj) === 1;\n    },\n    matchObject: function (obj) {\n      return obj instanceof Date;\n    },\n    toJSONValue: function (obj) {\n      return {$date: obj.getTime()};\n    },\n    fromJSONValue: function (obj) {\n      return new Date(obj.$date);\n    }\n  },\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n    // which we match.)\n    matchJSONValue: function (obj) {\n      return _.has(obj, '$InfNaN') && _.size(obj) === 1;\n    },\n    matchObject: isInfOrNan,\n    toJSONValue: function (obj) {\n      var sign;\n      if (_.isNaN(obj))\n        sign = 0;\n      else if (obj === Infinity)\n        sign = 1;\n      else\n        sign = -1;\n      return {$InfNaN: sign};\n    },\n    fromJSONValue: function (obj) {\n      return obj.$InfNaN/0;\n    }\n  },\n  { // Binary\n    matchJSONValue: function (obj) {\n      return _.has(obj, '$binary') && _.size(obj) === 1;\n    },\n    matchObject: function (obj) {\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array\n        || (obj && _.has(obj, '$Uint8ArrayPolyfill'));\n    },\n    toJSONValue: function (obj) {\n      return {$binary: Base64.encode(obj)};\n    },\n    fromJSONValue: function (obj) {\n      return Base64.decode(obj.$binary);\n    }\n  },\n  { // Escaping one level\n    matchJSONValue: function (obj) {\n      return _.has(obj, '$escape') && _.size(obj) === 1;\n    },\n    matchObject: function (obj) {\n      if (_.isEmpty(obj) || _.size(obj) > 2) {\n        return false;\n      }\n      return _.any(builtinConverters, function (converter) {\n        return converter.matchJSONValue(obj);\n      });\n    },\n    toJSONValue: function (obj) {\n      var newObj = {};\n      _.each(obj, function (value, key) {\n        newObj[key] = EJSON.toJSONValue(value);\n      });\n      return {$escape: newObj};\n    },\n    fromJSONValue: function (obj) {\n      var newObj = {};\n      _.each(obj.$escape, function (value, key) {\n        newObj[key] = EJSON.fromJSONValue(value);\n      });\n      return newObj;\n    }\n  },\n  { // Custom\n    matchJSONValue: function (obj) {\n      return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;\n    },\n    matchObject: function (obj) {\n      return EJSON._isCustomType(obj);\n    },\n    toJSONValue: function (obj) {\n      var jsonValue = Meteor._noYieldsAllowed(function () {\n        return obj.toJSONValue();\n      });\n      return {$type: obj.typeName(), $value: jsonValue};\n    },\n    fromJSONValue: function (obj) {\n      var typeName = obj.$type;\n      if (!_.has(customTypes, typeName))\n        throw new Error(\"Custom EJSON type \" + typeName + \" is not defined\");\n      var converter = customTypes[typeName];\n      return Meteor._noYieldsAllowed(function () {\n        return converter(obj.$value);\n      });\n    }\n  }\n];\n\nEJSON._isCustomType = function (obj) {\n  return obj &&\n    typeof obj.toJSONValue === 'function' &&\n    typeof obj.typeName === 'function' &&\n    _.has(customTypes, obj.typeName());\n};\n\nEJSON._getTypes = function () {\n  return customTypes;\n};\n\nEJSON._getConverters = function () {\n  return builtinConverters;\n};\n\n// for both arrays and objects, in-place modification.\nvar adjustTypesToJSONValue =\nEJSON._adjustTypesToJSONValue = function (obj) {\n  // Is it an atom that we need to adjust?\n  if (obj === null)\n    return null;\n  var maybeChanged = toJSONValueHelper(obj);\n  if (maybeChanged !== undefined)\n    return maybeChanged;\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object')\n    return obj;\n\n  // Iterate over array or object structure.\n  _.each(obj, function (value, key) {\n    if (typeof value !== 'object' && value !== undefined &&\n        !isInfOrNan(value))\n      return; // continue\n\n    var changed = toJSONValueHelper(value);\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    }\n    // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\n\n// Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\nvar toJSONValueHelper = function (item) {\n  for (var i = 0; i < builtinConverters.length; i++) {\n    var converter = builtinConverters[i];\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n  return undefined;\n};\n\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\nEJSON.toJSONValue = function (item) {\n  var changed = toJSONValueHelper(item);\n  if (changed !== undefined)\n    return changed;\n  if (typeof item === 'object') {\n    item = EJSON.clone(item);\n    adjustTypesToJSONValue(item);\n  }\n  return item;\n};\n\n// for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\n//\nvar adjustTypesFromJSONValue =\nEJSON._adjustTypesFromJSONValue = function (obj) {\n  if (obj === null)\n    return null;\n  var maybeChanged = fromJSONValueHelper(obj);\n  if (maybeChanged !== obj)\n    return maybeChanged;\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object')\n    return obj;\n\n  _.each(obj, function (value, key) {\n    if (typeof value === 'object') {\n      var changed = fromJSONValueHelper(value);\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      }\n      // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\n\n// Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\nvar fromJSONValueHelper = function (value) {\n  if (typeof value === 'object' && value !== null) {\n    if (_.size(value) <= 2\n        && _.all(value, function (v, k) {\n          return typeof k === 'string' && k.substr(0, 1) === '$';\n        })) {\n      for (var i = 0; i < builtinConverters.length; i++) {\n        var converter = builtinConverters[i];\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n  return value;\n};\n\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\nEJSON.fromJSONValue = function (item) {\n  var changed = fromJSONValueHelper(item);\n  if (changed === item && typeof item === 'object') {\n    item = EJSON.clone(item);\n    adjustTypesFromJSONValue(item);\n    return item;\n  } else {\n    return changed;\n  }\n};\n\n/**\n * @summary Serialize a value to a string.\n\nFor EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and arrays for easy readability.  When `true`, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an object in sorted order.\n */\nEJSON.stringify = function (item, options) {\n  var json = EJSON.toJSONValue(item);\n  if (options && (options.canonical || options.indent)) {\n    return EJSON._canonicalStringify(json, options);\n  } else {\n    return JSON.stringify(json);\n  }\n};\n\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\nEJSON.parse = function (item) {\n  if (typeof item !== 'string')\n    throw new Error(\"EJSON.parse argument should be a string\");\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\nEJSON.isBinary = function (obj) {\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||\n    (obj && obj.$Uint8ArrayPolyfill));\n};\n\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false otherwise.  Uses the `equals` method on `a` if present, otherwise performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order, if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}` is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The default is `false`.\n */\nEJSON.equals = function (a, b, options) {\n  var i;\n  var keyOrderSensitive = !!(options && options.keyOrderSensitive);\n  if (a === b)\n    return true;\n  if (_.isNaN(a) && _.isNaN(b))\n    return true; // This differs from the IEEE spec for NaN equality, b/c we don't want\n                 // anything ever with a NaN to be poisoned from becoming equal to anything.\n  if (!a || !b) // if either one is falsy, they'd have to be === to be equal\n    return false;\n  if (!(typeof a === 'object' && typeof b === 'object'))\n    return false;\n  if (a instanceof Date && b instanceof Date)\n    return a.valueOf() === b.valueOf();\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length)\n      return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i])\n        return false;\n    }\n    return true;\n  }\n  if (typeof (a.equals) === 'function')\n    return a.equals(b, options);\n  if (typeof (b.equals) === 'function')\n    return b.equals(a, options);\n  if (a instanceof Array) {\n    if (!(b instanceof Array))\n      return false;\n    if (a.length !== b.length)\n      return false;\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options))\n        return false;\n    }\n    return true;\n  }\n  // fallback for custom types that don't implement their own equals\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1: return false;\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n  }\n  // fall back to structural equality of objects\n  var ret;\n  if (keyOrderSensitive) {\n    var bKeys = [];\n    _.each(b, function (val, x) {\n        bKeys.push(x);\n    });\n    i = 0;\n    ret = _.all(a, function (val, x) {\n      if (i >= bKeys.length) {\n        return false;\n      }\n      if (x !== bKeys[i]) {\n        return false;\n      }\n      if (!EJSON.equals(val, b[bKeys[i]], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n    return ret && i === bKeys.length;\n  } else {\n    i = 0;\n    ret = _.all(a, function (val, key) {\n      if (!_.has(b, key)) {\n        return false;\n      }\n      if (!EJSON.equals(val, b[key], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n    return ret && _.size(b) === i;\n  }\n};\n\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\nEJSON.clone = function (v) {\n  var ret;\n  if (typeof v !== \"object\")\n    return v;\n  if (v === null)\n    return null; // null has typeof \"object\"\n  if (v instanceof Date)\n    return new Date(v.getTime());\n  // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n  if (v instanceof RegExp)\n    return v;\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n    for (var i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n    return ret;\n  }\n  // XXX: Use something better than underscore's isArray\n  if (_.isArray(v) || _.isArguments(v)) {\n    // For some reason, _.map doesn't work in this context on Opera (weird test\n    // failures).\n    ret = [];\n    for (i = 0; i < v.length; i++)\n      ret[i] = EJSON.clone(v[i]);\n    return ret;\n  }\n  // handle general user-defined typed Objects if they have a clone method\n  if (typeof v.clone === 'function') {\n    return v.clone();\n  }\n  // handle other custom types\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  }\n  // handle other objects\n  ret = {};\n  _.each(v, function (value, key) {\n    ret[key] = EJSON.clone(value);\n  });\n  return ret;\n};\n\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\nEJSON.newBinary = Base64.newBinary;\n","// Based on json2.js from https://github.com/douglascrockford/JSON-js\n//\n//    json2.js\n//    2012-10-08\n//\n//    Public Domain.\n//\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\nfunction quote(string) {\n  return JSON.stringify(string);\n}\n\nvar str = function (key, holder, singleIndent, outerIndent, canonical) {\n\n  // Produce a string from holder[key].\n\n  var i;          // The loop counter.\n  var k;          // The member key.\n  var v;          // The member value.\n  var length;\n  var innerIndent = outerIndent;\n  var partial;\n  var value = holder[key];\n\n  // What happens next depends on the value's type.\n\n  switch (typeof value) {\n  case 'string':\n    return quote(value);\n  case 'number':\n    // JSON numbers must be finite. Encode non-finite numbers as null.\n    return isFinite(value) ? String(value) : 'null';\n  case 'boolean':\n    return String(value);\n  // If the type is 'object', we might be dealing with an object or an array or\n  // null.\n  case 'object':\n    // Due to a specification blunder in ECMAScript, typeof null is 'object',\n    // so watch out for that case.\n    if (!value) {\n      return 'null';\n    }\n    // Make an array to hold the partial results of stringifying this object value.\n    innerIndent = outerIndent + singleIndent;\n    partial = [];\n\n    // Is the value an array?\n    if (_.isArray(value) || _.isArguments(value)) {\n\n      // The value is an array. Stringify every element. Use null as a placeholder\n      // for non-JSON values.\n\n      length = value.length;\n      for (i = 0; i < length; i += 1) {\n        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';\n      }\n\n      // Join all of the elements together, separated with commas, and wrap them in\n      // brackets.\n\n      if (partial.length === 0) {\n        v = '[]';\n      } else if (innerIndent) {\n        v = '[\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + ']';\n      } else {\n        v = '[' + partial.join(',') + ']';\n      }\n      return v;\n    }\n\n\n    // Iterate through all of the keys in the object.\n    var keys = _.keys(value);\n    if (canonical)\n      keys = keys.sort();\n    _.each(keys, function (k) {\n      v = str(k, value, singleIndent, innerIndent, canonical);\n      if (v) {\n        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);\n      }\n    });\n\n\n    // Join all of the member texts together, separated with commas,\n    // and wrap them in braces.\n\n    if (partial.length === 0) {\n      v = '{}';\n    } else if (innerIndent) {\n      v = '{\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + '}';\n    } else {\n      v = '{' + partial.join(',') + '}';\n    }\n    return v;\n  }\n}\n\n// If the JSON object does not yet have a stringify method, give it one.\n\nEJSON._canonicalStringify = function (value, options) {\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  options = _.extend({\n    indent: \"\",\n    canonical: false\n  }, options);\n  if (options.indent === true) {\n    options.indent = \"  \";\n  } else if (typeof options.indent === 'number') {\n    var newIndent = \"\";\n    for (var i = 0; i < options.indent; i++) {\n      newIndent += ' ';\n    }\n    options.indent = newIndent;\n  }\n  return str('', {'': value}, options.indent, \"\", options.canonical);\n};\n"]}}]