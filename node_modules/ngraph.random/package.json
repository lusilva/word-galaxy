{
  "_args": [
    [
      "ngraph.random@0.0.1",
      "/Users/lusilva/Sandbox/pm/node_modules/ngraph.generators"
    ]
  ],
  "_from": "ngraph.random@0.0.1",
  "_id": "ngraph.random@0.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/ngraph.random",
  "_npmUser": {
    "email": "anvaka@gmail.com",
    "name": "anvaka"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "name": "ngraph.random",
    "raw": "ngraph.random@0.0.1",
    "rawSpec": "0.0.1",
    "scope": null,
    "spec": "0.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/ngraph.generators"
  ],
  "_resolved": "https://registry.npmjs.org/ngraph.random/-/ngraph.random-0.0.1.tgz",
  "_shasum": "c008e2ebbfdffaf17ed10e4bbc913e567166bcf8",
  "_shrinkwrap": null,
  "_spec": "ngraph.random@0.0.1",
  "_where": "/Users/lusilva/Sandbox/pm/node_modules/ngraph.generators",
  "author": {
    "name": "Andrei Kashcha"
  },
  "bugs": {
    "url": "https://github.com/anvaka/ngraph.random/issues"
  },
  "dependencies": {},
  "description": "Operation with random numbers for ngraph.*",
  "devDependencies": {
    "tap": "~0.4.4"
  },
  "directories": {},
  "dist": {
    "shasum": "c008e2ebbfdffaf17ed10e4bbc913e567166bcf8",
    "tarball": "https://registry.npmjs.org/ngraph.random/-/ngraph.random-0.0.1.tgz"
  },
  "homepage": "https://github.com/anvaka/ngraph.random#readme",
  "keywords": [
    "ngraph",
    "ngraphjs"
  ],
  "license": "BSD-3-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "email": "anvaka@gmail.com",
      "name": "anvaka"
    }
  ],
  "name": "ngraph.random",
  "optionalDependencies": {},
  "readme": "ngraph.random\n=============\n\nOperation with seeded random numbers for ngraph.*.\n\n[![build status](https://secure.travis-ci.org/anvaka/ngraph.random.png)](http://travis-ci.org/anvaka/ngraph.random)\nUsage\n=====\nAPI provides random number generation, and array shuffling. \n\nLet's start with random number generation:\n``` js\nvar randomAPI = require('ngraph.random');\nvar randomGenerator = randomAPI.random(42); // create generator, seeded with 42\n\n// Get next non-negative random number, less than 100.\nconsole.log(randomGenerator.next(100)); // prints 20, we are seeded\n// Note: next() always expect maxValue. If you don't pass it it will return NaN.\n// This is done for performance reasons, we don't want to check input arguments\n// on each call.\n\nconsole.log(randomGenerator.nextDouble()); // prints double number from [0..1)\n```\n\nSecond part of the API is array shuffling:\n``` js\nvar randomAPI = require('ngraph.random');\n\n// create \"suffling\" iterator:\nvar originalArray = [0, 1, 2, 3, 4, 5];\nvar randomIterator = randomAPI.randomIterator(originalArray);\n\n// iterate over array in random order:\nrandomIterator.forEach(function(x) {\n  console.log(x); // prints originalArray's items in random order\n});\n// Note: using random iterator does modify original array.\n// This is done to save memory.\n\n// If you want to re-shuffle array in-place, you can use:\nrandomIterator.shuffle();\n\n// Finally if you want to have seeded shuffling you can pass optional seeded \n// random number generator:\nvar seededGenerator = randomAPI.random(42);\nrandomAPI.randomIterator(originalArray, seededGenerator); \n```\n\nInstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install ngraph.graph\n```\n\nLicense\n=======\nBSD 3-clause\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anvaka/ngraph.random.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "0.0.1"
}
